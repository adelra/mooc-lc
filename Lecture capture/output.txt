
  ,         , 


   ,        , 
[MUSIC PLAYING]


  ,        , 
PROFESSOR  I'd like to
welcome you to this


  ,        , 
course on computer science.


  ,        , 


  ,        , 
Actually, that's a terrible
way to start.


  ,        , 
Computer science is a terrible
name for this business.


  ,        ,
First of all, it's
not a science.


  ,        ,
It might be engineering or it
might be art, but we'll

 
   ,       , 
actually see that computer
so called science actually has


  ,        , 
a lot in common with magic,
and we'll see


  ,        , 
that in this course.


  ,        ,
So it's not a science.


  ,       , 
It's also not really very
much about computers.


  ,        , 
And it's not about computers in
the same sense that physics


  ,          , 
is not really about particle
accelerators, and biology is


    ,          , 
not really about microscopes
and petri dishes.


    ,          ,
And it's not about computers
in the same sense that


    ,        , 
geometry is not really about
using surveying instruments.

 
   ,          , 
In fact, there's a lot of
commonality between computer


    ,         , 
science and geometry.


   ,         , 
Geometry, first of all,
is another subject


   ,         , 
with a lousy name.


   ,         , 
The name comes from Gaia,
meaning the Earth, and metron,


   ,         , 
meaning to measure.


   ,         , 
Geometry originally
meant measuring


   ,         , 
the Earth or surveying.


   ,         , 
And the reason for that was
that, thousands of years ago,


   ,          , 
the Egyptian priesthood
developed the rudiments of

 
    ,         , 
geometry in order to figure
out how to restore the


   ,         , 
boundaries of fields that were
destroyed in the annual


   ,         , 
flooding of the Nile.


   ,         , 
And to the Egyptians who did
that, geometry really was the


   ,         ,
use of surveying instruments.


   ,        , 
Now, the reason that we think
computer science is about


   ,          , 
computers is pretty much the
same reason that the Egyptians


    ,          , 
thought geometry was about
surveying instruments.


    ,          , 
And that is, when some field
is just getting started and


    ,         , 
you don't really understand it
very well, it's very easy to

 
   ,         , 
confuse the essence of what
you're doing with the tools


   ,         , 
that you use.


   ,          , 
And indeed, on some absolute
scale of things, we probably


    ,         ,
know less about the essence of
computer science than the


   ,        ,
ancient Egyptians really
knew about geometry.


   ,        , 


   ,         , 
Well, what do I mean by the
essence of computer science?


   ,         ,
What do I mean by the
essence of geometry?


   ,        , 
See, it's certainly true that
these Egyptians went off and


   ,          , 
used surveying instruments, but
when we look back on them

 
    ,         , 
after a couple of thousand
years, we say, gee, what they


   ,         , 
were doing, the important stuff
they were doing, was to


   ,         , 
begin to formalize notions about
space and time, to start


   ,         , 
a way of talking about
mathematical truths formally.


   ,         , 
That led to the axiomatic
method.


   ,          , 
That led to sort of all of
modern mathematics, figuring


    ,          , 
out a way to talk precisely
about so called declarative


    ,          , 
knowledge, what is true.


    ,         , 


   ,         , 
Well, similarly, I think in the
future people will look

 
   ,         , 
back and say, yes, those
primitives in the  th century


   ,          , 
were fiddling around with
these gadgets called


    ,         , 
computers, but really what they
were doing is starting to


   ,         , 
learn how to formalize
intuitions about process, how


   ,         ,
to do things, starting to
develop a way to talk


   ,        , 
precisely about how to
knowledge, as opposed to


   ,         , 
geometry that talks about
what is true.


   ,         , 
Let me give you an
example of that.


   ,          , 


    ,          , 
Let's take a look.

 
    ,          , 
Here is a piece of mathematics
that says what


    ,          , 
a square root is.


    ,         , 
The square root of X is the
number Y, such that Y squared


   ,          , 
is equal to X and Y
is greater than  .


    ,         , 
Now, that's a fine piece of
mathematics, but just telling


   ,         ,
you what a square root is
doesn't really say anything


   ,        , 
about how you might go
out and find one.


   ,         , 
So let's contrast that with a
piece of imperative knowledge,


   ,         , 
how you might go out and
find a square root.


   ,         , 
This, in fact, also comes
from Egypt, not

 
   ,         , 
ancient, ancient Egypt.


   ,          ,
This is an algorithm due to
Heron of Alexandria, called


    ,        , 
how to find a square root
by successive averaging.


   ,          , 
And what it says is that, in
order to find a square root,


    ,          , 
you make a guess, you
improve that guess  


    ,          ,


    ,        , 
and the way you improve the
guess is to average the guess


   ,         , 
and X over the guess, and we'll
talk a little bit later


   ,         ,
about why that's a reasonable
thing  


   ,        , 
and you keep improving the guess
until it's good enough.

 
   ,          ,
That's a method.


    ,        ,
That's how to do something
as opposed to declarative


   ,        , 
knowledge that says what
you're looking for.


   ,         , 
That's a process.


   ,         , 


   ,         , 
Well, what's a process
in general?


   ,          , 
It's kind of hard to say.


    ,         , 
You can think of it as like a
magical spirit that sort of


   ,         , 
lives in the computer
and does something.


   ,         , 
And the thing that directs a
process is a pattern of rules


   ,         ,
called a procedure.

 
   ,         , 

 
    ,          , 
So procedures are the spells,
if you like, that control

 
    ,          ,
these magical spirits that
are the processes.

 
    ,        , 
I guess you know everyone needs
a magical language, and

 
   ,         , 
sorcerers, real sorcerers, use
ancient Arcadian or Sumerian

 
   ,         , 
or Babylonian or whatever.

 
   ,         , 
We're going to conjure our
spirits in a magical language

 
   ,         , 
called Lisp, which is a language
designed for talking

 
   ,         , 
about, for casting the spells
that are procedures to direct

 
   ,         ,
the processes.


   ,        , 
Now, it's very easy
to learn Lisp.


   ,         , 
In fact, in a few minutes,
I'm going to teach you,


   ,         , 
essentially, all of Lisp.


   ,          , 
I'm going to teach you,
essentially, all of the rules.


    ,         , 
And you shouldn't find that
particularly surprising.


   ,         , 
That's sort of like saying it's
very easy to learn the


   ,         , 
rules of chess.


   ,         , 
And indeed, in a few minutes,
you can tell somebody the


   ,          , 
rules of chess.

 
    ,         , 
But of course, that's very
different from saying you


   ,         , 
understand the implications of
those rules and how to use


   ,         , 
those rules to become a
masterful chess player.


   ,         , 
Well, Lisp is the same way.


   ,          , 
We're going to state the rules
in a few minutes, and it'll be


    ,          , 
very easy to see.


    ,          , 
But what's really hard is going
to be the implications


    ,          , 
of those rules, how you exploit
those rules to be a


    ,         ,
master programmer.


   ,        , 
And the implications of those
rules are going to take us

 
   ,         , 
the, well, the whole rest of
the subject and, of course,


   ,         ,
way beyond.


   ,        , 


   ,         ,
OK, so in computer science,
we're in the business of


   ,         , 
formalizing this sort of how to
imperative knowledge,


    ,         , 
how to do stuff.


   ,         , 
And the real issues of computer
science are, of


   ,         , 
course, not telling people
how to do square roots.


   ,          ,
Because if that was
all it was, there


    ,        , 
wouldn't be no big deal.

 
   ,         , 
The real problems come when we
try to build very, very large


   ,         , 
systems, computer programs that
are thousands of pages


   ,         , 
long, so long that nobody can
really hold them in their


   ,         , 
heads all at once.


   ,         , 
And the only reason that that's
possible is because


   ,         , 
there are techniques for
controlling the complexity of


   ,         , 
these large systems. And these
techniques that are


   ,         , 
controlling complexity
are what this


   ,         ,
course is really about.


   ,        ,
And in some sense, that's
really what

 
   ,        , 
computer science is about.


   ,         , 
Now, that may seem like a very
strange thing to say.


   ,         , 
Because after all, a lot of
people besides computer


   ,         , 
scientists deal with controlling
complexity.


   ,         , 
A large airliner is an extremely
complex system, and


   ,         , 
the aeronautical engineers who
design that are dealing with


   ,         ,
immense complexity.


   ,        , 
But there's a difference
between that kind of


   ,         , 
complexity and what we deal
with in computer science.


   ,         ,

 
   ,        , 
And that is that computer
science, in some


   ,         ,
sense, isn't real.


   ,         , 


    ,          ,
You see, when an engineer is
designing a physical system,


    ,         , 
that's made out of real parts.


    ,         , 
The engineers who worry about
that have to address problems


   ,         , 
of tolerance and approximation
and noise in the system.


   ,         , 
So for example, as an electrical
engineer, I can go


   ,         ,
off and easily build a one stage
amplifier or a


   ,        ,
two stage amplifier, and I can
imagine cascading a lot of

 
   ,        , 
them to build a million stage
amplifier.


   ,          ,
But it's ridiculous to build
such a thing, because long


    ,        , 
before the millionth stage,
the thermal noise in those


   ,         , 
components way at the beginning
is going to get


   ,         ,
amplified and make the whole
thing meaningless.


   ,        , 


   ,         ,
Computer science deals with
idealized components.


   ,        , 
We know as much as we want about
these little program and


   ,         , 
data pieces that we're fitting
things together.


   ,         ,
We don't have to worry
about tolerance.

 
   ,        , 
And that means that, in building
a large program,


   ,          , 
there's not all that much
difference between what I can


    ,          , 
build and what I can imagine,
because the parts are these


    ,          , 
abstract entities that I
know as much as I want.


    ,         , 
I know about them as precisely
as I'd like.


   ,         , 
So as opposed to other kinds
of engineering, where the


   ,         , 
constraints on what you can
build are the constraints of


   ,         , 
physical systems, the
constraints of physics and


   ,         , 
noise and approximation, the
constraints imposed in


   ,         , 
building large software systems
are the limitations of

 
   ,         , 
our own minds.


   ,         , 
So in that sense, computer
science is like an abstract


   ,         , 
form of engineering.


   ,         , 
It's the kind of engineering
where you ignore the


   ,         ,
constraints that are
imposed by reality.


   ,        ,


   ,        ,
Well, what are some of
these techniques?


   ,        , 
They're not special to
computer science.


   ,          , 


    ,         , 
First technique, which is used
in all of engineering, is a


   ,         ,
kind of abstraction called
black box abstraction.

 
   ,        , 

 
   ,        , 
Take something and build
a box about it.

 
  ,        , 
Let's see, for example, if we
looked at that square root

 
  ,        ,
method, I might want to take
that and build a box.

 
  ,       , 
That sort of says, to find the
square root of X. And that

 
  ,        , 
might be a whole complicated
set of rules.

 
  ,        , 
And that might end up being a
kind of thing where I can put

 
  ,         , 
in, say,  and say, what's
the square root of ?

 
   ,        , 
And out comes .

 
  ,        , 


  ,        , 
And the important thing is that
I'd like to design that


  ,         ,
so that if George comes along
and would like to compute,


   ,       , 
say, the square root of A plus
the square root of B, he can


  ,        , 
take this thing and use it as
a module without having to


  ,        , 
look inside and build something
that looks like


  ,        , 
this, like an A and a B and a
square root box and another


  ,        , 
square root box and then
something that adds that would


  ,        , 
put out the answer.


  ,        , 
And you can see, just from the
fact that I want to do that,

 
  ,        , 
is from George's point of view,
the internals of what's


  ,        , 
in here should not
be important.


  ,        , 
So for instance, it shouldn't
matter that, when I wrote


  ,         , 
this, I said I want to find the
square root of X. I could


   ,        , 
have said the square root of Y,
or the square root of A, or


  ,        , 
anything at all.


  ,         , 
That's the fundamental notion of
putting something in a box


   ,         , 
using black box abstraction
to suppress detail.


   ,         ,
And the reason for that is you
want to go off and build


   ,       , 
bigger boxes.

 
  ,        , 
Now, there's another reason
for doing black box


  ,        , 
abstraction other than you want
to suppress detail for


  ,        , 
building bigger boxes.


  ,        , 
Sometimes you want to say that
your way of doing something,


  ,         , 
your how to method, is an
instance of a more general


   ,        , 
thing, and you'd like your
language to be able to express


  ,        , 
that generality.


  ,        ,
Let me show you another example


  ,       , 
sticking with square roots.


  ,        , 
Let's go back and take another
look at that slide with the

 
  ,        , 
square root algorithm on it.


  ,        , 
Remember what that says.


  ,         ,
That says, in order to do
something, I make a guess, and


   ,       ,
I improve that guess,
and I sort of keep


  ,       , 
improving that guess.


  ,        , 
So there's the general strategy
of, I'm looking for


  ,         , 
something, and the way
I find it is that I


   ,         , 
keep improving it.


   ,         , 
Now, that's a particular case
of another kind of strategy


   ,        ,
for finding a fixed point
of something.

 
  ,       , 
So you have a fixed point
of a function.


  ,        ,
A fixed point of a function
is something, is a value.


  ,        , 
A fixed point of a function F is
a value Y, such that F of Y


   ,        ,
equals Y. And the way I might do
that is start with a guess.


  ,       , 
And then if I want something
that doesn't change when I


  ,        ,
keep applying F, is I'll keep
applying F over and over until


  ,        , 
that result doesn't
change very much.


   ,        , 
So there's a general strategy.


  ,        , 
And then, for example, to
compute the square root of X,


  ,        , 
I can try and find a fixed point
of the function which

 
  ,         ,
takes Y to the average of X/Y.
And the idea that is that if I


   ,        ,
really had Y equal to the square
root of X, then Y and


   ,       ,
X/Y would be the same value.


  ,       , 
They'd both be the square root
of X, because X over the


  ,        ,
square root of X is the
square root of X.


  ,       , 
And so the average if Y were
equal to the square of X, then


  ,        , 
the average wouldn't change.


  ,        , 
So the square root of X
is a fixed point of


  ,         , 
that particular function.


   ,        ,
Now, what I'd like to have,
I'd like to express the

 
  ,       , 
general strategy for finding
fixed points.


  ,        , 
So what I might imagine doing,
is to find, is to be able to


  ,        , 
use my language to define a box
that says "fixed point,"


  ,        ,
just like I could make a box
that says "square root." And


  ,       ,
I'd like to be able to express
this in my language.


  ,       , 


  ,        , 
So I'd like to express not only
the imperative how to


  ,         , 
knowledge of a particular thing
like square root, but


   ,         ,
I'd like to be able to express
the imperative knowledge of


   ,        , 
how to do a general thing like
how to find fixed point.

 
   ,        ,
And in fact, let's go back and
look at that slide again.


  ,       ,


  ,       , 
See, not only is this a piece
of imperative knowledge, how


  ,        , 
to find a fixed point, but
over here on the bottom,


  ,        , 
there's another piece of
imperative knowledge which


  ,        , 
says, one way to compute square
root is to apply this


  ,        , 
general fixed point method.


  ,        , 
So I'd like to also
be able to express


  ,        ,
that imperative knowledge.


  ,        , 
What would that look like?

 
   ,        ,
That would say, this fixed point
box is such that if I


  ,       , 
input to it the function that
takes Y to the average of Y


  ,         ,
and X/Y, then what should come
out of that fixed point box is


   ,        ,
a method for finding
square roots.


   ,        ,


   ,        ,
So in these boxes we're
building, we're not only


   ,       ,
building boxes that you input
numbers and output numbers,


  ,       , 
we're going to be building in
boxes that, in effect, compute


  ,        , 
methods like finding
square root.


  ,        , 
And my take is their inputs
functions, like Y goes to the


  ,        , 
average of Y and X/Y. The reason
we want to do that, the

 
  ,        ,
reason this is a procedure, will
end up being a procedure,

 
  ,       , 
as we'll see, whose value is
another procedure, the reason

 
  ,        , 
we want to do that is because
procedures are going to be our

 
  ,        , 
ways of talking about imperative
knowledge.

 
  ,         , 
And the way to make that very
powerful is to be able to talk

 
   ,        , 
about other kinds
of knowledge.

 
  ,        , 
So here is a procedure that, in
effect, talks about another

 
  ,        , 
procedure, a general strategy
that itself talks about

 
  ,        ,
general strategies.

 
  ,        , 


   ,         , 
Well, our first topic in this
course   there'll be three


   ,        ,
major topics   will be black box
abstraction.


  ,       , 
Let's look at that in a little
bit more detail.


  ,        , 
What we're going to do is we
will start out talking about


  ,        , 
how Lisp is built up out
of primitive objects.


  ,        , 
What does the language
supply with us?


  ,        , 
And we'll see that there are
primitive procedures and


  ,        , 
primitive data.


  ,        , 
Then we're going to see, how do
you take those primitives

 
  ,        , 
and combine them to make more
complicated things, means of


  ,        , 
combination?


  ,        ,
And what we'll see is that
there are ways of putting


  ,       , 
things together, putting
primitive procedures together


  ,         , 
to make more complicated
procedures.


   ,        , 
And we'll see how to put
primitive data together to


  ,        , 
make compound data.


  ,        ,
Then we'll say, well, having
made those compounds things,


  ,        , 
how do you abstract them?


   ,         , 
How do you put those black boxes
around them so you can

 
   ,         ,
use them as components in
more complex things?


   ,       , 
And we'll see that's done by
defining procedures and a


  ,        , 
technique for dealing with
compound data called data


  ,        , 
abstraction.


  ,        , 
And then, what's maybe the most
important thing, is going


  ,        , 
from just the rules to how
does an expert work?


  ,        ,
How do you express common
patterns of doing things, like


  ,       , 
saying, well, there's a general
method of fixed point


  ,        ,
and square root is a particular
case of that?


  ,       , 
And we're going to use  

 
  ,        , 
I've already hinted at it  
something called higher order


  ,         , 
procedures, namely procedures
whose inputs and outputs are


   ,        , 
themselves procedures.


  ,        ,
And then we'll also see
something very interesting.


  ,       , 
We'll see, as we go further and
further on and become more


  ,         , 
abstract, there'll be very  


   ,        ,
well, the line between what we
consider to be data and what


  ,       , 
we consider to be procedures
is going to blur at an


  ,        , 
incredible rate.


  ,          , 

 
    ,          ,
Well, that's our first
subject, black box


    ,         ,
abstraction.


    ,         , 
Let's look at the
second topic.


    ,          , 


    ,         , 
I can introduce it like this.


   ,         , 
See, suppose I want to
express the idea  


   ,         , 
remember, we're talking
about ideas  


   ,          , 
suppose I want to express the
idea that I can take something


    ,         ,
and multiply it by the sum
of two other things.


   ,         , 
So for example, I might say, if
I had  and  and multiply

 
    ,         , 
that by , I get .


   ,         , 
But I'm talking about the
general idea of what's called


   ,         , 
linear combination, that you
can add two things and


   ,         , 
multiply them by
something else.


   ,         ,
It's very easy when I think
about it for numbers, but


   ,        ,
suppose I also want to use that
same idea to think about,


   ,       , 
I could add two vectors, a and
a, and then scale them by


  ,         ,
some factor x and get
another vector.


   ,        , 
Or I might say, I want to think
about a and a as being


   ,        , 
polynomials, and I might want
to add those two polynomials

 
  ,        , 
and then multiply them by  to
get a more complicated one.


  ,         ,


   ,       , 
Or a and a might be electrical
signals, and I


  ,        , 
might want to think about
summing those two electrical


  ,        , 
signals and then putting the
whole thing through an


  ,        , 
amplifier, multiplying it by
some factor of  or something.


  ,        , 
The idea is I want to
think about the


  ,        , 
general notion of that.


  ,        , 
Now, if our language is going
to be good language for


  ,        , 
expressing those kind of general
ideas, if I really,

 
  ,        , 
really can do that, I'd like to
be able to say I'm going to


  ,         , 
multiply by x the sum of a and
a, and I'd like that to


   ,         , 
express the general idea of all
different kinds of things


   ,         , 
that a and a could be.


   ,        , 
Now, if you think about that,
there's a problem, because


  ,        , 
after all, the actual primitive
operations that go


  ,        , 
on in the machine are obviously
going to be


  ,        ,
different if I'm adding two
numbers than if I'm adding two


  ,       , 
polynomials, or if I'm adding
the representation of two


  ,        , 
electrical signals
or wave forms.

 
  ,         , 
Somewhere, there has to be the
knowledge of the kinds of


   ,        , 
various things that you
can add and the


  ,        , 
ways of adding them.


  ,        , 


  ,        , 
Now, to construct such a system,
the question is, where


  ,        ,
do I put that knowledge?


  ,       , 
How do I think about
the different kinds


  ,        , 
of choices I have?


  ,        , 
And if tomorrow George comes up
with a new kind of object


  ,        , 
that might be added and
multiplied, how do I add


  ,        , 
George's new object to the
system without screwing up

 
  ,        , 
everything that was
already there?

 
  ,        , 
Well, that's going to be the
second big topic, the way of

 
  ,         , 
controlling that kind
of complexity.

 
   ,         , 
And the way you do that is by
establishing conventional

 
   ,         , 
interfaces, agreed upon ways of
plugging things together.

 
   ,        , 
Just like in electrical
engineering, people have

 
  ,        , 
standard impedances for
connectors, and then you know

 
  ,        ,
if you build something with
one of those standard

 
  ,        , 
impedances, you can plug it
together with something else.

 
   ,        , 


  ,        ,
So that's going to be our
second large topic,


  ,       , 
conventional interfaces.


  ,        , 
What we're going to see is,
first, we're going to talk


  ,        ,
about the problem of generic
operations, which is the one I


  ,       ,
alluded to, things like "plus"
that have to work with all


  ,       , 
different kinds of data.


  ,        ,


  ,       , 
So we talk about generic
operations.


  ,        , 
Then we're going to talk about
really large scale structures.

 
  ,         , 
How do you put together very
large programs that model the


   ,         , 
kinds of complex systems
in the real world that


   ,         , 
you'd like to model?


   ,         , 
And what we're going to see
is that there are two very


   ,        , 
important metaphors for putting
together such systems.


  ,        , 
One is called object oriented
programming, where you sort of


  ,        , 
think of your system as a kind
of society full of little


  ,        , 
things that interact by sending


  ,        ,
information between them.


  ,       , 
And then the second one is
operations on aggregates,

 
  ,        , 
called streams, where you think
of a large system put


  ,        , 
together kind of like a signal
processing engineer puts


  ,        ,
together a large electrical
system.


  ,       , 


  ,         , 
That's going to be
our second topic.


   ,        , 


  ,        , 
Now, the third thing we're going
to come to, the third


  ,        , 
basic technique for controlling
complexity, is


  ,        , 
making new languages.


  ,        , 
Because sometimes, when you're
sort of overwhelmed by the

 
  ,        , 
complexity of a design, the
way that you control that


  ,         , 
complexity is to pick a
new design language.


   ,         , 
And the purpose of the new
design language will be to


   ,         , 
highlight different aspects
of the system.


   ,         , 
It will suppress some kinds of
details and emphasize other


   ,         , 
kinds of details.


   ,        , 


  ,        , 
This is going to be the most
magical part of the course.


  ,        , 
We're going to start out by
actually looking at the


  ,        , 
technology for building new
computer languages.

 
  ,        , 
The first thing we're going to
do is actually build in Lisp.


  ,        , 


  ,        , 
We're going to express in Lisp
the process of interpreting


  ,        ,
Lisp itself.


  ,       , 
And that's going to be a very
sort of self circular thing.


  ,        , 
There's a little mystical
symbol that


  ,         , 
has to do with that.


   ,        ,
The process of interpreting Lisp
is sort of a giant wheel


  ,       , 
of two processes, apply and
eval, which sort of constantly


  ,        , 
reduce expressions
to each other.

 
  ,        , 
Then we're going to see all
sorts of other magical things.


  ,        , 
Here's another magical symbol.


  ,        , 


  ,         , 
This is sort of the Y operator,
which is, in some


   ,         ,
sense, the expression
of infinity inside


   ,        , 
our procedural language.


   ,         , 
We'll take a look at that.


   ,        , 
In any case, this section
of the course is called


  ,        , 
Metalinguistic Abstraction,
abstracting by talking about


  ,        ,
how you construct
new languages.

 
  ,        , 


   ,        , 
As I said, we're going to start
out by looking at the


  ,        , 
process of interpretation.


  ,        , 
We're going to look
at this apply eval


  ,        , 
loop, and build Lisp.


  ,        , 
Then, just to show you that this
is very general, we're


  ,        ,
going to use exactly the same
technology to build a very


  ,       , 
different kind of language, a
so called logic programming


  ,        , 
language, where you don't really
talk about procedures


  ,        , 
at all that have inputs
and outputs.

 
  ,        , 
What you do is talk about
relations between things.


  ,         , 
And then finally, we're going
to talk about how you


   ,         , 
implement these things very
concretely on the very


   ,         , 
simplest kind of machines.


   ,         , 
We'll see something like this.


   ,        , 
This is a picture of a chip,
which is the Lisp interpreter


  ,        , 
that we will be talking about
then in hardware.


  ,        ,


  ,       , 
Well, there's an outline of the
course, three big topics.


  ,        , 
Black box abstraction,
conventional interfaces,

 
  ,        , 
metalinguistic abstraction.


  ,        , 
Now, let's take a break now and
then we'll get started.


  ,         , 
[MUSIC PLAYING]


   ,         ,
Let's actually start in
learning Lisp now.


   ,        , 
Actually, we'll start out by
learning something much more


   ,        , 
important, maybe the very most
important thing in this


  ,        , 
course, which is not Lisp, in
particular, of course, but


  ,         , 
rather a general framework for
thinking about languages that


   ,        , 
I already alluded to.


  ,        , 
When somebody tells you they're
going to show you a


  ,        , 
language, what you should say
is, what I'd like you to tell

 
  ,        , 
me is what are the primitive
elements?

 
  ,        , 

 
  ,        , 
What does the language
come with?

 
  ,        , 
Then, what are the ways you
put those together?

 
  ,        , 
What are the means
of combination?

 
  ,         , 

 
   ,        ,
What are the things that allow
you to take these primitive

 
  ,       , 
elements and build bigger
things out of them?

 
  ,         , 
What are the ways of putting
things together?

 
   ,         , 
And then, what are the
means of abstraction?


   ,         , 


   ,        , 
How do we take those complicated
things and draw


  ,        , 
those boxes around them?


  ,         , 
How do we name them so that we
can now use them as if they


   ,        , 
were primitive elements
in making still


  ,        , 
more complex things?


  ,        , 
And so on, and so
on, and so on.


  ,        , 
So when someone says to you,
gee, I have a great new


  ,        ,
computer language, you don't
say, how many characters does

 
  ,       , 
it take to invert a matrix?


  ,        , 
It's irrelevant.


  ,        , 
What you say is, if the language
did not come with


  ,        , 
matrices built in or with
something else built in, how


  ,        , 
could I then build that thing?


  ,        , 
What are the means of
combination which would allow


  ,        , 
me to do that?


  ,        , 
And then, what are the means of
abstraction which allow me


  ,        , 
then to use those as elements
in making more complicated


  ,        , 
things yet?

 
  ,        , 


  ,          , 
Well, we're going to see that
Lisp has some primitive data


    ,          , 
and some primitive procedures.


    ,          , 
In fact, let's really start.


    ,          , 
And here's a piece of
primitive data in


    ,         , 
Lisp, number .


   ,         ,
Actually, if I'm being
very pedantic, that's


   ,        , 
not the number .


   ,         , 
That's some symbol that
represents Plato's concept of


   ,         ,
the number .

 
   ,         ,
And here's another.


    ,        , 
Here's some more primitive
data in Lisp, ..


   ,          , 
Or actually, some representation
of ..


    ,         ,
And here's another one, .


   ,        , 


   ,         , 
Here's another primitive
object that's


   ,         , 
built in Lisp, addition.


   ,         , 
Actually, to use the same kind
of pedantic   this is a name


   ,        , 
for the primitive method
of adding things.


  ,         , 
Just like this is a name for
Plato's number , this is a

 
   ,         , 
name for Plato's concept
of how you add things.


   ,        , 
So those are some primitive
elements.


  ,        ,
I can put them together.


  ,       , 
I can say, gee, what's the
sum of  and . and ?


  ,        , 
And the way I do that is to
say, let's apply the sum


  ,        ,
operator to these
three numbers.


  ,       , 
And I should get, what?


  ,        , 
, .


  ,        , 
..


  ,        , 
So I should be able to ask Lisp
what the value of this

 
  ,        ,
is, and it will return ..


  ,       , 
Let's introduce some names.


  ,         , 
This thing that I typed is
called a combination.


   ,        , 


  ,        ,
And a combination consists,
in general,


  ,        , 
of applying an operator  


   ,         , 
so this is an operator  


   ,         ,


   ,       , 
to some operands.


  ,        , 
These are the operands.

 
  ,        , 


  ,        , 
And of course, I can make
more complex things.


  ,        , 
The reason I can get complexity
out of this is


  ,         , 
because the operands themselves,
in general, can be


   ,        ,
combinations.


  ,       , 
So for instance, I could say,
what is the sum of  and the


  ,        , 
product of  and
 and  and ?


  ,        , 
And I should get   let's see  


  ,        ,
 ,  , .


  ,       , 
So Lisp should tell
me that that's .

 
  ,         , 
Forming combinations is the
basic needs of combination


   ,         , 
that we'll be looking at.


   ,         , 
And then, well, you see
some syntax here.


   ,        , 
Lisp uses what's called prefix
notation, which means that the


  ,        ,
operator is written to the
left of the operands.


  ,       , 
It's just a convention.


  ,        , 
And notice, it's fully
parenthesized.


  ,        , 
And the parentheses make it
completely unambiguous.


  ,        , 
So by looking at this, I can see
that there's the operator,


  ,        , 
and there are , ,
,  operands.

 
  ,        , 
And I can see that the second
operand here is itself some


  ,        ,
combination that has one
operator and two operands.


  ,       , 
Parentheses in Lisp are a little
bit, or are very unlike


  ,        , 
parentheses in conventional
mathematics.


  ,         ,
In mathematics, we sort of use
them to mean grouping, and it


   ,        , 
sort of doesn't hurt if
sometimes you leave out


   ,         , 
parentheses if people
understand


   ,         , 
that that's a group.


   ,         , 
And in general, it doesn't
hurt if you put in extra


   ,         , 
parentheses, because that
maybe makes the


   ,         , 
grouping more distinct.

 
   ,        ,
Lisp is not like that.

 
  ,       ,
In Lisp, you cannot leave out
parentheses, and you cannot

 
  ,        , 
put in extra parentheses,
because putting in parentheses

 
   ,        , 
always means, exactly and
precisely, this is a

 
  ,        , 
combination which has
meaning, applying

 
  ,        ,
operators to operands.

 
  ,       , 
And if I left this out, if I
left those parentheses out, it

 
  ,        ,
would mean something else.

 
  ,       ,
In fact, the way to think about
this, is really what I'm

 
  ,       , 
doing when I write something
like this is writing a tree.


  ,        , 
So this combination is a tree
that has a plus and then a 


  ,        ,
and then a something else
and an  and a .


  ,       , 
And then this something else
here is itself a little


  ,         , 
subtree that has a star
and a  and a .


   ,         ,
And the way to think of that
is, really, what's going on


   ,       , 
are we're writing these trees,
and parentheses are just a way


  ,        , 
to write this two dimensional
structure as a linear


  ,        , 
character string.


  ,        , 
Because at least when Lisp first
started and people had

 
  ,        , 
teletypes or punch cards or
whatever, this was more


  ,        , 
convenient.


  ,        , 
Maybe if Lisp started today,
the syntax of Lisp


  ,        ,
would look like that.


  ,       , 
Well, let's look at
what that actually


  ,        , 
looks like on the computer.


  ,        , 
Here I have a Lisp interaction
set up.


  ,        ,
There's a editor.


  ,       , 
And on the top, I'm going to
type some values and ask Lisp


  ,        ,
what they are.

 
  ,       , 
So for instance, I can say
to Lisp, what's the


  ,        , 
value of that symbol?


  ,         ,
That's .


   ,       , 
And I ask Lisp to evaluate it.


  ,        , 
And there you see Lisp has
returned on the bottom, and


  ,        , 
said, oh yeah, that's .


  ,         , 
Or I can say, what's the
sum of  and  and ?


   ,         , 
What's that combination?


   ,         , 
And ask Lisp to evaluate it.


   ,        , 

 
  ,        ,
That's .


  ,       , 
Or I can type in something
more complicated.


  ,        , 
I can say, what's the sum of the
product of  and the sum


  ,        , 
of  and .?


  ,        , 
And you'll notice here that Lisp
has something built in


  ,        , 
that helps me keep track of
all these parentheses.


  ,        , 
Watch as I type the next closed
parentheses, which is


  ,        , 
going to close the combination
starting with the star.


  ,        , 
The opening one will flash.


  ,         ,
Here, I'll rub those out
and do it again.

 
   ,       , 
Type close, and you see
that closes the plus.


  ,        , 
Close again, that
closes the star.


  ,        , 
Now I'm back to the sum,
and maybe I'm going to


  ,         , 
add that all to .


   ,         , 
That closes the plus.


   ,         , 
Now I have a complete
combination, and I can ask


   ,         , 
Lisp for the value of that.


   ,        , 
That kind of paren balancing is
something that's built into


  ,        , 
a lot of Lisp systems to help
you keep track, because it is


  ,        , 
kind of hard just by hand doing
all these parentheses.

 
  ,         , 
There's another kind of
convention for keeping track


   ,        ,
of parentheses.


  ,       ,
Let me write another complicated
combination.


  ,       , 
Let's take the sum of the
product of  and  and add


  ,        ,
that to something.


  ,       , 
And now what I'm going to do is
I'm going to indent so that


  ,        , 
the operands are written
vertically.


  ,        , 
Which the sum of that and
the product of  and  


  ,         , 
let's say the product
of  with a


   ,        , 
difference of   and ..

 
  ,        ,
That means subtract
. from  .


  ,       ,
And then you see the
parentheses close.


  ,        , 
Close the minus.


   ,         ,
Close the star.


   ,        , 
And now let's get another
operator.


   ,         , 
You see the Lisp editor here
is indenting to the right


   ,        , 
position automatically to
help me keep track.


  ,        , 
I'll do that again.


  ,        , 
I'll close that last
parentheses again.


  ,        , 
You see it balances the plus.

 
  ,         , 


   ,        ,
Now I can say, what's
the value of that?


  ,       , 
So those two things, indenting
to the right level, which is


  ,        , 
called pretty printing, and
flashing parentheses, are two


  ,        , 
things that a lot of Lisp
systems have built in to help


  ,        , 
you keep track.


  ,        , 
And you should learn
how to use them.


  ,        ,


  ,       , 
Well, those are the
primitives.


  ,        , 
There's a means of
combination.

 
  ,        , 
Now let's go up to the
means of abstraction.


  ,        ,
I'd like to be able to take
the idea that I do some


  ,       , 
combination like this, and
abstract it and give it a


  ,        ,
simple name, so I can use
that as an element.


  ,        , 
And I do that in Lisp with
"define." So I can say, for


   ,        ,
example, define A to be the
product of  and .


  ,       ,


  ,       , 
And now I could say, for
example, to Lisp, what is the


  ,        ,
product of A and A?


  ,       , 
And this should be , and
this should be .


  ,        ,
And then, crucial thing,
I can now use A  

 
  ,       , 
here I've used it in
a combination  

 
  ,        , 
but I could use that in other
more complicated things that I

 
  ,        , 
name in turn.

 
  ,        , 
So I could say, define B to be
the sum of, we'll say, A and

 
  ,         , 
the product of  and A. And
then close the plus.

 
   ,          , 

 
    ,          , 
Let's take a look at that
on the computer and

 
    ,          , 
see how that looks.

 
    ,          ,
So I'll just type what
I wrote on the board.

 
    ,        ,
I could say, define A to be
the product of  and .


   ,        ,


   ,        , 
And I'll tell that to Lisp.


   ,         , 
And notice what Lisp responded
there with


   ,         , 
was an A in the bottom.


   ,         , 
In general, when you type in
a definition in Lisp, it


   ,         , 
responds with the symbol
being defined.


   ,         ,
Now I could say to Lisp, what
is the product of A and A?


   ,        ,


   ,        , 
And it says that's .

 
   ,         , 
I can define B to be the sum of
A and the product of  and


   ,         , 
A. Close a paren closes
the star.


   ,         ,
Close the plus.


   ,       ,
Close the "define." Lisp says,
OK, B, there on the bottom.


  ,       , 
And now I can say to Lisp,
what's the value of B?


  ,        ,


  ,       , 
And I can say something more
complicated, like what's the


  ,        ,
sum of A and the quotient
of B and ?


  ,        , 
That slash is divide, another
primitive operator.


   ,        , 
I've divided B by ,
added it to A. Lisp

 
  ,        , 
says, OK, that's .


  ,        , 
So there's what it looks like.


  ,        , 
There's the basic means
of defining something.


  ,        , 
It's the simplest kind of
naming, but it's not really


  ,        , 
very powerful.


  ,        , 
See, what I'd really
like to name  


  ,        , 
remember, we're talking about
general methods  


  ,        , 
I'd like to name, oh, the
general idea that, for


  ,        , 
example, I could multiply  by
, or  by , or , by


  ,        , 
,, ,. by ,..

 
  ,        , 
I'd like to be able to name
the general idea of


  ,        , 
multiplying something
by itself.


  ,        ,


  ,       , 
Well, you know what that is.


  ,        ,
That's called squaring.


  ,       , 
And the way I can do that in
Lisp is I can say, define to


  ,        , 
square something x, multiply
x by itself.


  ,         , 
And then having done that,
I could say to Lisp, for


   ,         , 
example, what's the
square of  ?


   ,         , 
And Lisp will say .

 
   ,        ,
So now let's actually look at
that a little more closely.


  ,       ,
Right, there's the definition
of square.


  ,       , 
To square something, multiply
it by itself.


  ,        , 
You see this x here.


  ,        , 
That x is kind of a pronoun,
which is the something that


  ,        , 
I'm going to square.


  ,        , 
And what I do with it
is I multiply x, I


  ,        , 
multiply it by itself.


  ,        , 


  ,        ,
OK.

 
  ,       , 
So there's the notation for
defining a procedure.


  ,        ,
Actually, this is a little bit
confusing, because this is


  ,       , 
sort of how I might
use square.


  ,        , 
And I say square root of x or
square root of  , but it's


  ,        ,
not making it very clear that
I'm actually naming something.


  ,        , 


   ,         , 
So let me write this definition
in another way that


   ,         , 
makes it a little
bit more clear


   ,         , 
that I'm naming something.


   ,        , 
I'll say, "define" square to
be lambda of x times xx.

 
  ,        , 


  ,         , 
Here, I'm naming something
square, just like over here,


   ,        , 
I'm naming something A. The
thing that I'm naming square  


  ,        , 
here, the thing I named A was
the value of this combination.


  ,        , 
Here, the thing that I'm naming
square is this thing


  ,        , 
that begins with lambda, and
lambda is Lisp's way of saying


  ,        , 
make a procedure.


  ,        , 


  ,         , 
Let's look at that more
closely on the slide.


   ,         , 
The way I read that definition
is to say, I define square to

 
   ,         , 
be make a procedure  


   ,        , 


  ,        ,
that's what the lambda is  


  ,       , 
make a procedure with
an argument named x.


  ,        ,
And what it does is return
the results of


  ,       , 
multiplying x by itself.


  ,        , 
Now, in general, we're going to
be using this top form of


  ,        ,
defining, just because it's a
little bit more convenient.


  ,       , 
But don't lose sight of the fact
that it's really this.


  ,        , 
In fact, as far as the Lisp
interpreter's concerned,

 
  ,        , 
there's no difference between
typing this to it and typing


  ,        , 
this to it.


  ,        , 
And there's a word for that,
sort of syntactic sugar.


  ,        ,
What syntactic sugar means,
it's having somewhat more


  ,        ,
convenient surface forms
for typing something.


   ,        , 
So this is just really syntactic
sugar for this


   ,         , 
underlying Greek thing
with the lambda.


   ,         , 
And the reason you should
remember that is don't forget


   ,        , 
that, when I write something
like this, I'm


  ,        , 
really naming something.


  ,        ,
I'm naming something square,
and the something that I'm

 
  ,       , 
naming square is a procedure
that's getting constructed.

 
  ,        , 
Well, let's look at that
on the computer, too.

 
  ,         , 
So I'll come and I'll say,
define square of

 
   ,        , 
x to be times xx.

 
  ,        , 

 
  ,        , 
Now I'll tell Lisp that.

 
  ,        , 
It says "square." See, I've
named something "square." Now,

 
  ,        , 
having done that, I can
ask Lisp for, what's

 
  ,         , 
the square of ,?

 
   ,        , 
Or in general, I could say,
what's the square of the sum


  ,        , 
of  and ?


  ,        ,


  ,       , 
The square of 's .


  ,        ,
Or I can use square itself
as an element in some


  ,       , 
combination.


  ,        , 
I can say, what's the sum
of the square of  and


  ,        , 
the square of ?


  ,        , 


  ,        , 
 and  is .

 
  ,        , 
Or I can use square as an
element in some much more


  ,         , 
complicated thing.


   ,        , 
I can say, what's the square
of, the sqare of,


  ,         , 
the square of ,?


   ,        , 
And there's the square of the
square of the square of ,.


  ,        , 
Or I can say to Lisp, what
is square itself?


  ,        ,
What's the value of that?


  ,       ,
And Lisp returns some
conventional way of telling me


  ,       ,
that that's a procedure.


  ,       , 
It says, "compound procedure
square." Remember, the value

 
  ,         ,
of square is this procedure, and
the thing with the stars


   ,       , 
and the brackets are just Lisp's
conventional way of


  ,        ,
describing that.


  ,        , 
Let's look at two more
examples of defining.


   ,        ,


  ,       , 
Here are two more procedures.


  ,        , 
I can define the average of x
and y to be the sum of x and y


  ,        , 
divided by .


  ,        , 
Or having had average and mean
square, having had average and


  ,         , 
square, I can use that to talk
about the mean square of

 
   ,         ,
something, which is the average
of the square of x and


   ,        , 
the square of y.


   ,        , 
So for example, having done
that, I could say, what's the


  ,        ,
mean square of  and ?


  ,       , 
And I should get the average
of  and , which is ..


  ,        , 


  ,        , 
The key thing here is that,
having defined square, I can


  ,        , 
use it as if it were
primitive.


  ,        , 


  ,        ,
So if we look here on the
slide, if I look at mean

 
  ,        , 
square, the person defining mean
square doesn't have to


   ,        , 
know, at this point, whether
square was something built


  ,        , 
into the language or
whether it was a


  ,        ,
procedure that was defined.


  ,         ,
And that's a key thing in Lisp,
that you do not make


    ,         , 
arbitrary distinctions between
things that happen to be


    ,          ,
primitive in the language
and things that


    ,        , 
happen to be built in.


   ,         , 
A person using that shouldn't
even have to know.


   ,         ,
So the things you construct get
used with all the power

 
   ,        ,
and flexibility as if they
were primitives.


   ,        , 
In fact, you can drive that
home by looking on the


   ,         , 
computer one more time.


   ,         , 
We talked about plus.


   ,         , 
And in fact, if I come here on
the computer screen and say,


   ,         ,
what is the value of plus?


   ,        , 


   ,         , 
Notice what Lisp types out.


   ,         , 
On the bottom there, it typed
out, "compound procedure


   ,         ,
plus." Because, in this system,
it turns out that the

 
   ,        , 
addition operator is itself
a compound procedure.


   ,         , 
And if I didn't just type that
in, you'd never know that, and


   ,         , 
it wouldn't make any
difference anyway.


   ,          , 
We don't care.


    ,         ,
It's below the level of
the abstraction that


   ,        , 
we're dealing with.


   ,         , 
So the key thing is you cannot
tell, should not be able to


   ,        , 
tell, in general, the difference
between things that


  ,         , 
are built in and things
that are compound.


   ,         , 
Why is that?

 
   ,         , 
Because the things that are
compound have an abstraction


   ,         , 
wrapper wrapped around them.


   ,        , 
We've seen almost all the
elements of Lisp now.


  ,        ,
There's only one more we have to
look at, and that is how to


  ,       , 
make a case analysis.


  ,        , 
Let me show you what I mean.


  ,        , 
We might want to think about the
mathematical definition of


  ,        , 
the absolute value functions.


  ,         , 
I might say the absolute value
of x is the function which has


   ,        , 
the property that it's
negative of x.

 
  ,        , 
For x less than  , it's
  for x equal to  .


  ,        , 
And it's x for x
greater than  .


  ,        , 


  ,        , 
And Lisp has a way of making
case analyses.


  ,        , 
Let me define for you
absolute value.


  ,         ,
Say define the absolute value
of x is conditional.


   ,        , 
This means case analysis,
COND.


   ,         ,


   ,       , 
If x is less than  , the
answer is negate x.


  ,        , 


  ,        , 
What I've written here
is a clause.

 
  ,        , 

 
  ,        ,
This whole thing is a
conditional clause,

 
  ,       , 
and it has two parts.

 
  ,        , 
This part here is a predicate
or a condition.

 
  ,        , 
That's a condition.

 
  ,        , 
And the condition is expressed
by something called a

 
  ,        , 
predicate, and a predicate in
Lisp is some sort of thing

 
  ,        , 
that returns either
true or false.

 
  ,        , 
And you see Lisp has a
primitive procedure,

 
  ,        , 
less than, that tests whether
something is true or false.


  ,         , 
And the other part of a clause
is an action or a thing to do,


   ,         , 
in the case where that's true.


   ,        , 
And here, what I'm doing
is negating x.


  ,        ,
The negation operator, the
minus sign in Lisp is


  ,       , 
a little bit funny.


  ,        , 


  ,        ,
If there's two or more
arguments, if there's two


  ,       , 
arguments it subtracts the
second one from the first, and


  ,        , 
we saw that.

 
  ,        , 
And if there's one argument,
it negates it.


  ,        ,
So this corresponds to that.


  ,       , 
And then there's another
COND clause.


  ,        , 
It says, in the case where
x is equal to  ,


  ,        ,
the answer is  .


  ,       , 
And in the case where
x is greater than  ,


  ,        , 
the answer is x.


  ,        , 
Close that clause.


  ,        , 
Close the COND.


  ,        , 
Close the definition.

 
  ,        , 
And there's the definition
of absolute value.


  ,        , 
And you see it's the case
analysis that looks very much


  ,        ,
like the case analysis you
use in mathematics.


  ,       ,


  ,        ,
There's a somewhat different
way of writing a restricted


   ,        ,
case analysis.


   ,        , 
Often, you have a case analysis
where you only have


   ,         , 
one case, where you test
something, and then depending


   ,        , 
on whether it's true or false,
you do something.


  ,        , 
And here's another definition of
absolute value which looks

 
  ,        ,
almost the same, which says,
if x is less than  , the


  ,       , 
result is negate x.


  ,        , 
Otherwise, the answer is x.


  ,        , 
And we'll be using "if" a lot.


  ,         , 
But again, the thing to remember
is that this form of


   ,        , 
absolute value that you're
looking at here, and then this


  ,        , 
one over here that I wrote
on the board, are


  ,        ,
essentially the same.


  ,        ,
And "if" and COND are  


   ,       ,
well, whichever way
you like it.

 
  ,       ,
You can think of COND as
syntactic sugar for "if," or


  ,       ,
you can think of "if" as
syntactic sugar for COND, and


  ,       , 
it doesn't make any
difference.


  ,        ,
The person implementing a Lisp
system will pick one and


  ,       , 
implement the other
in terms of that.


  ,        , 
And it doesn't matter
which one you pick.


  ,         , 


   ,         , 
Why don't we break now, and
then take some questions.


   ,        , 
How come sometimes when I write
define, I put an open


  ,        , 
paren here and say, define open
paren something or other,

 
  ,        , 
and sometimes when
I write this, I


  ,        , 
don't put an open paren?


  ,        , 
The answer is, this particular
form of "define," where you


  ,         , 
say define some expression, is
this very special thing for


   ,        , 
defining procedures.


  ,        ,
But again, what it really means
is I'm defining this


  ,       , 
symbol, square, to be that.


  ,        , 
So the way you should think
about it is what "define" does


  ,        , 
is you write "define," and the
second thing you write is the


  ,        , 
symbol here   no open paren  

 
  ,        , 
the symbol you're defining and
what you're defining it to be.


  ,        ,
That's like here
and like here.


  ,        , 
That's sort of the basic way
you use "define." And then,


   ,         ,
there's this special syntactic
trick which allows you to


   ,        , 
define procedures that
look like this.


   ,         , 
So the difference is, it's
whether or not you're defining


   ,        ,
a procedure.


  ,       , 
[MUSIC PLAYING]


  ,        ,
Well, believe it or not, you
actually now know enough Lisp


  ,       , 
to write essentially any
numerical procedure that you'd

 
  ,        , 
write in a language like FORTRAN
or Basic or whatever,


  ,        ,
or, essentially, any
other language.


  ,       , 
And you're probably saying,
that's not believable, because


  ,        , 
you know that these languages
have things like "for


  ,        , 
statements," and "do until
while" or something.


  ,         ,
But we don't really
need any of that.


   ,        , 
In fact, we're not going
to use any of


   ,         , 
that in this course.


   ,         , 
Let me show you.


   ,        ,
Again, looking back at square
root, let's go back to this

 
  ,       , 
square root algorithm of
Heron of Alexandria.


  ,         , 
Remember what that said.


   ,        ,
It said, to find an
approximation to the square


  ,       , 
root of X, you make a guess,
you improve that guess by


  ,        ,
averaging the guess and
X over the guess.


  ,       ,
You keep improving that until
the guess is good enough.


  ,       , 
I already alluded to the idea.


  ,        , 
The idea is that, if the initial
guess that you took


  ,        , 
was actually equal to the square
root of X, then G here


  ,        , 
would be equal to X/G.

 
  ,        ,
So if you hit the square
root, averaging them


  ,       , 
wouldn't change it.


  ,        , 
If the G that you picked was
larger than the square root of


  ,         , 
X, then X/G will be smaller than
the square root of X, so


   ,         , 
that when you average
G and X/G, you get


   ,         , 
something in between.


   ,        , 
So if you pick a G that's
too small, your


  ,        ,
answer will be too large.


  ,       , 
If you pick a G that's too
large, if your G is larger


  ,        , 
than the square root of X and
X/G will be smaller than the


  ,        , 
square root of X.

 
  ,        , 
So averaging always gives you
something in between.

 
  ,        , 
And then, it's not quite
trivial, but it's possible to

 
  ,        ,
show that, in fact, if G misses
the square root of X by

 
  ,       , 
a little bit, the average of G
and X/G will actually keep

 
  ,        ,
getting closer to the square
root of X. So if you keep

 
  ,        , 
doing this enough, you'll
eventually get as

 
   ,        , 
close as you want.

 
  ,        , 
And then there's another fact,
that you can always start out

 
  ,        , 
this process by using 
as an initial guess.


  ,        , 
And it'll always converge to
the square root of X. So

 
  ,        , 
that's this method of successive
averaging due to

 
  ,        , 
Heron of Alexandria.

 
  ,        , 
Let's write it in Lisp.

 
  ,         , 
Well, the central idea is, what
does it mean to try a

 
   ,         , 
guess for the square
root of X?

 
   ,         , 
Let's write that.

 
   ,        , 
So we'll say, define to try a
guess for the square root of

 
  ,        , 
X, what do we do?

 
  ,        , 
We'll say, if the guess is good
enough to be a guess for


  ,        , 
the square root of X,
then, as an answer,

 
  ,        , 
we'll take the guess.

 
  ,        , 
Otherwise, we will try
the improved guess.

 
  ,          ,
We'll improve that guess for
the square root of X, and

 
    ,         , 
we'll try that as a guess for
the square root of X. Close

 
    ,         , 
the "try." Close the "if." Close
the "define." So that's

 
   ,         , 
how we try a guess.

 
   ,         ,
And then, the next part of the
process said, in order to

 
   ,        , 
compute square roots, we'll
say, define to compute the

 
   ,         , 
square root of X, we will try
 as a guess for the square


   ,          , 
root of X. Well, we have to
define a couple more things.

 
    ,         , 
We have to say, how is
a guess good enough?

 
   ,         ,
And how do we improve a guess?

 
   ,        , 
So let's look at that.

 
   ,         , 
The algorithm to improve a guess
for the square root of

 
   ,         , 
X, we average  

 
   ,         , 
that was the algorithm  

 
   ,          , 
we average the guess with
the quotient of

 
    ,           ,
dividing X by the guess.

 
     ,          , 
That's how we improve a guess.


     ,           , 
And to tell whether a guess is
good enough, well, we have to

 
     ,           , 
decide something.

 
     ,          , 
This is supposed to be a guess
for the square root of X, so

 
    ,          ,
one possible thing you can do
is say, when you take that

 
    ,         , 
guess and square it, do you get
something very close to X?

 
    ,          , 
So one way to say that is to
say, I square the guess,

 
    ,          ,
subtract X from that, and see if
the absolute value of that

 
    ,         ,
whole thing is less than some
small number, which depends on

 
    ,         , 
my purposes.

 
    ,          ,


    ,          , 
So there's a complete procedure
for how to compute

 
     ,          , 
the square root of X. Let's look
at the structure of that

 
    ,          ,
a little bit.

 
    ,         , 

 
    ,          ,
I have the whole thing.

 
    ,         , 
I have the notion of how to
compute a square root.

 
    ,          , 
That's some kind of module.

 
    ,          , 
That's some kind of black box.

 
    ,           , 
It's defined in terms of how to
try a guess for the square

 
     ,           ,
root of X.


     ,         , 
"Try" is defined in terms of,
well, telling whether

 
    ,          , 
something is good enough
and telling

 
    ,          , 
how to improve something.

 
    ,          ,
So good enough.

 
    ,          , 
"Try" is defined in terms of
"good enough" and "improve."

 
     ,          , 
And let's see what
else I fill in.

 
    ,          , 
Well, I'll go down this tree.

 
    ,          ,
"Good enough" was defined
in terms of

 
    ,         , 
absolute value, and square.

 
    ,           , 


     ,          , 
And improve was defined in
terms of something called

 
    ,          , 
averaging and then some other
primitive operator.

 
    ,          , 
Square root's defined in terms
of "try." "Try" is defined in

 
    ,          , 
terms of "good enough"
and "improve,"

 
    ,          , 
but also "try" itself.

 
    ,           , 
So "try" is also defined in
terms of how to try itself.

 
     ,           , 
Well, that may give you some
problems. Your high school

 
     ,           , 
geometry teacher probably told
you that it's naughty to try

 
     ,          , 
and define things in terms of
themselves, because it doesn't

 
    ,          , 
make sense.


    ,          , 
But that's false.

 
    ,          , 
Sometimes it makes perfect
sense to define things in

 
    ,           , 
terms of themselves.

 
     ,          ,
And this is the case.

 
    ,         , 
And we can look at that.

 
    ,          , 
We could write down what this
means, and say, suppose I

 
    ,           ,
asked Lisp what the square
root of  is.

 
     ,         , 

 
    ,          , 
What's the square
root of  mean?

 
    ,          ,
Well, that means I try
 as a guess for the


    ,         , 
square root of .

 
    ,          ,

 
    ,         , 
Now I look.

 
    ,           , 
I say, gee, is  a good
enough guess for the

 
     ,          , 
square root of ?

 
    ,          , 
And that depends on the test
that "good enough" does.

 
    ,          , 
And in this case, "good enough"
will say, no,  is not

 
    ,          , 
a good enough guess for
the square root of .

 
    ,           , 
So that will reduce to saying,
I have to try an improved  

 
     ,          , 
improve  as a guess for the
square root of , and try that

 
    ,          , 
as a guess for the
square root of .


    ,          , 
Improving  as a guess for the
square root of  means I


    ,          , 
average  and  divided by .


    ,          , 
So this is going
to be average.


    ,          , 
This piece here will be the
average of  and the


    ,           , 
quotient of  by .


     ,          , 
That's this piece here.


    ,          , 
And this is ..


    ,          ,


    ,         , 
So this square root of  reduces
to trying  for the

 
    ,           , 
square root of , which reduces
to trying . as a


     ,           , 
guess for the square
root of .


     ,           , 
So that makes sense.


     ,           , 
Let's look at the rest
of the process.


     ,          , 
If I try ., that reduces.


    ,          , 
. turns out to be not good
enough as a guess for the


    ,           , 
square root of .


     ,          , 
So that reduces to trying the
average of . and  divided


    ,          ,
by . as a guess for the
square root of .


    ,         , 
That average turns
out to be ..

 
    ,          ,
So this whole thing reduces to
trying . as a guess for


    ,         , 
the square root of .


    ,          , 
And then so on.


    ,           , 
That reduces to another called
a "good enough," .


     ,          , 
something or other.


    ,          , 
And then it keeps going until
the process finally stops with


    ,          , 
something that "good enough"
thinks is good enough, which,


    ,          ,
in this case, is .
something or other.


    ,         , 
So the process makes
perfect sense.


    ,          , 

 
    ,           , 
This, by the way, is called
a recursive definition.


     ,          , 


    ,          , 
And the ability to make
recursive definitions is a


    ,           , 
source of incredible power.


     ,          ,
And as you can already see I've
hinted at, it's the thing


    ,         , 
that effectively allows you to
do these infinite computations


    ,           , 
that go on until something is
true, without having any other


     ,          ,
constricts other than the
ability to call a procedure.


    ,         , 


    ,          , 
Well, let's see, there's
one more thing.

 
    ,          , 
Let me show you a variant of
this definition of square root


    ,          ,
here on the slide.


    ,         , 
Here's sort of the same thing.


    ,          , 
What I've done here is packaged
the definitions of


    ,          , 
"improve" and "good enough"
and "try" inside "square


    ,          , 
root." So, in effect, what
I've done is I've built a


    ,           , 
square root box.


     ,           , 
So I've built a box that's the
square root procedure that


     ,           , 
someone can use.


     ,          , 
They might put in 
and get out .

 
    ,          ,
And then, packaged inside this
box are the definitions of


    ,         , 
"try" and "good enough"
and "improve."


    ,          , 
So they're hidden
inside this box.


    ,          ,
And the reason for doing that
is that, if someone's using


    ,         , 
this square root, if George is
using this square root, George


    ,          , 
probably doesn't care very much
that, when I implemented


    ,          ,
square root, I had things inside
there called "try" and


    ,         , 
"good enough" and "improve." And
in fact, Harry might have


    ,           ,
a cube root procedure that has
"try" and "good enough" and


     ,         , 
"improve." And in order to not
get the whole system confused,

 
    ,          , 
it'd be good for Harry to
package his internal


    ,          , 
procedures inside his
cube root procedure.


    ,          , 
Well, this is called block
structure, this particular way


    ,           , 
of packaging internals inside
of a definition.


     ,          ,
And let's go back and look
at the slide again.


    ,         , 
The way to read this kind of
procedure is to say, to define


    ,          ,
"square root," well, inside that
definition, I'll have the


    ,         ,
definition of an "improve" and
the definition of "good


    ,         ,
enough" and the definition of
"try." And then, subject to


    ,         ,
those definitions, the way I
do square root is to try .

 
    ,         , 
And notice here, I don't have
to say  as a guess for the


    ,          , 
square root of X, because since
it's all inside the


    ,          , 
square root, it sort of
has this X known.


    ,          , 


    ,          , 
Let me summarize.


    ,          , 
We started out with the idea
that what we're going to be


    ,           , 
doing is expressing imperative
knowledge.


     ,           , 
And in fact, here's a slide
that summarizes the way we


     ,           , 
looked at Lisp.


     ,          , 
We started out by looking at
some primitive elements in

 
    ,          , 
addition and multiplication,
some predicates for testing


    ,          , 
whether something is less than
or something's equal.


    ,          , 
And in fact, we saw really
sneakily in the system we're


    ,          , 
actually using, these aren't
actually primitives, but it


    ,          , 
doesn't matter.


    ,          , 
What matters is we're going
to use them as if they're


    ,          , 
primitives.


    ,           , 
We're not going to
look inside.


     ,          , 
We also have some primitive
data and some numbers.


    ,          , 
We saw some means of
composition, means of


    ,          ,
combination, the basic one being
composing functions and

 
    ,         , 
building combinations with
operators and operands.

 
    ,          ,
And there were some other
things, like COND and "if" and

 
    ,         , 
"define." But the main thing
about "define," in particular,

 
    ,          , 
was that it was the means
of abstraction.

 
    ,          , 
It was the way that
we name things.

 
    ,          , 
You can also see from this slide
not only where we've

 
    ,           , 
been, but holes we
have to fill in.

 
     ,           , 
At some point, we'll have to
talk about how you combine

 
     ,           , 
primitive data to get compound
data, and how you abstract

 
     ,          , 
data so you can use large
globs of data as


    ,          ,
if they were primitive.


    ,         , 
So that's where we're going.


    ,           , 
But before we do that, for the
next couple of lectures we're


     ,          , 
going to be talking about, first
of all, how it is that


    ,          ,
you make a link between these
procedures we write and the


    ,         ,
processes that happen
in the machine.


    ,         , 
And then, how it is that you
start using the power of Lisp


    ,          , 
to talk not only about these
individual little


    ,          ,
computations, but about general
conventional methods

 
    ,         ,
of doing things.


    ,         , 
OK, are there any questions?


    ,          , 
AUDIENCE  Yes.


    ,          , 
If we defined A using
parentheses instead of as we


    ,          ,
did, what would be
the difference?


    ,         , 
PROFESSOR  If I wrote this, if
I wrote that, what I would be


    ,          , 
doing is defining a procedure
named A. In this case, a


    ,          , 
procedure of no arguments,
which, when I ran it, would


    ,          ,
give me back  times .


    ,         ,
AUDIENCE  Right.

 
    ,        , 
I mean, you come up with the
same thing, except for you


   ,         , 
really got a different  


   ,         , 
PROFESSOR  Right.


   ,         , 
And the difference would
be, in the old one  


   ,         , 
Let me be a little
bit clearer here.


   ,         ,
Let's call this A, like here.


   ,        ,
And pretend here, just for
contrast, I wrote, define D to


   ,        ,
be the product of  and .


   ,         ,


    ,        , 
And the difference between
those, let's think about

 
   ,         , 
interactions with the
Lisp interpreter.


   ,         , 
I could type in A and Lisp
would return .


   ,          , 
I could type in D, if I just
typed in D, Lisp would return


    ,          , 
compound procedure D, because
that's what it is.


    ,          , 
It's a procedure.


    ,         ,
I could run D. I could say,
what's the value of running D?


   ,        , 
Here is a combination
with no operands.


   ,         , 
I see there are no operands.


   ,         , 
I didn't put any after D. And
it would say, oh, that's .


   ,         ,
Or I could say, just for
completeness, if I typed in,

 
   ,        , 
what's the value of running A?


   ,         , 
I get an error.


   ,         , 
The error would be the same
one as over there.


   ,          ,
It'd be the error would say,
sorry, , which is the value


    ,        , 
of A, is not an operator that
I can apply to something.


   ,         , 
  ,        , 


  ,        , 
[MUSIC PLAYING BY J.S. BACH]


  ,        , 
PROFESSOR  Hi.


  ,         ,
You've seen that the job of
a programmer is to design


   ,       ,
processes that accomplish
particular goals, such as


  ,       ,
finding the square roots of
numbers or other sorts of


  ,       , 
things you might want to do.


  ,        ,
We haven't introduced
anything else yet.


  ,       , 
Of course, the way in which a
programmer does this is by

 
  ,        , 
constructing spells, which are
constructed out of procedures


  ,        ,
and expressions.


  ,       , 
And that these spells are
somehow direct a process to


  ,        , 
accomplish the goal that was
intended by the programmer.


  ,        , 
In order for the programmer to
do this effectively, he has to


  ,        , 
understand the relationship
between the particular things


  ,        , 
that he writes, these particular
spells, and the


  ,          , 
behavior of the process that
he's attempting to control.


    ,          , 
So what we're doing this
lecture is attempt to


    ,          , 
establish that connection in
as clear a way as possible.

 
    ,          , 
What we will particularly do is
understand how particular


    ,         ,
patterns of procedures and
expressions cause particular


   ,        , 
patterns of execution,
particular


   ,         ,
behaviors from the processes.


   ,        , 


   ,         , 
Let's get down to that.


   ,         , 
I'm going to start with
a very simple program.


   ,         , 
This is a program to compute
the sum of the


   ,         , 
squares of two numbers.


   ,         , 
And we'll define the sum of the
squares of x and y to be

 
   ,         ,
the sum of the square of x  


   ,        , 
I'm going to write
it that way  


   ,          , 
and the square of y where
the square of x is the


    ,          , 
product of x and x.


    ,         , 


   ,         , 
Now, supposing I were to say
something to this, like, to


   ,          ,
the system after having defined
these things, of the


    ,        , 
form, the sum of the squares of
 and , I am hoping that I


   ,         , 
will get out a .


   ,         ,
Because the square of  is ,
and the square of  is , and

 
   ,        ,
 is the sum of those.


   ,        , 
But how does that happen?


   ,         , 
If we're going to understand
processes and how we control


   ,         , 
them, then we have to have a
mapping from the mechanisms of


   ,         , 
this procedure into the way in
which these processes behave.


   ,         , 
What we're going to have is
a formal, or semi formal,


   ,         , 
mechanical model whereby you
understand how a machine


   ,         , 
could, in fact, in principle,
do this.


   ,         , 
Whether or not the actual
machine really does what I'm


   ,          , 
about to tell you is completely

 
    ,          , 
irrelevant at this moment.


    ,          , 
In fact, this is an engineering
model in the same


    ,          ,
way that, electrical resistor,
we write down a model v equals


    ,        , 
i r, it's approximately true.


   ,         , 
It's not really true.


   ,         , 
If I put up current through
the resistor it goes boom.


   ,          , 
So the voltage is not always
proportional to the current,


    ,         ,
but for some purposes the
model is appropriate.


   ,        , 
In particular, the model we're
going to describe right now,


   ,         , 
which I call the substitution
model, is the simplest model

 
   ,         ,
that we have for understanding
how procedures work and how


   ,        , 
processes work.


   ,         , 
How procedures yield
processes.


   ,         , 
And that substitution model will
be accurate for most of


   ,         , 
the things we'll be dealing
with in the next few days.


   ,         , 
But eventually, it will become
impossible to sustain the


   ,         ,
illusion that that's the way the
machine works, and we'll


   ,         , 
go to other more specific and
particular models that will


    ,         , 
show more detail.


   ,         ,
OK, well, the first thing, of
course, is we say, what are

 
   ,        , 
the things we have here?


   ,         , 
We have some cryptic symbols.


   ,          , 
And these cryptic symbols
are made out of pieces.


    ,          , 
There are kinds of
expressions.


    ,          , 
So let's write down
here the kinds of


    ,          , 
expressions there are.


    ,         , 


   ,          ,
And we have   and so far I
see things like numbers.


    ,        , 


   ,         ,
I see things like symbols
like that.

 
   ,        , 


   ,         , 
We have seen things before like
lambda expressions, but


   ,         , 
they're not here.


   ,         , 
I'm going to leave them out.


   ,         , 
Lambda expressions, we'll
worry about them later.


   ,         , 


   ,         , 
Things like definitions.


   ,         ,


   ,        , 
Things like conditionals.


   ,         , 

 
   ,         ,
And finally, things
like combinations.


   ,         ,


    ,         , 
These kinds of expressions
are  


    ,         , 
I'll worry about later  


   ,         ,
these are special forms.
There are particular


   ,        , 
rules for each of these.


   ,         , 
I'm going to tell you, however,
the rules for doing a


   ,         , 
general case.


   ,         , 
How does one evaluate
a combination?


   ,         , 
Because, in fact, over here,
all I really have are


   ,         , 
combinations and some
symbols and numbers.

 
   ,         , 
And the simple things like
a number, well, it

 
   ,         , 
will evaluate to itself.

 
   ,         , 
In the model I will
have for you, the

 
   ,         , 
symbols will disappear.

 
   ,          , 
They won't be there at the time
when you need them, when

 
    ,         , 
you need to get at them.

 
   ,         , 
So the only thing I really have
to explain to you is, how

 
   ,         , 
do we evaluate combinations?

 
   ,         , 

 
   ,          , 
OK, let's see.


    ,         , 
So first I want to get
the first slide.


   ,         , 
Here is the rule for evaluating
an application.


   ,          , 


    ,          ,
What we have is a rule that
says, to evaluate a


    ,         , 
combination, there are
two parts, three


    ,          , 
parts to the rule.


    ,         , 
The combination has
several parts.


   ,         , 
It has operators and
it has operands.


   ,          , 
The operator returns
into a procedure.

 
    ,         , 
If we evaluate the operator,
we will get a procedure.


   ,         , 
And you saw, for example, how
I'll type at the machine and


   ,         , 
out came compound procedure
something or other.


   ,         , 
And the operands produce
arguments.


   ,         , 
Once we've gotten the operator
evaluated to get a procedure,


   ,         ,
and the argument is evaluated
to get argument  


   ,        , 
the operand's value
to get arguments  


   ,         , 
we apply the procedure to these
arguments by copying the


   ,         , 
body of the procedure, which
is the expression that the


   ,         ,
procedure is defined
in terms of.

 
   ,        ,
What is it supposed to do?


   ,        ,
Substituting the argument
supplied for the formal


   ,        , 
parameters of the procedure,
the formal parameters being


   ,         ,
the names defined by the
declaration of the procedure.


   ,         ,
Then we evaluate the resulting
new body, the body resulting


    ,         , 
from copying the old body with
the substitutions made.


    ,          ,
It's a very simple rule, and
we're going to do it very


    ,        ,
formally for a little while.


   ,        , 
Because for the next few
lectures, what I want you to


   ,         , 
do is to say, if I don't
understand something, if I

 
   ,         , 
don't understand something, be
very mechanical and do this.


   ,         , 


   ,         , 
So let's see.


   ,         , 
Let's consider a particular
evaluation, the one we were


   ,         , 
talking about before.


   ,         , 
The sum of the squares
of  and .


   ,         ,


   ,        ,
What does that mean?


   ,        ,
It says, take  


   ,        , 
well, I could find out what's
on the square   it's some

 
   ,         ,
procedure, and I'm not going
to worry about the


   ,        , 
representation, and I'm not
going to write it on the


   ,         ,
blackboard for you.


   ,         , 
And I have that  represents
some number, but if I have to


    ,         , 
repeat that number, I can't
tell you the number.


   ,         , 
The number itself is some
abstract thing.


   ,         , 
There's a numeral which
represents it, which I'll call


   ,         , 
, and I'll use that
in my substitution.


   ,          , 
And  is also a number.


    ,          , 
I'm going to substitute  for
x and  for y in the body of

 
    ,          , 
this procedure that
you see over here.


    ,         , 
Here's the body of
the procedure.


   ,         ,
It corresponds to this


   ,        , 
combination, which is an addition.


   ,         ,


   ,        , 
So what that reduces to, as a
reduction step, we call it, is


   ,          , 
the sum of the square of
 and the square of .


    ,         ,
Now, what's the next step
I have to do here?


   ,        ,
I say, well, I have
to evaluate this.


   ,         ,
According to my rule, which you
just saw on that overhead

 
    ,        , 
or slide, what we had
was that we have to


   ,         , 
evaluate the operands  


   ,         , 
and here are the operands,
here's one and


   ,         , 
here's the next operand  


   ,         ,
and how we have to evaluate
procedure.


   ,        , 
The order doesn't matter.


   ,         , 
And then we're going to apply
the procedure, which is plus,


   ,         , 
and magically somehow that's
going to produce the answer.


   ,          ,
I'm not to open up plus
and look inside of it.


    ,         , 
However, in order to evaluate
the operand, let's pick some

 
    ,          , 
arbitrary order and do them.


    ,          , 
I'm going to go from
right to left.


    ,          , 
Well, in order to evaluate
this operand, I have to


    ,         , 
evaluate the parts of
it by the same rule.


   ,         , 
And the parts are I have to find
out what square is   it's


   ,         , 
some procedure, which has
a formal parameter x.


   ,         , 
And also, I have an operand
which is , which I have to


   ,         , 
substitute for x in the
body of square.


   ,         , 
So the next step is basically to
say that this is the sum of


   ,          , 
the square of  and the
product of  and .

 
    ,         , 
Of course, I could open up
asterisk if I liked  


   ,         , 
the multiplication operation  


   ,         ,
but I'm not going to do that.


   ,         , 
I'm going to consider
that primitive.


    ,         , 
And, of course, at any level of
detail, if you look inside


   ,         , 
this machine, you're going to
find that there's multiple


   ,         , 
levels below that that
you don't know about.


   ,         , 
But one of the things we
have to learn how to


   ,          , 
do is ignore details.


    ,          , 
The key to understanding
complicated things is to know


    ,          , 
what not to look at and
what not compute

 
    ,          ,
and what not to think.

 
    ,        , 
So we're going to stop this
one here and say, oh, yes,

 
   ,         , 
this is the product
of two things.

 
   ,         , 
We're going to do it now.

 
   ,         , 
So this is nothing more
than the sum of the

 
   ,         , 
square of  and .

 
   ,         , 
And now I have another thing I
have to evaluate, but that

 
   ,         , 
square of , well, it's
the same thing.

 
   ,         , 
That's the sum of the product
of  and  and , which is

 
   ,         , rst of all it's a procedure
that's defined on rectangles.


  he basic method
of doing substitutions.


   ,        , 
And I warn you that this is not
a perfect description of


   ,         ,
what the computer does.


   ,       ,
But it's a good enough
description for the problems


  ,        ,
that we're going to have in the
next few lectures that you


   ,        , 
should think about
this religiously.


   ,         , 
And this is how the machine
works for now.


   ,         , 
Later we'll get more detailed.


   ,        ,

 
  ,       ,
Now, of course, I made a
specific choice of the order


  ,       , 
of evaluation here.


  ,        , 
There are other possibilities.


  ,        , 
If we go back to the telestrator
here and look at


  ,        , 
the substitution rule, we see
that I evaluated the operator


  ,        , 
to get the procedures, and I
evaluated the operands to get


  ,        , 
the arguments first, before
I do the application.


  ,        , 
It's entirely possible, and
there are alternate rules


  ,        , 
called normal order evaluation
whereby you can do the


  ,        , 
substitution of the expressions
which are the

 
  ,        , 
operands for the formal
parameters inside the body


  ,        , 
first. And you'll get also
the same answer.


  ,         , 
But right now, for concreteness,
and because this


   ,        , 
is the way our machine really
does it, I'm going to give you


  ,        , 
this rule, which has
a particular order.


  ,        , 
But that order is to some
extent arbitrary, too.


  ,         , 


   ,         , 
In the long run, there are some
reasons why you might


   ,         , 
pick one order or another,
and we'll get to that


   ,         , 
later in the subject.

 
   ,        , 


  ,        ,
OK, well now the only other
thing I have to tell you about


  ,       , 
just to understand what's going
on is let's look at the


  ,        , 
rule for conditionals.


  ,        ,
Conditionals are very simple,
and I'd like to examine this.


  ,       , 
A conditional is something
that is if   there's also


  ,        , 
cond, of course  


  ,        , 
but I'm going to give names to
the parts of the expression.


  ,        , 
There's a predicate, which
is a thing that is


  ,         ,
either true or false.

 
   ,       , 
And there's a consequent, which
is the thing you do if


  ,        , 
the predicate is true.


  ,        , 
And there's an alternative,
which is the thing you do if


  ,        , 
the predicate is false.


  ,        , 
It's important, by the way, to
get names for, to get names


  ,         , 
for, the parts of things, or
the parts of expressions.


   ,         , 
One of the things that every
sorcerer will tell you is if


   ,         , 
you have the name of a spirit,
you have power over it.


   ,        , 
So you have to learn these names
so that we can discuss


  ,        , 
these things.

 
  ,        , 
So here we have a predicate,
a consequent, and an


  ,        , 
alternative.


  ,        , 
And, using such words, we see
that an if expression, the


  ,        , 
problems you evaluate to the
predicate expression, if that


  ,        , 
yields true, then you then go on
to evaluate the consequent.


  ,        ,
Otherwise, you evaluate the
alternative expression.


  ,       , 


  ,        , 
So I'd like to illustrate that
now in the context of a


  ,        ,
particular little program.


  ,       , 
Going to write down a
program which we're

 
  ,        , 
going to see many times.


  ,        , 


  ,        , 
This is the sum of x and y done
by what's called Peano


  ,        , 
arithmetic, which is all we're
doing is incrementing and


  ,         , 
decrementing.


   ,         ,
And we're going to see this
for a little bit.


   ,        , 
It's a very important program.


   ,        , 
If x equals o, then
the result is y.


  ,        , 
Otherwise, this is the sum of
the decrement of x and the


  ,         , 
increment of y.

 
   ,        , 


  ,        , 
We're going to look at this
a lot more in the future.


  ,        , 
Let's look at the overhead.


  ,        , 
So here we have this procedure,
and we're going to


  ,        , 
look at how we do the
substitutions, the sequence of


  ,        , 
substitutions.


  ,        , 
Well, I'm going to try and
add together  and .


  ,         , 
Well, using the first rule
that I showed you, we


   ,        , 
substitute  for x and
 four y in the


  ,        , 
body of this procedure.

 
  ,        , 
The body of the procedure is the
thing that begins with if


  ,        , 
and finishes over here.


  ,        , 
So what we get is, of course,
if  is  , then


  ,        ,
the result is .


  ,       , 
Otherwise, it's the sum of the
decrement of  and the


  ,         , 
increment of .


   ,         , 
But I'm not going to worry
about these yet


   ,         , 
because  is not  .


   ,         , 
So the answer is not .


   ,        , 
Therefore, this if reduces
to an evaluation of the


  ,        , 
expression, the sum to the
decrement of  and the

 
  ,        , 
increment of .

 
  ,        , 
Continuing with my evaluation,
the increment I presume to be

 
  ,        ,
primitive, and so
I get a  there.

 
  ,       ,
OK, and then the decrement is
also primitive, and I get a .

 
  ,       , 
And so I change the problem
into a simpler problem.

 
  ,        , 
Instead of adding  to
, I'm adding  to .

 
  ,        , 
The reason why this is a simpler
problem is because I'm

 
  ,         , 
counting down on x, and
eventually, then, x will be  .

 
   ,        , 

 
  ,        ,
So, so much for the
substitution rule.


  ,       , 
In general, I'm not going to
write down intermediate steps


  ,        , 
when using substitutions having
to do with ifs, because


  ,        , 
they just expand things
to become complicated.


  ,        , 
What we will be doing is saying,
oh, yes, the sum of 


  ,         ,
and  results in the sum of 
and  and reduces to the sum


   ,        ,
of  and , which, in fact,
reduces to the sum of  and ,


   ,       , 
which reduces to the sum of
  and  over here, which


  ,        , 
reduces to a .


  ,        , 
That's what we're going
to be seeing.

 
  ,         ,
Are there any questions for
the first segment yet?


   ,       ,
Yes?


  ,       ,
STUDENT  You're using 
plus and minus  plus.


  ,       , 
Are those primitive
operations?


  ,        , 
PROFESSOR  Yes.


  ,        , 
One of the things you're going
to be seeing in this subject


  ,        , 
is I'm going to, without
thinking about it, introduce


  ,        , 
more and more primitive
operations.


  ,        ,
There's presumably some large
library of primitive


  ,       , 
operations somewhere.

 
  ,        , 
But it doesn't matter that
they're primitive  


  ,        , 
there may be some manual
that lists them all.


  ,        ,
If I tell you what they do,
you say, oh, yes, I


  ,       , 
know what they do.


  ,        ,
So one of them is the
decrementor  


  ,        , 
minus  plus   and the
other operation is


   ,        , 
increment, which is  plus.


  ,        , 
Thank you.


  ,        ,
That's the end of the
first segment.


  ,       , 
[MUSIC PLAYING BY J.S. BACH]

 
  ,        , 
PROFESSOR  Now that we have a
reasonably mechanical way of


  ,        ,
understanding how a program
made out of procedures and


  ,       , 
expressions evolves a process,
I'd like to develop some


  ,        , 
intuition about how particular
programs evolve particular


  ,        , 
processes, what the shapes of
programs have to be in order


  ,        , 
to get particular shaped
processes.


  ,        , 
This is a question about,
really, pre visualizing.


  ,        , 
That's a word from
photography.


  ,        , 
I used to be interested in
photography a lot, and one of


  ,        , 
the things you discover when
you start trying to learn

 
  ,        , 
about photography is that you
say, gee, I'd like to be a


  ,        , 
creative photographer.


  ,         , 
Now, I know the rules, I push
buttons, and I adjust the


   ,         , 
aperture and things like that.


   ,         , 
But the key to being a creative
person, partly, is to


   ,         ,
be able to do analysis
at some level.


   ,       , 
To say, how do I know what it
is that I'm going to get on


  ,        , 
the film before I
push the button.


  ,        ,
Can I imagine in my mind the
resulting image very precisely


  ,       ,
and clearly as a consequence of
the particular framing, of

 
  ,       , 
the aperture I choose, of the
focus, and things like that?


  ,        ,
That's part of the art of doing
this sort of thing.


  ,       , 
And learning a lot
of that involves


  ,         , 
things like test strips.


   ,        , 
You take very simple images that
have varying degrees of


  ,        , 
density in them, for example,
and examine what those look


  ,        , 
like on a piece of paper when
you print them out.


  ,        , 
You find out what is the range
of contrasts that you can


  ,        , 
actually see.


  ,        , 
And what, in a real scene,
would correspond to the

 
  ,         , 
various levels and zones
that you have of


   ,         , 
density in an image.


   ,         , 
Well, today I want to look at
some very particular test


   ,        , 
strips, and I suppose one of
them I see here is up on the


  ,        , 
telestrator, so we should
switch to that.


  ,        , 
There's a very important, very
important pair of programs for


  ,        ,
understanding what's going on in
the evolution of a process


  ,       , 
by the execution of a program.


  ,        ,
What we have here are
two procedures


  ,        , 
that are almost identical.

 
   ,        , 


  ,        , 
Almost no difference between
them at all.


  ,        , 
It's a few characters that
distinguish them.


  ,        , 
These are two ways of adding
numbers together.


  ,        , 
The first one, which you see
here, the first one is the sum


  ,         , 
of two numbers   just
what we did before  


   ,        , 
is, if the first one is
 , it's the answer


  ,        ,
of the second one.


  ,       , 
Otherwise, it's the sum of the
decrement of the first and the


  ,        , 
increment of the second.

 
  ,          , 
And you may think of that
as having two piles.


    ,          , 
And the way I'm adding these
numbers together to make a


    ,          , 
third pile is by moving marbles
from one to the other.


    ,         , 
Nothing more than that.


   ,         , 
And eventually, when I run
out of one, then the


   ,         , 
other is the sum.


   ,          , 
However, the second procedure
here doesn't do it that way.


    ,         , 
It says if the first number
is  , then the


   ,         , 
answer is the second.


   ,         , 
Otherwise, it's the increment of
the sum of the decrement of


   ,         , 
the first number
and the second.

 
   ,         , 
So what this says is add
together the decrement of the

 
   ,         , 
first number and the second   a
simpler problem, no doubt  

 
   ,         , 
and then change that result
to increment it.

 
   ,         ,
And so this means that if you
think about this in terms of

 
   ,        , 
piles, it means I'm holding
in my hand the

 
   ,         , 
things to be added later.

 
   ,         , 
And then I'm going
to add them in.

 
   ,         , 
As I slowly decrease one pile
to  , I've got what's left

 
   ,        , 
here, and then I'm going
to add them back.

 
  ,         , 
Two different ways of adding.


   ,         , 
The nice thing about these two
programs is that they're


   ,         , 
almost identical.


   ,         , 
The only thing is where
I put the increment.


   ,        , 
A couple of characters
moved around.


  ,        , 
Now I want to understand the
kind of behavior we're going


  ,        ,
to get from each of these
programs. Just to get them


  ,       , 
firmly in your mind  


  ,        , 
I usually don't want to
be this careful  


  ,        , 
but just to get them firmly in
your mind, I'm going to write

 
  ,        ,
the programs again on the
blackboard, and then I'm going


  ,       , 
to evolve a process.


  ,        , 
And you're going to
see what happens.


  ,        , 
We're going to look at the
shape of the process as a


  ,        , 
consequence of the program.


  ,        , 
So the program we started with
is this  the sum of x and y


  ,        , 
says if x is  , then
the result is y.


  ,        ,
Otherwise, it's the sum of the
decrement of x and the


  ,       , 
increment of y.


  ,         , 

 
   ,         ,
Now, supposing we wish to do
this addition of  and , the


   ,        ,
sum of  and , well,
what is that?


   ,       , 
It says that I have to
substitute the arguments for


  ,        , 
the formal parameters
in the body.


  ,        , 
I'm doing that in my mind.


  ,        , 
And I say, oh, yes,  is
substituted for x, but  is


  ,        , 
not  , so I'm going to go
directly to this part and


  ,         , 
write down the simplified
consequent here.


   ,        , 
Because I'm really interested
in the behavior of addition.


  ,        ,
Well, what is that?

 
  ,       , 
That therefore turns into
the sum of  and .


  ,        , 
In other words, I've reduced
this problem to this problem.


  ,        , 
Then I reduce this problem to
the sum of  and , and then,


  ,        , 
going around again once, I
get the sum of   and .


  ,        , 
And that's one where x equals  
so the result is y, and so I


  ,        , 
write down here a .


  ,         , 
So this is the behavior of the
process evolved by trying to


   ,         , 
add together  and 
with this program.


   ,         ,
For the other program, which
is over here, I will define


   ,       ,
the sum of x and y.

 
  ,       ,
And what is it?


  ,       , 


  ,        ,
If x is  , then the result
is y   almost the same  


  ,       ,
otherwise the increment
of the sum of the


  ,        , 
decrement of x and y.


   ,        , 


  ,        ,
No.


  ,       , 


  ,        , 
I don't have my balancer
in front of me.


  ,        ,
OK, well, let's do it now.

 
  ,        , 
The sum of  and .


   ,         , 
Well, this is actually a little
more interesting.


   ,         , 
Of course,  is not   as before,
so that results in the


   ,        , 
increment of the sum of the
decrement of x, which is  and


  ,        , 
, which is the increment
of the sum of  and  


  ,        , 
whoops  the increment
of the increment.


  ,         ,
What I have to do now is compute
what this means.


   ,       , 
I have to evaluate this.


  ,        , 
Or what that is, the result
of substituting  and


  ,        , 
 for x and y here.

 
  ,        , 
But that is the increment of the
sum of  and , which is  


  ,        , 
well, now I have
to expand this.


  ,        , 
Ah, but that's the increment
of the increment of the


  ,        , 
increment of the
sum of   and .


  ,        ,


  ,        , 
Ah, but now I'm beginning
to find things I can do.


   ,         , 
The increment of the increment
of the increment of   well,


   ,         , 
the sum of   and  is .


   ,        , 


  ,        ,
The increment of  is .

 
  ,        , 
So this is the increment of the
increment of , which is


   ,        ,
the increment of
, which is .


  ,       , 
Two different ways of
computing sums.


  ,        , 
Now, let's see.


  ,        , 
These processes have very
different shapes.


  ,        , 
I want you to feel
these shapes.


  ,         , 
It's the feeling for the
shapes that matters.


   ,        , 
What's some things we
can see about this?


  ,        , 
Well, somehow this is
sort of straight.


  ,        , 
It goes this way   straight.

 
  ,        , 
This right edge doesn't vary
particularly in size.


  ,        , 
Whereas this one, I see that
this thing gets bigger and


  ,        , 
then it gets smaller.


  ,         , 


   ,         , 
So I don't know what
that means yet,


   ,         ,
but what are we seeing?


   ,        , 
We're seeing here that somehow
these increments are expanding


   ,        ,
out and then contracting back.


  ,       , 
I'm building up a bunch
of them to do later.


  ,        , 
I can't do them now.


  ,        , 
There's things to be deferred.

 
  ,        , 
Well, let's see.

 
  ,        , 
I can imagine an abstract
machine.

 
  ,        , 
There's some physical machine,
perhaps, that could be built

 
  ,        , 
to do it, which, in fact,
executes these programs

 
  ,        , 
exactly as I tell you,
substituting character strings

 
  ,        , 
in like this.

 
  ,        , 
Such a machine, the number of
such steps is an approximation

 
  ,         ,
of the amount of
time it takes.

 
   ,       , 
So this way is time.

 
  ,        , 


  ,        , 
And the width of the thing is
how much I have to remember in


  ,         , 
order to continue the process.


   ,        ,
And this much is space.


  ,       , 


  ,        ,
And what we see here is a
process that takes a time


  ,        , 
which is proportional
to the argument x.


   ,         , 
Because if I made x larger by ,
then I'd had an extra line.


   ,         , 


   ,        ,
So this is a process which
is space   sorry  

 
  ,       , 
time.


  ,         , 
The time of this process is
what we say order of x.


   ,        , 
That means it is proportional
to x by some constant of


  ,        , 
proportionality, and I'm not
particularly interested in


  ,        , 
what the constant is.


  ,        , 
The other thing we see here is
that the amount of space this


  ,        , 
takes up is constant, it's
proportional to .


  ,        ,
So the space complexity
of this is order of .


  ,       , 
We have a name for
such a process.


  ,        , 
Such a process is called
an iteration.

 
  ,        , 


  ,        , 
And what matters here is not
that some particular machine I


  ,        , 
designed here and talked to
you about and called a


  ,        , 
substitution machine
or whatever  


  ,         , 
substitution model  


   ,         , 
managed to do this in
constant space.


   ,         , 
What really matters is this
tells us a bound.


   ,         , 
Any machine could do this
in constant space.


   ,        ,
This algorithm represented by
this procedure is executable


  ,       , 
in constant space.

 
  ,        , 
Now, of course, the model is
ignoring some things, standard


  ,        , 
sorts of things.


  ,        , 
Like numbers that are bigger
take up more space and so on.


  ,        , 
But that's a level of
abstraction at which I'm


  ,        , 
cutting off.


  ,        , 
How do you represent numbers?


  ,        ,
I'm considering every number
to be the same size.


  ,        , 
And numbers grow slowly for the
amount of space they take


   ,        , 
up and their size.


  ,        , 
Now, this algorithm is different
in its complexity.

 
  ,        , 
As we can see here, this
algorithm has a time


  ,        , 
complexity which is also
proportional to the input


  ,        , 
argument x.


  ,        ,
That's because if I were to add
 to , if I made a larger


  ,       , 
problem, which is larger by 
here, then I'd add a line at


  ,        , 
the top and I'd add a
line at the bottom.


  ,        , 


  ,         ,
And the fact that it's a
constant amount, like this is


   ,        , 
twice as many lines as that,
is not interesting at the


   ,         ,
level of detail I'm talking
about right now.

 
   ,       ,
So this is a time complexity
order of the input argument x.


  ,       ,
And space complexity, well,
this is more interesting.


  ,       , 
I happen to have some overhead,
which you see over


  ,        , 
here, which is constant
approximately.


  ,        , 
Constant overhead.


  ,        , 
But then I have something which
increases and decreases


  ,        , 
and is proportional to
the input argument x.


  ,        , 
The input argument x is .


  ,        , 
That's why there are three
deferred increments sitting


  ,        ,
around here.

 
  ,       , 
See?


  ,        ,
So the space complexity
here is also order x.


  ,       ,
And this kind of process, named
for the kind of process,


  ,       , 
this is a recursion.


  ,         , 


   ,        ,
A linear recursion, I will call
it, because of the fact


  ,       , 
that it's proportional to
the input argument in


  ,        , 
both time and space.


  ,          , 


    ,          ,
This could have been
a linear iteration.

 
    ,        , 


   ,         , 
So then what's the essence
of this matter?


   ,         ,
This matter isn't so obvious.


   ,        , 
Maybe there are other models by
which we can describe the


   ,         , 
differences between iterative
and recursive processes.


   ,         , 
Because this is hard now.


   ,         ,
Remember, we have   those are
both recursive definitions.


   ,        ,
What we're seeing there are both
recursive definitions,


   ,        , 
definitions that refer to the
thing being defined in the


   ,         , 
definition.

 
   ,         , 
But they lead to different
shape processes.


   ,         , 
There's nothing special about
the fact that the definition


   ,         , 
is recursive that leads to
a recursive process.


   ,         , 
OK.


   ,          , 
Let's think of another model.


    ,         , 
I'm going to talk to you
about bureaucracy.


   ,         , 
Bureaucracy is sort
of interesting.


   ,        , 
Here we see on a slide
an iteration.


  ,         , 
An iteration is sort of
a fun kind of process.


   ,         , 
Imagine that there's a
fellow called GJS  


   ,         , 
that stands for me  

 
   ,        , 
and he's got a problem  he wants
to add together  and .

 
  ,        ,
This fella here wants to
add together  and .

 
  ,       , 
Well, the way he's going to do
it   he's lazy   is he's going

 
  ,        , 
to find somebody else
to help him do it.

 
  ,        , 
They way he finds someone
else to  

 
  ,        ,
he finds someone else to help
him do it and says, well, give

 
  ,       ,
me the answer to  and  and
return the result to me.

 
  ,       ,
He makes a little piece of paper
and says, here, here's a

 
  ,       , 
piece of paper   you go ahead
and solve this problem and

 
  ,        , 
give the result back to me.


  ,        , 
And this guy, of course,
is lazy, too.


  ,        , 
He doesn't want to see this
piece of paper again.


  ,        , 
He says, oh, yes, produce a new
problem, which is the sum


  ,         , 
of  ad , and return the
result back to GJS.


   ,        , 
I don't want to see it again.


  ,        , 
This guy does not want to
see this piece of paper.


  ,         ,
And then this fellow makes a
new problem, which is the


   ,        , 
addition of the sum of  and
, and he give it to this


   ,         , 
fella and says, produce that
answer and returned it to GJS.

 
   ,        , 
And that produces a problem,
which is to add together   and


  ,        , 
, and give the result to GJS.


  ,        , 
This fella finally just says,
oh, yeah, the answer is , and


  ,        , 
sends it back to GJS.


  ,         , 
That's what an iteration is.


   ,        , 
By contrast, a recursion
is a slightly


  ,        , 
different kind of process.


  ,        , 


  ,        , 
This one involves more
bureaucracy.


  ,         , 
It keeps more people busy.

 
   ,        , 
It keeps more people employed.


  ,        , 
Perhaps it's better
for that reason.


  ,        , 
But here it is  I want the
answer to the problem  and .


  ,         , 
So I make a piece of paper that
says, give the result


   ,        , 
back to me.


  ,        , 
Give it to this fella.


  ,        ,
This fellow says, oh, yes, I
will remember that I have to


  ,       , 
add later, and I want to get the
answer the problem  plus


  ,        , 
, give that one to Harry,
and have the results


  ,        , 
sent back to me  

 
  ,        , 
I'm Joe.


  ,         ,
When the answer comes back from
Harry, which is a , I


   ,        ,
will then do the increment and
give that  back to GJS.


   ,        , 
So there are more pieces of
paper outstanding in the


   ,        ,
recursive process than
the iteration.


  ,       , 


  ,        , 
There's another way to think
about what an iteration is and


  ,        , 
the difference between an
iteration and a recursion.


  ,        ,
You see, the question is, how
much stuff is under the table?


  ,       , 
If I were to stop  

 
  ,        , 
supposing I were to kill this
computer right now, OK?


  ,        ,
And at this point I lose the
state of affairs, well, I


  ,        , 
could continue the computation
from this point but everything


   ,        , 
I need to continue the
computation is in the


  ,        ,
valuables that were defined
in the procedure that the


  ,       ,
programmer wrote for me.


  ,       ,
An iteration is a system that
has all of its state in


  ,       , 
explicit variables.


  ,        , 


  ,         , 
Whereas the recursion is
not quite the same.

 
   ,         , 
If I were to lose this pile of
junk over here, and all I was


   ,         ,
left with was the sum of 
and , that's not enough


   ,       , 
information to continue the
process of computing out the 


  ,        , 
from the original problem of
adding together  of .


  ,         , 
Besides the information that's
in the variables of the formal


   ,        , 
parameters of the program,
there is also information


  ,        , 
under the table belonging to
the computer, which is what


  ,         , 
things have been deferred
for later.


   ,        ,
And, of course, there's a
physical analogy to this,


  ,       ,
which is in differential
equations, for example, when

 
  ,       ,
we talk about something
like drawing a circle.


  ,       , 
Try to draw a circle, you make
that out of a differential


  ,        , 
equation which says the change
in my state as a function of


  ,        , 
my current state.


  ,        , 
So if my current state
corresponds to particular


  ,        ,
values of y and x, then I can
compute from them a derivative


  ,        , 
which says how the state
must change.


   ,         , 
And, in fact, you can see this
was a circle because if I


   ,        , 
happen to be, say, at this place
over here, at ,  , for


  ,        , 
example, on this graph, then it
means that the derivative

 
  ,        , 
of y is x, which we
see over here.


  ,        , 
That's , so I'm going up.


  ,        , 
And the derivative of
x is minus y, which


  ,        , 
means I'm going backwards.


  ,        , 
I'm actually doing nothing at
this point, then I start going


  ,        , 
backwards as y increases.


  ,         ,
So that's how you
make a circle.


   ,       , 
And the interesting thing to see
is a little program that


  ,        ,
will draw a circle
by this method.


  ,       ,
Actually, this won't draw a
circle because it's a forward

 
  ,       , 
oil or integrator and
will eventually


  ,        ,
spiral out and all that.


  ,       ,
But it'll draw a circle
for a while


  ,       , 
before it starts spiraling.


  ,        ,
However, what we see here is two
state variables, x and y.


  ,        , 
And there's an iteration that
says, in order to circle,


   ,         , 
given an x and y, what I want
is to circle with the next


   ,         , 
values of x and y being the old
value of x decrement by y


   ,        , 
times dt where dt is the time
step and the old value of y


  ,        , 
being implemented by x times dt,
giving me the new values


  ,        , 
of x and y.

 
  ,        , 

 
  ,        , 
So now you have a feeling for
at least two different kinds

 
  ,        ,
of processes that can
be evolved by

 
  ,        , 
almost the same program.

 
   ,        ,

 
  ,       , 
And with a little bit of
perturbation analysis like

 
  ,        , 
this, how you change a program
a little bit and see how the

 
  ,        , 
process changes, that's how
we get some intuition.

 
  ,        , 
Pretty soon we're going to use
that intuition to build big,

 
  ,        ,
hairy, complicated


  ,       ,
systems. Thank you.


  ,        ,
[MUSIC PLAYING BY J.S. BACH]


   ,        ,
PROFESSOR  Well, you've just
seen a simple perturbational


   ,       , 
analysis of some programs. I
took a program that was very


  ,        , 
similar to another program and
looked at them both and saw


  ,        , 
how they evolved processes.


  ,         , 
I want to show you some variety
by showing you some


   ,        , 
other processes and shapes they
may have. Again, we're


  ,        , 
going to take very simple
things, programs that you

 
  ,        ,
wouldn't want to ever write.


  ,       ,
They would be probably the worst
way of computing some of


  ,       ,
the things we're going
to compute.


  ,       ,
But I'm just going to show you
these things for the purpose


  ,       , 
of feeling out how to program
represents itself as the rule


  ,        ,
for the evolution
of a process.


  ,        , 
So let's consider a fun thing,
the Fibonacci numbers.


   ,        , 
You probably know about
the Fibonacci numbers.


  ,        , 
Somebody, I can't remember who,
was interested in the


  ,        , 
growth of piles of rabbits.

 
  ,         , 
And for some reason or other,
the piles of rabbits tend to


   ,         , 
grow exponentially,
as we know.


   ,         ,
And we have a nice model for
this process, is that we start


   ,       , 
with two numbers,   and .


  ,        , 
And then every number
after this is the


  ,        ,
sum of the two previous.


  ,        , 
So we have here a .


   ,        , 
Then the sum of these
two is .


  ,        , 
The sum of those two is .


  ,        ,
The sum of those two is .

 
  ,       , 
The sum of those two is .


  ,        , 
The sum of those two is .


  ,        ,
This is .


  ,       , 
.


  ,        , 
.


  ,         , 
Et cetera.


   ,        , 
If we start numbering these
numbers, say this is the


  ,        , 
zeroth one, the first one, the
second one, the third one, the


  ,        , 
fourth one, et cetera.


  ,        , 
This is the  th one, the
 th Fibonacci number.

 
  ,        ,
These numbers grow very fast.
Just like rabbits.


  ,       , 
Why rabbits grow this way I'm
not going to hazard a guess.


  ,         , 
Now, I'm going to try to write
for you the very simplest


   ,         , 
program that computes
Fibonacci numbers.


   ,         ,


   ,       ,
What I want is a program that,
given an n, will produce for


  ,       ,
me Fibonacci event.


  ,       , 


  ,        , 
OK?


  ,        , 

 
  ,        ,
I'll write it right here.


  ,       , 


  ,        ,
I want the Fibonacci of n, which
means the   this is the


  ,       , 
n, and this is Fibonacci of n.


  ,        , 
And here's the story.


  ,        , 
If n is less than , then
the result is n.


  ,        , 
Because that's what these are.


  ,        ,
That's how you start it up.


  ,       , 
Otherwise, the result is the
sum of Fib of n minus  and


  ,          ,
the Fibonacci number,
n minus .

 
    ,         , 


    ,         , 
So this is a very simple, direct
specification of the


   ,         ,
description of Fibonacci numbers
that I gave you when I


   ,        , 
introduced those numbers.


   ,         , 
It represents the recurrence
relation in the simplest


   ,         , 
possible way.


   ,         , 
Now, how do we use
such a thing?


   ,         , 
Let's draw this process.


   ,         , 
Let's figure out
what this does.


   ,         , 
Let's consider something very
simple by computing

 
   ,         , 
Fibonacci of .


   ,         ,


   ,        ,
To compute Fibonacci
of , what do I do?


   ,        ,
Well, it says I have  


   ,        ,
it's not less than .


   ,        ,
Therefore it's the sum
of two things.


   ,        , 
Well, in order to compute that
I have to compute, then,


   ,         , 
Fibonacci of  and
Fibonacci of .


   ,         ,


   ,       , 
In order to compute Fibonacci
of , I have to compute

 
  ,         , 
Fibonacci of  and
Fibonacci of .


   ,         , 


   ,         , 
In order to compute Fibonacci
of , I have to compute


   ,        ,
Fibonacci of  and
Fibonacci of  .


  ,       , 


  ,         ,
In order to compute Fibonacci
of , well, the answer is .


   ,       ,
That's from the base case
of this recursion.


  ,       ,
And in order to compute
Fibonacci of  , well, that


  ,        , 
answer is  , from
the same base.


   ,        ,
And here is a .


  ,       ,
And Fibonacci of  is really
the sum of Fibonacci of .

 
  ,       , 
And Fib of  , in order to
compute that, I get a , and

 
  ,        ,
here I've got a  .

 
  ,       ,

 
  ,        , 
I've built a tree.

 
   ,        ,
Now, we can observe some
things about this tree.

 
  ,       , 
We can see why this is an
extremely bad way to compute

 
  ,        , 
Fibonacci numbers.

 
  ,        , 
Because in order to compute
Fibonacci of , I had to

 
  ,         , 
compute Fibonacci of
's sub tree twice.

 
   ,         , 


   ,         ,
In fact, in order way to add one
more, supposing I want to


   ,       , 
do Fibonacci of , what I really
have to do then is


  ,        ,
compute Fibonacci of 
plus Fibonacci of .


  ,       , 
But Fibonacci of 's sub tree
has already been built.


  ,        , 


  ,        ,
This is a prescription
for a process that's


  ,        , 
exponential in time.


   ,        , 
To add , I have to multiply by
something because I take a


  ,        , 
proportion of the existing thing
and add it to itself to

 
  ,        , 
add one more step.


  ,        , 
So this is a thing whose time
complexity is order of  


  ,         , 
actually, it turns out
to be Fibonacci  


   ,        , 
of n.


  ,        , 


  ,         , 
There's a thing that grows
exactly at Fibonacci numbers.


   ,         , 
It's a horrible thing.


   ,         , 
You wouldn't want to do it.


   ,         , 
The reason why the time has to
grow that way is because we're


   ,         , 
presuming in the model  

 
   ,         , 
the substitution model that I
gave you, which I'm not doing


   ,        , 
formally here, I sort of now
spit it out in a simple way  


  ,        , 
but presuming that everything
is done sequentially.


  ,        , 
That every one of these
nodes in this


  ,        , 
tree has to be examined.


  ,        , 


  ,        , 
And so since the number of
nodes in this tree grows


  ,        , 
exponentially, because I add a
proportion of the existing


  ,        , 
nodes to the nodes I already
have to add , then I know


  ,        , 
I've got an exponential
explosion here.

 
  ,         , 
Now, let's see if we can
think of how much


   ,        , 
space this takes up.


  ,        , 


  ,        , 
Well, it's not so bad.


  ,        ,
It depends on how much we have
to remember in order to


  ,        , 
continue this thing running.


   ,        , 
Well, that's not so hard.


  ,        ,
It says, gee, in order to know
where I am in this tree, I


  ,       , 
have to have a path
back to the root.


  ,        , 
In other words, in order to  
let's consider the path I

 
  ,        ,
would have to execute this.


  ,        , 
I'd say, oh, yes, I'm going
to go down here.


   ,         , 
I don't care which
direction I go.


   ,         ,
I have to do this.


   ,        ,
I have to then do this.


   ,        ,
I have to traverse this tree
in a sort of funny way.


   ,       ,


  ,       , 
I'm going to walk this
nice little path.


  ,        , 
I come back to here.


  ,        ,
Well, I've got to remember where
I'm going to be next.

 
  ,        , 
I've got to keep that in mind.


   ,        , 
So I have to know
what I've done.


  ,        , 
I have to know what's left.


  ,        ,
In order to compute Fibonacci of
, at some point I'm going


  ,       , 
to have to be down here.


  ,        , 
And I have to remember that I
have to go back and then go


  ,        , 
back to here to do
an addition.


  ,        ,
And then go back to here to do
an addition to something I


  ,       ,
haven't touched yet.


  ,        , 
The amount of space that
takes up is the

 
   ,        ,
path, the longest path.


  ,       , 
How long it is.


  ,        , 
And that grows as n.


  ,         , 
So the space  


   ,        ,
because that's the length
of the deepest


  ,       , 
line through the tree  


  ,        , 
the space is order of n.


  ,        , 
It's a pretty bad process.


  ,         ,


   ,       , 
Now, one thing I want to see
from this is a feeling of

 
  ,        , 
what's going on here.


  ,        , 
Why are there  


  ,         ,
how is this program related
to this process?


   ,       , 
Well, what are we seeing here?


  ,        , 
There really are only
two sorts of things


  ,        , 
this program does.


  ,        , 
This program consists of
two rules, if you will.


  ,        ,
One rule that says Fibonacci of
n is this sum that you see


  ,       , 
over here, which is a node
that's shaped like this.


  ,        ,
It says that I break up
something into two parts.

 
  ,       , 


  ,        , 
Under some condition over here
that n is greater than , then


  ,        , 
the node breaks up
into two parts.


  ,        , 
Less than .


  ,        , 
No.


  ,        , 
Greater than .


  ,         , 
Yes.


   ,         ,
The other possibility is
that I have a reduction


   ,        , 
that looks like this.


   ,         , 


   ,         , 
And that's this case.

 
   ,        , 
If it's less than , the
answer is n itself.

 
  ,        , 
So what we're seeing here is
that the process that got

 
  ,        , 
built locally at every place is
an instance of this rule.

 
  ,        , 
Here's one instance
of the rule.

 
  ,        , 
Here is another instance
of the rule.

 
  ,        , 
And the reason why people think
of programming as being

 
  ,        , 
hard, of course, is because
you're writing down a general

 
  ,        , 
rule, which is going to be used
for lots of instances,

 
  ,        , 
that a particular instance  

 
  ,        ,
it's going to control each
particular instance for you.


  ,       , 
You've got to write down
something that's a general in


  ,        ,
terms of variables, and you
have to think of all the


  ,        , 
things that could possibly fit
in those variables, and all


   ,        ,
those have to lead to the
process you want to work.


  ,       , 
Locally, you have to break up
your process into things that


  ,        , 
can be represented in
terms of these very


  ,        , 
specific local rules.


  ,         , 


   ,         ,
Well, let's see.

 
   ,        , 
Fibonaccis are, of course,
not much fun.


   ,         , 
Yes, they are.


   ,        , 
You get something called the
golden ratio, and we may even


  ,        , 
see a lot of that some time.


  ,        , 
Well, let's talk about
another thing.


  ,         , 
There's a famous game called the
Towers of Hanoi, because I


   ,        , 
want to teach you how to think
about these recursively.


  ,        ,
The problem is this one  I have
a bunch of disks, I have


  ,       , 
a bunch of spikes, and it's
rumored that somewhere in the


  ,        , 
Orient there is a  high tower,
and the job of various

 
  ,        , 
monks or something is to move
these spikes in some


  ,        , 
complicated pattern
so eventually  


  ,        , 
these disks  


  ,        , 
so eventually I moved all
of the disks from one


  ,         ,
spike to the other.


   ,       , 
And if it's  high, and it's
going to take  to the th


  ,        ,
moves, then it's a long time.


  ,        , 
They claim that the universe
ends when this is done.


   ,         , 
Well, let's see.


   ,         , 
The way in which you would
construct a recursive process

 
   ,        , 
is by wishful thinking.


  ,        ,
You have to believe.


  ,       , 
So, the idea.


  ,         , 
Supposing I want to move this
pile from here to here, from


   ,        ,
spike one to spike two, well,
that's not so hard.


  ,       , 
See, supposing somehow, by some
magic   because I've got


  ,        , 
a simpler problem  


  ,        , 
I move a three high
pile to here  


  ,        ,
I can only move one
disk at a time, so


  ,       ,
identifying how I did it.

 
  ,       , 
But supposing I could do that,
well, then I could just pick


  ,        ,
up this disk and move it here.


  ,       , 
And now I have a
simple problem.


  ,        , 
I have to move a three high
tower to


  ,        , 
here, which is no problem.


  ,        , 
So by two moves of a three high
tower plus one move of a


  ,        , 
single object, I can move the
tower from here to here.


  ,        , 


  ,        , 
Now, whether or not  


  ,         , 
this is not obvious in any
deep way that this works.

 
   ,         ,
And why?


   ,        , 
Now, why is it the case that I
can presume, maybe, that I can


   ,         , 
move the three high tower?


   ,        , 


  ,        , 
Well, the answer is because I'm
always counting down, and


  ,        , 
eventually I get down to
zero high tower, and a


  ,         ,
zero high tower requires
no moves.


   ,       ,
So let's write the algorithm
for that.


  ,       , 
Very easy.


  ,        , 
I'm going to label these towers
with numbers, but it

 
  ,        , 
doesn't matter what they're
labelled with.


  ,        ,
And the problem is to move an
n high tower from a spike


  ,       ,
called From to a spike called
To with a particular spike


  ,       ,
called Spare.


  ,       ,
That's what we're going to do.


  ,        , 


   ,        ,
Using the algorithm I informally
described to you,


  ,         ,
move of a n high tower from
From to To with a Spare.


    ,         ,


    ,        , 
Well, I've got two cases, and
this is a case analysis, just

 
   ,         , 
like it is in all the other
things we've done.


   ,          ,


    ,        , 
If n is  , then  


   ,         ,
I'm going to put out
some answers  


   ,        , 
Done, we'll say.


   ,         , 
I don't know what that means.


   ,         ,
Because we'll never use that
answer for anything.


   ,        , 
We're going to do these moves.


   ,         , 
Else.


   ,         , 
I'm going to do a move.

 
   ,          , 


    ,         ,
Move a tower of height
less than n, the


   ,        , 
decrement of n height.


   ,         ,
Now, I'm going to move it
to the Spare tower.


   ,        , 
The whole idea now is to move
this from here to here, to the


   ,         , 
Spare tower   so from
From to Spare  


   ,         ,


   ,        ,
using To as a spare tower.


   ,        , 


   ,        , 
Later, somewhere later, I'm
going to move that same n high

 
  ,        , 
tower, after I've done this.


  ,        , 
Going to move that same n minus
one high tower from the


  ,        , 
Spare tower to the To
tower using the


  ,        , 
From tower as my spare.


  ,        , 


  ,         , 
So the Spare tower to
the To tower using


   ,        ,
the From as the spare.


  ,       , 


  ,        , 
All I have to do now is when
I've gotten it in this


  ,        ,
condition, between these two
moves of a whole tower  


  ,       , 
I've got it into that
condition  

 
  ,         ,
now I just have to
move one disk.

 
   ,        ,
So I'm going to say that some
things are printing a move and

 
   ,        ,
I don't care how it works.

 
   ,       , 

 
  ,        , 
From the To.

 
  ,        , 

 
  ,         , 
Now, you see the reason why I'm
bringing this up at this

 
   ,        ,
moment is this is an almost
identical program to this one

 
  ,       , 
in some sense.


  ,        , 
It's not computing the same
mathematical quantity, it's

 
  ,        , 
not exactly the same tree, but
it's going to produce a tree.

 
  ,        , 
The general way of making these
moves is going to lead

 
  ,        , 
to an exponential tree.

 
  ,        ,
Well, let's do this four high.

 
  ,       , 

 
  ,         , 
I have my little crib sheet here
otherwise I get confused.

 
   ,        , 

 
  ,        , 
Well, what I'm going to put in
is the question of move a

 
  ,         ,
tower of height four from one to
spike two using spike three


   ,       , 
as a spare.

 
  ,        , 
That's all I'm really
going to do.

 
  ,        , 
You know, let's just do it.

 
  ,        , 
I'm not going to worry
about writing out

 
  ,        , 
the traits of this.

 
  ,        , 
You can do that yourself because
it's very simple.

 
  ,        , 
I'm going to move disk
one to disk three.

 
  ,        , 
And how do I get to move
disk one to disk three?

 
  ,        , 
How do I know that?

 
  ,        , 
Well, I suppose I have to look
at the trace a little bit.


  ,        , 
What am I doing here?

 
  ,        , 
Well, and this is not  
n is not zero.

 
  ,        , 
So I'm going to look
down here.

 
  ,        , 
This is going to require
doing two moves.

 
  ,        , 
I'm only going to look
at the first one.

 
  ,        , 
It's going to require moving  

 
  ,        , 

 
  ,        ,
why do I have move tower?

 
  ,       , 
It makes it harder
for me to move.

 
  ,        , 
I'm going to move a three high
tower from the from place,


  ,         , 
which is four, to the
spare, which is two,

 
   ,         , 
using three as my  

 
   ,        , 
no, using from  

 
  ,        ,
STUDENT  [INAUDIBLE PHRASE].

 
  ,       ,
PROFESSOR  Yes.

 
  ,       , 
I'm sorry.

 
  ,        , 
From two  

 
  ,        , 
from one to three using
two as my spare.

 
  ,        , 
That's right.

 
  ,        , 
And then there's another move
over here afterwards.


  ,        , 
So now I say, oh, yes, that
requires me moving a two high

 
  ,        , 
tower from one to two using
three as a spare.

 
  ,        , 
And so, are the same, and that's
going to require me

 
  ,        , 
moving and one high tower
from one to three

 
  ,        , 
using two as a spare.

 
  ,        , 

 
  ,        , 
Well, and then there's lots of
other things to be done.

 
  ,         , 

 
   ,         ,
So I move my one high tower from
one to three using two as

 
   ,       , 
a spare, which I didn't
do anything with.


  ,        , 
Well, this thing just proceeds
very simply.

 
  ,        ,
I move this from one to two.

 
  ,       ,
And I move this disk
from three to two.

 
  ,       ,
And I don't really want
to do it, but I

 
  ,       , 
move from one to three.

 
  ,        , 
Then I move two to one.

 
  ,        , 
Then I move two to three.

 
  ,        , 
Then one to three.

 
  ,        , 
One to two.

 
  ,        , 
Three to two.


  ,        , 
Three to one.

 
  ,        , 
This all got worked out
beforehand, of course.

 
  ,        ,
Two to one.

 
  ,        , 
Three to two.

 
   ,        , 
One to three.

 
  ,        ,
STUDENT  [INAUDIBLE PHRASE].

 
  ,       , 
PROFESSOR  Oh, one to three.

 
  ,        ,
Excuse me.

 
  ,       , 
Thank you.

 
  ,        ,
One to two.


  ,       , 
And then three to two.

 
  ,         ,
Whew.

 
   ,        , 

 
   ,         , 
Now what I'd like you to think
about, you just saw a

 
   ,         , 
recursive algorithm for doing
this, and it takes exponential

 
   ,        ,
time, of course.

 
  ,       , 
Now, I don't know if there's
any algorithm that doesn't

 
  ,        , 
take exponential time  
it has to.

 
  ,        , 
As I'm doing one operation  

 
  ,        , 
I can only move one
thing at a time  


  ,        , 
there's no algorithm
that's not going to

 
  ,         , 
take exponential time.

 
   ,        , 
But can you write an iterative
algorithm rather than a

 
  ,        , 
recursive algorithm
for doing this?

 
  ,        , 

 
  ,         ,
One of the sort of little things
I like to think about.

 
   ,       , 

 
  ,        , 
Can you write one that, in
fact, doesn't break this

 
  ,        , 
problem into two sub problems
the way I described, but

 
  ,        , 
rather proceeds a step at a time
using a more local rule?

 
  ,        , 


  ,         , 
That might be fun.


   ,        , 
Thank you so much for
the third segment.


  ,        , 


  ,        , 
Are there questions?


  ,         , 
STUDENT  [INAUDIBLE] a way to
reduce a tree or recursion


   ,         , 
problem, how do you save the
immediate work you have done


   ,         ,
in computing the Fibonacci
number?


   ,       , 
PROFESSOR  Oh, well, in fact,
one of the ways to do is what


  ,        , 
you just said.

 
  ,        , 
You said, I save the
intermediate work.


  ,        , 
OK?


  ,        , 
Well, let me tell you  


  ,        ,
this, again, we'll see later  


  ,       , 
but suppose it's the case that
anytime I compute anything,


  ,        , 
any one of these Fibonacci
numbers, I remember the table


  ,        , 
that takes only linear time
to look up the answer.


  ,        , 
Then if I ever see it again,
instead of doing the


  ,        ,
expansional tree,
I look it up.


  ,       , 
I've just transformed my problem
into a problem that's

 
  ,        , 
much simpler.


  ,        , 
Now, of course, there are the
way to do this, as well.


  ,        , 
That one's called memoization,
and you'll see it sometime


  ,        , 
later in this term.


  ,        , 
But I suppose there's a very
simple linear time, and, in


  ,        , 
fact, iterative model for
computing Fibonaccis, and


  ,        , 
that's another thing you should
sit down and work out.


  ,         , 
That's important.


   ,         , 
It's important to see
how to do this.


   ,         , 
I want you to practice.

 
   ,        , 
  ,        , 


  ,        , 
PROFESSOR  Well, yesterday
was easy.


  ,        ,
You learned all of the rules
of programming and lived.


  ,      f the stream.


    ,     .


      ,            ,
And so at this point, you're
now certified programmers  


      ,            ,  
it says.


       ,             , 
However, I suppose what we did
is we, aah, sort of got you a


      ,            ,  
little bit of into
an easy state.


      ,             , 
Here, you still believe it's
possible that this might be

 
      ,            , 
programming in BASIC or Pascal
with just a funny syntax.


      ,            , 
Today, that illusion  


      ,            ,
or you can no longer support
that belief.


      ,           , 
What we're going to do
today is going to


      ,            , 
completely smash that.


      ,           , 
So let's start out by writing
a few programs on the


     ,           ,
blackboard that have a lot in
common with each other.


     ,          , 
What we're going to do is try to
make them abstractions that


     ,           , 
are not ones that are easy to
make in most languages.


     ,           ,  
Let's start with some very
simple ones that you can make

 
     ,            ,  
in most languages.


     ,            , 
Supposing I want to write the
mathematical expression which


     ,           ,  
adds up a bunch of integers.


     ,            , 
So if I wanted to write down
and say the sum from i


     ,           , 
equal a to b on i.


     ,           , 
Now, you know that that's an
easy thing to compute in a


     ,           , 
closed form for it, and I'm
not interested in that.


     ,           , 
But I'm going to write
a program that


     ,           , 
adds up those integers.


     ,           , 
Well, that's rather easy to do
to say I want to define the

 
     ,            , 
sum of the integers from
a to b to be  


      ,           , 
well, it's the following
two possibilities.


     ,           , 
If a is greater than b, well,
then there's nothing to be


     ,           ,
done and the answer is zero.


     ,          , 
This is how you're going to
have to think recursively.


     ,           , 
You're going to say if I have
an easy case that I know the


     ,           , 
answer to, just write it down.


     ,           , 
Otherwise, I'm going to try to
reduce this problem to a


     ,           ,  
simpler problem.


     ,            ,   
And maybe in this case, I'm
going to make a subproblem of

 
     ,             , 
the simpler problem and then
do something to the result.


     ,           , 
So the easiest way to do this
is say that I'm going to add


     ,           , 
the index, which in this case is
a, to the result of adding


     ,           , 
up the integers from
a plus  to b.


     ,            ,


      ,           , 
Now, at this point, you should
have no trouble looking at


      ,            , 
such a definition.


      ,            , 
Indeed, coming up with such a
thing might be a little hard


      ,           , 
in synthesis, but being able
to read it at this point


     ,           , 
should be easy.

 
     ,           , 
And what it says to you is,
well, here is the subproblem


     ,           , 
I'm going to solve.


     ,           , 
I'm going to try to add up the
integers, one fewer integer


     ,           , 
than I added up for the
the whole problem.


     ,           , 
I'm adding up the one fewer one,
and that subproblem, once


     ,           , 
I've solved it, I'm going to add
a to that, and that will


     ,           , 
be the answer to this problem.


     ,           ,
And the simplest case, I don't
have to do any work.


     ,          , 
Now, I'm also going to write
down another simple one just


     ,           ,
like this, which is the
mathematical expression, the

 
     ,          , 
sum of the square from
i equal a to b.


     ,           , 
And again, it's a very
simple program.


     ,           , 


     ,           , 
And indeed, it starts
the same way.


     ,           , 


     ,           , 
If a is greater than b, then
the answer is zero.


     ,           , 
And, of course, we're beginning
to see that there's


     ,           , 
something wrong with me writing
this down again.


     ,           , 
It's the same program.


     ,           , 
It's the sum of the square of a
and the sum of the square of

 
     ,           ,
the increment and b.


     ,           , 


      ,           ,  
Now, if you look at these
things, these programs are


     ,            , 
almost identical.


     ,           , 
There's not much to
distinguish them.


     ,            , 
They have the same first clause
of the conditional and


      ,            , 
the same predicate and the
same consequence, and the


      ,            , 
alternatives are very
similar, too.


      ,           , 
They only differ by the fact
that where here I have a,


     ,           ,
here, I have the square of a.

 
     ,          ,  
The only other difference, but
this one's sort of unessential


     ,            , 
is in the name of this procedure
is sum int, whereas


     ,           , 
the name of the procedure
is sum square.


     ,           , 
So the things that vary
between these


     ,           , 
two are very small.


     ,           ,  
Now, wherever you see yourself
writing the same thing down


     ,            , 
more than once, there's
something wrong, and you


     ,            , 
shouldn't be doing it.


      ,           , 
And the reason is not because
it's a waste of time to write


     ,           , 
something down more than once.

 
     ,            , 
It's because there's some idea
here, a very simple idea,


      ,           , 
which has to do with the
sigma notation  


     ,           , 
this much  


     ,            ,
not depending upon what
it is I'm adding up.


      ,           ,  
And I would like
to be able to  


      ,             , 
always, whenever trying to make
complicated systems and


      ,            ,
understand them, it's crucial
to divide the things up into


      ,          ,  
as many pieces as I can, each
of which I understand


     ,            ,  
separately.


     ,            ,  
I would like to understand the
way of adding things up

  
     ,            , 
independently of what it is I'm
adding up so I can do that

 
     ,           , 
having debugged it once and
understood it once and having

 
     ,           ,  
been able to share that among
many different uses of it.

 
     ,            , 
Here, we have another example.

 
     ,            ,  
This is Leibnitz's formula
for finding pi over .

 
      ,            , 
It's a funny, ugly mess.

 
     ,           , 
What is it?

 
     ,            , 
It's something like  over 
times  plus  over  times 

 
      ,           , 
plus  over  times  plus  

 
     ,           , 
and for some reason, things
like this tend to have

 
     ,            , 
interesting values
like pi over .


      ,            , 
But what do we see here?


      ,            , 
It's the same program or almost
the same program.


      ,            , 
It's a sum.


      ,           , 
So we're seeing the figure
notation, although over here,


     ,           , 
we're dealing with incrementing
by , so it's a


     ,            , 
slightly different problem,
which means that over here, I


      ,           , 
have to change a by , as
you see right over here.


     ,           , 
It's not by .


     ,           , 
The other thing, of course,
is that the thing that's

 
     ,           , 
represented by square in the
previous sum of squares, or a


     ,           ,  
when adding up the integers.


     ,            ,  
Well, here, I have a different
thing I'm adding up, a


     ,            , 
different term, which is 
over a times a plus .


     ,           ,
But the rest of this program
is identical.


     ,          , 


     ,            , 
Well, any time we have a bunch
of things like this that are


      ,           ,  
identical, we're going to have
to come up with some sort of


     ,            ,
abstraction to cover them.


     ,          , 
If you think about this, what
you've learned so far is the

 
     ,            , 
rules of some language, some
primitive, some means of


      ,            , 
combination, almost all
of them, the means of


      ,            , 
abstraction, almost
all of them.


      ,           , 
But what you haven't learned is
common patterns of usage.


     ,           , 
Now, most of the time, you learn
idioms when learning a


     ,           , 
language, which is a common
pattern that mean things that


     ,            , 
are useful to know in a flash.


      ,           , 
And if you build a great number
of them, if you're a


     ,           , 
FORTRAN programmer, of course,
everybody knows how to  


     ,           , 
what do you do, for example, to
get an integer which is the

 
     ,           , 
biggest integer in something.


     ,           ,  
It's a classic thing.


     ,            , 
Every FORTRAN programmer
knows how to do that.


     ,           , 
And if you don't know that,
you're in real hot water


     ,           , 
because it takes a long
time to think it out.


     ,           , 
However, one of the things you
can do in this language that


     ,           ,  
we're showing you is not only
do you know something like


     ,            , 
that, but you give the knowledge
of that a name.


     ,            ,  
And so that's what we're going
to be going after right now.


      ,            , 

 
     ,           , 
OK, well, let's see what these
things have in common.


     ,           , 


     ,            , 
Right over here we have what
appears to be a general


      ,            , 
pattern, a general pattern which
covers all of the cases


      ,            ,  
we've seen so far.


      ,            ,  
There is a sum procedure,
which is being defined.


     ,            , 
It has two arguments, which
are a lower bound


     ,           , 
and an upper bound.


     ,           , 
The lower bound is tested to
be greater than the upper


     ,           , 
bound, and if it is greater,
then the result is zero.

 
     ,           , 
Otherwise, we're going to do
something to the lower bound,


     ,           , 
which is the index of the
conversation, and add that


     ,            , 
result to the result of
following the procedure


      ,           ,  
recursively on our lower bound
incremented by some next


     ,            , 
operation with the same upper
bound as I had before.


     ,           , 


     ,           , 
So this is a general pattern,
and what I'd like to do is be


     ,            , 
able to name this general
pattern a bit.


      ,            , 
Well, that's sort of easy,
because one of the things I'm


      ,            , 
going to do right now is  
there's nothing very special

 
      ,           , 
about numbers.


     ,           , 
Numbers are just one
kind of data.


     ,           , 
It seems to me perfectly
reasonable to give all sorts


     ,           , 
of names to all kinds of data,
for example, procedures.


     ,           , 
And now many languages allow you
have procedural arguments,


     ,           , 
and right now, we're
going to talk


     ,           , 
about procedural arguments.


     ,           , 
They're very easy
to deal with.


     ,           ,  
And shortly, we'll do some
remarkable things that are not


     ,            , 
like procedural arguments.

 
     ,           , 
So here, we'll define
our sigma notation.


     ,           , 
This is called sum and it takes
a term, an A, a next


     ,            , 
term, and B as arguments.


      ,           , 
So it takes four arguments,
and there was nothing


     ,           , 
particularly special about me
writing this in lowercase.


     ,           ,  
I hope that it doesn't confuse
you, so I'll write it in


     ,            , 
uppercase right now.


     ,          , 
The machine doesn't care.


    ,          , 


    ,          , 
But these two arguments
are different.

 
    ,          , 
These are not numbers.


    ,          ,  
These are going to be procedures
for computing


    ,           , 
something given a number.


    ,          , 
Term will be a procedure which,
when given an index,


    ,          , 
will produce the value of
the term for that index.


    ,          , 
Next will be given an
index, which will


    ,          ,  
produce the next index.


    ,           ,   
This will be for counting.


    ,            , 
And it's very simple.


    ,           , 

  
     ,          ,  
It's exactly what you see.

 
    ,           , 
If A is greater than B,
then the result is  .

 
    ,           , 
Otherwise, it's the sum of term
applied to A and the sum

 
     ,           , 
of term, next index.

 
     ,          , 

 
    ,          , 
Let me write it this way.

 
    ,          , 

 
    ,          , 
Now, I'd like you to see
something, first of all.

 
    ,          , 
I was writing here, and
I ran out of space.

 
    ,          , 
What I did is I start indenting
according to the

 
    ,          ,  
Pretty printing rule, which says
that I align all of the


    ,           , 
arguments of the procedure
so I can see


    ,          ,  
which ones go together.


    ,           , 
And this is just something I do
automatically, and I want


    ,          , 
you to learn how to do that,
too, so your programs can be


    ,          , 
read and understood.


    ,          , 


    ,          , 
However, what do we have here?


    ,           , 
We have four arguments  the
procedure, the lower index  


     ,           , 
lower bound index  

 
     ,           ,  
the way to get the next index,
and the upper bound.


     ,           , 
What's passed along on the
recursive call is indeed the


    ,          , 
same procedure because I'm going
to need it again, the


    ,          , 
next index, which is using the
next procedure to compute it,


    ,          ,
the procedure for computing
next, which I also have to


    ,         , 
have separately, and
that's different.


    ,          , 
The procedure for computing
next is different from the


    ,           , 
next index, which is the result
of using next on the


     ,          , 
last index.


    ,          , 
And I also have to pass
along the upper bound.

 
    ,          ,  


    ,           , 
So this captures both of these
and the other nice program


    ,          , 
that we are playing with.


    ,          , 
So using this, we can write down
the original program as


    ,          , 
instances of sum very simply.


    ,           , 


     ,          , 
A and B. Well, I'm going to
need an identity procedure


    ,          , 
here because ,ahh, the sum of
the integers requires me to in


    ,          ,  
this case compute a term for
every integer, but the term


    ,           , 
procedure doesn't want to do
anything to that integer.

 
    ,          , 
So the identity procedure on A
is A or X or whatever, and I


    ,          , 
want to say the sum of using
identity of the term procedure


    ,          ,  
and using A as the initial
index and the incrementer


    ,            ,
being the way to get the next
index and B being the high


     ,          , 
bound, the upper bound.


     ,          ,  
This procedure does exactly
the same as the sum of the


    ,           , 
integers over here, computes
the same answer.


    ,          , 


    ,          , 
Now, one thing you should see,
of course, is that there's


    ,          , 
nothing very special over here
about what I used as the

 
    ,          , 
formal parameter.


    ,          , 
I could have, for example,
written this


    ,          , 
X. It doesn't matter.


    ,          , 
I just wanted you to see that
this name does not conflict


    ,          , 
with this one at all.


    ,          , 
It's an internal name.


    ,           ,  
For the second procedure here,
the sum of the squares, it's


     ,           , 
even a little bit easier.


    ,          , 


    ,          , 
And what do we have to do?

 
    ,           , 
Nothing more than add up the
squares, this is the procedure


     ,           , 
that each index will be given,
will be given each  


     ,           , 
yes.


     ,           , 
Each index will have this done
to it to get the term.


     ,          , 
That's the thing that maps
against term over here.


    ,          , 
Then I have A as the lower
bound, the incrementer as the


    ,          , 
next term method, and B
as the upper bound.


    ,          , 


    ,          ,  
And finally, just for the thing
that we did about pi


    ,           , 
sums, pi sums are sort of  

 
    ,          , 
well, it's even easier to think
about them this way


    ,          , 
because I don't have to think.


    ,          , 
What I'm doing is separating the
thing I'm adding up from


    ,          , 
the method of doing
the addition.


    ,          ,  
And so we have here, for
example, pi sum A B


    ,           , 
of the sum of things.


    ,           , 
I'm going to write the terms
procedure here explicitly


     ,           , 
without giving it a name.


     ,           ,
This is done anonymously.


     ,          , 
I don't necessarily have to give
a name to something if I

 
     ,          , 
just want to use it once.


    ,          ,  
And, of course, I can write
sort of a expression that


    ,           ,
produces a procedure.


    ,         , 
I'm going to write the Greek
lambda letter here instead of


    ,          , 
L A M B D A in general to avoid
taking up a lot of space


    ,          , 
on blackboards.


    ,          , 
But unfortunately,
we don't have


    ,          , 
lambda keys on our keyboards.


    ,          , 
Maybe we can convince our
friends in the computer


    ,          ,  
industry that this
is an important.

 
    ,           , 
Lambda of i is the quotient of 
and the product of i and the


    ,          ,  
sum of i , starting at a with
the way of incrementing being


    ,            ,
that procedure of an index i,
which adds i to , and b being


     ,          ,
the upper bound.


     ,         , 


    ,          , 
So you can see that this
notation, the invention of the


    ,          , 
procedure that takes a
procedural argument, allows us


    ,          , 
to compress a lot of these
procedures into one thing.


    ,          , 
This procedure, sums, covers
a whole bunch of ideas.


    ,          , 
Now, just why is
this important?

  
    ,          , 
I tried to say before that it
helps us divide a problem into

 
    ,          , 
two pieces, and indeed, it does,
for example, if someone

 
    ,          , 
came up with a different way of
implementing this, which,

 
    ,           ,  
of course, one might.

 
     ,           , 
Here, for example, an iterative

 
    ,          , 
implementation of sum.

 
    ,          ,  

 
    ,           , 
Iterative implementation for
some reason might be better

 
    ,            , 
than the recursive
implementation.

 
      ,           , 

 
     ,           , 
But the important thing is
that it's different.


     ,           , 
Now, supposing I had written my
program this way that you


     ,          , 
see on the blackboard
on the left.


    ,          , 
That's correct, the left.


    ,          , 
Well, then if I want to change
the method of addition, then


    ,          ,  
I'd have to change
each of these.


    ,            , 
Whereas if I write them like
this that you see here, then


     ,          , 
the method by which I did the
addition is encapsulated in


    ,          , 
the procedure sum.


    ,          , 
That decomposition allows me
to independently change one

 
    ,          , 
part of the program and prove
it perhaps without changing


    ,          , 
the other part that was
written for some


    ,          , 
of the other cases.


    ,           ,


     ,         ,  
Thank you.


    ,           , 
Are there any questions?


    ,          , 
Yes, sir.


    ,          , 
AUDIENCE  Would you go over
next A and next again on  


    ,          , 
PROFESSOR  Yes.


    ,          , 
It's the same problem.

 
    ,          ,  
I'm sure you're going to  


    ,           , 
you're going to have
to work on this.


    ,            , 
This is hard the first
time you've ever seen


      ,            , 
something like this.


      ,            ,  
What I have here is
a   procedures


      ,             , 
can be named by variables.


      ,            ,  


      ,            , 
Procedures are not special.


     ,           , 
Actually, sum square is a
variable, which has gotten a


     ,           , 
value, which is a procedure.

 
     ,            ,  
This is define sum square to be


      ,            , 
lambda of A and B something.


     ,           ,  
So the procedure can be named.


     ,            ,  
Therefore, they can be passed
from one to another, one


     ,            , 
procedure to another,
as arguments.


     ,           , 
Well, what we're doing here is
we're passing the procedure


     ,           , 
term as an argument to sum just
when we get it around in


     ,           ,  
the next recursive.


     ,            , 
Here, we're passing
the procedure next


     ,           , 
as an argument also.

 
     ,            , 
However, here we're using
the procedure next.


      ,           , 
That's what the parentheses
mean.


     ,           , 
We're applying next to A to get
the next value of A. If


     ,           , 
you look at what next is mapped
against, remember that


     ,           , 
the way you think about this
is that you substitute the


     ,           ,  
arguments for the formal
parameters in the body.


     ,            , 
If you're ever confused, think
of the thing that way.


     ,          , 
Well, over here, with
sum of the integers.


    ,          , 
I substitute identity for
a term and  plus the


    ,          ,  
incrementer for next
in the body.

 
    ,            ,  
Well, the identity procedure
on A is what I get here.


     ,           , 
Identity is being passed
along, and here, I have


    ,          ,  
increment  plus being applied
to A and  plus is being


    ,           , 
passed along.


    ,          , 
Does that clarify
the situation?


    ,          ,
AUDIENCE  We could also define
explicitly those two


    ,         ,  
functions, then pass them.


    ,           , 
PROFESSOR  Sure.


    ,          , 
What we can do is we could have
given names to them, just


    ,          , 
like I did here.

 
    ,          , 
In fact, I gave you various
ways so you


    ,          , 
could see it, a variety.


    ,           , 
Here, I define the thing which
I passed the name of.


     ,           , 
I referenced it by its name.


     ,           ,  
But the thing is, in fact, that
procedure, one argument


     ,           ,  
X, which is X. And the identity
procedure is just


    ,            , 
lambda of X X. And that's
what you're seeing here.


     ,          , 
Here, I happened to just write
its canonical name there for


    ,          , 
you to see.


    ,          , 

 
    ,          ,  
Is it OK if we take our
five minute break?


    ,           , 


    ,          , 
As I said, computers to make
people happy, not people to


    ,          ,  
make computers happy.


    ,           ,  
And for the most part, the
reason why we introduce all


    ,           , 
this abstraction stuff is to
make it so that programs can


    ,          , 
be more easily written
and more easily read.


    ,          , 
Let's try to understand what's
the most complicated program


    ,          , 
we've seen so far using
a little bit of


    ,          , 
this abstraction stuff.

 
    ,          , 
If you look at the slide, this
is the Heron of Alexandria's


    ,          , 
method of computing square roots
that we saw yesterday.


    ,          , 
And let's see.


    ,            , 
Well, in any case, this
program is a little


      ,           , 
complicated.


     ,           ,  
And at the current state of your
thinking, you just can't


     ,            , 
look at that and say, oh,
this obviously means


     ,           , 
something very clear.


     ,          , 
It's not obvious from
looking at the


    ,          ,  
program what it's computing.

  
    ,           , 
There's some loop here inside
try, and a loop does something

 
    ,          ,  
about trying the improvement
of y.

 
    ,            , 
There's something called
improve, which does some

 
     ,          , 
averaging and quotienting
and things like that.

 
    ,          , 
But what's the real idea?

 
    ,          , 
Can we make it clear
what the idea is?

 
    ,          , 
Well, I think we can.

 
    ,          ,  
I think we can use abstraction
that we have learned about so

 
    ,           , 
far to clarify what's
going on.

 
    ,          , 
Now, what we have mathematically
is a procedure

 
    ,          ,
for improving a guess
for square roots.


    ,          , 
And if y is a guess for a square
root, then what we want


     ,           , 
to get we'll call
a function f.


     ,           , 
This is the means
of improvement.


     ,          , 
I want to get y plus x/y over
, so the average of y and x


    ,          ,  
divided by y as the improved
value for the square root of x


    ,           , 
such that   one thing you can
notice about this function f


    ,          , 
is that f of the square root
of f is in fact the


    ,          , 
square root of x.


    ,          , 
In other words, if I take
the square root of x and

 
    ,          , 
substitute it for y here, I see
the square root of x plus


    ,          , 
x divided by the square of x,
which is the square root of x.


    ,          , 
That's  times the square root
of x divided by , is the


    ,          , 
square root of x.


    ,          , 
So, in fact, what we're really
looking for is we're looking


    ,          , 
for a fixed point, a fixed
point of the function f.


    ,          , 


    ,          , 
A fixed point is a place which
has the property that if you


    ,          , 
put it into the function, you
get the same value out.


    ,          , 

 
    ,          ,  
Now, I suppose if I were giving
some nice, boring


    ,           , 
lecture, and you happened to
have in front of you an HP 


    ,          , 
desk calculator like I
used to have when I


    ,          , 
went to boring lectures.


    ,          , 
And if you think it was really
boring, you put it into


    ,          , 
radians mode, and you hit
cosine, and you hit cosine,


    ,          , 
and you hit cosine.


    ,          , 
And eventually, you end
up with  . or


    ,           ,  
something like that.


     ,           , 
 ., I don't remember what
exactly, and it gets closer

 
    ,          , 
and closer to that.


    ,          , 
Some functions have the property
that you can find


    ,           , 
their fixed point by iterating
the function, and that's


     ,           , 
essentially what's happening in
the square root program by


     ,           , 
Heron's method.


     ,          , 


    ,          ,
So let's see if we can write
that down, that idea.


    ,         , 
Now, I'm not going to say how
I compute fixed points yet.


    ,          , 
There might be more
than one way.


    ,          , 
But the first thing to
do is I'm going to

 
    ,          , 
say what I just said.


    ,          , 
I'm going to say it
specifically, the square root.


    ,          , 


    ,          , 
The square root of x is the
fixed point of that procedure


    ,          , 
which takes an argument
y and averages of x


    ,           , 
divided by y with y.


     ,           , 


     ,           , 
And we're going to start up with
the initial guess for the


     ,           , 
fixed point of .


     ,          , 
It doesn't matter
where it starts.

 
    ,          , 
A theorem having to do
with square roots.


    ,          , 


    ,          , 
So what you're seeing here is
I'm just trying to write out


    ,          , 
by wishful thinking.


    ,          , 
I don't know how I'm going to
make fixed point happen.


    ,          , 
We'll worry about that later.


    ,          , 
But if somehow I had a way of
finding the fixed point of the


    ,          , 
function computed by this
procedure, then I would have  


    ,          , 
that would be the square root
that I'm looking for.


    ,          , 

 
    ,          ,  
OK, well, now let's see how
we're going to write  


    ,           , 
how we're going to come
up with fixed points.


    ,          , 
Well, it's very simple,
actually.


    ,          , 
I'm going to write an
abbreviated version here just


    ,          , 
so we understand it.


    ,            , 


      ,           , 
I'm going to find the fixed
point of a function f  


     ,           , 
actually, the fixed point of the
function computed by the


     ,           , 
procedure whose name will
be f in this procedure.


     ,          , 
How's that?

 
    ,          , 
A long sentence  


    ,          , 
starting with a particular
starting value.


    ,          , 


    ,          , 
Well, I'm going to have a little
loop inside here, which


    ,          ,  
is going to push the button on
the calculator repeatedly,


    ,           , 
hoping that it will eventually
converge.


    ,          , 
And we will say here internal
loops are written by defining


    ,          , 
internal procedures.


    ,          , 


    ,          , 
Well, one thing I'm going to
have to do is I'm going to

 
    ,          , 
have to say whether I'm done.


    ,          , 
And the way I'm going to decide
when I'm done is when


    ,          , 
the old value and the new value
are close enough so I


    ,           , 
can't distinguish
them anymore.


     ,          , 
That's the standard thing you
do on the calculator unless


    ,          , 
you look at more precision,
and eventually,


    ,          , 
you run out of precision.


    ,            , 
So the old value and new value,
and I'm going to stay


      ,           ,
here if I can't distinguish them
if they're close enough,


     ,          , 
and we'll have to worry about
what that is soon.

  
     ,            , 

 
      ,           , 
The old value and the new value
are close enough to each

 
     ,           , 
other and let's pick the new
value as the answer.

 
     ,           , 
Otherwise, I'm going to iterate
around again with the

 
     ,           ,  
next value of old being the
current value of new and the

 
     ,            , 
next value of new being the
result of calling f on new.

 
     ,           , 

 
     ,           , 
And so this is my iteration loop
that pushes the button on

 
     ,           ,  
the calculator.

 
     ,             , 
I basically think of it as
having two registers on the

 
      ,           ,
calculator  old and new.


     ,          ,  
And in each step, new becomes
old, and new gets F of new.


     ,           ,  
So this is the thing where I'm
getting the next value.


    ,            , 
And now, I'm going to
start this thing up


     ,          , 
by giving two values.


    ,          , 


    ,           , 
I wrote down on the blackboard
to be slow


     ,          , 
so you can see this.


    ,          , 
This is the first time you've
seen something quite this


    ,          ,  
complicated, I think.

 
    ,           , 
However, we might want to see
the whole thing over here in


    ,           , 
this transparency or
slide or whatever.


     ,          ,  
What we have is all of the
details that are required to


    ,           ,  
make this thing work.


    ,            , 
I have a way of getting a
tolerance for a close enough


     ,           ,  
procedure, which we see here.


     ,            ,  
The close enough procedure, it
tests whether u and v are


     ,            , 
close enough by seeing if the
absolute value of the


     ,          , 
difference in u and v is less
than the given tolerance, OK?


    ,          , 
And here is the iteration loop
that I just wrote on the

 
    ,          , 
blackboard and the
initialization for it, which


    ,          , 
is right there.


    ,          , 


    ,          , 
It's very simple.


    ,          , 


    ,          , 
But let's see.


    ,          , 
I haven't told you enough.


    ,          ,  
It's actually easier
than this.


    ,           , 
There is more structure to
this problem than I've


    ,          , 
already told you.

 
    ,          ,  
Like why should this work?


    ,           ,  
Why should it converge?


    ,            , 
There's a hairy theorem in
mathematics tied up in what


     ,          , 
I've written here.


    ,          , 
Why is it that I should assume
that by iterating averaging


    ,          , 
the quotient of x and y
and y that I should


    ,            , 
get the right answer?


      ,           , 
It isn't so obvious.


     ,           , 


     ,           , 
Surely there are other things,
other procedures, which

 
     ,           , 
compute functions whose fixed
points would also be the


     ,          ,  
square root.


    ,            , 
For example, the obvious one
will be a new function g,


     ,          , 
which maps y to x/y.


    ,          , 


    ,           , 
That's even simpler.


     ,          , 
The fixed point of g is surely
the square root also, and it's


    ,          ,  
a simpler procedure.


    ,           ,  
Why am I not using it?


    ,            , 
Well, I suppose you know.

 
     ,          , 
Supposing x is  and I start out
with , and if I divide 


    ,          ,  
into , I get .


    ,           , 
And then if I divide
 into , I get .


    ,          , 
If I divide  into , I get ,
and  into , I get , and I


    ,          , 
never get any closer
to the square root.


    ,          , 
It just oscillates.


    ,          ,  


    ,            , 
So what we have is a signal
processing system, an


     ,           , 
electrical circuit which is
oscillating, and I want to


     ,           , 
damp out these oscillations.

 
     ,           , 


     ,          , 
Well, I can do that.


    ,          , 
See, what I'm really doing
here when I'm taking my


    ,          , 
average, the average is
averaging the last two values


    ,          , 
of something which oscillates,
getting something in between.


    ,          , 
The classic way is damping out
oscillations in a signal


    ,          , 
processing system.


    ,          , 


    ,          ,
So why don't we write down the
strategy that I just said in a


    ,         ,
more clear way?

 
    ,         , 
Well, that's easy enough.


    ,          ,


    ,         , 
I'm going to define the square
root of x to be a fixed point


    ,          , 
of the procedure resulting
from average damping.


    ,           , 
So I have a procedure resulting
from average damp of


     ,          , 
the procedure, that procedure
of y, which divides x by y


    ,          ,  
starting out at .


    ,           , 


    ,          , 
Ah, but average damp is a
special procedure that's going


    ,          , 
to take a procedure as its
argument and return a

 
    ,          ,  
procedure as its value.


    ,           ,  
It's a generalization that says
given a procedure, it's


    ,           ,  
the thing which produces a
procedure which averages the


    ,           , 
last value and the
value before and


    ,          , 
after running the procedure.


    ,          , 
You can use it for anything
if you want to damp out


    ,          , 
oscillations.


    ,          ,
So let's write that down.


    ,         ,
It's very easy.


    ,           ,

  
      ,          , 
And stylistically here, I'm
going to use lambda notation

 
     ,           , 
because it's much easier to
think when you're dealing with

 
     ,           ,
procedure, the mid line
procedures, to understand that

 
     ,         ,
the procedures are the objects
I'm dealing with, so I'm going

 
    ,         , 
to use lambda notation here.

 
    ,          , 
Not always.

 
    ,          , 
I don't always use it, but
very specifically here to

 
    ,          ,  
expand on that idea,
to elucidate it.

 
    ,           , 

 
    ,          , 
Well, average damp is a
procedure, which takes a

 
    ,          , 
procedure as its argument,
which we will call f.


    ,          , 
And what does it produce?


    ,           , 
It produces as its value  


     ,          , 
the body of this procedure is
a thing which produces a


    ,          , 
procedure, the construct of the
procedures right here, of


    ,            , 
one argument x, which averages
f of x with x.


      ,           , 


     ,          ,  
This is a very special thing.


    ,           , 
I think for the first time
you're seeing a procedure


    ,          , 
which produces a procedure
as its value.

 
    ,          , 
This procedure takes the
procedure f and does something


    ,          , 
to it to produce a new procedure
of one argument x,


    ,          ,  
which averages f  


    ,           , 
this f  


    ,          ,  
applied to x and x itself.


    ,            , 
Using the context here, I apply
average damping to the


     ,          , 
procedure, which just
divides x by y.


    ,          , 
It's a division.


    ,          ,


    ,         , 
And I'm finding to fixed point
of that, and that's a clearer

 
    ,          , 
way of writing down what
I wrote down over


    ,          ,
here, wherever it was.


    ,          , 
Here, because it tells why
I am writing this down.


     ,           , 


     ,          , 
I suppose this to some extent
really clarifies what Heron of


    ,          , 
Alexandria was up to.


    ,          , 
I suppose I'll stop now.


    ,          , 
Are there any questions?


    ,          , 


    ,          ,
AUDIENCE  So when you define
average damp, don't you need

 
    ,         , 
to have a variable on f?


    ,          , 
PROFESSOR  Ah, the question was,
and here we're having  


    ,          ,  
again, you've got to learn
about the syntax.


    ,           , 
The question was when defining
average damp, don't you have


    ,          ,  
to have a variable
defined with f?


    ,            , 
What you are asking about is
the formal parameter of f?


     ,          , 
AUDIENCE  Yeah.


    ,          , 
PROFESSOR  OK.


    ,          , 
The formal parameter
of f is here.


    ,          ,
The formal parameter of f  

 
    ,          , 
AUDIENCE  The formal parameter
of average damp.


     ,          , 
PROFESSOR  F is being
used to apply it to


    ,          ,  
an argument, right?


    ,           , 
It's indeed true that f must
have a formal parameter.


    ,            , 
Let's find out what f's
formal parameter is.


      ,           , 
AUDIENCE  The formal parameter
of average damp.


     ,           ,  
PROFESSOR  Oh, f is the formal
parameter of average damp.


     ,            ,  
I'm sorry.


     ,            , 
You're just confusing
a syntactic thing.


     ,           , 
I could have written
this the other way.

 
     ,          , 
Actually, I didn't understand
your question.


    ,          , 
Of course, I could have written
it this other way.


    ,          , 


    ,          , 
Those are identical notations.


    ,          , 
This is a different way
of writing this.


    ,          , 


    ,          , 
You're going to have to get
used to lambda notation


    ,          , 
because I'm going to use it.


    ,           , 
What it says here, I'm defining
the name average damp


     ,          ,  
to name the procedure whose
of one argument f.

 
    ,           , 
That's the formal parameter of
the procedure average damp.


    ,          , 
What define does is it says
give this name a value.


    ,          , 
Here is the value of for it.


    ,            , 


      ,            ,  
That there happens to be a
funny syntax to make that


      ,             , 
easier in some cases is
purely convenience.


      ,            ,  


      ,            , 
But the reason why I wrote it
this way here is to emphasize


     ,           , 
that I'm dealing with a
procedure that takes a


     ,           ,  
procedure as its argument
and produces a

 
     ,            , 
procedure as its value.


     ,           , 


     ,           ,  
AUDIENCE  I don't understand
why you use lambda twice.


     ,            , 
Can you just use one
lambda and take two


     ,           , 
arguments f and x?


     ,           , 
PROFESSOR  No.


     ,            , 
AUDIENCE  You can't?


      ,           ,  
PROFESSOR  No, that would
be a different thing.


     ,            , 
If I were to write the procedure
lambda of f and x,


     ,            ,  
the average of f of x and x,
that would not be something

 
      ,            , 
which would be allowed to take a
procedure as an argument and


     ,           , 
produce a procedure
as its value.


     ,           , 
That would be a thing that
takes a procedure as its


     ,           ,  
argument and numbers
its argument and


     ,             , 
produces a new number.


      ,           , 
But what I'm producing here is
a procedure to fit in the


     ,           ,  
procedure slot over here,
which is going to


     ,            , 
be used over here.


     ,           , 
So the number has to
come from here.


     ,           , 
This is the thing that's going
to eventually end up in the x.

  
     ,           , 
And if you're confused, you
should do some substitution

 
     ,           ,  
and see for yourself.

 
     ,           ,  

 
    ,           ,
Yes?

 
    ,         , 
AUDIENCE  Will you please show
the definition for average

 
    ,          , 
damp without using lambda
notation in both cases.

 
    ,          , 
PROFESSOR  I can't make a very
simple one like that.

 
    ,          , 
Let me do it for you, though.

 
    ,          , 
I can get rid of this
lambda easily.

 
    ,          , 
I don't want to be  

 
    ,          , 


    ,          , 
actually, I'm lying to you.


    ,          , 
I don't want to do what you want
because I think it's more


    ,          , 
confusing than you think.


    ,           , 
I'm not going to write
what you want.


     ,          , 


    ,          ,  
So we'll have to get a name.


    ,           , 
FOO of x to be of F of x and x
and return as a value FOO.


    ,          , 


    ,           , 
This is equivalent, but
I've had to make an

 
     ,          ,  
arbitrary name up.


    ,           , 
This is equivalent to this
without any lambdas.


    ,          , 
Lambda is very convenient for
naming anonymous procedures.


    ,          ,  
It's the anonymous name
of something.


    ,           , 
Now, if you really want to know
a cute way of doing this,


    ,          , 
we'll talk about it later.


    ,          , 
We're going to have to define
the anonymous procedure.


    ,          , 
Any other questions?


    ,          ,


    ,          , 
And so we go for our
break again.

 
     ,          , 


    ,          , 
So now we've seen how
to use high order


    ,          , 
procedures, they're called.


    ,          , 
That's procedures that take
procedural arguments and


    ,          , 
produce procedural values to
help us clarify and abstract


    ,          , 
some otherwise complicated
processes.


    ,          ,  
I suppose what I'd like to do
now is have a bit of fun with


    ,           ,  
that and sort of a little
practice as well.


    ,           , 
So let's play with this square
root thing even more.


    ,          ,  
Let's elaborate it and
understand what's going on and

 
    ,            , 
make use of this kind of
programming style.


     ,           , 
One thing that you might know
is that there is a general


     ,          , 
method called Newton's method
the purpose of which is to


    ,          , 
find the roots  


    ,          , 
that's the zeroes  


    ,          , 
of functions.


    ,          , 
So, for example, to find a y
such that f of y equals  , we


    ,           , 
start with some guess.


     ,          , 
This is Newton's method.


    ,          , 

 
    ,          , 
And the guess we start with
we'll call y , and then we


    ,           ,  
will iterate the following
expression.


     ,            , 
y n plus    this is a
difference equation  


     ,          ,
is yn minus f of yn over the
derivative with respect to y


    ,         , 
of f evaluated at y equal yn.


    ,          , 
Very strange notation.


    ,          ,  
I must say ugh.


    ,           , 
The derivative of f with respect
to y is a function.


    ,          , 
I'm having a little bit of
unhappiness with that, but


    ,          , 
that's all right.

 
    ,          ,  
It turns out in the programming
language world,


    ,           , 
the notation is much clearer.


    ,          , 
Now, what is this?


    ,          , 
People call it Newton's
method.


    ,          , 
It's a method for finding the
roots of the function f.


    ,          , 
And it, of course, sometimes
converges, and when it does,


    ,          , 
it does so very fast. And
sometimes, it doesn't


    ,           , 
converge, and, oh well, we have
to do something else.


     ,           , 
But let's talk about square
root by Newton's method.


     ,           , 
Well, that's rather
interesting.

 
     ,          , 
Let's do exactly the same thing
we did last time  a bit


    ,          , 
of wishful thinking.


    ,          , 
We will apply Newton's method,
assuming we knew how to do it.


    ,           , 
You don't know how
to do it yet.


     ,          , 
Well, let's go.


    ,          ,  


    ,           ,  
What do I have here?


    ,           , 
The square root of x.


    ,          , 


    ,          , 
It's Newton's method applied
to a procedure which will

 
    ,          , 
represent that function
of y, which computes


    ,          , 
that function of y.


    ,          , 
Well, that procedure is that
procedure of y, which is the


    ,          , 
difference between x and
the square of y.


    ,            ,  


      ,            , 
Indeed, if I had a value of y
for which this was zero, then


     ,           ,  
y would be the square
root of x.


     ,           , 


    ,          , 
See that?


    ,          , 
OK, I'm going to start this
out searching at .

 
    ,          , 
Again, completely arbitrary
property of square roots that


    ,          , 
I can do that.


    ,          , 


    ,          , 
Now, how am I going to compute
Newton's method?


    ,          , 
Well, this is the method.


    ,          , 
I have it right here.


    ,          , 
In fact, what I'm doing is
looking for a fixed point of


    ,          , 
some procedure.


    ,          , 
This procedure involves some
complicated expressions in


    ,          , 
terms of other complicated
things.

  
    ,          ,  
Well, I'm trying to find the
fixed point of this.

 
    ,           , 
I want to find the values of y,
which if I put y in here, I

 
    ,            , 
get the same value out here up
to some degree of accuracy.

 
      ,           , 
Well, I already have a
fixed point process

 
     ,           ,  
around to do that.

 
     ,            , 
And so, let's just define
Newton's method over here.

 
     ,          , 

 
    ,          , 
A procedure which computes
a function and a

 
    ,          , 
guess, initial guess.

 
    ,          , 
Now, I'm going to have
to do something here.

 
    ,          , 
I'm going to need the derivative
of the function.


    ,          , 
I'm going to need a procedure
which computes the derivative


    ,          , 
of the function computed by
the given a procedure f.


    ,          , 


    ,          , 
I'm trying to be very careful
about what I'm saying.


    ,          , 
I don't want to mix up the word
procedure and function.


    ,          ,
Function is a mathematical
word.


    ,         , 
It says I'm mapping from values
to other values, a set


    ,          , 
of ordered pairs.


    ,            , 
But sometimes, I'll accidentally
mix those up.

 
      ,           ,
Procedures compute functions.


     ,          ,  


     ,           ,  
So I'm going to define the
derivative of f to be by


    ,           , 
wishful thinking again.


    ,          , 
I don't know how I'm
going to do it.


    ,          , 
Let's worry about that later  


    ,          ,


    ,         , 
of F. So if F is a procedure,
which happens to be this one


    ,          ,  
over here for a square root,
then DF will be the derivative


    ,           , 
of it, which is also the
derivative of the function

 
    ,          ,  
computed by that procedure.


    ,           , 
DF will be a procedure that
computes the derivative of the


    ,          , 
function computed by the
procedure F. And then given


    ,          , 
that, I will just go looking
for a fixed point.


    ,          , 


    ,          , 
What is the fixed point
I'm looking for?


    ,          , 
It's the one for that procedure
of one argument x,


    ,             ,  
which I compute by
subtracting x.


       ,             , 
That's the old   that's
the yn here.


      ,           , 
The quotient of f of x and df
of x, starting out with the

 
     ,           , 
original guess.


     ,           , 


     ,           , 
That's all very simple.


     ,           , 
Now, I have one part left that
I haven't written, and I want


     ,           , 
you to see the process by which
I write these things,


     ,            , 
because this is really true.


      ,           , 
I start out with some
mathematical idea, perhaps.


     ,           , 
By wishful thinking, I assume
that by some magic I can do


     ,            , 
something that I have
a name for.


      ,           , 
I'm not going to worry about
how I do it yet.

 
     ,           , 
Then I go walking down here and
say, well, by some magic,


     ,           ,
I'm somehow going to figure how
to do that, but I'm going


     ,          , 
to write my program anyway.


     ,           , 
Wishful thinking, essential
to good engineering, and


     ,           ,  
certainly essential to a
good computer science.


     ,           , 


    ,          ,  
So anyway, how many of
you wished that your


    ,           , 
computer ran faster?


    ,          , 


    ,          , 
Well, the derivative isn't
so bad either.

 
    ,          , 
Sort of like average damping.


    ,          ,


    ,         ,  
The derivative is a procedure
that takes a procedure that


    ,           , 
computes a function as its
argument, and it produces a


    ,          , 
procedure that computes a
function, which needs one


    ,          , 
argument x.


    ,          , 
Well, you all know
this definition.


    ,          ,  
It's f of x plus delta x minus
f of x over delta x, right?


    ,            ,  
For some small delta x.


     ,           , 
So that's the quotient of the
difference of f of the sum of

 
    ,           ,
x and dx minus f point
x divided by dx.


     ,         , 


    ,          , 
I think the thing was lining up
correctly when I balanced


    ,          , 
the parentheses.


    ,          , 


    ,          ,  
Now, I want you to
look at this.


    ,           , 
Just look.


    ,          , 


    ,          , 
I suppose I haven't told
you what dx is.


    ,          , 
Somewhere in the world I'm going
to have to write down

 
    ,          , 
something like that.


    ,          , 
I'm not interested.


    ,          , 
This is a procedure which takes
a procedure and produces


    ,          , 
an approximation, a procedure
that computes an approximation


    ,          ,  
of the derivative of the
function computed by the


    ,            , 
procedure given by the standard
methods that you all


     ,           ,  
know and love.


     ,            , 
Now, it may not be the case that
doing this operation is


     ,          , 
such a good way of approximating
a derivative.


    ,          ,  
Numerical analysts here
should jump on me and

 
    ,           , 
say don't do that.


    ,           , 
Computing derivatives produces
noisy answers, which is true.


     ,          , 
However, this again is for the
sake of understanding.


    ,          , 
Look what we've got.


    ,          ,  
We started out with what is
apparently a mathematically


    ,           , 
complex thing.


    ,          , 
and.


    ,          , 
In a few blackboards full, we
managed to decompose the


    ,          ,  
problem of computing square
roots by the way you were


    ,           , 
taught in your college
calculus class  

  
    ,          , 
Newton's method  

 
    ,          , 
so that it can be understood.

 
    ,          , 
It's clear.

 
    ,          ,
Let's look at the structure
of what it is we've got.

 
    ,         , 
Let's look at this slide.

 
    ,           , 
This is a diagram of the machine
described by the

 
     ,           , 
program on the blackboard.

 
     ,           , 
There's a machine
described here.

 
     ,           ,  
And what have I got?

 
     ,           , 
Over here is the Newton's method
function f that we have

 
    ,          ,  
on the left most blackboard.


    ,           , 
It's the thing that takes an
argument called y and puts out


    ,          ,  
the difference between x and
the square of y, where x is


    ,           ,  
some sort of free variable that
comes in from the outside


    ,           ,  
by some magic.


    ,           , 
So the square root routine picks
up an x, and builds this


    ,          , 
procedure, which I have the
x rolled up in it by


    ,           , 
substitution.


     ,          , 
Now, this procedure in the cloud
is fed in as the f into


    ,           , 
the Newton's method which
is here, this box.

 
     ,           , 


     ,           , 
The f is fanned out.


     ,          , 
Part of it goes into something
else, and the other part of it


    ,          , 
goes through a derivative
process into something else to


    ,           , 
produce a procedure, which
computes the function which is


     ,          ,  
the iteration function of
Newton's method when we use


    ,           , 
the fixed point method.


    ,          ,  
So this procedure, which
contains it by substitution  


    ,           , 
remember, Newton's method over
here, Newton's method builds


    ,          ,  
this procedure, and Newton's
method has in it defined f and

 
    ,           ,  
df, so those are captured
over here  f and df.


    ,           , 
Starting with this procedure,
I can now feed this to the


    ,          , 
fixed point process within an
initial guess coming out from


    ,          ,
the outside from square
root to produce the


    ,           ,
square root of x.


      ,          , 


     ,           , 
So what we've built is a very
powerful engine, which allows


     ,          ,
us to make nice things
like this.


    ,         ,   
Now, I want to end this with
basically an idea of Chris


    ,            , 
Strachey, one of the

 
    ,          , 
grandfathers of computer science.


    ,          , 
He's a logician who
lived in the  


    ,           , 
I suppose about   years ago
or  years ago, he died.


     ,          , 
I don't remember exactly when.


    ,          , 
He's one of the inventors
of something called


    ,          , 
denotational semantics.


    ,           , 
He was a great advocate of
making procedures or functions


     ,          , 
first class citizens in a
programming language.


    ,          , 
So here's the rights and
privileges of first class


    ,           , 
citizens in a programming
language.

 
     ,          ,  
It allows you to make any
abstraction you like if you


    ,           , 
have functions as first class
citizens.


    ,          ,  
The first class citizens
must be able


    ,            , 
to be named by variables.


     ,           ,  
And you're seeing me doing
that all the time.


     ,            ,  
Here's a nice variable which
names a procedure which


     ,            , 
computes something.


     ,          , 


    ,          , 
They have to be passed as
arguments to procedures.


    ,          , 
We've certainly seen that.

 
    ,           , 
We have to be able to return
them as values from


     ,          , 
procedures.


    ,          ,  
And I suppose we've seen that.


    ,           , 
We haven't yet seen anything
about data structures.


    ,          , 
We will soon, but it's also the
case that in order to have


    ,          , 
a first class citizen in a
programming language, the


    ,          ,  
object has to be allowed to be
part of a data structure.


    ,           , 
We're going to see that soon.


    ,          , 
So I just want to close with
this and say having things


    ,          , 
like procedures as first class
data structures, first class

 
    ,           , 
data, allows one to make
powerful abstractions, which


     ,          , 
encode general methods
like Newton's method


    ,          , 
in very clear way.


    ,          , 
Are there any questions?


    ,          , 
Yes.


    ,            ,  
AUDIENCE  Could you put
derivative instead of df


      ,            , 
directly in the fixed point?


     ,           , 
PROFESSOR  Oh, sure.


     ,           , 
Yes, I could have put deriv of
f right here, no question.


     ,          , 

 
    ,          , 
Any time you see something
defined, you can put the thing


    ,          , 
that the definition is
there because you


    ,          ,  
get the same result.


    ,           ,  
In fact, what that would look
like, it's interesting.


    ,           , 
AUDIENCE  Lambda.


    ,          , 
PROFESSOR  Huh?


    ,          , 
AUDIENCE  You could put the
lambda expression in there.


    ,          , 
PROFESSOR  I could also put
derivative of f here.


    ,          , 
It would look interesting
because of the open paren,


    ,          , 
open paren, deriv of f,
closed paren on an x.

 
    ,           ,  
Now, that would have the bad
property of computing the


     ,           , 
derivative many times, because
every time I would run this


    ,          , 
procedure, I would compute
the derivative again.


    ,          ,  


    ,           , 
However, the two open parens
here both would be meaningful.


    ,          ,  
I want you to understand
syntactically that that's a


    ,           , 
sensible thing.


    ,          , 
Because if was to rewrite this
program   and I should do it


    ,            , 
right here just so
you see because


      ,           , 
that's a good question  

   
     ,          , 

  
    ,          , 
of F and guess to be fixed point
of that procedure of one

  
    ,          , 
argument x, which subtracts
from x the quotient of F

  
    ,          , 
applied to x and the deriv
of F applied to x.

  
    ,          ,

  
    ,         , 
This is guess.

  
    ,          , 

  
    ,            , 
This is a perfectly legitimate
program,

  
      ,            , 
because what I have here  

  
      ,            , 
remember the evaluation rule.

  
      ,            , 
The evaluation rule is evaluate
all of the parts of

 
      ,           ,  
the combination  the operator
and the operands.

 
     ,            ,
This is the operator of
this combination.

 
     ,          ,  

 
     ,            ,  
Evaluating this operator will,
of course, produce the

 
     ,            , 
derivative of F.

 
     ,            ,  
AUDIENCE  To get it one step
further, you could put the

 
      ,            ,  
lambda expression there, too.

 
     ,            , 
PROFESSOR  Oh, of course.

 
     ,           , 
Any time I take something which
is define, I can put the

  
     ,            , 
thing it's defined to be in
the place where the thing

 
      ,           , 
defined is.

 
     ,           , 
I can't remember which is
definiens and which is

 
     ,           , 
definiendum.

 
     ,           , 

 
     ,            , 
When I'm trying to figure out
how to do a lecture about this

 
      ,           , 
in a freshman class, I use such
words and tell everybody

 
     ,           , 
it's fun to tell
their friends.

 
     ,           , 

 
     ,           , 
OK, I think that's it.

  
     ,          , 
        ,               , 


       ,            , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, last time we
talked about compound data,


      ,            ,  
and there were two main points
to that business.


      ,             , 
First of all, there was
a methodology of data


      ,            ,  
abstraction, and the point of
that was that you could


      ,              ,  
isolate the way that data
objects are used from the way


       ,             , 
that they're represented  this
idea that there's this guy,


      ,            ,  
George, and you go out make a
contract with him; and it's

 
      ,             ,  
his business to represent the
data objects; and at the


      ,             , 
moment you are using them,
you don't think


      ,            , 
about George's problem.


      ,            , 
And then secondly, there was
this particular way that Lisp


      ,             , 
has of gluing together things to
form objects called pairs,


       ,            , 
and that's done with cons, car
and cdr. And the way that


      ,            , 
cons, car and cdr are
implemented is basically


      ,            , 
irrelevant.


      ,            , 
That's sort of George's
problem of how


      ,            ,  
to build those things.

 
      ,            , 
It could be done
as primitives.


     ,           , 
It could be done using
procedures in some weird way,


     ,           , 
but we're not going to
worry about that.


     ,            , 
And as an example, we looked at
rational number arithmetic.


      ,           ,  
We looked at vectors,
and here's


     ,            , 
just a review of vectors.


     ,           ,
Here's an operation that takes
the sum of of two vectors, so


     ,          , 
we want to add this vector, v,
and this vector, v, and


     ,           , 
we get the sum.


     ,           , 
And the sum is the vector whose
coordinates are the sum

 
     ,           , 
of the coordinates of the
pieces you're adding.


     ,           , 
So I can say, to define
make vect, right, to add two


     ,            , 
vectors I make a vector, whose x
coordinate is the sum of the


      ,           , 
two x coordinates, and whose y
coordinate is the sum of the


     ,           , 
two y coordinates.


     ,            , 
And then similarly, we could
have an operation that scales


      ,            ,
vectors, so here's a procedure
scale that multiplies a


      ,          , 
vector, v, by some number, s.


     ,           , 
So here's v, v goes from there
to there and I scale v, and I


     ,           , 
get a vector in the same
direction that's longer.

 
     ,           , 
And again, to scale a vector,
I multiply the successive


     ,           , 
coordinates.


     ,           ,  
So I make a vector, whose x
coordinate is the scale factor


     ,            ,  
times the x coordinate and
whose y coordinate is the


     ,            , 
scale factor times
the y coordinate.


     ,           , 
So those are two operations that
are implemented using the


     ,            , 
representation of vectors.


      ,           ,  
And the representation of
vectors, for instance, is


     ,            , 
something that we can build
in terms of pairs.


     ,           , 
So George has gone out and
implemented for us make vector

 
     ,           , 
and x coordinate and y
coordinate, and this could be


     ,            , 
done, for instance, using cons,
car and cdr; and notice


      ,            , 
here, I wrote this in a slightly
different way.


      ,            , 
The procedures we've seen
before, I've said something


      ,           , 
like say, make vector of x
and y  cons of x and y.


     ,           , 
And here I just wrote
make vector cons.


     ,            , 
And that means something
slightly different.


      ,           , 
Previously we'd say, define
make vector to be a procedure


     ,           , 
that takes two arguments,
x and y, and does


     ,           , 
cons of x and y.

 
     ,           , 
And here I am saying define
make vector to be the thing


     ,           , 
that cons is, and that's almost
the same as the other


     ,           , 
way we've been writing things.


     ,           , 
And I just want you to get
used to the idea that


     ,           , 
procedures can be objects, and
that you can name them.


     ,           , 


     ,           , 
OK, well there's vector
representation, and again, if


     ,           , 
that was all there was
to it, this would


     ,           ,
all be pretty boring.


     ,            , 
And the point is, remember, that
you can use cons to glue

 
       ,            , 
together not just numbers to
form pairs, but to glue


      ,            , 
together arbitrary things.


      ,           ,  
So for instance, if we'd like
to represent a line segment,


     ,            ,
say the line segment that goes
from a certain vector  say,


     ,          , 
the segment from the vector ,
to the point represented


     ,           , 
by the vector ,.


     ,           , 
If we want to represent that
line segment, then we can


     ,           ,
build that as a pair of pairs.


     ,          , 


     ,           , 
So again, we can represent
line segments.

 
     ,           , 
We can make a constructor that
makes a segment using cons,


     ,            , 
selects out the start of a
segment, selects out the end


      ,           , 
point of the segment; and then
if we actually look at that,


     ,             ,  
if we peel away the abstraction
layers, and say


       ,             , 
what's that really is a pair
of pairs, we'd say


      ,            , 
well that's a pair.


      ,            , 
Here's the segment.


      ,            , 


      ,           ,  
It's car, right, it's car
pointer is a pair, and it's


     ,            , 
cdr is also a pair, and then
what the car is   here's the

 
     ,           , 
car, that itself is
a pair of  and .


     ,           ,  
And similarly the cdr is
a pair of  and .


     ,             ,  
And let me remind you again,
that a lot of people have some


      ,            , 
idea that if I'd taken this
arrow and somehow written it


     ,           , 
to point down, that would
mean something else.


     ,           , 
That's irrelevant.


     ,            ,  
It's only how these are
connected and not whether this


      ,            , 
arrow happens to go vertically
or horizontally.


     ,           , 


     ,           , 
And again just to remind
you, there was

  
     ,           , 
this notion of closure.

 
     ,            ,  
See, closure was the thing
that allowed us to start

 
      ,             , 
building up complexity, that
didn't trap us in pairs.

 
      ,           , 
Particularly what I mean is
the things that we make,

 
     ,           , 
having combined things using
cons to get a pair, those

 
     ,           , 
things themselves can be
combined using cons to make

 
     ,           ,  
more complicated things.

 
     ,            , 
Or as a mathematician might say,
the set of data objects

 
     ,           , 
in List is closed under the
operation of forming pairs.

 
     ,           , 
That's the thing that allows
us to build complexity.

 
     ,            ,   
And that seems obvious, but
remember, a lot of the things


      ,             , 
in the computer languages that
people use are not closed.


     ,           , 
So for example, forming arrays
in basic and Fortran is not a


     ,            , 
closed operation, because you
can make an array of numbers


      ,           , 
or character strings or
something, but you can't make


     ,           ,  
an array of arrays.


     ,            , 
And when you look at means of
combination, you should be


     ,            , 
should be asking yourself
whether things are closed


      ,            , 
under that means
of combination.


      ,            , 

 
      ,            ,  
Well in any case, because we
can form pairs of pairs, we


      ,            , 
can start using pairs to glue
things together in all sorts


     ,           , 
of different ways.


     ,           ,  
So for instance if I'd like to
glue together the four things,


     ,             , 
, ,  and , there are a
lot of ways I can do it.


      ,           ,  
I could, for example, like we
did with that line segment, I


     ,            , 
could make a pair that
had a  and a  and


     ,           ,  
a  and a , right?


     ,             ,  
Or if I liked, I could do
something like this.


      ,            , 
I could make a pair, whose first
thing is a pair, whose

 
     ,           ,  
car is , and his cdr is itself
a pair that has the 


     ,            , 
and the , and then I could
put the  up here.


     ,           , 
So you see, there are a lot of
different ways that I can


     ,            , 
start using pairs to glue things
together, and so it'll


      ,            , 
be a good idea to establish
some kind of conventions,


      ,            , 
right, that allow us to deal
with this thing in some


      ,           , 
conventional way, so we're
not constantly


     ,           ,  
making an ad hoc choice.


     ,            , 
And List has a particular
convention for representing a


     ,           , 
sequence of things as,
essentially, a chain of pairs,

 
     ,           ,
and that's called a List.


     ,          ,
And what a List is is
essentially just a convention


     ,           ,
for representing a sequence.


      ,          , 
I would represent the sequence
, ,  and  by


     ,           , 
a sequence of pairs.


     ,           , 
I'd put  here and then the
cdr of this would point to


     ,            , 
another pair whose car was the
next thing in the sequence,


      ,            , 
and the cdr would point to
another pair whose car was the


      ,            ,  
next thing in the sequence  
so there's   


      ,             , 
and then another one.

 
      ,           , 
So for each item in the
sequence, I'll get a pair.


     ,           , 
And now there are no more, so
I put a special marker that


     ,           , 
means there's nothing more in
the List. OK, so that's a


     ,           , 
conventional way to glue things
together if you want to


     ,           , 
represent a sequence, right.


     ,           , 
And what it is is a bunch of
pairs, the successive cars of


     ,           , 
each pair are the items that you
want to glue together, and


     ,            , 
the cdr pointer points
to the next pair.


      ,           , 
Now if I actually wanted to
construct that, what I would


     ,           , 
type into List is this  I'd
actually construct that as

 
     ,            , 
saying, well this thing is the
cons of  onto the cons of 


      ,           , 
onto the cons of  onto
the cons of  onto,


     ,           , 
well, this thing nil.


     ,           ,  
And what nil is is a name for
the end of List marker.


     ,            , 
It's a special name, which means
this is the end of the


     ,           , 
List. OK, so that's how I would
actually construct that.


     ,           ,


     ,           , 
Of course, it's a terrible drag
to constantly have to


      ,           ,   
write something like the cons
of  onto the cons of  onto


     ,             , 
the cons of , whenever you
want to make this thing.

 
     ,           , 
So List has an operation that's
called List, and List


     ,           , 
is just an abbreviation for
this nest of conses.


     ,           , 
So I could say, I could
construct that by saying that


     ,           ,  
is the List of , ,  and .


     ,           , 
And all this is is another
way, a piece of syntactic


    ,          , 
sugar, a more convenient
way for writing


    ,          , 
that chain of conses  


    ,          , 
cons of cons of cons of cons
of cons of cons onto nil.


    ,          , 
So for example, I could build
this thing and say, I'll


    ,          , 
define  TO  to be the
List of , ,  and .

 
    ,          ,  


    ,           , 
OK, well notice some of the
consequences of using this


    ,          , 
convention.


    ,          , 
First of all if I have this
List, this , ,  and , the


    ,          , 
car of the whole thing
is the first element


    ,           ,  
in the List, right.


     ,            ,  
How do I get ?


     ,           , 
Well,  would be the car of the
cdr of this thing  TO ,


    ,          , 
it would be , right.


    ,           ,  
I take this thing, I take the
cdr of it, which is this much,

 
     ,           , 
and the car of that is , and
then similarly, the car of the


    ,          ,  
cdr of the cdr of  TO ,
cdr, cdr, car  


    ,           ,
would give me , and so on.


    ,         , 
Let's take a look at that
on the computer


    ,          ,  
screen for a second.


    ,           , 


    ,           ,  
I could come up to List, and I
could type define  TO  to be


     ,           , 
the List of , ,
 and , right.


    ,          , 
And I'll tell that to List, and
it says, fine, that's the


    ,          , 
definition of  TO .

  
    ,          , 
And I could say, for instance,
what's the car of the cdr of

 
    ,          , 
the cdr of  TO , close
paren, close paren.

 
    ,          ,
Right, so the car of the cdr
of the cdr would be .

 
    ,         , 
Right, or I could say,
what's  TO  itself.

 
    ,          , 
And you see what List typed out
is , , , , enclosed in

 
    ,          , 
parentheses, and this notation,
typing the elements

 
    ,           , 
of the List enclosed in
parentheses is List's

 
     ,           , 
conventional way for printing
back this chain of pairs that

 
     ,           , 
represents a sequence.

 
     ,          , 
So for example, if I said,
what's the cdr of  TO ,

 
    ,          ,  
that's going to be the rest of
the List. That's the thing


    ,           , 
pointed to by the first pair,
which is, again, a sequence


    ,          , 
that starts off with .


    ,          , 
Or for example, I go off and
say, what's the cdr of the cdr


    ,          , 
of  TO ; then that's ,.


    ,          , 
Or if I say, what's the cdr of
the cdr of the cdr of the cdr


    ,           ,  
of  TO , and I'm down there
looking at the end of List


     ,            , 
pointer itself, and List prints
that as just open


     ,           , 
paren, close paren.


     ,          , 
You can think of that as a List
with nothing in there.

 
    ,          , 
All right, see at the end what
I did there was I looked at


    ,          , 
the cdr of the cdr of the cdr
of  TO , and I'm just left


    ,          , 
with the end of List
pointer itself.


    ,          , 
And that gets printed
as open close.


    ,          , 


    ,          , 
All right, well that's a
conventional way you can see


    ,          ,  
for working down a
List by taking


    ,           , 
successive cdrs of things.


    ,          , 
It's called cdring down a
List. And of course it's


    ,          , 
pretty much of a drag to type
all those cdrs by hand.

 
    ,           , 
You don't do that.


     ,          , 
You write procedures
that do that.


    ,          ,  
And in fact one very, very
common thing to do in List is


    ,            , 
to write procedures that, sort
of, take a List of things and


     ,           , 
do something to every element in
List, and return you a List


     ,           ,  
of the results.


     ,            , 
So what I mean for example, is
I might write a procedure


     ,          , 
called Scale List, and
Scale List I might say I want


    ,          , 
to scale by   the entire List
 TO , and that would return


    ,          ,
for me the List  ,
 ,  ,  .

 
    ,         , 
[UNINTELLIGIBLE PHRASE]


    ,          , 
Right, it returns List, and well
you can see that there's


    ,          , 
going to be some kind
of recursive


    ,          , 
strategy for doing it.


    ,          ,  
How would I actually write
that procedure?


    ,           , 
The idea would be, well if you'd
like to build up a List


    ,           , 
where you've multiplied every
element by  , what you'd say


     ,           ,  
is well you imagine that you'd
taken the rest of the List  


     ,            , 
right, the thing represented
by the cdr of the List, and


     ,          ,
suppose I'd already built a List
where each of these was

 
    ,         , 
multiplied by    


    ,           ,
that would be Scale List of the
cdr of the List. And then


     ,         , 
all I have to do is multiply the
car of the List by  , and


    ,          ,
then cons that onto the rest,
and I'll get a List.


    ,         , 
Right and then similarly, to
have scaled the cdr of the


    ,          ,  
List, I'll scale the cdr of
that and cons onto that 


    ,           , 
multiplied by  .


    ,          , 
And finally when I get all the
way down to the end, and I


    ,          ,
only have this end
of List pointer.


    ,         , 
All right, this thing whose
name is nil   well I just

 
    ,          ,
returned an end of
List pointer.


    ,         ,  
So there's a recursive strategy
for doing that.


    ,           , 
Here's the actual procedure
that does that.


    ,          , 
Right, this is an example of
the general strategy of


    ,          ,  
cdr ing down a List and
so called cons ing


    ,           , 
up the result, right.


    ,           ,  
So to Scale a List l by some
scale factor s, what do I do?


     ,            , 
Well there's a test, and List
has the predicate called null.


     ,          ,  
Null means is this thing the
end of List pointer, or


    ,           ,  
another way to think of that is
are there any elements in

 
    ,           , 
this List, right.


    ,           , 
But in any case if I'm looking
at the end of List pointer,


     ,          , 
then I just return the
end of List pointer.


    ,          , 
I just return nil, otherwise I
cons together the result of


    ,          , 
doing what I'm going to do to
the first element in the List,


    ,           , 
namely taking the car of l and
multiplying it by s, and I


     ,           , 
cons that onto recursively
scaling the rest of the List.


     ,          , 
OK, so again, the general idea
is that you recursively do


    ,          , 
something to the rest of the
List, to the cdr of the List,


    ,          , 
and then you cons that onto
actually doing something to

 
    ,           , 
the first element of the List.
When you get down to the end


     ,           , 
here, you return the end of
List pointer, and that's a


     ,          ,  
general pattern for doing
something to a List. Well of


    ,           , 
course you should know by now
that the very fact that


    ,          , 
there's a general pattern there
means I shouldn't be


    ,          , 
writing this procedure at all.


    ,          ,  
What I should do is write a
procedure that's the general


    ,           , 
pattern itself that says, do
something to everything in the


    ,           , 
List and define this thing
in terms of that.


     ,          ,  
Right, make some higher order
procedure, and here's the

 
    ,           , 
higher order procedure
that does that.


    ,           ,  
It's called MAP, and what MAP
does is it takes a List, takes


     ,           ,  
a List l, and it takes a
procedure p, and it returns


    ,           , 
the List of the elements gotten
by applying p to each


    ,          ,
successive element in the List.
All right, so p to v, p


    ,         , 
to v, p of en.


    ,          , 
Right, so I think of taking this
List and transforming it


    ,            , 
by applying p to each element.


      ,            ,  
And you see all this procedure
is is exactly the general


      ,             ,  
strategy I said.

  
      ,             , 
Instead of multiply by  ,
it's do the procedure.

 
      ,           , 
If the List is empty,
return nil.

 
     ,           , 
Otherwise, apply p to the first
element of the List.

 
     ,           , 
Right, apply p to car of l, and
cons that onto the result

 
     ,           , 
of applying p to everything in
the cdr of the List, so that's

 
     ,            , 
a general procedure
called MAP.

 
      ,           , 
And I could define Scale List
in terms of MAP.

 
     ,           ,
Let me show you that first.

 
     ,          , 
But I could say Scale List is
another way to define it is

 
     ,           , 
just MAP along the List by the
procedure, which takes an item

 
     ,           , 
and multiplies it by s.


     ,           , 


     ,           , 
Right, so this is really the
way I should think about


     ,           , 
scaling the List, build that
actual recursion into the


     ,           , 
general strategy, not to every
particular procedure I write.


     ,           ,  
And of course, one of the values
of doing this is that


     ,           ,
you start to see commonality.


    ,         , 
Right, again you're capturing
general patterns of usage.


    ,          , 
For instance, if I said MAP,
the square procedure, down


    ,          , 
this List  TO , then I'd end
up with , ,  and .

 
    ,          , 
Right, or if I said MAP down
this List, lambda of x plus


    ,          ,  
x , if I MAP that down  TO ,
then I'd get the List


    ,           ,  
where everything had   added
to it  right, so I'd get ,


    ,             ,  
, , .


      ,            , 
And you can see that's going
to be a very, very common


     ,           , 
idea  doing something to every
element in the List.


     ,          , 
One thing you might think about
is writing MAP in an


    ,          , 
iterative style.


    ,          , 
The one I wrote happens to
evolve a recursive process,


    ,          ,  
but we could just as easily have
made one that evolves an

 
    ,           , 
iterative process.


    ,          , 
But see the interesting thing
about it is that once you


    ,          , 
start thinking in
terms of MAP  


    ,          , 
see, once you say scale is just
MAP, you stop thinking


    ,          ,  
about whether it's iterative
or recursive, and you just


    ,           , 
say, well there's this
aggregate, there's this List,


    ,          , 
and what I do is transform every
item in the List, and I


    ,          , 
stop thinking about the
particular control


    ,          ,  
structure in order.


    ,           , 
That's a very, very important
idea, and it, I guess it

 
    ,          , 
really comes out of APL.


    ,          , 
It's, sort of, the really
important idea in APL that you


    ,          ,  
stop thinking about control
structures, and you start


    ,           , 
thinking about operations on
aggregates, and then about


    ,          , 
halfway through this course,
we'll see when we talk about


    ,            , 
something called stream
processing, how that view of


      ,           , 
the world really comes
into its glory.


     ,           ,  
This is just us a, sort
of, cute idea.


     ,            , 
But we'll see much more
applications of that later on.


     ,          , 
Well let me mention that there's
something that's very

 
    ,          , 
similar to MAP that's also a
useful idea, and that's  


    ,          , 
see, MAP says I take a List, I
apply something to each item,


    ,          , 
and I return a List of the
successive values.


    ,          ,  
There's another thing I might
do, which is very, very


    ,           , 
similar, which is take a List
and some action you want to do


    ,          , 
and then do it to each item
in the List in sequence.


    ,          , 
Don't make a List of the
values, just do this


    ,           , 
particular action, and that's
something that's


     ,          ,  
very much like MAP.


    ,           , 
It's called for each, and
for each takes a procedure and

 
    ,          , 
a List, and what it's going to
do is do something to every


    ,          , 
item in the List. So basically
what it does  it says if the


    ,           , 
List is not empty, right, if
the List is not null, then


     ,           , 
what I do is, I apply my
procedure to the first item in


     ,          , 
the List, and then I do this
thing to the rest of the List.


    ,          , 
I apply for each to the
cdr of the List.


    ,          , 
All right, so I do it to the
first of the List, do it to


    ,           , 
the rest of the List, and of
course, when I call it


     ,          , 
recursively, that's going to do
it to the rest of the rest


    ,          ,  
of the List and so on.

 
    ,           , 
And finally, when I get done, I
have to just do something to


    ,           , 
say I'm done, so we'll return
the message "done." So that's


     ,          , 
very, very similar to MAP.


    ,          , 
It's mostly different
in what it returns.


    ,          , 
And so for example, if I had
some procedure that printed


    ,          ,  
things on the screen, if I
wanted to print everything in


    ,           , 
the List, I could say for each,
print this List. Or


    ,           , 
if I had a List of figures, and
I wanted to draw them on


     ,          ,  
the display, I could say
for each, display on the


    ,           , 
screen this figure.

 
    ,          , 


    ,            , 
Let's take questions.


      ,           , 
AUDIENCE  Does it create a new
copy with something done to


     ,           ,
it, unless you explicitly
tell it to do that?


     ,          ,  
Is that correct?


     ,            ,  
PROFESSOR  Right.


     ,            , 
Yeah, that's right.


     ,          ,  
For each does not create
a List. It just


    ,           , 
sort of does something.


    ,          , 
So if you have a bunch of things
you want to do and

 
    ,          , 
you're not worried about
values like printing


    ,          ,  
something, or drawing something
on the screen, or


    ,           , 
ringing the bell on the
terminal, or for something,


    ,          , 
you can say for each, you know,
do this for each of


    ,          , 
those things in the List,
whereas MAP actually builds


    ,          , 
you this new collection
of values that you


    ,          , 
might want to use.


    ,          , 
It's just a subtle difference
between them.


    ,          , 
AUDIENCE  Could you write MAP
using for each, so that you


    ,          , 
did some sort of cons or
something to build

  
    ,          , 
the List back up?

 
    ,          , 
PROFESSOR  Well, sort of.

 
    ,          , 
I mean, I probably could.

 
    ,          , 
I can't think of how to do it
right offhand, but yeah, I

 
    ,          , 
could arrange something.

 
    ,          , 
AUDIENCE  The vital difference
between MAP and for each is

 
    ,          , 
one is recursive and the other
is not in the sense you

 
    ,           , 
defined early yesterday,
I believe.

 
     ,           , 
PROFESSOR  Yeah, about MAP and
for each and recursion.

 
     ,           , 
Yeah, that's a good point.

 
     ,           , 


     ,          ,
For the MAP procedure I
wrote, that happens to


    ,         , 
be a recursive process.


    ,          , 
And the reason for that is that
when you've done this


    ,          ,   
thing to the rest of the List,
you're waiting for that value


    ,            , 
so that you can stick it on to
the beginning of the List,


    ,          , 
whereas for each doesn't
really have any


    ,          , 
values to wait for.


    ,          , 
So that turns out to be
an iterative process.


    ,          , 
That's not fundamental.

 
    ,           , 
I could have defined MAP so
that it's evolved by an


     ,          , 
iterative process.


    ,          , 
I just didn't happen to.


    ,          , 
AUDIENCE  If you were to cons
for each with a List that had


    ,          , 
embedded Lists, I imagine
it would work, right?


    ,          ,  
It would give you the internal
elements of each of those


    ,           , 
internal Lists?


    ,           , 
PROFESSOR  OK, the question
is if I [UNINTELLIGIBLE]


     ,          , 
for each or MAP, for that
matter, with a List that had


    ,          , 
Lists in it  

 
    ,          , 
although we haven't really
looked at that yet  


    ,           , 
would that work.


     ,           , 
The answer is yes in the sense
I mean work and no in the


     ,           , 
sense that you mean work,
because all that  


     ,          , 
see if I give you a List, where
hanging off here is, you


    ,          ,  
know, is something that's not
a number, maybe another List


    ,           , 
or you know, another cons or
something, for each just says


    ,          , 
do something to each item in
this List. It goes down


    ,          ,
successively looking
at the cdrs.


    ,         , 
AUDIENCE  OK.

 
    ,          , 
PROFESSOR  And as far as it's
concerned, the first item in


    ,           , 
this List is whatever
is hanging off here.


     ,          , 
AUDIENCE  Mhm.


    ,          , 
PROFESSOR  That might or might
not be the right thing.


    ,          , 
AUDIENCE  So it wouldn't
go down into the  


    ,          ,  
PROFESSOR  Absolutely not.


    ,           , 
I could certainly write
something else.


    ,           , 
There's another, what you're
looking for is a common


     ,          ,  
pattern of usage called tree
recursion, where you take a


    ,           ,
List, and you actually go all
the way down to the what's

 
    ,         , 
called the leaves of the tree.


    ,           , 
And you could write such a
thing, but that's not for each


     ,          , 
and it's not MAP.


    ,          , 
Remember, these things
are really


    ,          ,
being very simple minded.


    ,         , 
OK, no more questions?


    ,          ,
All right, let's break.


    ,         , 
[MUSIC PLAYING]


    ,          , 
PROFESSOR  What I'd like to do
now is spend the rest of this


    ,           , 
time talking about one example,
and this example, I

 
     ,          , 
think, pretty much summarizes
everything that we've done up


    ,          ,  
until now  all right, and that's
List structure and


    ,            , 
issues of abstraction, and
representation and capturing


     ,           , 
commonality with higher order
procedures, and also is going


     ,           , 
to introduce something we
haven't really talked about a


     ,          , 
lot yet   what I said is the
major third theme in this


    ,          , 
course  meta linguistic
abstraction, which is the idea


    ,           , 
that one of the ways of
tackling complexity in


     ,          , 
engineering design is to build
a suitable powerful language.


    ,          , 
You might recall what I said was
pretty much the very most

 
    ,          , 
important thing that we're
going to tell you in this


    ,          ,  
course is that when you think
about a language, you think


    ,           , 
about it in terms of what are
the primitives; what are the


    ,          ,
means of combination  


    ,         , 


    ,          , 
right, what are the things that
allow you to build bigger


    ,          ,
things; and then what are the
means of abstraction.


    ,           , 


      ,            ,  
How do you take those bigger
things that you've built and


      ,             , 
put black boxes around them and
use them as elements in

 
      ,           ,
making something even
more complicated?


     ,          , 
Now the particular language I'm
going to talk about is an


     ,           ,
example that was made up
by a friend of ours


     ,          ,
called Peter Henderson.


     ,          , 


     ,           ,  
Peter Henderson is
at the University


     ,            , 
of Stirling in Scotland.


     ,           , 
And what this language is about
is making figures that


     ,           ,  
sort of look like this.


     ,            , 
This is this is a woodcut by
Escher called "Square Limit."

 
     ,           , 
You, sort of, see it has this
complicated, kind of,


     ,           , 
recursive, sort of, recursive
kind of figure, where there's


     ,           ,  
this fish pattern in the middle
and things sort of


     ,            , 
bleed out smaller and smaller
in self similar ways.


     ,           , 


     ,          , 
Anyway, Peter Henderson's
language was for describing


    ,          , 
figures that look like that and
designing new ones that


    ,           , 
look like that and drawing
them on a display screen.


     ,          , 
There's another theme that we'll
see illustrated by this


    ,          ,  
example, and that's the issue
of what Gerry and I have

  
    ,           ,  
already mentioned a lot  that
there's no real difference, in

 
    ,           , 
some sense, between procedures
and data.

 
    ,          , 
And anyway I hope by the end of
this morning, if you're not

 
    ,          , 
already, you will be completely
confused about what

 
    ,          ,
the difference between
procedures and data are, if

 
    ,         , 
you're not confused about
that already.

 
    ,          , 
Well in any case, let's start
describing Peter's language.

 
    ,          , 
I should start by telling you
what the primitives are.

 
    ,          , 
This language is very
simple because

 
    ,            , 
there's only one primitive.

 
      ,           , 


     ,           , 
A primitive is not quite
what you think it is.


     ,           , 
There's only one primitive
called a picture, and a


     ,          ,  
picture is not quite what
you think it is.


    ,           , 
Here's an example.


    ,          , 
This is a picture of George.


    ,          , 


    ,          , 
The idea is that a picture in
this language is going to be


    ,           , 
something that draws a figure
scaled to fit a rectangle that


     ,          ,  
you specify.

 
    ,           ,  
So here you see in [? Saint ?]


    ,           , 
[? Lawrence's ?]


    ,          ,  
outline of a rectangle, that's
not really part of the


    ,           , 
picture, but the picture  


    ,          , 
you'll give it a rectangle, and
it will draw this figure


    ,          ,  
scaled to fit the rectangle.


    ,            , 
So for example, there's
George, and here,


     ,          , 
this is also George.


    ,          , 
It's the same picture,
right, just scaled to


    ,          , 
fit a different rectangle.

 
    ,          , 
Here's George as a fat kid.


    ,           ,  


     ,            , 
That's the same George.


     ,           , 
It's all the same figure.


     ,           , 
All of these three things
are the same


     ,           , 
picture in this language.


     ,          ,  
I'm just giving it different
rectangles to scale itself in.


    ,           ,  


    ,           , 
OK, those are the primitives.


    ,          , 
That is the primitive.

 
    ,          , 
Now let's start talking about
the means of combination and


    ,          , 
the operations.


    ,          ,  
There is, for example, an
operation called Rotate.


    ,           ,  
And what Rotate does is, if I
have a picture, say a picture


    ,           ,  
that draws an "A" in some
rectangle that I give it, the


    ,           ,  
Rotate of that  


    ,           , 
say the Rotate by   degrees
would, if I give it a


    ,          , 
rectangle, draw the same image,
but again, scaled to


    ,          ,  
fit that rectangle.


    ,           , 

 
    ,          ,  
So that's Rotate
by   degrees.


    ,             ,  
There's another operation called
Flip that can flip


      ,            ,
something, either horizontally
or vertically.


     ,          , 
All right, so those are, sort
of, operations, or you can


     ,          ,  
think of those as means of
combination of one element.


    ,           , 
I can put things together.


    ,          , 
There's a means of combination
called Beside, and what Beside


    ,          ,
does  it'll take two pictures,
let's say A and B  


    ,         ,


    ,         , 
and by picture I mean something
that's going to draw

 
    ,          ,
an image in a specified
rectangle  


    ,         ,
and what Beside will do  


    ,         ,
I have to say, Beside of A and
B, the side of two pictures


    ,         , 
and some number, s.


    ,          ,
And s will be a number
between zero and one.


    ,          , 


     ,          , 
And Beside will draw a picture
that looks like this.


    ,          ,  
It will take the rectangle
you give it and


    ,           , 
scale its base by s.


    ,          , 
Say s is  ..

 
    ,            , 


      ,           , 
And then over here
it will draw  


     ,          ,  
it'll put the first picture,
and over here it'll put the


    ,           ,  
second picture.


    ,           , 
Or for instance if I gave it a
different value of s, if I


    ,          , 
said Beside with a  ., it
would do the same thing,


    ,          , 
except the A would
be much skinnier.


    ,          , 


    ,          , 
So it would draw something
like that.


    ,          , 
So there's a means of
combination Beside, and

 
    ,          , 
similarly there's an Above,
which does the same thing


    ,          , 
except it puts them vertically
instead of horizontally.


    ,          , 


    ,           , 
Well let's look at that.


     ,          , 
All right, there's George and
his kid brother, which is,


    ,           , 
right, constructed by taking
George and putting him Beside


     ,          , 
the Above  


    ,          , 
taking the empty picture, and
there's a thing called the


    ,          , 
empty picture, which does
the obvious thing  


    ,          ,
putting the empty picture above
a copy of George, and

 
    ,         ,  
then putting that whole
thing Beside George.


    ,           ,  


    ,           , 
Here's something called P which
is, again, George Beside


    ,          , 
Flipping George, I think,
horizontally in this case, and


    ,          ,  
then Rotating the whole result
  degrees and putting them


    ,            , 
Beside one another with the
basic rectangle divided at


     ,          , 
 ., right, and I can call that
P. And then I can take P,


    ,           ,  
and put it above the Flipped
copy of itself, and I can call


     ,            , 
that Q.


     ,          , 
Notice how rapidly that we've
built up complexity, just in,

  
    ,          , 
you know,  seconds, you've
gotten from George to that

 
    ,          , 
thing Q. Why is that?

 
    ,          ,  
How are how we able to
do that so fast?

 
    ,           , 
The answer is the closure
property.

 
    ,          , 
See, it's the fact that when
I take a picture and put it

 
    ,          , 
Beside another picture, that's
then, again, a picture that I

 
    ,          ,  
can go and Rotate and Flip or
put Above something else.

 
    ,           ,
Right, and when I take that
element P, which is the Beside

 
    ,         , 
or the Flip or the Rotate
of something,

 
    ,          , 
that's, again, a picture.

 
    ,          , 
Right, the world of pictures is
closed under those means of


    ,           , 
combination.


     ,          , 
So whenever I have something,
I can turn right around and


    ,          , 
use that as an element
in something else.


    ,          ,  
So maybe better than List and
segments, that just gives you


    ,            ,  
an image for how fast you can
build up complexity, because


     ,            , 
operations are closed.


     ,           ,  


     ,           , 
OK, well before we go on with
building more things, let's


    ,          ,
talk about how this language
is actually implemented.

 
    ,         ,  


    ,           , 
The basic element that sits
under the table here is a


    ,          , 
thing called a rectangle, and
what a rectangle is going to


    ,          ,  
be, it's a thing that specified
by an origin that's


    ,           , 
going to be some vector
that says where


    ,           , 
the rectangle starts.


     ,          ,  
And then there's going to be
some other vector that I'm


    ,           ,  
going to call the horizontal
part of the rectangle, and


    ,           , 
another picture called the


    ,            , 
vertical part of the rectangle.

 
      ,           , 
And those three pieces are the
elements  where the lower


     ,           ,  
vertex is, how you get to the
next vertex over here, and how


     ,            , 
you get to the vertex
over there.


     ,          , 
The three vectors specify
a rectangle.


    ,          ,  


    ,           , 
Now to actually build
rectangles, what I'll assume


    ,          , 
is that we have a constructor
called "make rectangle," or


    ,          , 
"make rect," and selectors for
horiz and vert and origin that


    ,          , 
get out the pieces of
that rectangle.


    ,          ,  
And well, you know a lot of
ways you can do this now.

 
    ,           , 
You can do it by using pairs in
some way or other standard


    ,          , 
List or not.


    ,           , 
But in any case, the
implementation of these


     ,          , 
things, that's George's
problem.


    ,          ,  
It's just a data representation
problem.


    ,           ,  
So let's assume we have these
rectangles to work with.


    ,           , 


    ,             ,
OK.


       ,           , 


      ,            ,  
Now the idea of this, remember
what's got to happen.

 
      ,             , 
Somehow we have to worry about
taking the figure and scaling


      ,           , 
it to fit some rectangle that
you give it, that's the basic


     ,           , 
thing you have to arrange, that
these pictures can do.


     ,           , 


     ,           , 
How do we think about that?


     ,           ,  
Well, one way to think about
that is that any time I give


     ,             ,  
you a rectangle, that defines,
in some sense, a


      ,            , 
transformation from
the standard


     ,           ,
square into that rectangle.


     ,          , 
Let me say what I mean.

 
     ,           , 
By the standard square, I'll
mean something, which is a


     ,           , 
square whose coordinates are
 , , and , , and  , and ,.


     ,           , 


     ,           , 
And there's some sort of
the obvious scaling


     ,           , 
transformation, which maps this
to that and this to that,


     ,          , 
and sort of, stretches
everything uniformly.


    ,          ,
So we take a line segment like
this and end up mapping it to


    ,         , 
a line segment like that, so
some point xy goes to some


    ,          ,   
other point up there.


    ,            , 
And although it's not important,
with a little

 
    ,          , 
vector algebra, you could
write that formula.


    ,          , 
The thing that xy goes to, the
point that xy goes to is


    ,          , 
gotten by taking the origin of
the rectangle and then adding


    ,          , 
that as a vector to  


    ,          ,  
well, take x, the x coordinate,
which is something


    ,            ,  
between zero and one, multiply
that by the horizontal vector


     ,            , 
of the rectangle; and take the
y coordinate, which is also


     ,          , 
something between zero and one
and multiply that by the


    ,          , 
vertical vector of
the rectangle.


    ,          , 
That's just a little
linear algebra.

 
    ,          ,  
Anyway, that's the formula,
which is the right obvious


    ,           ,  
transformation that takes things
into the unit square,


    ,           , 
into the interior of
that rectangle.


    ,          , 


    ,          ,  
OK well, let's actually look
at that as a procedure.


    ,           , 
So what we want is the thing
which tells us that particular


    ,          ,  
transformation that a
rectangle defines.


    ,           , 
So here's the procedure.


    ,          ,  
I'll call it coordinate map.


    ,           , 
Coordinate map is the thing that
takes as its argument a

 
    ,          , 
rectangle and returns for you
a procedure on points.


    ,            , 


      ,           ,  
Right, so for each rectangle you
get a way of transforming


     ,            , 
a point xy into that
rectangle.


     ,           ,  
And how do you get it?


     ,            , 
Well I just  


     ,           , 
writing in List what I wrote
there on the blackboard  


     ,          ,  
I add to the origin
of the rectangle


    ,            , 
the result of adding  


     ,          ,  
I take the horizontal part of
the rectangle; I scale that by

  
    ,           , 
the x coordinate of the point.

 
    ,          , 
I take the vertical vector
of the rectangle.

 
    ,          , 
I scale that by the y coordinate
of the point, and

 
    ,           , 
then add all those
three things up.

 
     ,          , 
That's the procedure.

 
    ,          , 
That is the procedure that I'm
going to apply to a point.

 
    ,          , 

 
    ,          , 
And this whole thing is
generated for each rectangle.

 
    ,          ,  
So any rectangle defines a
coordinate MAP, which is a

 
    ,           , 
procedure on points.

 
    ,            , 
OK.


      ,           , 


     ,          ,  
All right, so for example,
George here, my original


    ,           ,  
George, might have been
something that I specified by


    ,            , 
segments in the unit square, and
then for each rectangle I


     ,          ,  
give this thing, I'm going to
draw those segments inside


    ,           , 
that rectangle.


    ,           , 
How actually do I do that?


     ,          , 
Well I take each segment in my
original reference George that


    ,           ,  
was specified, and to each of
the end points of those

 
     ,           , 
segments, I applied the
coordinate MAP of the


    ,          , 
particular rectangle I
want to draw it in.


    ,          , 
So for example, this lower
rectangle, this George as a


    ,          , 
fat kid rectangle, has
its coordinate MAP.


    ,          , 
And if I want to draw this
image, what I do is for each


    ,           ,  
segment here, say for this
segment, I transformed that


     ,            ,  
point by the coordinate MAP,
transform that point by the


     ,            , 
coordinate MAP.


     ,           , 
That will give me this point
and that point and draw the


     ,           , 
segment between them.

 
     ,          , 
Right, that's the idea.


    ,          , 
Right, and if I give it a
different rectangle like this


    ,          ,  
one, that's a different
coordinate MAP, so I get a


    ,           ,
different image of those
line segments.


    ,         ,  
Well how do we actually get
a picture to start with?


    ,           , 
I can build a picture to start
with out of a List of line


    ,          , 
segments initially.


    ,          , 
Here's a procedure that builds
what I'll call a primitive


    ,          , 
picture, meaning one I, sort of,
got that didn't come out


    ,          , 
of Beside or Rotate
or something.

 
    ,          , 
It starts with a List of
line segments, and now


    ,          ,  
it does what I said.


    ,           ,  
What's a picture have to be?


    ,           , 
First of all it's a procedure
that's defined on rectangles.


    ,          ,  


    ,           , 
What does it do?


    ,          , 
It says for each  


    ,          , 
this is going to be a List
of line segments  


    ,           , 
for each segment, for each s,
which is a segment in this


     ,           , 
List of segments, well
it draws a line.

 
     ,           , 
What line does it draw?


     ,          , 
It gets the start point of that
segment, transforms that


    ,          , 
by the coordinate MAP
of the rectangle.


    ,          , 
That's the first new point
it wants to do.


    ,          , 
Then it takes the endpoint of
the segment, transforms that


    ,          , 
by the coordinate MAP of the
rectangle, and then draws a


    ,          , 
line between.


    ,           , 
Let's assume drawline is some
primitive that's built into


     ,          , 
the system that actually draws
a line on the display.


    ,          , 
All right, so it transforms
the endpoints by the

 
    ,          , 
coordinate MAP of the rectangle,
draws a line


    ,          , 
between them, does that
for each s in


    ,          , 
this List of segments.


    ,          ,   
And now remember again, a
picture is a procedure that


    ,            , 
takes a rectangle as argument.


    ,          , 
So when you hand it a rectangle,
this is what it


    ,          , 
does  draws those lines.


    ,          , 
All right, so there's  


    ,           , 
how would I actually
use this thing?


     ,           ,
Let's make it a little
bit more concrete.

 
     ,          , 


     ,          ,  
Right, I would say for instance,
define R to be


    ,           , 
make rectangle of some stuff,
and I'd have to specify some


    ,           ,  
vectors here using
make vector.


     ,           ,  
And then I could say, define
say, G to be make picture, and


    ,           ,  
then some stuff.


    ,           , 
And what I'd have to specify
here is a List of line


    ,          , 
segments, right, using
make segment.


    ,          , 
Make segment might be made out
of vectors, and vectors might


    ,          , 
be made out of points.

 
    ,           , 
And then if I actually wanted to
see the image of G inside a


     ,           , 
rectangle, well a picture is
a procedure that takes a


     ,          , 
rectangle as argument.


    ,          , 
So if I then called G with an
input of R, that would cause


    ,          , 
whatever image G is worrying
about to be drawn inside the


    ,          ,
rectangle R. Right, so that's
how you'd use that.


    ,          , 
[MUSIC PLAYING]


     ,          , 
PROFESSOR  Well why is it that
I say this example is nice?


    ,          , 
You probably don't
think it's nice.


    ,          , 
You probably think it's
more weird than nice.

 
    ,          , 
Right, representing these
pictures as procedures, which


    ,          , 
do complicated things
with rectangles.


    ,          , 
So why is it nice?


    ,          , 


    ,          ,  
The reason it's nice is that
once you've implemented the


    ,           , 
primitives in this way, the
means of combination just fall


    ,          , 
out by implementing
procedures.


    ,          ,  
Let me show you what I mean.


    ,           , 
Suppose we want to
implement Beside.


    ,          , 

  
    ,          ,  
So I'd like to  

 
    ,           , 
suppose I've got a picture.

 
    ,          , 
Let's call it P.

 
    ,          ,  
P is going to be   and
now remember what a

 
    ,            , 
picture really is.

 
     ,          ,  
It's a thing that if you can
hand it some rectangle, it

 
    ,              , 
will cause an image to be drawn
in whatever rectangle

 
       ,            , 
you hand it.

 
      ,            , 
And suppose P two is some other
picture, and you hand

 
      ,            , 
that a rectangle.

 
      ,           , 
And whatever rectangle
you hand it,


     ,           , 
it draws some picture.


     ,           , 


     ,           , 
And now if I'd like to implement
Beside of P and P


     ,           , 
with a scale factor A, well
what does that have to be?


     ,           , 
That's got to be picture.


     ,           , 
It's got to be a thing that you
hand it a rectangle, and


     ,           ,  
it draws something in
that rectangle.


     ,            , 
So if hand Beside
this rectangle  


     ,           , 
let's hand it a rectangle.

 
     ,           , 
Well what's it going to do?


     ,           ,  
it's going to take this
rectangle and split it into


     ,            , 
two at a ratio of A and one
minus A. And it will say, oh


     ,           ,
sure, now I've got
two rectangles.


     ,          , 


     ,           , 
And now it goes off to P and
says P, well draw yourself in


     ,           , 
this rectangle, and goes off
to P, and says, P, fine,


     ,          , 
draw yourself in
this rectangle.


    ,          , 
The only computation it has to
do is figure out what these


    ,          , 
rectangles are.

 
    ,          , 
Remember a rectangle is
specified by an origin and a


    ,          , 
horizontal vector and a vertical
vector, so it's got


    ,          ,  
to figure out what
these things are.


    ,            , 
So for this first rectangle, the
origin turns out to be the


     ,          , 
origin of the original
rectangle, and the vertical


    ,          , 
vector is the same as the
vertical vector of the


    ,          , 
original rectangle.


    ,          , 
The horizontal vector is the
horizontal vector of the


    ,          , 
original rectangle
scaled by A. And


    ,          , 
that's the first rectangle.

 
    ,          , 
The second rectangle, the origin
is the original origin


    ,           , 
plus that horizontal vector
scaled by A. The horizontal


     ,           ,  
vector of the second rectangle
is the rest of the horizontal


     ,            , 
vector of the first one, which
is  minus A times the


     ,          , 
original H, and the vertical
vector is still v. But


    ,          , 
basically it goes and
constructs these two


    ,          , 
rectangles, and the important
point is having constructed


    ,          , 
the rectangles, it says OK,
p, you draw yourself in


    ,          ,  
there, and p, you draw yourself
in there, and that's


    ,           , 
all Beside has to do.

 
    ,          ,
All right, let's look at
that piece of code.


    ,         ,  


    ,           , 
Beside of a picture and another
picture with some


    ,          ,  
scaling ratio is first of all,
since it's a picture, a


    ,           , 
procedure that's going to take
a rectangle as argument.


    ,          ,  
What's it going to do?


    ,             , 
It says, p draw yourself in
some rectangle and p draw


      ,           , 
yourself in some other
rectangle.


     ,           , 
And now what are those
rectangles?


     ,           , 
Well here's the computation.

 
     ,           , 
It makes a rectangle, and this
is the algebra I just did on


     ,          , 
the board  the origin,
something; the horizontal


    ,          ,  
vector, something; and the
vertical vector, something.


    ,           , 
And for p, the rectangle it
wants has some other origin


    ,          , 
and horizontal vector
and vertical vector.


    ,          , 
But the important point is that
all it's saying is, p,


    ,          , 
go do your thing in one
rectangle, and p, go do your


    ,          , 
thing in another rectangle.


    ,           , 
That's all the Beside
has to do.


     ,          ,  
OK, similarly Rotate  

 
    ,           , 
see if I have this picture A,
and I want to look at say


    ,          ,  
rotating A by   degrees, what
that should mean is, well take


    ,           ,  
this rectangle, which is origin
and horizontal vector


    ,            , 
and vertical vector, and now
pretend that it's really the


     ,           , 
rectangle that looks like this,
which has an origin and


     ,           , 
a horizontal vector up here, and
a vertical vector there,


     ,          , 
and now draw yourself with
respect to that rectangle.


    ,          , 
Let me show you that
as a procedure.


    ,          , 
All right, so we'll Rotate   of
the picture, because again,


    ,          , 
a procedure for rectangle, which
says, OK picture, draw

 
    ,          , 
yourself in some rectangle; and
then this algebra is the


    ,           , 
transformation on
the rectangle.


     ,          , 
It's the one which makes it
look like the rectangle is


    ,          , 
sideways, the origin is
someplace else and the


    ,          , 
vertical vector is someplace
else, and the horizontal


    ,          ,
vector is someplace else,
and vertical vector


    ,         , 
is someplace else.


    ,          ,
OK?


    ,         ,
OK.


    ,         , 

 
    ,           , 
OK, again notice, the crucial
thing that's going on here is


     ,          ,  
you're using the representation
of pictures as


    ,            , 
procedures to automatically
get the closure property,


     ,           , 
because what happens is, Beside
just has this thing p.


     ,           , 
Beside doesn't care if that's
a primitive picture or it's


     ,          , 
line segments or if p is,
itself, the result of doing


    ,          , 
Aboves or Besides or Rotates.


    ,          , 
All Beside has to know about,
say, p is that if you hand p


    ,          ,  
a rectangle, it will cause
something to be drawn.


    ,           , 
And above that level, Beside
just doesn't  

  
    ,          ,
it's none of its business how p
accomplishes that drawing.

 
    ,         , 
All right, so you're using the
procedural representation to

 
    ,          , 
ensure this closure.

 
    ,          , 

 
    ,          , 
OK.

 
    ,           ,  
So implementing pictures as
procedures makes these means

 
     ,           ,  
of combination, you know, both
pretty simple and also, I

 
    ,           ,  
think, elegant.

 
    ,           , 
But that's not the
real punchline.

 
    ,          ,  
The real punchline comes when
you look at the means of

 
    ,           , 
abstraction in this language.


    ,          ,  
Because what have we done?


    ,            , 
We've implemented the means of
combination themselves as


     ,           ,  
procedures.


     ,            , 


     ,           , 
And what that means is that when
we go to abstract in this


     ,          , 
language, everything that List
supplies us for manipulating


    ,           ,  
procedures is automatically
available to do things in this


     ,           ,  
picture language.


    ,           , 
The technical term I want to
say is not only is this

 
    ,          ,  
language implemented in List,
obviously it is, but the


    ,           , 
language is nicely embedded
in List. What I mean is by


    ,          ,  
embedding the language in this
way, all the power of List is


    ,           , 
automatically available
as an extension to


    ,          , 
whatever you want to do.


    ,          ,  
And what do I mean by that?


    ,           , 
Example  say, suppose I want
to make a thing that takes


    ,           ,  
four pictures A, B, C and D, and
makes a configuration that


     ,            , 
looks like this.


     ,          , 

 
    ,          , 
Well you might call that, you
know, four pictures or


    ,          , 
something, four pict
configuration.


    ,          , 
How do I do that?


    ,          ,  
Well I can obviously do that.


    ,           , 
I just write a procedure that
takes B above D and A above C


    ,          , 
and puts those things
beside each other.


    ,          , 
So I automatically have List's
ability to do procedure


    ,          ,  
composition.


    ,           , 
And I didn't have to make
that specifically


    ,          , 
in the picture language.

 
    ,          , 
It's automatic from the fact
that the means of combination


    ,          ,  
are themselves procedures.


    ,           , 
Or suppose I wanted to do
something a little bit more


    ,          ,  
complicated.


    ,           , 
I wanted to put in a parameter
so that for each of these, I


    ,           , 
could independently specify
a rotation by   degrees.


     ,          ,  
That's just putting a parameter
in the procedure.


    ,           , 
It's automatically there.


    ,          , 
Right, it automatically comes
from the embedding.


    ,           , 
Or even more, suppose I wanted
to, you know, use recursion.

 
     ,           , 
Let's look at a recursive
means of


     ,           , 
combination on pictures.


     ,          , 
I could say define  


    ,          , 
let's see if you can figure out
what this one is   suppose


    ,          , 
I say define what it means
to right push a picture,


    ,          , 
right push a picture and some
integer N and some scale


    ,           ,   
factor A. I'll define this to
say if N equals  , then the


     ,            , 
answer is the picture.


    ,          ,
Otherwise I'm going to put  


    ,         ,  
oops, name change  P. Otherwise,
I'm going to take P

 
    ,            , 
and put it beside the results of
recursively right pushing P


     ,          , 
with N minus  and A and use a
scale factor of A. OK, so if


    ,          ,  
N  , it's P. Otherwise I put P
with a scale factor of A  


    ,           , 
I'm sorry I didn't align
this right  


    ,          ,  
recursively beside the result of
right pushing P, N minus 


    ,           , 
times with a scale
factor of A.


    ,          , 
There's a recursive means
of combination.


    ,          , 
What's that look like?


    ,          ,  
Well, here's what
it looks like.


    ,           , 
There's George right pushed
against himself twice with a

 
    ,          , 
scale factor of  ..


    ,             ,  
OK.


       ,              , 
Where'd that come from?


       ,            , 
How did I get all this
fancy recursion?


      ,            , 
And the answer is just


      ,            , 
automatic, absolutely automatic.


      ,            , 
Since these are procedures, the
embedding says, well sure,


      ,            , 
I can define recursive
procedures.


      ,           , 
I didn't have to arrange that.


     ,           , 
And of course, we can
do more complicated

 
     ,           , 
things of the same sort.


     ,           , 
I could make something
that does an up push.


     ,           , 
Right, that sort of goes like
this, by recursively putting


     ,           , 
something above.


     ,           , 
Or I could make something
that, sort


     ,           , 
of, was this scheme.


     ,           , 
I might start out with a picture
and then, sort of,


     ,           , 
recursively both push it aside
and above, and that might put


     ,           , 
something there.


     ,           , 
And then up here I put the same
recursive thing, and I

 
     ,           , 
might end up with something
like this.


     ,           , 
Right, so there's a procedure
that's a little bit more


     ,           ,  
complicated than right push
but not much.


     ,            , 
I just do an Above
and a Beside,


     ,           , 
rather than just a Beside.


     ,           , 


     ,           , 
Now if I take that and apply
that with the idea of putting


     ,           ,  
four pictures together, which I
can surely do; and I go and


     ,           , 
I apply that to Q, which we
defined before, right, what I


    ,          , 
end up with this is this thing,
which is, sort of, the

   
    ,          , 
square limit of Q, done twice.

  
    ,          , 

  
    ,          , 
Right, and then we can compare
that with Escher's "Square

  
    ,          , 
Limit." And you see, it's
sort of the same idea.

  
    ,          ,  
Escher's is, of course,
much, much prettier.

  
    ,           , 
If we go back and look at
George, right, if we go look

  
    ,          , 
at George here  

  
    ,          , 
see, I started with a fairly
arbitrary design, this picture

  
    ,          , 
of George and did
things with it.

  
    ,          , 
Right, whereas if we go look at
the Escher picture, right,

  
    ,          ,  
the Escher picture is not
an arbitrary design.

 
    ,           , 
It's this very, very clever
thing, so that when you take

 
    ,           , 
this fish body and Rotate it and
shrink it down, it bleeds

 
     ,           , 
into the next one
really nicely.

 
     ,           , 

 
     ,           , 
And of course with George,
I didn't really do

 
     ,          , 
anything like that.

 
    ,          ,  
So if we look at George, right,
there's a little bit of

 
    ,           , 
match up, but not very nice,
and it's pretty arbitrary.

 
    ,          , 
One very nice project, by the
way, would be to write a

  
    ,          , 
procedure that could take some
basic figure like this George

 
    ,           ,  
thing and start moving the ends
of the lines around, so

 
     ,           , 
you got a really nice one when
you went and did that "Square

 
    ,          , 
Limit" process.

 
    ,          , 
That'd be a really nice
thing to think about.

 
    ,          , 
Well so, we can combine
things.

 
    ,           , 
We can recursive procedures.

 
     ,          , 
We can do all kinds of things,
and that's all automatic.

 
    ,          ,  
Right, the important point, the
difference between merely

 
    ,           , 
implementing something in
a language and embedding

  
    ,          , 
something in the language, so
that you don't lose the

 
    ,          , 
original power of the language,
and what List is

 
    ,          , 
great at, see List is a lousy
language for doing any

 
    ,          ,  
particular problem.

 
    ,             , 
What it's good for is figuring
out the right language that

 
      ,           ,   
you want and embedding that in
List. That's the real power of

 
     ,             , 
this approach to design.

 
     ,           , 
Of course, we can go further.

 
     ,           , 
See, you saw the other thing
that we can do in List is

 
     ,          ,  
capture general methods of doing
things as higher order

  
    ,           ,  
procedures.

 
    ,           ,  
And you probably just from me
drawing it got the idea that

 
    ,           ,  
right push and the analogous
thing where you push something

 
    ,           , 
up and up and up and up and this
corner push thing are all

 
    ,          , 
generalizations of a common
kind of idea.

 
    ,          , 
So just to illustrate and give
you practice in looking at a

 
    ,          , 
fairly convoluted use of higher
order procedures, let

 
    ,          , 
me show you the general idea
of pushing some means of

 
    ,          , 
combination to recursively
repeat it.

 
    ,          , 
So here's a good one
to puzzle out.

  
    ,          , 
We'll define it what it means
to push using a means of

 
    ,           ,  
combination.

 
     ,            ,
Comb is going to be something
like the Beside or Above.

 
     ,          , 
Well what's that going to be.

 
     ,           , 
That's going to be a procedure,
remember what

 
     ,          , 
Beside actually was, right.

 
    ,          ,  
It took a picture, took two
pictures and a scale factor.

 
    ,           , 
Using that I produced something
that took a level

 
    ,          ,  
number and a picture and a scale
factor, that I called

 
    ,           , 
right push.

  
    ,          ,  
So this is going to be something
that takes a

 
    ,           ,  
picture, a level number and
a scale factor, and

 
    ,           , 
it's going to say  

 
    ,          , 

 
    ,          , 
I'm going to do some
repeated operation.

 
    ,          ,  
I'm going to repeatedly apply
the procedure which takes a

 
    ,           , 
picture and applies the means of
combination to the picture

 
    ,          , 
and the original picture and the
one I took in here and the

 
    ,           ,  
scale factor, and I do the
thing which repeats this

 
     ,           , 
procedure N times, and I apply
that whole thing to my

  
    ,          , 
original picture.

 
    ,          ,  

 
    ,           , 
Repeated here, in case you
haven't seen it, is another

 
    ,          , 
higher order procedure that
takes a procedure and a number

 
    ,          , 
and returns for you another
procedure that applies this

 
    ,          , 
procedure N times.

 
    ,          , 
And I think some of you have
already written repeated as an

 
    ,          , 
exercise, but if you haven't,
it's a very good exercise in

 
    ,          , 
thinking about higher
order procedures.

 
    ,          , 
But in any case, the result of
this repeated is what I apply

  
    ,          , 
to picture.

 
    ,          , 

 
    ,          , 
And having done that, that's
going to capture  

 
    ,          ,  
that is the thing, the way I got
from the idea of Beside to

 
    ,             , 
the idea of right push So having
done that, I could say

 
      ,          , 
define right push to
be push of Beside.

 
    ,          , 

 
    ,           , 
Or if I say, define up push to
be push of Beside, I'd get the

 
     ,          , 
analogous thing or define
corner push to be push of some

 
    ,          ,
appropriate thing that did both
the Beside and Above, or

  
    ,         , 
I could push anything.

 
    ,          , 
Anyway this is, if you're having
trouble with lambdas,

 
    ,          , 
this is an excellent exercise
in figuring

 
    ,          ,  
out what this means.

 
    ,           , 
OK, well there's a lot to
learn from this example.

 
    ,          ,  
The main point I've been
dwelling on is the notion of

 
    ,            , 
nicely embedding a language
inside another language.

 
     ,          ,  
Right, so that all the power of
this language like List of

 
    ,           , 
the surrounding language is
still accessible to you and

 
    ,          , 
appears as a natural
extension of the

  
    ,           ,   
language that you built.

 
     ,             , 
That's one thing that this
example shows very well.

 
     ,           , 
OK.

 
     ,           , 
Another thing is, if you go
back and think about that,

 
     ,          , 
what's procedures
and what's data.

 
    ,          , 
You know, by the time we
get up to here, my God,

 
    ,          , 
what's going on.

 
    ,          , 
I mean, this is some procedure,
and it takes a

 
    ,           , 
picture and an argument,
and what's a picture.

 
     ,          ,  
Well, a picture itself, as you
remember, was a procedure, and

 
    ,           , 
that took a rectangle.


    ,          ,  
And a rectangle is
some abstraction.


    ,           ,  
And I hope now that by now
you're completely lost as to


    ,           , 
the question of what
in the system is


    ,          , 
procedure and what's data.


    ,          ,  
You see, there isn't
any difference.


    ,           ,  
There really isn't.


    ,           , 
And you might think of a
picture sometimes as a


    ,          , 
procedure and sometimes as data,
but that's just, sort


    ,          , 
of, you know, making you
feel comfortable.

 
    ,          , 
It's really both in some sense
or neither in some sense.


    ,          , 
OK, there's a more general point
about the structure of


    ,           , 
the system as creating a
language, viewing the


     ,           ,  
engineering design process as
one of creating language or


     ,           , 
rather one of creating
a sort of sequence


    ,          , 
of layers of language.


    ,          ,  
You see, there's this
methodology, or maybe I should


    ,           , 
say mythology, that's, sort
of, charitably called


    ,          ,
software, quote, engineering.


    ,         ,  
All right, and what does it say,
it's says well, you go

 
    ,           , 
and you figure out your task,
and you figure out exactly


    ,           , 
what you want to do.


     ,          ,  
And once you figure out exactly
what you want to do,


    ,           , 
you find out that it breaks out
into three sub tasks, and


    ,          , 
you go and you start working
on   and you work on this


    ,          , 
sub task, and you figure out
exactly what that is.


    ,           ,
And you find out that that
breaks down into three


     ,         , 
sub tasks, and you specify them
completely, and you go


    ,          , 
and you work on those two, and
you work on this sub one, and


    ,          ,
you specify that exactly.

 
    ,         , 
And then finally when you're
done, you come back way up


    ,          ,
here, and you work on your
second sub task, and specify


    ,         , 
that out and work it out.


    ,          , 
And then you end up with  


    ,          , 
you end up at the end with
this beautiful edifice.


    ,           , 
Right, you end up with a
marvelous tree, where you've


     ,           , 
broken your task into sub tasks
and broken each of


     ,           , 
these into sub tasks
and broken those


     ,           , 
into sub tasks, right.


     ,          ,  
And each of these nodes is
exactly and precisely defined

 
    ,           ,
to do the wonderful, beautiful
task to make it fit into the


    ,         , 
whole edifice, right.


    ,          ,  
That's this mythology.


    ,           , 
See only a computer scientist
could possibly believe that


    ,          , 
you build a complex system
like that, right.


    ,          ,  
Contrast that with this
Henderson example.


    ,           ,
It didn't work like that.


    ,         ,
What happened was that
there was a sequence


    ,         ,
of layers of language.


    ,         , 
What happened?

 
    ,          , 
There was a layer of a thing
that allowed us to build


    ,          ,  
primitive pictures.


    ,           ,


    ,         , 
There's primitive pictures
and that was a language.


    ,          , 
I didn't say much about it.


    ,          ,  
We talked about how to construct
George, but that was


    ,            , 
a language where you talked
about vectors and line


     ,           , 
segments and points and where
they sat in the unit square.


     ,          ,   
And then on top of that,
right, on top of that  


    ,            , 
so this is the language
of primitive pictures.

 
    ,          ,  


    ,           , 
Right, talking about line
segments in particular


    ,          , 
pictures in the unit square.


    ,          , 
On top of that was
a whole language.


    ,          , 
There was a language of
geometric combinators, a


    ,          , 
language of geometric positions,
which talks about


    ,          , 
things like Above and Beside
and right push and Rotate.


    ,          ,  
And those things, sort of,
happened with reference to the


    ,           , 
things that are talked about
in this language.


    ,          , 

 
    ,          ,  
And then if we like, we saw that
above that there was sort


    ,          , 
of a language of schemes
of combination.


   ,         , 


   ,         , 
For example, push, which talked
about repeatedly doing


   ,         , 
something over with
a scale factor.


   ,         , 
And the things that were being
discussed in that language


   ,         , 
were, sort of, the things
that happened down here.


   ,         , 
So what you have is, at each
level, the objects that are


   ,         ,  
being talked about are the
things that were erected at


   ,          , 
the previous level.

 
   ,         , 
What's the difference between
this thing and this thing?


   ,         , 
The answer is that over here in
the tree, each node, and in


   ,          , 
fact, each decomposition down
here, is being designed to do


    ,          , 
a specific task, whereas in
the other scheme, what you


    ,         ,  
have is a full range
of linguistic


   ,          , 
power at each level.


   ,         , 
See what's happening there, at
any level, it's not being set


   ,         , 
up to do a particular task.


   ,         , 
It's being set up to talk about
a whole range of things.


   ,         , 
The consequence of that for
design is that something

  
   ,         , 
that's designed in that method
is likely to be more robust,

 
   ,          , 
where by robust, I mean that if
you go and make some change

 
    ,         , 
in your description, it's more
likely to be captured by a

 
   ,         ,  
corresponding change, in the
way that the language is

 
   ,          , 
implemented at the next level
up, right, because you've made

 
   ,         , 
these levels full.

 
   ,         , 
So you're not talking about a
particular thing like Beside.

 
   ,          , 
You've given yourself a whole
vocabulary to express things

 
    ,          , 
of that sort, so if you go and
change your specifications a

 
    ,          , 
little bit, it's more likely
that your methodology will

 
    ,         , 
able to adapt to capture that
change, whereas a design like


   ,         , 
this is not going to be robust,
because if I go and


   ,         , 
change something that's in here,
that might affect the


   ,          , 
entire way that I decomposed
everything down,


    ,         , 
further down the tree.


   ,         , 
Right, so very big difference
in outlook in decomposition,


   ,         , 
levels of language
rather than, sort


   ,          , 
of, a strict hierarchy.


    ,         , 
Not only that, but when you have
levels of language you've


   ,         , 
given yourself a different
vocabularies for talking about

 
   ,         , 
the design at different
levels.


   ,         , 
So if we go back and look at
George one last time, if I


   ,         , 
wanted to change this picture
George, see suddenly I have a


   ,         ,  
whole different ways of
describing the change.


   ,          , 
Like for example, I may want to
go to the basic primitive


   ,         , 
design and move the endpoint
of some vector.


   ,          , 
That's a change that I would
discuss at the lowest level.


    ,          , 
I would say the endpoint
is somewhere else.


    ,          , 
Or I might come up and say, well
the next thing I wanted


    ,          , 
to do, this little replicated
element, I might want to do by

 
    ,          , 
something else.


    ,         , 
I might want to put a scale
factor in that Beside.


   ,         , 
That's a change that I would
discuss at the next level of


   ,         , 
design, the level
of combinators.


   ,         , 
Or I might want to say, I might
want to change the basic


   ,         , 
way that I took this pattern
and made some recursive


   ,         ,  
decomposition, maybe not
bleeding out toward the


   ,           , 
corners or something else.


    ,         , 
That would be a change
that I would discuss


   ,         , 
at the highest level.

 
   ,         ,  
And because I've structured the
system to be this way, I


   ,          , 
have all these vocabularies for
talking about change in


   ,         , 
different ways and a lot of
flexibility to decide which


   ,         , 
one's appropriate.


   ,         , 


   ,         , 
OK, well that's sort of a big
point about the difference in


   ,         , 
software methodology that comes
out from List, and it


   ,         , 
all comes, again, out of the
notion that really, the design


   ,         , 
process is not so much
implementing programs as


   ,         , 
implementing languages.

 
   ,          , 
And that's really the powerful
of List. OK, thank you.


    ,          , 
Let's take a break.


    ,         ,
        ,               ,


       ,           , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, Hal just told
us how you build robust


      ,            , 
systems. The key idea was  


      ,             ,   
I'm sure that many of you don't
really assimilate that


       ,              , 
yet   but the key idea is that
in order to make a system


      ,            , 
that's robust, it has to be
insensitive to small changes,


      ,            , 
that is, a small change in the
problem should lead to only a


      ,            , 
small change in the solution.

 
      ,            , 
There ought to be
a continuity.


      ,            ,
The space of solutions ought to
be continuous in this space


      ,           , 
of problems.


      ,             , 
The way he was explaining how
to do that was instead of


       ,            , 
solving a particular problem
at every level of


      ,            , 
decomposition of the problem at
the subproblems, where you


      ,            , 
solve the class of problems,
which are a neighborhood of


      ,            , 
the particular problem that
you're trying to solve.


      ,            , 
The way you do that is by
producing a language at that


      ,            ,  
level of detail in which the
solutions to that class of

 
      ,            , 
problems is representable
in that language.


     ,           , 
Therefore when you makes more
changes to the problem you're


     ,           , 
trying to solve, you generally
have to make only small local


     ,            , 
changes to the solution you've
constructed, because at the


      ,           , 
level of detail you're working,
there's a language


     ,           , 
where you can express the
various solutions to alternate


     ,            , 
problems of the same type.


      ,           ,  
Well that's the beginning of a
very important idea, the most


     ,            , 
important perhaps idea that
makes computer science more


     ,            , 
powerful than most of the other
kinds of engineering

 
      ,           ,  
disciplines we know about.


     ,            , 
What we've seen so far
is sort of how to use


     ,           ,  
embedding of languages.


     ,            , 
And, of course, the power of
embedding languages partly


     ,           , 
comes from procedures
like this one that


     ,           ,  
I showed you yesterday.


     ,             , 
What you see here is the
derivative program that we


      ,            , 
described yesterday.


      ,            , 
It's a procedure that takes a
procedure as an argument and


      ,            , 
returns a procedure
as a value.

 
      ,           , 
And using such things
is very nice.


     ,           , 
You can make things like push
combinators and all that sort


     ,           ,  
of wonderful thing that
you saw last time.


     ,            , 
However, now I'm going to
really muddy the waters.


     ,           , 
See this confuses the issue of
what's the procedure and what


     ,           , 
is data, but not very badly.


     ,           , 
What we really want to do is
confuse it very badly.


     ,           ,  
And the best way to do that is
to get involved with the


     ,            , 
manipulation of the algebraic
expressions that the


     ,           , 
procedures themselves
are expressed in.

 
     ,           , 
So at this point, I want to talk
about instead of things


     ,           ,  
like on this slide, the
derivative procedure being a


     ,            , 
thing that manipulates
a procedure  


     ,           , 
this is a numerical method
you see here.


     ,           , 
And what you're seeing is
a representation of the


     ,           ,
numerical approximation
to the derivative.


     ,            , 
That's what's here.


       ,            , 
In fact what I'd like to talk
about is instead things that


      ,            , 
look like this.


      ,           ,  
And what we have here are rules
from a calculus book.

 
     ,            ,  
These are rules for finding
the derivatives of the


     ,            , 
expressions that one
might write in


     ,           , 
some algebraic language.


     ,           , 
It says things like a derivative
of a constant is  .


     ,           ,  
The derivative of the valuable
with respect to which you are


     ,            , 
taking the derivative is .


     ,           , 
The derivative of a constant
times the function is the


     ,           , 
constant times the derivative
of the function,


     ,           ,  
and things like that.


     ,            , 
These are exact expressions.

 
     ,           ,  
These are not numerical
approximations.


     ,            , 
Can we make programs?


     ,           ,   
And, in fact, it's very easy
to make programs that


     ,             , 
manipulate these expressions.


     ,           , 


     ,           , 
Well let's see.


     ,            , 
Let's look at these rules
in some detail.


      ,            , 
You all have seen these rules
in your elementary calculus


      ,            , 
class at one time or another.


      ,            , 
And you know from calculus
that it's easy to produce

 
      ,           , 
derivatives of arbitrary
expressions.


     ,           ,  
You also know from your
elementary calculus that it's


     ,            , 
hard to produce integrals.


     ,           , 
Yet integrals and derivatives
are opposites of each other.


     ,           ,  
They're inverse operations.


     ,            , 
And they have the same rules.


     ,           , 
What is special about these
rules that makes it possible


     ,           , 
for one to produce derivatives
easily and


     ,           ,  
integrals why it's so hard?


     ,            , 
Let's think about that
very simply.

 
     ,           , 
Look at these rules.


     ,           , 
Every one of these rules, when
used in the direction for


     ,           , 
taking derivatives, which is
in the direction of this


     ,           , 
arrow, the left side is
matched against your


     ,           , 
expression, and the right side
is the thing which is the


     ,           , 
derivative of that expression.


     ,           , 
The arrow is going that way.


     ,           , 


     ,            , 
In each of these rules, the
expressions on the right hand


      ,            ,  
side of the rule that are
contained within derivatives

  
      ,             , 
are subexpressions, are proper
subexpressions, of the

 
      ,            , 
expression on the
left hand side.

 
      ,           , 
So here we see the derivative
of the sum, with is the

 
     ,           , 
expression on the left hand
side is the sum of the

 
     ,            ,  
derivatives of the pieces.

 
      ,            ,  
So the rule of moving to the
right are reduction rules.

 
     ,            , 
The problem becomes easier.

 
     ,            , 
I turn a big complicated problem
it's lots of smaller

 
      ,           ,   
problems and then combine the
results, a perfect place for

 
     ,             , 
recursion to work.

 
     ,           , 
If I'm going in the other
direction like this, if I'm


     ,           , 
trying to produce integrals,
well there are several


     ,           , 
problems you see here.


     ,           , 
First of all, if I try to
integrate an expression like a


     ,            , 
sum, more than one
rule matches.


      ,           , 
Here's one that matches.


     ,           , 
Here's one that matches.


     ,           , 
I don't know which
one to take.


     ,           , 
And they may be different.


     ,             , 
I may get to explore
different things.

 
       ,            , 
Also, the expressions become
larger in that direction.


      ,            , 
And when the expressions become
larger, then there's no


      ,            , 
guarantee that any particular
path I choose will terminate,


      ,           , 
because we will only terminate
by accidental cancellation.


     ,           , 
So that's why integrals
are complicated


     ,           , 
searches and hard to do.


     ,           , 
Right now I don't want to do
anything as hard as that.


     ,           , 
Let's work on derivatives
for a while.


     ,           , 
Well, these roles are
ones you know for


     ,           , 
the most part hopefully.

 
     ,           , 
So let's see if we can write a
program which is these rules.


     ,           , 
And that should be very easy.


     ,           , 
Just write the program.


     ,           ,  
See, because while I showed you
is that it's a reduction


     ,            , 
rule, it's something appropriate
for a recursion.


     ,           , 
And, of course, what we have for
each of these rules is we


     ,           ,
have a case in some
case analysis.


     ,           , 
So I'm just going to write
this program down.


      ,           , 


     ,           , 
Now, of course, I'm going to be
saying something you have

 
     ,           , 
to believe.


     ,           , 
Right?


     ,           , 
What you have to believe is I
can represent these algebraic


     ,            , 
expressions, that I can grab
their parts, that I can put


      ,            , 
them together.


      ,            , 
We've invented list structures
so that you can do that.


      ,            , 
But you don't want to worry
about that now.


      ,           , 
Right now I'm going to write the
program that encapsulates


     ,           , 
these rules independent of
the representation of the


     ,           , 
algebraic expressions.

 
     ,            , 


      ,           , 
You have a derivative of
an expression with


     ,            , 
respect to a variable.


      ,           ,  
This is a different
thing than the


     ,            ,  
derivative of the function.


     ,            , 
That's what we saw last time,
that numerical approximation.


     ,            , 
It's something you can't
open up a function.


      ,           , 
It's just the answers.


     ,           , 
The derivative of
an expression is


     ,           , 
the way it's written.

 
     ,           , 
And therefore it's a syntactic
phenomenon.


     ,            , 
And so a lot of what we're going
to be doing today is


      ,           ,  
worrying about syntax,
syntax of expressions


     ,            , 
and things like that.


     ,           ,  
Well, there's a case analysis.


     ,              , 
Anytime we do anything
complicated thereby a


       ,            , 
recursion, we presumably
need a case analysis.


      ,            , 
It's the essential
way to begin.


      ,            , 
And that's usually
a conditional


      ,            , 
of some large kind.

 
      ,            ,   
Well, what are their
possibilities?


      ,             , 
the first rule that you saw is
this something a constant?


     ,           , 


     ,            , 
And what I'm asking is, is the
expression a constant with


      ,           , 
respect to the variable given?


     ,           , 


     ,           , 
If so, the result is  ,
because the derivative


     ,           , 
represents the rate of
change of something.


     ,           ,
If, however, the expression that
I'm taking the derivative


     ,          , 
of is the variable I'm varying,
then this is the same

 
     ,           , 
variable, the expression var,
then the rate of change of the


     ,           , 
expression with respect
to the variable is .


     ,           , 
It's the same .


     ,           , 


     ,            , 
Well now there are a couple
of other possibilities.


      ,            ,  
It could, for example,
be a sum.


      ,             , 
Well, I don't know how I'm going
to express sums yet.


      ,            , 
Actually I do.


      ,            , 
But I haven't told you yet.


      ,           , 
But is it a sum?

 
     ,           , 
I'm imagining that there's
some way of telling.


     ,            , 
I'm doing a dispatch on the type
of the expression here,


      ,           , 
absolutely essential in
building languages.


     ,           , 
Languages are made out of
different expressions.


     ,           , 
And soon we're going to see
that in our more powerful


     ,           , 
methods of building languages
on languages.


     ,           , 
Is an expression a sum?


     ,           , 
If it's a sum, well, we know the
rule for derivative of the


     ,           , 
sum is the sum of the
derivatives of the parts.


     ,           , 
One of them is called
the addend and the

  
     ,           ,  
other is the augend.

 
     ,            , 
But I don't have enough space
on the blackboard

 
     ,           , 
to such long names.

 
     ,           , 
So I'll call them A and A.

 
     ,            , 
I want to make a sum.

 
      ,           ,  

 
     ,            ,  
Do you remember which is the sum
for end or the menu end?

 
     ,              , 
Or was it the dividend
and the divisor or

 
       ,            ,  
something like that?

 
      ,             , 
Make sum of the derivative
of the A, I'll call it.

 
      ,           , 
It's the addend of the
expression with respect to the


     ,           , 
variable, and the derivative of
the A of the expression,


     ,           ,  
because the two arguments,
the addition with


     ,            , 
respect to the variable.


     ,           , 


     ,           , 
And another rule that we know is
product rule, which is, if


     ,           ,  
the expression is a product.


     ,            ,  


     ,            ,  
By the way, it's a good idea
when you're defining things,


     ,            , 
when you're defining predicates,
to give them a

 
     ,           , 
name that ends in
a question mark.


     ,           , 
This question mark doesn't
mean anything.


     ,           , 
It's for us as an agreement.


     ,           , 
It's a conventional interface
between humans so you can read


     ,           , 
my programs more easily.


     ,           , 
So I want you to, when you write
programs, if you define


     ,           , 
a predicate procedure, that's
something that rings true of


     ,           , 
false, it should have a name
which ends in question mark.


     ,           , 
The list doesn't care.


     ,          , 
I care.

 
    ,          ,  
I want to make a sum.


    ,           , 
Because the derivative of a
product is the sum of the


    ,          , 
first times the derivative of
the second plus the second


    ,          , 
times the derivative of the
first. Make a sum of two


    ,          , 
things, a product of, well, I'm
going to say the M of the


    ,          , 
expression, and the derivative
of the M of the expression


    ,           , 
with respect to the variable,
and the product of the


     ,           , 
derivative of M, the multiplier
of the expression,


     ,          , 
with respect to the variable.


    ,          , 
It's the product of that and the
multiplicand, M, of the

 
    ,          , 
expression.


    ,          , 


    ,          , 
Make that product.


    ,          , 
Make the sum.


    ,          ,  
Close that case.


    ,           , 
And, of course, I could add as
many cases as I like here for


    ,           , 
a complete set of rules you
might find in a calculus book.


     ,          , 


    ,          ,
So this is what it takes to
encapsulate those rules.


    ,         ,  
And you see, you have to realize
there's a lot of

 
    ,           , 
wishful thinking here.


    ,          , 
I haven't told you anything
about how I'm going to make


    ,          , 
these representations.


    ,          , 
Now, once I've decided that
this is my set of rules, I


    ,          , 
think it's time to play with
the representation.


    ,          ,  
Let's attack that/


    ,            , 
Well, first of all, I'm
going to play a pun.


     ,           , 
It's an important pun.


     ,           , 
It's a key to a sort
of powerful idea.


     ,           , 

 
     ,          , 
If I want to represent sums, and
products, and differences,


    ,          , 
and quotients, and things like
that, why not use the same


    ,           , 
language as I'm writing
my program in?


     ,          , 
I write my program in algebraic
expressions that


    ,          , 
look like the sum of the product
on a and the product


    ,          , 
of x and x, and things
like that.


    ,          , 
And the product of b and x and
c, whatever, make that a sum


    ,           , 
of the product.


     ,          , 
Right now I don't want to have
procedures with unknown


    ,          ,  
numbers of arguments, a product
of b and x and c.

 
    ,           ,  


    ,           , 
This is list structure.


    ,          , 
And the reason why this is nice,
is because any one of


    ,            , 
these objects has a property.


      ,           , 
I know where the car is.


     ,           ,  
The car is the operator.


     ,            , 
And the operands are the
successive cdrs the successive


     ,          ,
cars of the cdrs of the
list that this is.


    ,         , 
It makes it very convenient.


    ,          , 
I have to parse it.

 
    ,          , 
It's been done for me.


    ,          ,
I'm using the embedding
and Lisp to advantage.


    ,         , 


    ,          , 
So, for example, let's start
using list structure to write


    ,          , 
down the representation that I'm
implicitly assuming here.


    ,          , 
Well I have to define various
things that are implied in


    ,          , 
this representation.


    ,          , 
Like I have to find out
how to do a constant,


    ,          , 
how you do same variable.


    ,          , 
Let's do those first. That's
pretty easy enough.

 
    ,          , 
Now I'm going to be introducing
lots of primitives


    ,          , 
here, because these are
the primitives that


    ,          ,
come with list structure.


    ,         , 
OK, you define a constant.


    ,           ,  


     ,            , 
And what I mean by a constant,
an expression that's constant


     ,           , 
with respect to a veritable,
is that the expression is


     ,          , 
something simple.


    ,          , 
I can't take it into
pieces, and yet


    ,          , 
it isn't that variable.

  
    ,          , 
I can't break it up, and yet
it isn't that variable.

 
    ,          , 
That does not mean that there
may be other expressions that

 
    ,          , 
are more complicated
that are constants.

 
    ,          ,  
It's just that I'm going to
look at the primitive

 
    ,            , 
constants in this way.

 
     ,          ,  
So what this is, is it says
that's it's the and.

 
    ,           ,  
I can combine predicate
expressions which return true

 
    ,           , 
or false with and.

 
    ,          ,  
Something atomic, The expression
is atomic, meaning

 
    ,           ,  
it cannot be broken
into parts.

 
    ,           , 
It doesn't have a car and a cdr.
It's not a list. It adds


    ,          , 
a special test built
into the system.


    ,           , 
And it's not identically
equal to that variable.


     ,          , 
I'm representing my variable
by things that are symbols


    ,          , 
which cannot be broken into
pieces, things like x, and y,


    ,          ,  
things like this.


    ,           , 


    ,          , 
Whereas, of course, something
like this can be broken up


    ,          , 
into pieces.


    ,          , 

 
    ,           , 
And the same variable of an
expression with respect to a


     ,          , 
variable is, in fact, an
atomic expression.


    ,           ,  
I want to have an atomic


     ,           , 
expression, which is identical.


    ,           ,  


     ,           ,
I don't want to look inside
this stuff anymore.


    ,         ,  
These are primitive maybe.


    ,           , 
But it doesn't matter.


    ,          ,
I'm using things that are given
to me with a language.


    ,         ,  
I'm not terribly interest
in them

 
    ,           ,  
Now how do we deal with sums?


    ,           ,  
Ah, something very interesting
will happen.


    ,           , 
A sum is something which is not
atomic and begins with the


    ,          , 
plus symbol.


    ,          , 
That's what it means.


    ,          ,
So here, I will define.


    ,         , 


    ,           , 
An question is a sum if and it's
not atomic and it's head,


     ,          , 
it's beginning, its car of the
expression is the symbol plus.


    ,          , 

 
    ,          , 
Now you're about to see
something you haven't seen


    ,          , 
before, this quotation.


    ,          , 


    ,          , 
Why do I have that
quotation there?


    ,           , 
Say your name,


     ,          , 
AUDIENCE  Susanna.


    ,          , 
PROFESSOR  Louder.


    ,          , 
AUDIENCE  Susanna


    ,          , 
PROFESSOR  Say your name.


    ,          , 
AUDIENCE  Your name.

 
    ,          , 
PROFESSOR  Louder.


    ,          , 
AUDIENCE  Your name.


    ,          ,  
PROFESSOR  OK.


    ,           ,  
What I'm showing you here
is that the words


    ,           , 
of English are ambiguous.


    ,          , 
I was saying, say your name.


    ,          ,  
I was also possibly saying
say, your name.


    ,             , 


      ,           ,  
But that cannot be distinguished
in speech.


     ,            ,  
However, we do have a notation
in writing, which is quotation

 
     ,           , 
for distinguishing these
two possible meanings.


    ,          , 
In particular, over here, in
Lisp we have a notation for


    ,          , 
distinguishing these meetings.


    ,          ,
If I were to just write a plus
here, a plus symbol, I would


    ,         ,  
be asking, is the first element
of the expression, is


    ,           , 
the operator position
of the expression,


    ,          , 
the addition operator?


    ,          , 
I don't know.


    ,          , 
I would have to have written the
addition operator there,


    ,          , 
which I can't write.

 
    ,          , 
However, this way I'm asking,
is this the symbolic object


    ,          , 
plus, which normally stands
for the addition operator?


    ,           , 
That's what I want.


     ,          , 
That's the question
I want to ask.


    ,          , 
Now before I go any further,
I want to point out the


    ,          , 
quotation is a very complex
concept, and adding it to a


    ,            , 
language causes a great
deal of troubles.


      ,            , 
Consider the next slide.


      ,           , 
Here's a deduction which we
should all agree with.


     ,           , 
We have, Alyssa is smart and
Alyssa is George's mother.

 
     ,           , 
This is an equality, is.


     ,           , 
From those two, we can deduce
that George's mother is smart.


     ,           , 
Because we can always substitute
equals for equals


     ,           , 
in expressions.


     ,           , 
Or can we?


     ,           ,  
Here's a case where we have
"Chicago" has seven letters.


     ,            ,  
The quotation means that I'm
discussing the word Chicago,


     ,            ,
not what the word represents.


     ,          , 


     ,           , 
Here I have that Chicago is the
biggest city in Illinois.

 
     ,           , 
As a consequence of this, I
would like to deduce that the


     ,           , 
biggest city in Illinois
has seven letters.


     ,            ,
But that's manifestly false.


      ,          , 


     ,           , 
Wow, it works.


     ,          , 
OK, so once we have things like
that, our language gets


    ,          , 
much more complicated.


    ,          , 
Because it's no longer true that
things we tend to like to


    ,          , 
do with languages, like
substituting equals for equals


    ,          , 
and getting right answers, are
going to work without being

  
    ,          , 
very careful.

 
    ,          , 
We can't substitute into what's
called referentially

 
    ,           , 
opaque contexts, of which a
quotation is the prototypical

 
     ,          , 
type of referentially
opaque context.

 
    ,          , 
If you know what that means, you
can consult a philosopher.

 
    ,          , 
Presumably there is
one in the room.

 
    ,          , 
In any case, let's continue now,
now that we at least have

 
    ,          , 
an operational understanding of
a     year old issue that

 
    ,          , 
has to do with name, and
mention, and all sorts of

 
    ,          ,  
things like that.

 
    ,           , 


    ,          , 
I have to define what I mean,
how to make a sum of two


    ,           , 
things, an a and a.


     ,           , 
And I'm going to do
this very simply.


     ,          ,  
It's a list of the symbol
plus, and a, and a.


    ,           , 
And I can determine
the first element.


    ,          ,  


    ,           , 
Define a to be cadr. I've just


    ,          , 
introduced another primitive.


    ,          , 
This is the car of the
cdr of something.

 
    ,          , 
You might want to know why car
and cdr are names of these


    ,          , 
primitives, and why they've
survived, even though they're


    ,          , 
much better ideas like
left and right.


    ,          , 
We could have called them
things like that.


    ,          , 
Well, first of all, the names
come from the fact that in the


    ,          , 
great past, when Lisp was
invented, I suppose in ' or


    ,            , 
something, it was on a
  or something like


      ,           , 
that, which had a machine.


     ,           , 
It was a machine that had an
address register and a


     ,           , 
decrement register.

 
     ,           , 
And these were the contents of
the address register and the


     ,           , 
decrement register.


     ,           , 
So it's an historical
accident.


     ,          , 
Now why have these
names survived?


    ,          , 
It's because Lisp programmers
like to talk to each other


    ,          ,  
over the phone.


    ,           , 
And if you want to have a long
sequence of cars and cdrs you


    ,          , 
might say, cdaddedr, which
can be understood.


    ,          , 
But left of right or right of
left is not so clear if you


    ,          , 
get good at it.

 
    ,           , 
So that's why we have
these words.


     ,          ,
All of them up to four deep
are defined typically in a


    ,         ,
Lisp system.


    ,         , 


    ,           , 
A to be  


     ,          , 


    ,          , 
and, of course, you can see
that if I looked at one of


    ,          , 
these expressions like the sum
of  and , what that is is a


    ,           ,  
list containing the symbol
plus, and a number ,


     ,           , 
and a number .

 
    ,          ,  
Then the car is the
symbol plus.


    ,           , 
The car of the cdr. Well
I take the cdr and


    ,           ,  
then I take the car.


     ,           ,  
And that's how I get to the .


    ,           , 
That's the first argument.


    ,          , 
And the car of the cdr
of the cdr gets me to


    ,          , 
this one, the .


    ,          , 


    ,          , 
And similarly, of course, I
can define what's going on


    ,          ,  
with products.

 
    ,           , 
Let's do that very quickly.


    ,          , 


    ,          , 
Is the expression a product?


    ,           , 
Yes if and if it's true, that's
it's not atomic and


     ,          , 
it's EQ quote, the asterisk
symbol, which is the operator


    ,          ,  
for multiplication.


    ,           ,  
Make product of an M and an
M to be list, quote, the


    ,            , 
asterisk operation
and M and M.


     ,            ,
and I define M to be cadr and
M to be caddr. You get to be


      ,          , 
a good Lisp programmer because
you start talking that way.

 
     ,           , 
I cdr down lists and console
them up and so on.


     ,           , 
Now, now that we have
essentially a complete program


     ,           , 
for finding derivatives,
you can add more


     ,          , 
rules if you like.


    ,          ,  
What kind of behavior
do we get out of it?


    ,           , 
I'll have to clear that x.


    ,          ,  
Well, supposing I define foo
here to be the sum of the


    ,            , 
product of ax square
and bx plus c.


     ,          ,  
That's the same thing we see
here as the algebraic


    ,           , 
expression written in the
more conventional

 
    ,          , 
notation over there.


    ,           , 
Well, the derivative of foo with
respect to x, which we


     ,          , 
can see over here, is this
horrible, horrendous mess.


    ,           , 
I would like it to
be ax plus b.


     ,          , 
But it's not.


    ,          , 
It's equivalent to it.


    ,          ,  
What is it?


    ,             , 
I have here, what do I have?


      ,           , 
I have the derivative of
the product of x and x.


     ,           , 
Over here is, of course,
the sum of x times

 
     ,          , 
 and  times x.


    ,          ,  
Now, well, it's the first times
the derivative of the


    ,           , 
second plus the second times the
derivative of the first.


    ,          , 
It's right.


    ,           , 
That's x of course.


     ,          ,  
a times x is ax plus  X square
doesn't count plus B


    ,           ,  
over here plus a bunch of  's.


    ,            , 
Well the answer is right.


     ,          , 
But I give people take off
points on an exam for that,


    ,          , 
sadly enough.

  
    ,          , 
Let's worry about that
in the next segment.

 
    ,          ,  
Are there any questions?

 
    ,           , 

 
    ,          ,  
Yes?

 
    ,           , 
AUDIENCE  If you had left the
quote when you put the plus,

 
    ,          , 
then would that be referring
to the procedure plus and

 
    ,          , 
could you do a comparison
between that procedure and

 
    ,          , 
some other procedure
if you wanted to?

 
    ,          , 
PROFESSOR  Yes.

 
    ,          , 
Good question.

 
    ,           , 
If I had left this quotation
off at this point, if I had


     ,           , 
left that quotation off at that
point, then I would be


     ,          , 
referring here to the procedure
which is the thing


    ,          , 
that plus is defined to be.


    ,          , 
And indeed, I could compare
some procedures with each


    ,          ,  
other for identity.


    ,           ,  
Now what that means is
not clear right now.


    ,            ,  
I don't like to think
about it.


     ,           , 
Because I don't know exactly
what it would need to compare


    ,          , 
procedures.

 
    ,          , 
There are reasons why that
may make no sense at all.


    ,          , 
However, the symbols,
we understand.


    ,          , 
And so that's why I
put that quote in.


    ,          , 
I want to talk about
the symbol that's


    ,          , 
apparent on the page.


    ,          , 


    ,          ,  
Any other questions?


    ,            , 
OK.


     ,          ,  
Thank you.


    ,           , 
Let's take a break.

 
    ,           ,  
[MUSIC PLAYING]


     ,           , 
PROFESSOR  Well, let's see.


    ,          , 
We've just developed a fairly
plausible program for


    ,          , 
computing the derivatives of
algebraic expressions.


    ,           ,  
It's an incomplete program,
if you would


     ,           , 
like to add more rules.


    ,          ,  
And perhaps you might extend
it to deal with uses of


    ,           , 
addition with any number of
arguments and multiplication


    ,          , 
with any of the number
of arguments.


    ,          , 
And that's all rather easy.

 
    ,          , 
However, there was a little
fly in that ointment.


    ,            , 
We go back to this slide.


      ,            ,   
We see that the expressions that
we get are rather bad.


      ,             , 
This is a rather
bad expression.


     ,           ,   
How do we get such
an expression?


     ,             , 
Why do we have that
expression?


     ,           ,  
Let's look at this expression
in some detail.


     ,            , 
Let's find out where all
the pieces come from.


     ,           , 
As we see here, we
have a sum  


     ,           , 
just what I showed you at the
end of the last time  

 
     ,            , 
of X times  plus 
time X. That is a


      ,           , 
derivative of this product.


     ,           , 
The produce of a times that,
where a does not depend upon


     ,            , 
x, and therefore is constant
with respect to x, is this


      ,           , 
sum, which goes from here all
the way through here and


     ,           , 
through here.


     ,           , 
Because it is the first thing
times the derivative of the


     ,           ,  
second plus the derivative of
the first times the second as


     ,            , 
the program we wrote
on the blackboard


     ,            , 
indicated we should do.

 
      ,           , 
And, of course, the product of
bx over here manifests itself


     ,          , 
as B times  plus   times X
because we see that B does not


    ,          , 
depend upon X. And so the
derivative of B is this  , and


    ,          ,  
the derivative of X with respect
itself is the .


    ,           , 
And, of course, the derivative
of the sums over here turn


    ,          , 
into these two sums of the
derivatives of the parts.


    ,          , 
So what we're seeing here is
exactly the thing I was trying


    ,          , 
to tell you about with Fibonacci
numbers a while ago,


    ,          , 
that the form of the process
is expanded from the local


    ,          , 
rules that you see in the
procedure, that the procedure

 
    ,          , 
represents a set of local rules
for the expansion of


    ,          , 
this process.


    ,          , 
And here, the process left
behind some stuff, which is


    ,            , 
the answer.


      ,           , 
And it was constructed by the
walk it takes of the tree


     ,           ,
structure, which is
the expression.


     ,          , 


     ,          , 
So every part in the answer we
see here derives from some


    ,          , 
part of the problem.


    ,          , 
Now, we can look at, for
example, the derivative of

 
    ,           ,  
foo, which is ax square plus
bx plus c, with respect to


     ,           , 
other things, like here, for
example, we can see that the


    ,          , 
derivative of foo with
respect to a.


    ,          , 
And it's very similar.


    ,          , 
It's, in fact, the identical
algebraic expression, except


    ,          , 
for the fact that theses
 's and 's are


    ,          ,  
in different places.


    ,           , 
Because the only degree of
freedom we have in this tree


    ,          ,
walk is what's constant with
respect to the variable we're


    ,         , 
taking the derivative
with respect to and

 
    ,          ,  
was the same variable.


    ,           , 


    ,          , 
In other words, if we go back
to this blackboard and we


    ,          , 
look, we have no choice what
to do when we take the


    ,          , 
derivative of the sum
or a product.


    ,           , 
The only interesting place here
is, is the expression the


     ,           , 
variable, or is the expression
a constant with respect to


     ,           , 
that variable for very, very
small expressions?


     ,          , 
In which case we get various
's and  's, which if we go


    ,          , 
back to this slide, we can see
that the  's that appear here,

  
    ,          , 
for example, this  over here
in derivative of foo with

 
    ,          , 
respect to A, which gets us an
X square, because that  gets

 
    ,          , 
the multiply of X and X into
the answer, that  is  .

 
    ,          ,
Over here, we're not taking
the derivative of foo with

 
    ,         , 
respect to c.

 
    ,           , 
But the shapes of these
expressions are the same.

 
     ,          ,
See all those shapes.

 
    ,         ,
They're the same.

 
    ,          , 

 
     ,          , 
Well is there anything
wrong with our rules?

 
    ,          ,  
No.


    ,           , 
They're the right rules.


    ,          , 
We've been through
this one before.


    ,           ,  
One of the things you're going
to begin to discover is that


     ,            , 
there aren't too many
good ideas.


     ,           , 


     ,          ,
When we were looking at rational
numbers yesterday,


    ,         , 
the problem was that we got
/ rather then /.


    ,          ,
The answer was unsimplified.


    ,         , 
The problem, of course,
is very similar.

 
    ,          , 
There are things I'd like to be
identical by simplification


    ,          , 
that don't become identical.


    ,           , 
And yet the rules for doing
addition a multiplication of


     ,          ,   
rational numbers were correct.


    ,            , 
So the way we might solve this
problem is do the thing we did


    ,          , 
last time, which always works.


    ,           , 
If something worked last time
it ought to work again.


     ,          , 
It's changed representation.


    ,          , 
Perhaps in the representation
we could put in a


    ,          , 
simplification step that
produces a simplified

 
    ,           ,
representation.


     ,         , 
This may not always
work, of course.


    ,          , 
I'm not trying to say that
it always works.


    ,          , 
But it's one of the pieces of
artillery we have in our war


    ,           , 
against complexity.


     ,           , 
You see, because we solved our
problem very carefully.


     ,           , 
What we've done, is
we've divided the


     ,           , 
world in several parts.


     ,          , 
There are derivatives rules and
general rules for algebra


    ,          , 
of some sort at this
level of detail.

 
    ,          ,
and i have an abstraction
barrier.


    ,         ,


    ,         , 
And i have the representation of
the algebraic expressions,


    ,          , 
list structure.


    ,          , 


    ,          ,  
And in this barrier, I have
the interface procedures.


    ,           , 
I have constant, and things
like same var.


    ,          , 


    ,          , 
I have things like
sum, make sum.


    ,           , 

 
     ,           , 
I have A, A.


     ,           , 
I have products and things
like that, all the other


     ,          , 
things I might need for various
kinds of algebraic


    ,          ,   
expressions.


    ,            ,  
Making this barrier allows me
to arbitrarily change the


    ,           , 
representation without changing
the rules that are


    ,          ,  
written in terms of that
representation.


    ,           , 
So if I can make the problem
go away by changing


    ,          , 
representation, the composition
of the problem


    ,          , 
into these two parts has
helped me a great deal.

 
    ,          , 
So let's take a very simple
case of this.


    ,           , 
What was one of the problems?


     ,          ,
Let's go back to this
transparency again.


    ,         , 
And we see here, oh yes, there's
horrible things like


    ,          , 
here is the sum of an
expression and  .


    ,          , 
Well that's no reason to think
of it as anything other than


    ,          ,  
the expression itself.


    ,           , 
Why should the summation
operation have


    ,           , 
made up this edition?


     ,           , 
It can be smarter than that.

 
     ,           ,  
Or here, for example, is
a multiplication of


     ,            ,
something by .


     ,         , 
It's another thing like that.


    ,          , 
Or here is a product of
something with  , which is


    ,          ,  
certainly  .


    ,           , 
So we won't have to make
this construction.


    ,          ,  
So why don't we just do that?


    ,           , 
We need to change the way
the representation


    ,          , 
works, almost here.


    ,          ,  

 
    ,           ,  
Make sum to be.


    ,           ,  
Well, now it's not something
so simple.


    ,           ,  
I'm not going to make a list
containing the symbol plus and


    ,           ,
things unless I need to.


    ,         , 
Well, what are the
possibilities?


    ,          , 


    ,          , 
I have some sort
of cases here.


    ,           , 
If I have numbers, if
anyone is a number  


     ,           , 
and here's another primitive
I've just introduced, it's


     ,          , 
possible to tell whether
something's number  

 
    ,          ,  
and if number A, meaning
they're not symbolic


    ,           , 
expressions, then why not
do the addition now?


    ,          , 
The result is just a
plus of A and A.


    ,          , 


    ,          ,   
I'm not asking if these
represent numbers.


    ,            ,  
Of course all of these symbols
represent numbers.


    ,           ,  
I'm talking about whether
the one I've got is the


    ,           , 
number  right now.


    ,          ,  
And, for example, supposing A
is a number, and it's equal to


    ,            ,  
 , well then the answer
is just A.

  
     ,            ,
There is no reason to
make anything up.

 
     ,         , 
And if A is a number,
and equal A , then

 
    ,           , 
the result is A.

 
     ,          , 
And only if I can't figure out
something better to do with

 
    ,          , 
this situation, well, I can
start a list. Otherwise I want

 
    ,          , 
the representation to be the
list containing the quoted

 
    ,          , 
symbol plus, and A, and A.

 
    ,          , 

 
    ,             , 
And, of course, a very
similar thing

 
       ,            ,  
can be done for products.

 
      ,             , 
And I think I'll avoid
boring you with them.


      ,            , 
I was going to write it
on the blackboard.


      ,            ,  
I don't think it's necessary.


      ,             , 
You know what to do.


      ,           , 
It's very simple.


     ,           , 
But now, let's just see the kind
of results we get out of


     ,           , 
changing our program
in this way.


     ,           , 
Well, here's the derivatives
after having just changed the


     ,           , 
constructors for expressions.


     ,           , 
The same foo, aX square plus bX
plus c, and what I get is

 
     ,            ,
nothing more than the derivative
of that is aX plus


      ,           , 
B.


      ,           , 
Well, it's not completely
simplified.


     ,           , 
I would like to collect
common terms and sums.


     ,           , 
Well, that's more work.


     ,           , 
And, of course, programs to do
this sort of thing are huge


     ,           , 
and complicated.


     ,           , 
Algebraic simplification, it's
a very complicated mess.


     ,           , 
There's a very famous program
you may have heard of called


     ,           , 
Maxima developed at MIT in the
past, which is ,    pages of

 
     ,           , 
Lisp code, mostly the algebraic
simplification


     ,           ,  
operations.


     ,            ,  


     ,           , 
There we see the derivative
of foo.


    ,          , 
In fact, X is at something I
wouldn't take off more than 


    ,          , 
point for on an elementary
calculus class.


    ,           , 
And the derivative of foo with
respect to a, well it's gone


     ,          , 
down to X times X, which
isn't so bad.


    ,          ,  
And the derivative of foo with
respect to b is just X itself.


    ,            , 
And the derivative of foo with
respect to c comes out .

 
     ,          , 
So I'm pretty pleased
with this.


    ,          , 
What you've seen is, of
course, a little bit


    ,          ,  
contrived, carefully organized
example to show you how we can


    ,           , 
manipulate algebraic
expressions, how we do that


    ,          , 
abstractly in terms of abstract
syntax rather than


    ,          , 
concrete syntax and how we can
use the abstraction to control


    ,          , 
what goes on in building
these expressions.


    ,            , 
But the real story isn't just
such a simple thing as that.


      ,           , 
The real story is, in fact, that
I'm manipulating these


     ,           , 
expressions.

 
     ,           , 
And the expressions are
the same expressions  


     ,           , 
going back to the slide  


     ,          , 
as the ones that are
Lisp expressions.


    ,          , 
There's a pun here.


    ,          ,  
I've chosen my representation
to be the same as the


    ,           , 
representation in my language
of similar things.


    ,          , 
By doing so, I've invoked
a necessity.


    ,           , 
I created the necessity to have
things like quotation


     ,          , 
because of the fact that my
language is capable of writing


    ,          , 
expressions that talk about
expressions of the language.

 
    ,          , 
I need to have something that
says, this is an expression


    ,          , 
I'm talking about rather than
this expression is talking


    ,          ,  
about something, and I want
to talk about that.


    ,           , 


    ,          , 
So quotation stops and says,
I'm talking about this


    ,          , 
expression itself.


    ,          , 


    ,           ,  
Now, given that power, if I can
manipulate expressions of


     ,            , 
the language, I can begin to
build even much more powerful


     ,           , 
layers upon layers
of languages.

 
     ,          , 
Because I can write languages
that not only are embedded in


    ,          , 
Lisp or whatever language you
start with, but languages that


    ,           ,  
are completely different, that
are just, if we say,


     ,           , 
interpreted in Lisp or
something like that.


    ,          ,
We'll get to understand those
words more in the future.


    ,          , 
But right now I just want to
leave you with the fact that


     ,          , 
we've hit a line which gives
us tremendous power.


    ,          ,  
And this point we've bought
a sledgehammer.


    ,           , 
We have to be careful to what
flies when we apply it.


    ,          , 
Thank you.

 
    ,          , 
[MUSIC PLAYING]


    ,           ,
        ,              , 


      ,            , 
PROFESSOR  Well, yesterday we
learned a bit about symbolic


      ,            , 
manipulation, and we wrote a
rather stylized program to


      ,             , 
implement a pile of calculus
rule from the calculus book.


       ,            , 
Here on the transparencies, we
see a bunch of calculus rules


      ,            , 
from such a book.


      ,            ,  
And, of course, what we did is
sort of translate these rules


      ,             ,  
into the language
of the computer.


      ,             , 
But, of course, that's a
sort of funny strategy.

 
      ,            , 
Why should we have to translate
these rules into the


      ,            ,
language of the computer?


      ,           , 
And what do I really
mean by that?


      ,            , 
These are  the program we wrote


      ,           , 
yesterday was very stylized.


     ,           , 
It was a conditional, a dispatch
on the type of the


     ,           , 
expression as observed
by the rules.


     ,           , 
What we see here are rules that
say if the object being


     ,           , 
the derivative is being taken
of, if that expression is a


     ,           , 
constant, then do one thing.

 
     ,           , 
If it's a variable,
do another thing.


     ,           ,  
If it's a product of a constant
times a variable, do


     ,            , 
something and so on.


     ,           , 
There's sort of a dispatch
there on a type.


     ,           , 


     ,           , 
Well, since it has such a
stylized behavior and


     ,           , 
structure, is there some other
way of writing this program


     ,            , 
that's more clear?


      ,           , 
Well, what's a rule,
first of all?


     ,           , 
What are these rules?

 
     ,           , 


     ,           , 
Let's think about that.


     ,           , 
Rules have parts.


     ,            ,  
If you look at these rules in
detail, what you see, for


      ,             , 
example, is the rule has
a left hand side and a


      ,            , 
right hand side.


      ,           , 
Each of these rules has a
left hand side and the


     ,           , 
right hand side.


     ,           , 
The left hand side is somehow
compared with the expression


     ,           , 
you're trying to take
the derivative of.

 
     ,           , 
The right hand side is the
replacement for that


     ,           , 
expression.


     ,           , 


     ,           ,  
So all rules on this page
are something like this.


     ,            ,  


     ,            , 
I have patterns, and somehow,
I have to produce, given a


     ,           ,
pattern, a skeleton.


     ,          ,  


     ,            , 
This is a rule.


     ,           , 

 
     ,           , 
A pattern is something that
matches, and a skeleton is


     ,            , 
something you substitute into
in order to get a new


      ,            , 
expression.


      ,            , 


      ,           , 
So what that means is that the
pattern is matched against the


     ,           , 
expression, which is the
source expression.


     ,           , 


     ,           , 
And the result of the
application of the rule is to


     ,           ,  
produce a new expression, which
I'll call a target, by


     ,            , 
instantiation of a skeleton.

 
     ,           , 
That's called instantiation.


     ,            , 


      ,           , 
So that is the process by which


     ,           , 
these rules are described.


     ,            , 
What I'd like to do today is
build a language and a means


      ,            , 
of interpreting that language,
a means of executing that


      ,            , 
language, where that language
allows us to directly express


      ,            , 
these rules.


      ,           , 
And what we're going to do is
instead of bringing the rules


     ,           , 
to the level of the computer by
writing a program that is

 
     ,            ,
those rules in the computer's
language  


      ,          , 
at the moment, in a Lisp  


     ,           , 
we're going to bring the
computer to the level of us by


     ,           ,  
writing a way by which the
computer can understand rules


     ,             , 
of this sort.


      ,           , 
This is slightly emphasizing the
idea that we had last time


     ,           , 
that we're trying to make
a solution to a class of


     ,           , 
problems rather than
a particular one.


     ,           , 
The problem is if I want to
write rules for a different


     ,           , 
piece of mathematics, say,
to simple algebraic

 
     ,           ,  
simplification or something like
that, or manipulation of


     ,            , 
trigonometric functions,
I would have to write a


     ,            , 
different program in using
yesterday's method.


      ,            , 
Whereas I would like to
encapsulate all of the things


      ,            , 
that are common to both of those
programs, meaning the


      ,            , 
idea of matching, instantiation,
the control


      ,           ,  
structure, which turns out to be
very complicated for such a


     ,            , 
thing, I'd like to encapsulate
that separately from the rules


     ,            ,  
themselves.


      ,            , 
So let's look at, first of
all, a representation.

 
     ,           , 
I'd like to use the
overhead here.


     ,           ,
I'd like   there it is.


     ,          , 
I'd like to look at a
representation of the rules of


     ,           ,  
calculus for derivatives in a
sort of simple language that


     ,            , 
I'm writing right here.


     ,           , 
Now, I'm going to avoid  I'm
going to avoid


     ,           , 
worrying about syntax.


     ,           , 
We can easily pretty this, and
I'm not interested in making  


     ,           , 
this is indeed ugly.


     ,           , 
This doesn't look like the
beautiful text set dx by dt or

  
     ,           , 
something that I'd
like to write,

 
     ,           , 
but that's not essential.

 
     ,             , 
That's sort of an accidental
phenomenon.

 
       ,            , 
Here, we're just worrying
about the fact that the

 
      ,            ,  
structure of the rules is that
there is a left hand side

 
      ,             , 
here, represents the thing I
want to match against the

 
      ,           , 
derivative expression.

 
     ,           , 
This is the representation
I'm going to say for the

 
     ,           , 
derivative of a constant, which
we will call c with

 
     ,           , 
respect to the variable we will
call v. And what we will

 
     ,           ,  
get on the right hand
side is  .


     ,            , 
So this represents a rule.


     ,           , 
The next rule will be the
derivative of a variable,


     ,           ,  
which we will call v with
respect to the same variable


     ,            , 
v, and we get a .


     ,           , 
However, if we have the
derivative of a variable


     ,           , 
called u with respect to
a different variables


     ,           , 
v, we will get  .


     ,            , 
I just want you look at these
rules a little bit and see how


      ,           , 
they fit together.

 
     ,           , 
For example, over here, we're
going to have the derivative


     ,             , 
of the sum of an expression
called x and an


       ,            , 
expression called x.


      ,            , 
These things that begin with
question marks are called


      ,            , 
pattern variables in the
language that we're inventing,


      ,           , 
and you see we're just making
it up, so pattern variables


     ,           , 
for matching.


     ,           ,  
And so in this  


     ,            , 
here we have the derivative of
the sum of the expression


     ,            , 
which we will call x.

 
      ,           , 
And the expression we will call
x with respect to the


     ,           ,  
variable we call v will be  
here is the right hand side 


     ,            ,  
the sum of the derivative of
that expression x with


     ,            , 
respect to v   the right hand
side is the skeleton  


     ,           , 
and the derivative of x with
respect to v. Colons here will


     ,           , 
stand for substitution
objects.


     ,           , 


     ,           , 
They're  we'll call them
skeleton evaluations.


     ,           , 
So let me put up here on the
blackboard for a second some


     ,           , 
syntax so we'll know
what's going on

 
     ,           , 
for this rule language.


     ,           , 
First of all, we're going to
have to worry about the


     ,           , 
pattern matching.


     ,            , 


      ,           , 
We're going to have things like
a symbol like foo matches


     ,           ,  
exactly itself.


     ,            , 


     ,           ,
The expression f of a and b will
be used to match any list


     ,          , 
whose first element is f, whose
second element is a, and


     ,           , 
whose third element is b.

 
     ,            ,  
Also, another thing we might
have in a pattern is that  


      ,             , 
a question mark with some
variable like x.


      ,           ,
And what that means, it says
matches anything, which we


     ,          ,
will call x.


     ,          , 


     ,            ,
Question mark c x will
match only constants.


      ,          , 
So this is something which
matches a constant colon x.


     ,           , 


     ,           , 
And question mark v x will
match a variable,


     ,           , 
which we call x.

 
     ,            , 


      ,            , 
This is sort of the language
we're making up now.


      ,            , 
If I match two things against
each other, then they are


      ,            ,  
compared element by element.


      ,            , 
But elements in the pattern may
contain these syntactic


     ,           , 
variables, pattern variables,
which will be used to match


     ,           , 
arbitrary objects.


     ,           , 
And we'll get that object as the
value in the name x here,


     ,           ,  
for example.


     ,            , 
Now, when we make skeletons
for instantiation.

 
     ,           , 
Well, then we have
things like this.


     ,           , 
foo, a symbol, instantiates
to itself.


     ,           ,  


     ,            , 
Something which is a list
like f of a and b,


     ,           , 
instantiates to  


     ,          , 
well, f instantiates to a
 list, a list of three


    ,          , 
elements, okay, which are the
results of instantiating each


    ,          , 
of f, a, and b.


    ,          , 


    ,          , 
And x well  we instantiate to
the value of x as in the

 
    ,          , 
matched pattern.


    ,           , 


     ,           , 
So going back to the overhead
here, we see  we see that all


     ,          ,  
of those kinds of objects, we
see here a pattern variable


    ,           , 
which matches a constant, a
pattern variable which matches


    ,          , 
a variable, a pattern variable
which will match anything.


    ,          , 
And if we have two instances of
the same name, like this is


    ,          , 
the derivative of the expression
which is a variable


    ,          , 
only whose name will be v with
respect to some arbitrary


    ,          , 
expression which we will call v,
since this v appears twice,

 
    ,          , 
we're going to want that to mean
they have to be the same.


    ,          , 
The only consistent match is
that those are the same.


    ,          , 
So here, we're making
up a language.


    ,           , 
And in fact, that's a very
nice thing to be doing.


     ,          ,
It's so much fun to make
up a language.


    ,         , 
And you do this all the time.


    ,          , 
And the really most powerful
design things you ever do are


    ,           ,  
sort of making up a language to
solve problems like this.


     ,            , 
Now, here we go back here and
look at some of these rules.


     ,           ,  
Well, there's a whole
set of them.

  
     ,            , 
I mean, there's one for
addition and one for

 
     ,          , 
multiplication, just
like we had before.

 
    ,          ,  
The derivative of the product of
x and x with respect to v

 
    ,           , 
is the sum of the product of x
and the derivative x with

 
    ,          , 
respect to v and the
product of the

 
    ,          ,  
derivative of x and x.

 
    ,           , 
And here we have
exponentiation.

 
    ,           , 
And, of course, we run off
the end down here.

 
     ,          , 
We get as many as we like.

 
    ,          , 
But the whole thing over here,
I'm giving this  this list of

 
    ,           , 
rules the name "derivative
rules."


     ,          , 
What would we do with such
a thing once we have it?


    ,          ,  
Well, one of the nicest ideas,
first of all, is I'm going to


    ,           , 
write for you, and we're going
to play with it all day.


    ,          , 
What I'm going to write for
you is a program called


    ,            , 
simplifier, the general purpose
simplifier.


      ,           , 
And we're going to say something
like define dsimp to


     ,          , 
be a simplifier of the
derivative rules.


    ,          , 


    ,          , 
And what simplifier is going
to do is, given a set of

 
    ,          , 
rules, it will produce for
me a procedure which will


    ,          ,  
simplify expressions containing
the things that are


    ,           , 
referred to by these rules.


    ,          , 


    ,          , 
So here will be a procedure
constructed for your purposes


    ,          , 
to simplify things with
derivatives in them such that,


    ,          ,  
after that, if we're typing at
some list system, and we get a


    ,           ,  
prompt, and we say dsimp, for
example, of the derivative of


    ,            ,
the sum of x and y with
respect to x  


     ,          , 

 
     ,           , 
note the quote here because
I'm talking about the


     ,           , 
expression which is
the derivative  


     ,          , 


    ,          , 
then I will get back as
a result plus   .


    ,          , 
Because the derivative of x plus
y is the derivative of x


    ,          , 
plus derivative y.


    ,          ,  
The derivative of x with
respect to x is .


    ,           , 
The derivative of y with
respect to x is  .


    ,          , 
It's not what we're
going to get.


    ,          , 
I haven't put any simplification
at that level  

 
    ,          , 
algebraic simplification  


    ,          ,  
yet.


    ,           , 
Of course, once we have such a
thing, then we can  then we


    ,          , 
can look at other rules.


    ,          , 
So, for example, we can, if
we go to the slide, OK?


    ,          , 
Here, for example, are other
rules that we might have,


    ,          , 
algebraic manipulation rules,
ones that would be used for


    ,          , 
simplifying algebraic
expressions.


    ,           , 
For example, just looking at
some of these, the left hand


     ,           , 
side says any operator applied
to a constant e and a

 
     ,          , 
constant e is the result of
evaluating that operator on


    ,          , 
the constants e and e.


    ,           , 
Or an operator, applied to e,
any expression e and a


     ,          , 
constant e, is going to move
the constant forward.


    ,          , 
So that'll turn into
the operator with


    ,          , 
e followed by e.


    ,           ,  
Why I did that, I don't know.


     ,           , 
It wouldn't work if I had
division, for example.


    ,          , 
So there's a bug in the
rules, if you like.


    ,          , 
So the sum of   and e is e.

 
    ,          , 
The product of  and any
expression e is e.


    ,          , 
The product of   and any
expression e is  .


    ,          , 
Just looking at some more of
these rules, we could have


    ,          , 
arbitrarily complicated ones.


    ,          ,  
We could have things like the
product of the constant e and


    ,            , 
any constant e with e is the
result of multiplying the


     ,           , 
result of  multiplying now the
constants e and e together


     ,          ,
and putting e there.


    ,         , 
So it says combine the constants
that I had, which


    ,           , 
was if I had a product of e and
e and e just multiply  I

 
     ,          ,  
mean and e and e are both
constants, multiply them.


    ,           , 
And you can make up the
rules as you like.


    ,          ,
There are lots of them here.


    ,         ,  
There are things as complicated,
for example, as  


    ,           , 
oh, I suppose down here some
distributive law, you see.


    ,          , 
The product of any object c and
the sum of d and e gives


    ,          , 
the result as the same as the
sum of the product of c and d


    ,          , 
and the product of c and e.


    ,          , 
Now, what exactly these
rules are doesn't very


    ,          , 
much interest me.

 
    ,          , 
We're going to be writing the
language that will allow us to


    ,          , 
interpret these rules so that
we can, in fact, make up


    ,          , 
whatever rules we like, another
whole language of


    ,            , 
programming.


      ,           , 


     ,           , 
Well, let's see.


     ,           , 
I haven't told you how we're
going to do this.


     ,           , 
And, of course, for a while,
we're going to work on that.


     ,          , 
But there's a real question of
what is  what am I going to do


    ,          , 
at all at a large scale?

 
    ,          , 
How do these rules work?


    ,          , 
How is the simplifier program
going to manipulate these


    ,          , 
rules with your expression to
produce a reasonable answer?


    ,          , 
Well, first, I'd like to think
about these rules as being


    ,          ,  
some sort of deck of them.


    ,           ,  
So here I have a whole bunch
of rules, right?


    ,           , 
Each rule  


    ,          , 
here's a rule  


    ,          , 
has a pattern and a skeleton.


    ,          , 
I'm trying to make up a control
structure for this.

  
    ,           , 
Now, what I have is a matcher,
and I have something which is

 
     ,           , 
an instantiater.

 
     ,           , 

 
     ,          , 
And I'm going to pass from the
matcher to the instantiater

 
    ,          ,  
some set of meaning for the
pattern variables, a

 
    ,            , 
dictionary, I'll call it.

 
     ,          , 
A dictionary, which will say
x was matched against the

 
    ,           , 
following subexpression and y
was matched against another

 
     ,          , 
following subexpression.

 
    ,          ,  
And from the instantiater, I
will be making expressions,

 
    ,           , 
and they will go into
the matcher.


    ,          , 
They will be expressions.


    ,          , 


    ,          , 
And the patterns of the rules
will be fed into the matcher,


    ,          ,  
and the skeletons from the same
rule will be fed into the


    ,           , 
instantiater.


    ,          , 
Now, this is a little
complicated because when you


    ,             ,
have something like an algebraic
expression, where


       ,           , 
someth  the rules are intended
to be able to allow you to


      ,            , 
substitute equal for equal.

 
      ,            , 
These are equal transformation
rules.


      ,            , 
So all subexpressions
of the expression


      ,           ,  
should be looked at.


     ,            , 
You give it an expression,
this thing, and the rules


     ,           ,  
should be cycled around.


     ,            , 
First of all, for every
subexpression of the


     ,           , 
expression you feed in, all
of the rules must be


     ,           , 
tried and looked at.


     ,           ,  
And if any rule matches, then
this process occurs.


     ,             , 
The dictionary  the dictionary
is to have some values in it.

 
      ,           ,  
The instantiater makes a new
expression, which is basically


     ,            ,   
replaces that part of the
expression that was matched in


     ,              ,  
your original expression.


      ,            ,  
And then, then, of course, we're
going to recheck that,


     ,            , 
going to go around these rules
again, seeing if that could be


     ,           , 
simplified further.


     ,            , 
And then, then we're going
to do that for every


      ,           , 
subexpression until the thing
no longer changes.


     ,           , 
You can think of this as sort
of an organic process.


     ,            , 
You've got some sort
of stew, right?

 
      ,           , 
You've got bacteria or
something, or enzymes in some,


     ,           , 
in some gooey mess.


     ,           , 
And there's these  and these
enzymes change things.


     ,          , 
They attach to your expression,
change it, and


    ,          ,  
then they go away.


    ,           ,  
And they have to match.


    ,           , 
The key in lock phenomenon.


    ,          , 
They match, they change
it, they go away.


    ,          , 
You can imagine it as a parallel
process of some sort.


    ,          , 
So you stick an expression into
this mess, and after a

 
    ,          , 
while, you take it out, and
it's been simplified.


    ,          , 
And it just keeps changing
until it no


    ,          , 
longer can be changed.


    ,          , 
But these enzymes can attach
to any part of the, of the


    ,          , 
expression.


    ,          , 
OK, at this point, I'd like to
stop and ask for questions.


    ,          , 
Yes.


    ,          , 
AUDIENCE  This implies that the
matching program and the


    ,           , 
instantiation program
are separate


     ,          , 
programs; is that right?

 
    ,          , 
Or is that   they are.


    ,          ,  
PROFESSOR  They're separate
little pieces.


    ,           , 
They fit together in
a larger structure.


    ,            , 
AUDIENCE  So I'm going through
and matching and passing the


      ,           , 
information about what I matched
to an instantiater,


     ,           , 
which makes the changes.


     ,           , 
And then I pass that back
to the matcher?


     ,           ,  
PROFESSOR  It won't
make a change.


     ,           , 
It will make a new expression,
which has, which has


    ,          , 
substituted the values of the
pattern variable that were

 
    ,          , 
matched on the left hand side
for the variables that are


    ,           , 
mentioned, the skeleton
variables or evaluation


     ,          , 
variables or whatever I called
them, on the right hand side.


    ,          , 
AUDIENCE  And then that's passed
back into the matcher?


    ,          , 
PROFESSOR  Then this is going
to go around again.


    ,          , 
This is going to go through
this mess until


    ,          , 
it no longer changes.


    ,          , 
AUDIENCE  And it seems that
there would be a danger of


    ,          , 
getting into a recursive loop.


    ,          , 
PROFESSOR  Yes.

 
    ,          , 
Yes, if you do not write your
rules nicely, you are  


    ,          , 
indeed, in any programming
language you invent, if it's


    ,          , 
sufficiently powerful to do
anything, you can write


    ,          , 
programs that will go
into infinite loops.


    ,          ,  
And indeed, writing a program
for doing algebraic


    ,           ,  
manipulation for long will
produce infinite loops.


    ,             ,


      ,          , 
Go ahead.


     ,           , 
AUDIENCE  Some language
designers feel that this


     ,           , 
feature is so important that it
should become part of the

 
     ,          , 
basic language, for example,
scheme in this case.


    ,          , 
What are your thoughts on  


    ,          ,
PROFESSOR  Which language
feature?


    ,         , 
AUDIENCE  The pairs matching.


    ,          , 
It's all application of
such rules should be  


    ,          , 
PROFESSOR  Oh, you
mean like Prolog?


    ,          ,
AUDIENCE  Like Prolog, but it
becomes a more general  


    ,         , 
PROFESSOR  It's possible.


    ,          , 
OK, I think my feeling about
that is that I would like to


    ,          , 
teach you how to do it so you
don't depend upon some

  
    ,          , 
language designer.

 
    ,           , 
AUDIENCE  OK.

 
     ,          , 
PROFESSOR  You make
it yourself.

 
    ,          , 
You can roll your own.

 
    ,          , 
Thank you.

 
    ,          , 

 
    ,          ,  
Well, let's see.

 
    ,           ,  
Now we have to tell
you how it works.

 
    ,           ,

 
    ,         ,
It conveniently breaks up
into various pieces.

 
    ,         , 
I'd like to look now
at the matcher.


    ,          , 
The matcher has the following
basic structure.


    ,          ,  
It's a box that takes as its
input an expression and a


    ,           , 
pattern, and it turns
out a dictionary.


    ,           , 


     ,           , 
A dictionary, remember, is a
mapping of pattern variables


     ,           , 
to the values that were found
by matching, and it puts out


     ,           , 
another dictionary, which is the
result of augmenting this


     ,          , 
dictionary by what was found
in matching this expression


    ,          ,  
against this pattern.

 
    ,           , 


    ,          , 
So that's the matcher.


    ,          ,  


    ,           ,  
Now, this is a rather
complicated program, and we


    ,           , 
can look at it on the overhead
over here and see, ha, ha,


    ,          , 
it's very complicated.


    ,          , 
I just want you to look
at the shape of it.


    ,          , 
It's too complicated to look
at except in pieces.


    ,          , 
However, it's a fairly large,
complicated program with a lot


    ,            , 
of sort of indented structure.

 
      ,           ,  
At the largest scale  


     ,            , 
you don't try to read those
characters, but at the largest


     ,           , 
scale, you see that there is a
case analysis, which is all


     ,          ,  
these cases lined up.


    ,           ,  
What we're now going to do is
look at this in a bit more


    ,           , 
detail, attempting to understand
how it works.


    ,          , 
Let's go now to the first slide,
showing some of the


    ,          , 
structure of the matcher
at a large scale.


    ,          , 
And we see that the matcher, the
matcher takes as its input


    ,          ,  
a pattern, an expression,
and a dictionary.

 
    ,           , 


    ,          , 
And there is a case analysis
here, which is made out of


    ,          , 
several cases, some of which
have been left out over here,


    ,           , 
and the general case, which
I'd like you to see.


     ,          , 
Let's consider this
general case.


    ,          , 
It's a very important pattern.


    ,          , 


    ,            , 
The problem is that we have
to examine two trees


      ,           ,   
simultaneously.


     ,             , 
One of the trees is the tree
of the expression, and the

 
     ,           , 
other is the tree
of the pattern.


     ,          , 
We have to compare them with
each other so that the


    ,          , 
subexpressions of the expression
are matched against


    ,          , 
subexpressions of the pattern.


    ,          , 
Looking at that in a bit more
detail, suppose I had a


    ,          , 
pattern, a pattern, which was
the sum of the product of a


    ,          , 
thing which we will call x and
a thing which we will call y,


    ,          ,   
and the sum of that, and the
same thing we call y.


    ,            ,  


    ,           , 
So we're looking for a sum of a
product whose second  whose

 
    ,          , 
second argument is the
same as the second


    ,          , 
argument of the sum.


    ,          , 
That's a thing you might
be looking for.


    ,           , 
Well, that, as a pattern,
looks like this.


     ,           , 
There is a tree, which consists
of a sum, and a


     ,          , 
product with a pattern variable
question mark x and


    ,          , 
question mark y, the other
pattern variable, and question


    ,          ,
mark y, just looking at the
same, just writing down the


    ,         , 
list structure in
a different way.


    ,          ,  
Now, suppose we were matching
that against an expression

 
    ,           , 
which matches it, the sum of,
say, the product of  and x


    ,          , 
and, say, x.


    ,          , 
That's another tree.


    ,          , 
It's the sum of the product
of  and x and of x.


    ,          , 


    ,           ,  
So what I want to do is traverse
these two trees


     ,            , 
simultaneously.


     ,           , 
And what I'd like to do is
walk them like this.


     ,          , 
I'm going to say are
these the same?


    ,          ,  
This is a complicated object.

 
    ,           , 
Let's look at the
left branches.


    ,          , 
Well, that could be the car.


    ,          , 
How does that look?


    ,          , 
Oh yes, the plus looks
just fine.


    ,          ,  
But the next thing here is
a complicated thing.


    ,           , 
Let's look at that.


    ,          , 
Oh yes, that's pretty
fine, too.


    ,          , 
They're both asterisks.


    ,           , 
Now, whoops!


     ,          ,  
My pattern variable, it
matches against the .

 
    ,           ,  
Remember, x equals  now.


    ,           , 
That's in my dictionary, and
the dictionary's going to


    ,          , 
follow along with me 
x equals three.


    ,          ,  
Ah yes, x equals  and y
equals x, different x.


    ,           ,  
The pattern x is the expression
x, the pattern y.


    ,           , 


    ,          , 
Oh yes, the pattern variable
y, I've already


    ,          , 
got a value for it.


    ,          , 
It's x.


    ,          ,  
Is this an x?

  
    ,              ,  
Oh yeah, sure it is.

 
       ,             ,  
That's fine.

 
      ,             , 
Yep, done.

 
      ,            ,  
I now have a dictionary,
which I've accumulated

 
      ,             , 
by making this walk.

 
      ,           , 

 
     ,           ,  
Well, now let's look at this
general case here and see how

 
     ,            , 
that works.

 
     ,           , 
Here we have it.

 
     ,            , 
I take in a pattern variable  a
pattern, an

 
      ,           , 
expression, and a dictionary.


     ,           , 
And now I'm going to do a
complicated thing here, which


     ,           , 
is the general case.


     ,           , 
The expression is made out of
two parts  a left and a right


     ,           , 
half, in general.


     ,           ,  
Anything that's complicated is
made out of two pieces in a


     ,            , 
Lisp system.


     ,           , 
Well, now what do
we have here?


     ,           , 
I'm going to match the car's of
the two expressions against


     ,            , 
each other with respect to the
dictionary I already have,

 
      ,           , 
producing a dictionary as its
value, which I will then use


     ,           , 
for matching the cdr's
against each other.


     ,            , 
So that's how the dictionary
travels,


      ,           , 
threads the entire structure.


     ,           , 
And then the result of that is
the dictionary for the match


     ,          , 
of the car and the cdr, and
that's what's going to be


    ,          , 
returned as a value.


    ,          , 
Now, at any point, a
match might fail.


    ,          , 
It may be the case, for example,
if we go back and


    ,          ,  
look at an expression that
doesn't quite match, like

 
    ,           ,  
supposing this was a .


    ,           , 
Well, now these two don't match
any more, because the x


    ,          , 
that had to be   sorry, the y
that had to be x here and this


    ,           , 
y has to be .


     ,          , 
But x and  were not the same
object syntactically.


    ,          , 
So this wouldn't match, and
that would be rejected


    ,           , 
sometimes, so matches
may fail.


     ,          , 
Now, of course, because this
matcher takes the dictionary


    ,          , 
from the previous match as
input, it must be able to


    ,          , 
propagate the failures.

 
    ,            ,  
And so that's what the
first clause of


      ,            , 
this conditional does.


     ,           , 
It's also true that if it turned
out that the pattern


     ,           , 
was not atomic  


     ,           , 
see, if the pattern was atomic,
I'd go into this


     ,          ,  
stuff, which we haven't
looked at yet.


    ,           , 
But if the pattern is
not atomic and the


    ,          ,
expression is atomic  


    ,          ,  
it's not made out of pieces  


     ,           , 
then that must be a failure,
and so we go over here.

 
    ,          , 
If the pattern is not atomic
and the pattern is not a


    ,          , 
pattern variable  


    ,          ,
I have to remind myself
of that  


    ,          , 
then we go over here.


     ,          , 
So that way, failures
may occur.


    ,          , 


    ,          ,
OK, so now let's look at the
insides of this thing.


    ,         ,  
Well, the first place to look
is what happens if I have an


    ,           , 
atomic pattern?


    ,          , 
That's very simple.

 
    ,          ,
A pattern that's not made
out of any pieces  foo.


    ,         ,  
That's a nice atomic pattern.


    ,           ,  
Well, here's what we see.


    ,           , 
If the pattern is atomic, then
if the expression is atomic,


    ,            ,  
then if they are the same thing,
then the dictionary I


      ,            , 
get is the same one
as I had before.


     ,           , 
Nothing's changed.


     ,           , 
It's just that I matched plus
against plus, asterisk against


     ,          , 
asterisk, x against x.


    ,          , 
That's all fine.

 
    ,          , 
However, if the pattern is
not the one which is the


    ,          , 
expression, if I have two
separate atomic objects, then


    ,          , 
it was matching plus against
asterisk, which case I fail.


    ,          ,  
Or if it turns out that the
pattern is atomic but the


    ,           , 
expression is complicated,
it's not atomic,


    ,          , 
then I get a failure.


    ,          ,  


    ,           ,  
That's very simple.


    ,           ,  
Now, what about the various
kinds of pattern variables?


    ,           , 
We had three kinds.

 
    ,          , 
I give them the names.


    ,           , 
They're arbitrary constants,
arbitrary variables, and


     ,          , 
arbitrary expressions.


    ,           , 
A question mark x is an
arbitrary expression.


     ,           , 
A question mark cx is an
arbitrary constant, and a


     ,           ,
question mark vx is an
arbitrary variable.


     ,          , 
Well, what do we do here?


     ,          ,
Looking at this, we see that
if I have an arbitrary


    ,         ,  
constant, if the pattern is an
arbitrary constant, then it


    ,           , 
had better be the case
that the expression

 
    ,          , 
had better be a constant.


    ,          , 
If the expression is
not a constant,


    ,          , 
then that match fails.


    ,          , 
If it is a constant, however,
then I wish to extend the


    ,          , 
dictionary.


    ,          , 
I wish to extend the dictionary
with that pattern


    ,          , 
being remembered to be that
expression using the old


    ,          ,  
dictionary as a starting
point.


    ,           ,  


    ,           ,
So really, for arbitrary
variables, I have to check

  
    ,         , 
first if the expression is a
variable by matching against.

 
    ,           , 
If so, it's worth extending
the dictionary so that the

 
     ,          ,
pattern is remembered to
be matched against that

 
    ,         ,  
expression, given the original
dictionary, and this makes a

 
    ,           , 
new dictionary.

 
    ,            , 
Now, it has to check.

 
      ,           , 
There's a sorts of failure
inside extend dictionary,

 
     ,           , 
which is that  

 
     ,           ,  
if one of these pattern
variables already has a value

 
     ,           , 
and I'm trying to match the
thing against something else

 
    ,          , 
which is not equivalent to the
one that I've already matched


    ,          , 
it against once, then a failure
will come flying out


    ,           , 
of here, too.


     ,          , 
And I will see that some time.


    ,          , 
And finally, an arbitrary
expression does not have to


    ,          ,  
check anything syntactic about
the expression that's being


    ,           , 
matched, so all it does is
it's an extension of the


    ,          ,
dictionary.


    ,         ,  
So you've just seen a complete,
very simple matcher.


    ,           , 
Now, one of the things that's
rather remarkable about this

 
    ,          , 
is people pay an awful lot of
money these days for someone


    ,          , 
to make a, quote, AI expert
system that has nothing more


    ,          , 
in it than a matcher and maybe
an instantiater like this.


    ,          , 
But it's very easy to do, and
now, of course, you can start


    ,          ,  
up a little start up company and
make a couple of megabucks


    ,            ,
in the next week taking some
people for a ride.


     ,          , 


     ,           , 
  years ago, this
was remarkable,


     ,           , 
this kind of program.


     ,          , 
But now, this is sort of easy.

 
    ,          , 
You can teach it to freshmen.


    ,          , 
Well, now there's an
instantiater as well.


    ,          , 


    ,          , 
The problem is they're all
going off and making more


    ,          , 
money than I do.


    ,          , 
But that's always been
true of universities.


    ,          , 
As expression, the purpose of
the instantiater is to make


    ,          ,
expressions given a dictionary
and a skeleton.


    ,         , 


    ,          , 
And that's not very
hard at all.

 
    ,          , 
We'll see that very simply in
the next, the next slide here.


    ,          , 
To instantiate a skeleton,
given a particular


    ,          , 
dictionary  


    ,          , 
oh, this is easy.


    ,           ,  
We're going to do a recursive
tree walk over the skeleton.


     ,            , 
And for everything which is
a skeleton variable  


     ,           , 
I don't know, call it a
skeleton evaluation.


     ,           ,
That's the name and the abstract
syntax that I give it


     ,         , 
in this program  a skeleton
evaluation, a thing beginning


    ,          , 
with a colon in the rules.

 
    ,          , 
For anything of that case, I'm
going to look up the answer in


    ,          , 
the dictionary, and we'll worry
about that in a second.


    ,          ,  
Let's look at this as a whole.


    ,           , 
Here, I have  


    ,          , 
I'm going to instantiate a
skeleton, given a dictionary.


    ,          ,  
Well, I'm going to define some
internal loop right there, and


    ,            , 
it's going to do something
very simple.


     ,          ,  
Even if a skeleton  even if a
skeleton is simple and atomic,


    ,           , 
in which case it's nothing more
than giving the skeleton


    ,          , 
back as an answer, or in
the general case, it's

 
    ,          , 
complicated, in which case
I'm going to make up the


    ,          , 
expression which is the result
of instantiating  


    ,           ,   
calling this loop
recursively  


     ,             , 
instantiating the car of the
skeleton and the cdr.


     ,           ,  
So here is a recursive
tree walk.


     ,           , 
However, if it turns out to be a
skeleton evaluation, a colon


    ,          ,  
expression in the skeleton, then
what I'm going to do is


    ,           , 
find the expression that's
in the colon  


    ,          , 
the CADR in this case.


    ,          , 
It's a piece of abstract syntax
here, so I can change

 
    ,          , 
my representation of rules.


    ,          , 
I'm going to evaluate that
relative to this dictionary,


    ,          , 
whatever evaluation means.


    ,          ,  
We'll find out a lot about
that sometime.


    ,           , 
And the result of that
is my answer.


    ,          , 
so.


    ,          , 
I start up this loop   here's
my initialization  


    ,          ,  
by calling it with the whole
skeleton, and this will just


    ,           ,  
do a recursive decomposition
into pieces.


    ,           , 

 
    ,          ,  
Now, one more little bit
of detail is what


    ,           , 
happens inside evaluate?


    ,            ,  
I can't tell you that
in great detail.


      ,            , 
I'll tell you a little
bit of it.


     ,           , 
Later, we're going to see  look
into this in much


     ,           , 
more detail.


     ,           , 
To evaluate some form, some
expression with respect to a


     ,          ,
dictionary, if the expression is
an atomic object, well, I'm


    ,         , 
going to go look it up.


    ,           , 
Nothing very exciting there.

 
     ,          ,  
Otherwise, I'm going to do
something complicated here,


    ,           , 
which is I'm going to apply a
procedure which is the result


    ,           , 
of looking up the operator part
in something that we're


     ,          , 
going to find out
about someday.


    ,          , 
I want you realize you're
seeing magic now.


    ,           ,   
This magic will become clear
very soon, but not today.


     ,            , 
Then I'm looking at  looking
up all the pieces, all the


    ,          , 
arguments to that in
the dictionary.


    ,          , 
So I don't want you to look
at this in detail.


    ,          , 
I want you to say that there's
more going on here, and we're

  
    ,          ,   
going to see more about this.

 
    ,            , 
But it's  

 
    ,            , 
the magic is going to stop.

 
      ,            , 
This part has to do with Lisp,
and it's the end of that.

 
      ,            , 

 
      ,           ,  
OK, so now we know about
matching and instantiation.

 
     ,            , 
Are there any questions
for this segment?

 
     ,           ,

 
     ,          , 
AUDIENCE  I have a question.

 
     ,            , 
PROFESSOR  Yes.

 
      ,           ,  
AUDIENCE  Is it possible to
bring up a previous slide?


     ,            , 
It's about this define
match pattern.


     ,           ,  
PROFESSOR  Yes.


     ,             , 
You'd like to see the overall
slide define match pattern.


      ,           , 
Can somebody put up the  


     ,           , 
no, the overhead.


     ,           ,  
That's the biggest scale one.


     ,            , 
What part would you
like to see?


     ,           , 
AUDIENCE  Well, the
top would be fine.


     ,           , 
Any of the parts where you're
passing failed.

 
     ,           ,  
PROFESSOR  Yes.


     ,            ,
AUDIENCE  The idea is to pass
failed back to the dictionary;


     ,          ,   
is that right?


     ,             , 
PROFESSOR  The dictionary is the
answer to a match, right?


     ,          , 
And it is either some mapping
or there's no match.


    ,          , 
It doesn't match.


    ,          , 
AUDIENCE  Right.


    ,          , 
PROFESSOR  So what you're seeing
over here is, in fact,


    ,          , 
because the fact that a match
may have another match pass in


    ,          , 
the dictionary, as you see in
the general case down here.

 
    ,          ,
Here's the general case where
a match passes another match


    ,         ,  
to the dictionary.


    ,           , 
When I match the cdr's, I match
them in the dictionary


    ,          ,  
that is resulting from
matching the car's.


    ,           , 
OK, that's what I have here.


    ,          , 
So because of that, if the match
of the car's fails, then


    ,          , 
it may be necessary that the
match of the cdr's propagates


    ,          , 
that failure, and that's
what the first line is.


    ,          ,  
AUDIENCE  OK, well, I'm still
unclear what matches  


    ,           ,  
what comes out of one instance
of the match?

 
    ,           , 
PROFESSOR  One of two
possibilities.


    ,          , 
Either the symbol failed, which
means there is no match.


    ,          , 
AUDIENCE  Right.


    ,           , 
PROFESSOR  Or some mapping,
which is an abstract thing


     ,           , 
right now, and you should know
about the structure of it,


     ,          , 
which relates the pattern
variables to their values as


    ,          , 
picked up in the match.


    ,          , 
AUDIENCE  OK, so it is  


    ,          , 
PROFESSOR  That's constructed
by extend dictionary.


    ,          , 
AUDIENCE  So the recursive
nature brings about the fact

 
    ,          , 
that if ever a failed gets
passed out of any calling of


    ,           , 
match, then the first condition
will pick it up  


     ,          , 
PROFESSOR  And just propagate
it along without any further


    ,          , 
ado, right.


    ,          , 
AUDIENCE  Oh, right.


    ,          , 
OK.


    ,          , 
PROFESSOR  That's just the
fastest way to get that


    ,          ,  
failure out of there.


    ,           , 


    ,          , 
Yes.

 
    ,          , 
AUDIENCE  If I don't fail, that
means that I've matched a


    ,          , 
pattern, and I run the procedure
extend dict and then


    ,          ,
pass in the pattern
in the expression.


    ,         , 


    ,          , 
But the substitution will
not be made at that


    ,          ,  
point; is that right?


    ,           , 
I'm just  


    ,          , 
PROFESSOR  No, no.


    ,            , 
There's no substitution being
there because there's no


      ,           , 
skeleton to be substituted in.

 
     ,           , 
AUDIENCE  Right.


     ,           ,  
So what  


     ,            , 
PROFESSOR  All you've got there
is we're making up the


     ,           , 
dictionary for later
substitution.


     ,           , 
AUDIENCE  And what would the
dictionary look like?


     ,          , 
Is it ordered pairs?


    ,          , 
PROFESSOR  That's  that's
not told to you.


    ,          ,  
We're being abstract.


    ,           , 
AUDIENCE  OK.


    ,          , 
PROFESSOR  Why do you
want to know?

 
    ,           , 
What it is, it's a function.


     ,          , 
It's a function.


    ,          ,  
AUDIENCE  Well, the reason
I want to know is  


    ,           ,  
PROFESSOR  A function
abstractly is a


    ,           , 
set of ordered pairs.


    ,          ,  
It could be implemented as
a set of list pairs.


    ,           , 
It could be implemented as some
fancy table mechanism.


    ,          , 
It could be implemented
as a function.


    ,          ,  
And somehow, I'm building
up a function.


    ,            , 
But I'm not telling you.

 
     ,          ,  
That's up to George, who's going
to build that later.


    ,           , 


    ,          , 
I know you really badly want
to write concrete things.


    ,          , 
I'm not going to let
you do that.


    ,          ,  
AUDIENCE  Well, let me at
least ask, what is the


    ,           , 
important information
there that's being


    ,          , 
passed to extend dict?


    ,           , 
I want to pass the
pattern I found  


     ,           , 
PROFESSOR  Yes.


     ,           , 
The pattern that's matched
against the expression.

  
     ,           , 
You want to have the pattern,
which happens to be in those

 
     ,           , 
cases pattern variables,
right?

 
     ,          , 
All of those three
cases for extend

 
    ,          , 
dict are pattern variables.

 
    ,          ,  
AUDIENCE  Right.

 
    ,           , 
PROFESSOR  So you have a pattern
variable that is to be

 
    ,          ,
given a value in a dictionary.

 
    ,         , 
AUDIENCE  Mm hmm.

 
    ,          , 
PROFESSOR  The value is the
expression that it matched

 
    ,          , 
against. The dictionary is the
set of things I've already

 
    ,           ,
figured out that I have
memorized or learned.


     ,         , 
And I am going to make a new
dictionary, which is extended


    ,          , 
from the original one by having
that pattern variable


    ,          , 
have a value with the
new dictionary.


    ,          , 
AUDIENCE  I guess what I don't
understand is why can't the


    ,          , 
substitution be made right
as soon as you find  


    ,          , 
PROFESSOR  How do I know what
I'm going to substitute?


    ,          , 
I don't know anything
about this skeleton.


    ,          , 
This pattern, this matcher
is an independent unit.


    ,           , 
AUDIENCE  Oh, I see.

 
     ,          ,  
OK.


    ,           , 
PROFESSOR  Right?


    ,          , 
AUDIENCE  Yeah.


    ,          ,  
PROFESSOR  I take the matcher.


    ,           , 
I apply the matcher.


    ,          ,
If it matches, then it was worth
doing instantiation.


    ,         ,
AUDIENCE  OK, good.


    ,         ,  
Yeah.


    ,             ,
PROFESSOR  OK?


      ,          , 
AUDIENCE  Can you just do that
answer again using that

 
     ,           , 
example on the board?


     ,           , 
You know, what you just passed
back to the matcher.


     ,           ,  
PROFESSOR  Oh yes.


     ,            , 
OK, yes.


     ,           , 
You're looking at
this example.


     ,          , 
At this point when I'm
traversing this structure, I


    ,          , 
get to here  x.


    ,          , 
I have some dictionary,
presumably an empty dictionary


    ,          ,  
at this point if this is
the whole expression.


    ,           , 
So I have an empty dictionary,
and I've matched x against .

 
    ,          , 
So now, after this point,
the dictionary


    ,          , 
contains x is , OK?


    ,          , 
Now, I continue walking
along here.


    ,          ,  
I see y.


    ,           , 
Now, this is a particular
x, a pattern x.


    ,          , 
I see y, a pattern y.


    ,          , 
The dictionary says, oh yes, the
pattern y is the symbol x


    ,          , 
because I've got
a match there.


    ,          , 
So the dictionary now contains
at this point two entries.


    ,           , 
The pattern x is , and the
pattern y is the expression x.

 
     ,           , 
Now, I get that, I can
walk along further.


     ,           ,  
I say, oh, pattern y
also wants to be .


     ,            , 
But that isn't possible,
producing a failure.


     ,          , 


    ,          , 
Thank you.


    ,          ,  
Let's take a break.


    ,            , 


     ,           ,  
OK, you're seeing your first
very big and hairy program.


     ,            , 
Now, of course, one of the goals
of this subsegment is to


     ,          , 
get you to be able to read
something like this and not be

 
    ,          , 
afraid of it.


    ,          ,
This one's only about
four pages of code.


    ,          , 
By the end of the subject, I
hope a   page program will


     ,          , 
not look particularly
frightening.


    ,          , 
But I don't expect   and I don't
want you to think that I


    ,          ,  
expect you to be getting
it as it's coming out.


    ,           , 
You're supposed to feel the
flavor of this, OK?


    ,          ,  
And then you're supposed to
think about it because it is a


    ,           , 
big program.


    ,           ,
There's a lot of stuff
inside this program.

 
     ,         ,  
Now, I've told you about the
language we're implementing,


    ,           , 
the pattern match substitution
language.


    ,          , 
I showed you some rules.


    ,          , 
And I've told you about matching
and instantiation,


    ,          , 
which are the two halves
of how a rule works.


    ,          , 
Now we have to understand the
control structure by which the


    ,           , 
rules are applied to the
expressions so as to do


     ,           , 
algebraic simplification.


     ,           , 


     ,          ,  
Now, that's also a big
complicated mess.

 
    ,           , 
The problem is that there is
a variety of interlocking,


    ,           , 
interwoven loops, if you
will, involved in this.


     ,          , 
For one thing, I
have to apply  


    ,          , 
I have to examine every
subexpression of my expression


    ,          ,  
that I'm trying to simplify.


    ,           , 
That we know how to do.


    ,          ,  
It's a car cdr recursion of some
sort, or something like


    ,           , 
that, and some sort
of tree walk.


    ,          , 
And that's going to
be happening.


    ,          , 
Now, for every such place, every
node that I get to in

 
    ,          , 
doing my traversal of the
expression I'm trying to


    ,          , 
simplify, I want to apply
all of the rules.


    ,          , 
Every rule is going to
look at every node.


    ,          , 
I'm going to rotate
the rules around.


    ,           , 


     ,           , 
Now, either a rule will
or will not match.


     ,           , 
If the rule does not match,
then it's not very


     ,          , 
interesting.


    ,          ,  
If the rule does match, then I'm
going to replace that node


    ,            , 
in the expression by an
alternate expression.

  
     ,          , 
I'm actually going
to make a new

 
    ,          , 
expression, which contains  

 
    ,          , 
everything contains that new
value, the result of

 
    ,          , 
substituting into the skeleton,
instantiating the

 
    ,          , 
skeleton for that rule
at this level.

 
    ,          , 
But no one knows whether that
thing that I instantiated

 
    ,          , 
there is in simplified form.

 
    ,          , 
So we're going to have to
simplify that, somehow to call

 
    ,          , 
the simplifier on the thing
that I just constructed.

 
    ,          , 

 
    ,          , 
And then when that's done, then
I sort of can build that


    ,          , 
into the expression I
want as my answer.


    ,          , 
Now, there is a basic idea
here, which I will call a


    ,          , 
garbage  in, garbage out
simplifier.


    ,            , 


      ,            , 
It's a kind of recursive
simplifier.


      ,            , 
And what happens is the way you
simplify something is that


      ,            , 
simple objects like variables
are simple.


      ,           , 
Compound objects, well,
I don't know.


     ,           , 
What I'm going to do is I'm
going to build up from simple

 
     ,           , 
objects, trying to make simple
things by assuming that the


     ,           , 
pieces they're made
out of are simple.


     ,           , 


     ,           , 
That's what's happening here.


     ,            ,  
Well, now, if we look
at the first slide  


      ,            ,
no, overhead, overhead.


     ,          , 
If we look at the overhead, we
see a very complicated program


     ,           , 
like we saw before for the
matcher, so complicated that


     ,           , 
you can't read it like that.


     ,           , 
I just want you to get the feel
of the shape of it, and

 
     ,           , 
the shape of it is that this
program has various


     ,            , 
subprograms in it.


      ,           , 


     ,           ,  
One of them  this part is the
part for traversing the


     ,            , 
expression, and this part is
the part for trying rules.


     ,           , 
Now, of course, we can look at
that in some more detail.


     ,          , 
Let's look at  let's look at the
first transparency, right?


    ,          , 
The simplifier is made
out of several parts.


    ,           ,  
Now, remember at the very
beginning, the simplifier is


     ,           ,  
the thing which takes a rules  a
set of rules and

 
    ,           , 
produces a program which will
simplify it relative to them.


    ,          , 


    ,          , 
So here we have our
simplifier.


    ,          , 
It takes a rule set.


    ,          , 
And in the context where that
rule set is defined, there are


    ,          , 
various other definitions
that are done here.


    ,          , 
And then the result of this
simplifier procedure is, in


    ,           , 
fact, one of the procedures
that was defined.


     ,          ,  
Simplify x.


    ,           , 
What I'm returning as the
value of calling the

 
    ,           , 
simplifier on a set of rules is
a procedure, the simplify x


     ,           , 
procedure, which is defined in
that context, which is a


     ,           ,  
simplification procedure
appropriate for using those


     ,            , 
set of rules.


     ,          , 


    ,          , 
That's what I have there.


    ,          , 
Now, the first two of these
procedures, this one and this


    ,          ,  
one, are together going to be
the recursive traversal of an


    ,           , 
expression.


    ,          , 
This one is the general
simplification for any

 
    ,          , 
expression, and this is the
thing which simplifies a list


    ,          , 
of parts of an expression.


    ,          , 
Nothing more.


    ,          , 
For each of those, we're going
to do something complicated,


    ,           , 
which involves trying
the rules.


     ,          ,  
Now, we should look at
the various parts.


    ,           , 


    ,          , 
Well let's look first at the
recursive traversal of an


    ,          , 
expression.


    ,          , 
And this is done in a
sort of simple way.

 
    ,          , 
This is a little nest of
recursive procedures.


    ,           , 
And what we have here
are two procedures  


     ,           ,  
one for simplifying an
expression, and one for


     ,            ,
simplifying parts of
an expression.


     ,         , 
And the way this works
is very simple.


    ,          , 
If the expression I'm trying
to simplify is a compound


    ,          , 
expression, I'm going to
simplify all the parts of it.


    ,          , 
And that's calling  that
procedure, simplify parts, is


    ,          ,  
going to make up a new
expression with all the parts


    ,           , 
simplified, which I'm then
going to try the

 
    ,           , 
rules on over here.


     ,          , 
If it turns out that the
expression is not compound, if


    ,          , 
it's simple, like just a symbol
or something like pi,


    ,           ,  
then in any case, I'm going to
try the rules on it because it


     ,           ,  
might be that I want in my set
of rules to expand pi to


    ,           , 
.,
dot, dot, dot.


    ,          , 
But I may not.


    ,          , 
But there is no reason
not to do it.


    ,          ,  
Now, if I want to simplify the
parts, well, that's easy too.


    ,            , 
Either the expression is an
empty one, there's no more

 
     ,           , 
parts, in which case I have
the empty expression.


     ,          , 
Otherwise, I'm going to make a
new expression by cons, which


    ,          , 
is the result of simplifying
the first part of the


    ,          , 
expression, the car, and
simplifying the rest of the


    ,          ,  
expression, which is the cdr.


    ,           , 
Now, the reason why I'm showing
you this sort of stuff


    ,          , 
this way is because I want you
get the feeling for the


    ,          ,  
various patterns that are very
important when writing


    ,           , 
programs. And this could be
written a different way.


    ,          , 
There's another way to write
simplified expressions so

   
    ,          ,
there would be only
one of them.

  
    ,         , 
There would only be one
little procedure here.

  
    ,          , 
Let me just write that on the
blackboard to give you a

  
    ,          , 
feeling for that.

  
    ,          , 

  
    ,          , 
This in another idiom,
if you will.

  
    ,          ,

  
    ,          ,
To simplify an expression
called x, what

  
     ,          ,  
am I going to do?

  
     ,           ,  
I'm going to try the rules on
the following situation.

  
    ,           , 
If  

 
    ,          ,  
on the following expression  

 
    ,           , 
compound, just like
we had before.

 
    ,          ,  

 
    ,           , 
If the expression is compound,
well, what am I going to do?

 
    ,          , 
I'm going to simplify
all the parts.

 
    ,           , 
But I already have a cdr
recursion, a common pattern of

 
     ,          , 
usage, which has been captured
as a high order procedure.

 
    ,          ,  
It's called map.

 
    ,           , 
So I'll just write that here.

  
    ,          , 
Map simplify the expression,
all the parts of the

 
    ,          ,  
expression.

 
    ,           , 
This says apply the
simplification operation,

 
    ,          , 
which is this one, every part
of the expression, and then

 
    ,           , 
that cuts those up into a list.
It's every element of

 
     ,           ,
the list which the expression is
assumed to be made out of,

 
     ,          , 
and otherwise, I have
the expression.

 
     ,          , 
So I don't need the helper
procedure, simplify parts,

 
    ,          , 
because that's really this.

 
    ,          , 
So sometimes, you just
write it this way.

  
    ,           , 
It doesn't matter very much.

 
     ,          , 
Well, now let's take
a look at  

 
    ,          , 
let's just look at how
you try rules.

 
    ,           , 
If you look at this slide,
we see this is a

 
     ,          , 
complicated mess also.

 
    ,          , 
I'm trying rules on
an expression.

 
    ,          ,  
It turns out the expression
I'm trying it on is some

 
    ,            , 
subexpression now of the
expression I started with.

 
     ,          ,  
Because the thing I just
arranged allowed us to try

 
    ,           , 
every subexpression.

  
    ,          ,  

 
    ,            , 
So now here we're taking in
a subexpression of the

 
     ,          ,  
expression we started with.

 
    ,           ,
That's what this is.

 
    ,         , 
And what we're going to define
here is a procedure called

 
    ,          , 
scan, which is going
to try every rule.

 
    ,           , 
And we're going to start it up
on the whole set of rules.

 
     ,           , 
This is going to go cdr ing down
the rules, if you will,

 
     ,           , 
looking for a rule to apply.

 
     ,          , 
And when it finds one,
it'll do the job.

  
    ,          , 
Well, let's take a look at
how try rules works.

 
    ,          , 
It's very simple 
the scan rules.

 
    ,          , 
Scan rules, the way
of scanning.

 
    ,          , 
Well, is it so simple?

 
    ,          , 
It's a big program, of course.

 
    ,          ,  
We take a bunch of rules,
which is a sublist

 
    ,            ,  
of the list of rules.

 
     ,           ,  
We've tried some of them
already, and they've not been

 
    ,           , 
appropriate, so we
get to some here.

 
    ,          , 
We get to move to
the next one.

  
    ,          ,  
If there are no more rules, well
then, there's nothing I

 
    ,           ,  
can do with this expression,
and it's simplified.

 
    ,           , 
However, if it turns out that
there are still rules to be

 
    ,          , 
done, then let's match the
pattern of the first rule

 
    ,          , 
against the expression using the
empty dictionary to start

 
    ,            , 
with and use that as
the dictionary.

 
      ,           , 
If that happens to
be a failure, try

 
     ,           ,  
the rest of the rules.

 
     ,            , 

 
     ,           , 
That's all it says here.

  
     ,          ,  
It says discard that rule.

 
    ,           , 
Otherwise, well, I'm going to
get the skeleton of the first

 
    ,          , 
rule, instantiate that relative
to the dictionary,

 
    ,           , 
and simplify the result, and
that's the expression I want.

 
     ,          ,  

 
    ,           , 
So although that was a
complicated program, every

 
    ,          , 
complicated program is made out
of a lot of simple pieces.

 
    ,          , 
Now, the pattern of recursions
here is very complicated.

 
    ,          , 
And one of the most important
things is not

 
    ,          ,
to think about that.

  
    ,         , 
If you try to think about the
actual pattern by which this

 
    ,          , 
does something, you're going
to get very confused.

 
    ,          , 
I would.

 
    ,          , 
This is not a matter of you
can do this with practice.

 
    ,          ,
These patterns are hard.

 
    ,         , 
But you don't have to
think about it.

 
    ,          ,  
The key to this  

 
    ,             , 
it's very good programming and
very good design   is to know

 
      ,           , 
what not to think about.

 
     ,           , 
The fact is, going back to this
slide, I don't have to

  
     ,          , 
think about it because I have
specifications in my mind for

 
    ,          ,   
what simplify x does.

 
    ,            ,
I don't have to know
how it does it.

 
    ,          , 
And it may, in fact, call scan
somehow through try rules,

 
     ,          , 
which it does.

 
    ,          , 
And somehow, I've got another
recursion going on here.

 
    ,          , 
But since I know that simplify
x is assumed by wishful

 
    ,          ,
thinking to produce the
simplified result, then I

 
    ,         ,  
don't have to think
about it anymore.

 
    ,           ,  
I've used it.

  
    ,           , 
I've used it in a
reasonable way.

 
    ,          ,
I will get a reasonable
answer.

 
    ,         , 
And you have to learn how
to program that way  

 
    ,          ,  
with abandon.

 
    ,           , 

 
    ,           , 
Well, there's very little
left of this thing.

 
     ,          , 
All there is left is a few
details associated with what a

 
    ,          ,  
dictionary is.

 
    ,           , 
And those of you who've been
itching to know what a

 
    ,            , 
dictionary is, well, I will flip
it up and not tell you

 
      ,            , 
anything about it.


      ,            ,  
Dictionaries are easy.


      ,             , 
It's represented in terms of
something else called an A


      ,           , 
list, which is a particular
pattern of usage for making


     ,           , 
tables in lists.


     ,           , 
They're easy.


     ,           , 
They're made out of pairs,
as was asked a bit ago.


     ,           , 
And there are special procedures
for dealing with


     ,           ,  
such things called assq, and you
can find them in manuals.


     ,            , 
I'm not terribly excited
about it.

 
     ,           , 
The only interesting thing here
in extend dictionary is I


     ,           , 
have to extend the dictionary
with a pattern, a datum, and a


     ,           , 
dictionary.


     ,           ,
This pattern is, in fact, at
this point a pattern variable.


     ,          , 
And what do I want to do?


     ,           , 
I want to pull out the name of
that pattern variable, the


     ,           ,  
pattern variable name, and I'm
going to look up in the


     ,            , 
dictionary and see if it
already has a value.


     ,           ,  
If not, I'm going to
add a new one in.


     ,             , 
If it does have one, if it has a
value, then it had better be

 
      ,           , 
equal to the one that was
already stored away.


     ,           , 
And if that's the case, the
dictionary is what I


     ,           , 
expected it to be.


     ,          , 
Otherwise, I fail.


    ,          , 
So that's easy, too.


    ,          , 
If you open up any program,
you're going to find inside of


    ,           ,   
it lots of little pieces,
all of which are easy.


     ,            , 
So at this point, I suppose,
I've just told you some


    ,          ,
million dollar valuable
information.


    ,          , 
And I suppose at this point
we're pretty much done with

 
     ,          , 
this program.


    ,          , 
I'd like to ask about
questions.


    ,          , 
AUDIENCE  Yes, can you give me
the words that describe the


    ,          , 
specification for a simplified
expression?


    ,          ,
PROFESSOR  Sure.


    ,         , 
A simplified expression takes
an expression and produces a


    ,          ,
simplified expression.


    ,         , 
That's it, OK?


    ,          ,
How it does it is very easy.


    ,         , 
In compound expressions, all the
pieces are simplified, and

 
    ,          , 
then the rules are tried
on the result.


    ,          ,
And for simple expressions, you
just try all the rules.


    ,          , 
AUDIENCE  So an expression
is simplified by


     ,           ,
virtue of the rules?


     ,          , 
PROFESSOR  That's,
of course, true.


     ,           , 
AUDIENCE  Right.


     ,           ,  
PROFESSOR  And the way this
works is that simplifi


     ,            ,   
expression, as you see here,
what it does is it breaks the


     ,            , 
expression down into the
smallest pieces, simplifies


    ,          , 
building up from the bottom
using the rules to be the

 
    ,          ,  
simplifier, to do the
manipulations, and constructs


    ,           ,  
a new expression
as the result.


    ,           , 
Eventually, one of things you
see is that the rules


    ,           , 
themselves, the try rules, call
a simplified expression


     ,          , 
on the results when it changes
something, the


    ,          , 
results of a match.


    ,          , 
I'm sorry, the results of
instantiation of a skeleton


    ,          ,  
for a rule that has matched.


    ,           , 
So the spec of a simplified
expression is that any


    ,          , 
expression you put into it comes
out simplified according

 
    ,          , 
to those rules.


    ,           , 
Thank you.


     ,          , 
Let's take a break.


    ,           ,
        ,                ,   


        ,              , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, so far we've
invented enough programming to


      ,            , 
do some very complicated
things.


      ,            , 
And you surely learned
a lot about


      ,            , 
programming at this point.


      ,            ,
You've learned almost all the
most important tricks that


      ,           , 
usually don't get taught to
people until they have had a


      ,            , 
lot of experience.

 
      ,             ,  
For example, data directed
programming is a major trick,


       ,             ,
and yesterday you also saw
an interpreted language.


      ,           ,  


      ,              , 
We did this all in a computer
language, at this point, where


       ,            ,  
there was no assignment
statement.


      ,             , 
And presumably, for those of you
who've seen your Basic or


      ,             , 
Pascal or whatever, that's
usually considered the most


       ,            ,  
important thing.


      ,             , 
Well today, we're going to
do some thing horrible.


      ,            , 
We're going to add an assignment
statement.

 
      ,            , 
And since we can do all these
wonderful things without it,


      ,           , 
why should we add it?


     ,           ,  
An important thing to understand
is that today we're


     ,            , 
going to, first of all, have a
rule, which is going to always


     ,           , 
be obeyed, which is the only
reason we ever add a feature


     ,           ,
to our language is because
there is a good reason.


     ,          , 
And the good reason is going to
boil down to the ability,


     ,            ,  
you now get an ability to break
a problem into pieces


      ,            ,  
that are different sets of
pieces then you could have


     ,            , 
broken it down without that,
give you another means of

 
     ,           , 
decomposition.


     ,           , 


     ,           , 
However, let's just start.


     ,           , 
Let me quick begin by reviewing
the kind of language


     ,           , 
that we have now.


     ,           , 
We've been writing what's called
functional programs.


     ,           , 
And functional programs are
a kind of encoding of


     ,           , 
mathematical truths.


     ,            , 
For example, when we look at the
factorial procedure that


      ,            ,  
you see on the slide here, it's
basically two clauses.

 
      ,             , 
If n is one, the result is
one, otherwise n times


      ,           , 
factorial n minus one.


     ,           , 
That's factorial of n.


     ,           , 
Well, that is factorial of n.


     ,           , 
And written down in some other
obscure notation that you


     ,           , 
might have learned in calculus
classes, mathematical logic,


     ,           ,  
what you see there is if n
equals one, for the result of


     ,            ,  
n factorial is one, otherwise,
greater than one, n factorial


     ,            , 
is n times n minus
one factorial.


     ,           , 
True statements, that's
the kind of

 
     ,           ,   
language we've been using.


     ,             , 
And whenever we have true
statements of that sort, there


     ,           , 
is a kind of, a way of
understanding how they work


     ,            , 
which is that such processes
can be involved by


      ,           , 
substitution.


     ,           , 
And so we see on the second
slide here, that the way we


     ,            ,  
understand the execution implied
by those statements in


      ,             , 
arranged in that order, is
that you do successive


      ,            , 
substitutions of arguments for
formal parameters in the body


      ,           , 
of a procedure.

 
     ,           , 
This is basically a sequence
of equalities.


     ,           , 
Factorial four is four times
factorial three.


     ,           , 
That is four times three times
factorial of two and so on.


     ,           ,
We're always preserving truth.


     ,          , 


     ,           , 
Even though we're talking about
true statements, there


     ,           , 
might be more than one
organization of these true


     ,           , 
statements to describe the
computation of a particular


     ,           , 
function, the computation
of the value of


     ,           , 
a particular function.

 
     ,           , 
So, for example, looking
at the next one here.


     ,           , 
Here is a way of looking
at the sum of n and m.


     ,           , 
And we did this one by
a recursive process.


     ,             , 
It's the increment of the sum
of the decrement of n and m.


       ,            , 
And, of course, there is some
piece of mathematical logic


      ,            , 
here that describes that.


      ,           , 
It's the increment of the sum
of the decrement of n and m,


     ,           , 
just like that.


     ,           , 
So there's nothing particularly
magic about that.


     ,           , 
And, of course, if we can also
look at an iterative process

 
     ,           , 
for the same, a program that
evolves an iterative process,


     ,           , 
for the same function.


     ,           , 
These are two things that
compute the same answer.


     ,           , 
And we have equivalent
mathematical truths that are


     ,           , 
arranged there.


     ,           , 
And just the way you arrange
those truths determine the


     ,            , 
particular process.


      ,           , 
In the way choose and arrange
them determines the process


     ,           ,  
that's evolved.


     ,            , 
So we have the flexibility
of talking about both the

 
     ,           , 
function to be computed,
and the method


     ,            , 
by which it's computed.


      ,           , 
So it's not clear
we need more.


     ,           , 
However, today I'm going
to this awful thing.


     ,           ,  
I'm going to introduce this
assignment operation.


     ,             , 
Now, what is this?


      ,            , 
Well, first of all, there is
going to be another kind of


      ,            , 
kind of statement, if you
will, in a programming


      ,           , 
language called Set!


     ,           ,  

  
     ,            , 
Things that do things like
assignment, I'm going to put

 
     ,           , 
exclamation points after.

 
     ,            , 
We'll talk about what that
means in a second.

 
      ,           , 
The exclamation point, again
like question mark, is an

 
     ,           , 
arbitrary thing we attach to the
symbol which is the name,

 
     ,           ,  
has no significance
to the system.

 
     ,            , 
The only significance is to me
and you to alert you that this

 
     ,           , 
is an assignment of some sort.

 
     ,           , 
But we're going to set a
variable to a value.

 
     ,           ,  

 
     ,            , 
And what that's going to mean
is that there is a time at


     ,           ,  
which something happens.


     ,             ,  
Here's a time.


      ,            ,  
If I have time going this
way, it's a time access.


     ,            , 
Time progresses by walking
down the page.


     ,            , 
Then an assignment is the
first thing we have that


      ,            , 
produces the difference between
a before and an after.


      ,            , 
All the other programs that
we've written, that have no


      ,           ,  
assignments in them, the order
in which they were evaluated


     ,            , 
didn't matter.

 
     ,           , 
But assignment is special, it
produces a moment in time.


     ,           , 
So there is a moment before the
set occurs and after, such


     ,           ,  
that after this moment in time,
the variable has the


     ,            , 
value, value.


     ,           , 


     ,           , 
Independent of what value
it had before, set!


     ,           , 
changes the value
of the variable.


     ,            , 
Until this moment, we had
nothing that changed.


      ,            , 
So, for example, one of the
things we can think of is that


      ,            , 
the procedures we write for
something like factorial are

 
      ,           , 
in fact pretty much identical
to the function factorial.


     ,           , 
Factorial of four, if I write
fact, independent of what


     ,            , 
context it's in, and independent
of how many times


      ,           ,  
I write it, I always get
the same answer.


     ,            , 
It's always .


     ,            , 
It's a unique map from the
argument to the answer.


      ,           , 
And all the programs we've
written so far are like that.


     ,           ,  
However, once I have assignment,
that isn't true.


     ,             ,  
So, for example, if I were to
define count to be one.


      ,            , 
And then I'm going to define
also a procedure, a simple

 
     ,            , 
procedure called demo, which
takes argument x and does the


      ,            , 
following operations.


      ,            , 
It first sets x to x plus one.


      ,           , 
My gosh, this looks just
like FORTRAN, right  


     ,           , 
in a funny syntax.


     ,           , 


     ,           , 
And then add to x count, Oh,
I just made a mistake.


     ,           ,  
I want to say, set! count
to one plus count.


     ,             , 


      ,           , 
It's this thing defined here.

 
     ,           , 


     ,           ,
And then plus x count.


     ,           , 


      ,           ,
Then I can try this procedure.


     ,          , 
Let's run it.


     ,           ,
So, suppose I get a prompt
and I say, demo three.


     ,          , 


     ,           , 
Well, what happens here?


     ,           ,  
The first thing that happens
is count is currently one.


     ,            , 
Currently, there is a time.

 
     ,             , 
We're talking about time.


       ,            , 
x gets three.


      ,            ,  
At this moment, I say,
oh yes, count is


      ,             , 
incremented, so count is two.


      ,            , 
two plus three is five.


      ,           , 
So the answer I get
out is five.


     ,           , 
Then I say, demo of
say, three again.


     ,           , 
What do I get?


     ,           , 
Well, now count is two, it's
not one anymore, because I


     ,            , 
have incremented it.

 
      ,           ,  
But now I go through this
process, three goes into x,


     ,            , 
count becomes one plus count,
so that's three now.


     ,           , 
The sum of those two is six,
so the answer is six.


     ,           , 
And what we see is the same
expression leads to two


     ,           , 
different answers, depending
upon time.


     ,           ,  
So demo is not a function,
does not compute a


     ,            , 
mathematical function.


     ,             ,  


       ,             , 
In fact, you could also see why
now, of course, this is


      ,            , 
the first place where the
substitution model

 
      ,            , 
isn't going to work.


      ,           , 
This kills the substitution
model dead.


     ,           ,  
You know, with quotation there
were some little problems that


     ,            , 
a philosopher might notice
with the substitutions,


     ,           , 
because you have to worry about
what deductions you can


     ,           ,  
make when you substitute into
quotes, if you're allowed to


     ,            , 
do that at all.


     ,           , 
But here the substitution
model is dead, can't do


     ,           , 
anything at all.


     ,           , 
Because, supposing I wanted to
use a substitution model to

 
     ,           , 
consider substituting
for count?


     ,           , 
Well, my gosh, if I substitute
for here and here, they're


     ,           , 
different ones.


     ,           , 
It's not the same
count any more.


     ,           , 
I get the wrong answer.


     ,           , 
The substitution model is
a static phenomenon that


     ,           , 
describes things that are true
and not things that change.


     ,           , 
Here, we have truths
that change.


     ,           , 


     ,           , 
OK, Well, before I give you
any understanding of this,

  
     ,           , 
this is very bad.

 
     ,          , 
Now, we've lost our model
of computation.

 
    ,          , 
Pretty soon, I'm going to have
to build you a new model of

 
    ,          ,  
computation.

 
    ,           , 
But ours plays with this, just
now, in an informal sense.

 
    ,          , 
Of course, what you already
see is that when I have

 
    ,          ,  
something like assignment, the
model that we're going to need

 
    ,           , 
is different from the model that
we had before in that the

 
    ,          , 
variables, those symbols like
count, or x are no longer

 
    ,          ,  
going to refer to the values
they have, but rather to some

 
    ,           , 
sort of place where the
value restored.


    ,           , 
We're going to have to think
that way for a while.


     ,          , 
And it's going to be a
very bad thing and


    ,          , 
cause a lot of trouble.


    ,          , 
And so, as I said, the very fact
that we're inventing this


    ,          , 
bad thing, means that there had
better be a good reason


    ,          ,  
for it, otherwise, just
a waste of time


    ,           , 
and a lot of effort.


    ,          ,  
Let's just look at some
of it just to play.


    ,           , 
Supposing we write down the
functional version, functional

 
    ,           , 
meaning in the old style,
of factorial by


     ,           , 
an iterative process.


     ,           , 


     ,          , 
Factorial of n, we're going to
iterate of m and i, which says


    ,           ,  
if i is greater than n, then
the result is m, otherwise,


     ,           , 
the result of iterating the
product of i and m.


    ,          , 
So m is going to be the product
that I'm accumulating.


    ,          , 
m is the product.


    ,          , 


    ,          , 
And the count I'm going
to increase by one.

 
    ,           , 


     ,          ,  
Plus, ITER, ELSE,
COND, define.


    ,           , 
I'm going to start this up.


    ,          ,   


    ,            , 
And these days, you should
have no trouble reading


    ,          ,  
something like this.


    ,           , 
What I have here is a
product there being


    ,          , 
accumulated and a counter.


    ,          ,  
I start them up both at one.


    ,           , 
I'm going to buzz the counter
up, i goes to i plus one every

 
    ,          ,  
time around.


    ,           , 
But that's only our putting a
time on the process, each of


    ,          , 
this is just a set of
truths, true rules.


    ,          ,  
And m is going to get a new
values of i and m, i times m


    ,           , 
each time around, and eventually
i is going to be


    ,          , 
bigger than n, in which case,
the answer's going to be m.


    ,          , 
Now, I'm speaking to you,
use time in this.


    ,          , 
That's just because I know
how the computer works.


    ,          ,  
But I didn't have to.


    ,            , 
This could be a purely
mathematical description at

 
     ,           ,  
this point, because
substitution


     ,            , 
will work for this.


     ,           , 
But let's set right down a
similar sort of program, using


     ,          ,
the same algorithm, but
with assignments.


    ,         ,


    ,         , 
So this is called the
functional version.


    ,          , 


    ,          ,
I want to write down an
imperative version.


    ,         , 


    ,          ,  
Factorial of n.

 
    ,           , 
I'm going to create
my two variables.


    ,           , 


     ,          , 
Let i initialize itself to one,
and m be initialized to


    ,           , 
one, similar.


     ,           , 
We'll create a loop which has
COND greater than i, and if i


     ,           , 
is greater than n, we're done.


     ,           , 
And the result is m, the product
I'm accumulating.


     ,          , 
Otherwise, I'm going to write
down three things to do.


    ,          ,  
I'm going to set!


    ,           , 
m to the product of i and m,
set! i to the sum of i and

 
    ,           , 
one, and go around
the loop again.


     ,          , 
Looks very familiar to you
FORTRAN programmers.


    ,          , 
ELSE, COND, define, funny
syntax though.


    ,          , 


    ,          , 
Start the loop up, and
that's the program.


    ,           , 
Now, this program, how
do we think about it?


     ,           , 
Well, let's just say what
we're seeing here.


     ,           , 
There are two local variables,
i and m, that have been


     ,           , 
initialized to one.


     ,          , 
Every time around the loop, I
test to see if i is greater

 
    ,          ,  
than n, which is the input
argument, and if so, the


    ,           , 
result is the product being
accumulated in m.


    ,          , 
However, if it's not the end of
the loop, if I'm not done,


    ,          , 
then what I'm going to do is
change the product to be the


    ,          , 
result of multiplying i times
the current product.


    ,          , 
Which is sort of what
we were doing here.


    ,          ,
Except here I wasn't changing.


    ,         , 
I was making another copy,
because the substitution model


    ,          , 
says, you copy the body of the
procedure with the arguments


    ,          , 
substituted for the
formal parameters.

 
    ,          , 
Here I'm not worried about
copying, here I've changed the


    ,          , 
value of m.


    ,          ,  
I also then change the value
of i to i plus one, and go


    ,           ,  
buzzing around.


    ,            , 
Seems like essentially the same
program, but there are


     ,           , 
some ways of making
errors here that


     ,           , 
didn't exist until today.


     ,           , 
For example, if I were to do
the horrible thing of not


     ,          ,
being careful in writing my
program and interchange those


    ,         , 
two assignments, the
program wouldn't

  
    ,           ,
compute the same function.

 
     ,         ,
I get a timing error because
there's a dependency that m

 
    ,         , 
depends upon having the
last value of i.

 
    ,          , 
If I try to i first, then I've
got the wrong value of i when

 
    ,          ,  
I multiply by m.

 
    ,           ,  
It's a bug that wasn't available
until this moment,

 
    ,            , 
until we introduced something
that had time in it.

 
     ,          , 

 
    ,          , 
So, as I said, first we need a
new model of computation, and

 
    ,          , 
second, we have to be damn good
reason for doing this

 
    ,          ,  
kind of ugly thing.


    ,           ,  
Are there any questions?


    ,           ,  


    ,             , 
Speak loudly, David.


      ,           , 
AUDIENCE  I'm confused about,
we've introduced set now, but


     ,           , 
we had let before and
define before.


     ,           , 
I'm confused about the
difference between the three.


     ,          ,  
Wouldn't define work in the same
situation as set if you


    ,           , 
introduced it a bit?


    ,          , 
PROFESSOR  No, define is
intended for setting something

 
    ,           , 
once the first time,
for making it.


     ,          , 


    ,          , 
You've never seen me write on a
blackboard two defines in a


    ,           , 
row whose intention was to
change the old value of some


     ,          , 
variable to a new one.


    ,          , 
AUDIENCE  Is that by
convention or  


    ,          , 
PROFESSOR  No, it's intention.


    ,          , 
The answer is that, for
example, internal to a


    ,          , 
procedure, two defines in a row
are illegal, two defines


    ,          , 
in a row of the same variable.

 
    ,          , 
x can't be defined twice.


    ,          ,  
Whether or not a system catches
that error is a


    ,           , 
different question, but I
legislate to you that define


    ,            , 
happens once on anything.


      ,           , 
Now, indeed, in interactive
debugging, we intend that you


     ,           , 
interacting with your computer
will redefine things, and so


     ,           ,  
there's a special
exception made


     ,           , 
for interactive debugging.


    ,          , 
But define is intended to mean
to set up something which will


    ,          , 
be forever that value
after that point.

 
    ,          , 
It's as if all the defines were
done at the beginning.


    ,          , 
In fact, the only legal place
to put a define in Scheme,


    ,          , 
internal to a procedure, is
just at the beginning of a


    ,          , 
lambda expression,
the beginning of


    ,          ,
the body of a procedure.


    ,         , 


    ,          , 
Now, let of course does nothing
like either of that.


    ,           , 
I mean, if you look at what's
happening with a let, this


     ,          , 
happens again exactly once.


    ,          , 
It sets up a context where i and
m are values one and one.

 
    ,            , 
That context exists throughout
this scope, this


      ,            , 
region of the program.


      ,            ,  


      ,            , 
However, you don't think of that
let as setting i again.


     ,           , 
It doesn't change it.


     ,           , 
i never changes because
of the let.


     ,           , 
i gets created because of let.


     ,           ,  
In fact, the let is a
very simple idea.


     ,             , 
Let does nothing more, Let a
variable one to have value


      ,           , 
one; I'll write this down a
little bit more neatly; Let's

 
     ,           , 
write, var one have value, the
value of expression e, and


     ,           , 
variable two, have this value
of the expression e, in an


     ,            , 
expression e, is the same thing
as a procedure of var


      ,           , 
one and var two, the formal
parameters, and e being the


     ,          ,  
body, where var one is bound
to the value of e, and var


    ,           , 
two gets the value of e.


    ,          , 


    ,          ,  
So this is, in fact, a perfectly
understandable thing


    ,           , 
from a substitution
point of view.


    ,          ,  
This is really the same
expression written in two

 
    ,           , 
different ways.


    ,          , 


    ,          , 
In fact, the way the actual
system works is this gets


    ,          ,
translated into this before
anything happens.


    ,         , 
AUDIENCE  OK, I'm still unclear
as then what makes the


    ,          , 
difference between a
let and a define.


    ,          ,
They could  


    ,         , 
PROFESSOR  A define is a
syntactic sugar, whereby,


    ,          , 
essentially a bunch of variables
get created by lets


    ,          , 
and then set up once.

 
    ,          , 


    ,          , 
OK, time for the first
break, I think.


    ,            ,  
Thank you.


      ,            , 


     ,           , 
[MUSIC PLAYING]


     ,           , 
Well let's see.


     ,           , 
I now have to rebuild the model
of computation, so you


     ,          , 
understand how some such
mechanical mechanism could


    ,          ,  
work that can do what we've
just talked about.


    ,           , 
I just recently destroyed
your substitution model.

 
    ,          ,  
Unfortunately, this model is
significantly more complicated


    ,           , 
than the substitution model.


    ,          ,  
It's called the environment
model.


    ,           , 
And I'm going to have to
introduce some terminology,


    ,          , 
which is very good terminology
for you to know anyway.


    ,          , 
It's about names.


    ,          , 
And we're going to give names
to the kinds of names things


    ,          , 
have and the way those
names are used.


    ,          , 
So this is a meta description,
if you will.


    ,           , 
Anyway, there is a pile of an
unfortunate terminology here,

  
     ,          , 
but we're going to need this
to understand what's called

 
    ,          , 
the environment model.

 
    ,          , 
We're about to do a little bit
of boring, dog work here.

 
    ,           , 
Let's look at the first
transparency.

 
     ,           , 
And we see a description
of a word called bound.

 
     ,          , 
And we're going to say that a
variable, v, is bound in an

 
    ,          , 
expression, e, if the meaning
of e is unchanged by the

 
    ,          , 
uniform replacement of a
variable w, not occurring in

 
    ,          , 
e, for every occurrence
of v in e.

 
    ,          , 
Now that's a long sentence, so,
I think, I'm going to have

 
    ,          , 
to say a little bit about
that before we even fool


    ,          , 
around at all here.


    ,          , 
Bound variables we're
talking about here.


    ,          ,  


    ,           , 
And you've seen lots of them.


    ,          , 
You may not know that you've
seen lots of them.


    ,          , 
Well, I suppose in your logic
you saw a logical variables


    ,          , 
like, for every x there exists
a y such that p is true of x


    ,          , 
and y from your calculus
class.


    ,           , 

 
     ,           , 
This variable, x, and this
variable, y, are bound,


     ,           , 
because the meaning of this
expression does not depend


     ,          , 
upon the particular letters I
used to describe x and y.


    ,          , 
If I were to change the w for x,
then said for every w there


    ,          , 
exists a y such that p is true
of w and y, it would be the


    ,          , 
same sentence.


    ,           , 
That's what it means.


     ,          , 
Or another case of this that
you've seen is integral say,


    ,          ,
from   to one of dx over
one plus x square.


    ,         ,  

 
    ,           , 
Well that's something you
see all the time.


    ,          , 
And this x is a bound
variable.


    ,          , 
If I change that to a
t, the expression is


    ,          , 
still the same thing.


    ,           , 
This is a / of the arctan of
one or something like that.


     ,           , 
Yes, that's the arctan of one.


     ,           , 
So bound variables are actually
fairly common, for


     ,          , 
those of you who have played
a bit with mathematics.


    ,          ,  
Well, let's go into the
programming world.


    ,           , 
Instead of the quantifier being
something like, for

 
    ,          ,   
every, or there exists, or
integral, a quantifier is a


    ,            , 
symbol that binds a variable.


    ,           , 
And we are going to use the
quantifier lambda as being the


     ,          , 
essential thing that
binds variables.


    ,          , 
And so we have some nice
examples here like that


    ,          , 
procedure of one argument
y which does


    ,          , 
the following thing.


    ,           ,  
It calls the procedure of one
argument x, which multiplies x


     ,           ,
by y, and applies
that to three.


    ,         , 

 
    ,            , 
That procedure has the property
there of two bound


      ,           , 
variables in it, x and y.


     ,           ,  
This quantifier, lambda here,
binds this y, and this


     ,           , 
quantifier, lambda,
binds that x.


    ,          ,   
Because, if I were to take an
arbitrary symbol does not


    ,             , 
occur in this expression like w
and replace all y's with w's


     ,          , 
in this expression, the
expression is still the same,


    ,          , 
the same procedure.


    ,          , 
And this is an important idea.


    ,           ,  
The reason why we had such
things like that is a kind of

 
     ,           ,  
modularity.


    ,           ,  
If two people are writing
programs, and they work


    ,           , 
together, it shouldn't matter
what names they use internal


    ,          , 
to their own little machines
that they're building.


    ,          , 
And so, what I'm really telling
you there, is that,


    ,          , 
for example, this is equivalent
to that procedure


    ,          , 
of one argument y which uses
that procedure of one argument


    ,           ,  
d which multiplies z by y.


     ,            , 
Because nobody cares what
I used in here.


     ,           , 

 
     ,           , 
It's a nice example.


     ,          , 
On the other hand, I have some
variables that are not bound.


    ,          , 
For example, that procedure
of one argument x which


    ,          , 
multiplies x by y.


    ,          , 
In this case, y is not bound.


    ,          , 
Supposing y had the value three,
and z had the value


    ,          , 
four, then this procedure
would be the thing that


    ,          , 
multiplies its argument
by three.


    ,          ,
If I were to replace every
instance of y with z, I would


    ,          , 
have a different procedure
which multiplies every

 
     ,          ,
argument that's given by four.


          :: :, 
And, in fact, we have a name
for such a variable.

     ,           , 
Here, we say that a variable, v,
is free in the expression,


     ,           ,  
e, if the meaning of the
expression, e, is changed by


     ,            ,
the uniform replacement of a
variable, w, not occurring in


     ,         , 
e for every occurrence
of v and e.


    ,           , 
So that's why this variable
over here,


     ,          ,
y, is a free variable.


    ,         ,  


    ,           , 
And so free variables
in this expression  

 
    ,          , 
And other examples of that is
that procedure of one argument


    ,          , 
y, which is just what we had
before, which uses that


    ,          , 
procedure of one argument x
that multiplies x by y  


    ,          , 


    ,          , 
use that on three.


    ,          , 


    ,             ,  
This procedure has
a free variable


       ,             ,
in it which is asterisk.


      ,           ,  


      ,             , 
See, because, if that has
a normal meaning of

  
      ,           , 
multiplication, then if I were
to replace uniformly all

 
     ,           , 
asterisks with pluses, then the
meaning of this expression

 
     ,           ,  
would change.

 
     ,            , 

 
     ,           , 
That's what you mean
by a free variable.

 
     ,           , 
So, so far you've learned some
logician words which describe

 
     ,           ,  
the way names are used.

 
     ,            , 
Now, we have to do a little bit
more playing around here,

 
     ,           ,  
a little bit more.

 
     ,            ,  
I want to tell you about the
regions are over which

 
     ,            , 
variables are defined.


     ,           , 


     ,           , 
You see, we've been very
informal about this up till


     ,           , 
now, and, of course, many of you
have probably understood


     ,           , 
very clearly or most of you,
that the x that's being


     ,           , 
declared here is defined
only in here.


     ,           , 


     ,           , 
This x is the defined only in
here, and this y is defined


     ,           , 
only in here.


     ,           ,  

 
     ,            ,  
We have a name for
such an idea.


     ,           , 
It's called a scope.


    ,          , 
And let me give you another
piece of terminology.


    ,          ,  
It's a long story.


    ,           , 
If x is a bound variable in
e, then there is a lambda


    ,           , 
expression where it is bound.


     ,          ,
So the only way you can get a
bound variable ultimately is


    ,         , 
by lambda expression.


    ,          , 
Then you may worry, does
define quite an


    ,          , 
exception to this?

 
    ,          , 
And it turns out, we could
always arrange things so you


    ,          ,  
don't need any defines.


    ,           ,  
And we'll see that in a while.


    ,           ,  
It's a very magical thing.


    ,           ,   
So define really can go away.


    ,            , 
The really, only thing that
makes names is lambda .


    ,          , 
That's its job.


    ,          ,
And what's so amazing about
a lot of things is you can


    ,         , 
compute with only lambda.


    ,          , 
But, in any case, a lambda
expression has a place where

 
    ,          , 
it declares a variable.


    ,          , 
We call it the formal parameter
list or the bound


    ,           , 
variable list. We say that the
lambda expression binds  


     ,           , 
so it's a verb  


     ,           , 
binds the variables declared in
it's found variable list.


     ,           , 
In addition, those parts of
the expression where the


     ,          , 
variable is defined, which was
declared by some declaration,


    ,           ,  
is called the scope
of that variable.


     ,           , 
So these are scopes.


    ,          , 
This is the scope of y.

 
    ,          , 


    ,          , 
And this is the scope of x  


    ,          ,  


    ,           , 
that sort of thing.


    ,          , 


    ,          , 
OK, well, now we have enough
terminology to begin to


    ,          , 
understand how to make a new
model for computation, because


    ,          ,  
the key thing going on here
is that we destroyed the


    ,           , 
substitution model, and we now
have to have a model that


    ,           , 
represents the names as
referring to places.

 
     ,           , 
Because if we are going to
change something, then we have


     ,           , 
a place where it's stored.


     ,          , 
You see, if a name only refers
to a value, and if I tried to


    ,          , 
change the name's meaning,
well, that's not clear.


    ,          , 
There's nothing that is
the place that that


    ,          ,  
name referred to.


    ,           , 
How am I really saying it?


    ,          , 
There is nothing shared
among all of the


    ,          , 
instances of that name.


    ,          ,  
And what we really mean,
by a name, is that we

 
    ,           , 
fan something out.


    ,          , 
We've given something a name,
and you have it, and you have


    ,          , 
it, because I'm given you a
reference to it, and I've


    ,          , 
given you a reference to it.


    ,          , 
And we'll see a lot
about that.


    ,          ,
So let me tell you about
environments.


    ,         , 
I need the overhead projection
machine, thank you.


    ,           , 
And so here is a bunch of
environment structures.


     ,           , 
An environment is a way of doing
substitutions virtually.


     ,           ,
It represents a place where
something is stored which is

 
     ,         , 
the substitutions that
you haven't done.


    ,          , 


    ,          ,
It's a place where everything
accumulates, where the names


    ,          ,  
of the variables are associated
with the values


     ,           ,  
they have such that when you
say, what dose this name mean,


    ,           ,  
you look it up in
an environment.


    ,           , 
So an environment is a function,
or a table, or


    ,          , 
something like that.


    ,          , 
But it's a structured
sort of table.


    ,          ,
It's made out of things
called frames.

 
    ,         ,  


    ,           , 
Frames are pieces of
environment, and they are


    ,           , 
chained together, in some nice
ways, by what's called parent


     ,          , 
links or something like that.


    ,          , 
So here, we have an environment
structure


    ,            ,  
consisting of three
environments,


      ,            , 
basically, a, b, and c.


     ,          , 
d is also an environment, but
it's the same one, they share.


    ,          , 
And that's the essence
of assignment.


    ,          , 
If I change a variable, a value
of a valuable that lives

  
    ,          , 
here, like that one, it should
be visible from all places

 
    ,          , 
that you're looking
at it from.

 
    ,          , 
Take this one, x.

 
    ,          , 
If I change the x to four, it's

 
    ,           , 
visible from other places.

 
     ,          , 
But I'm not going to worry
about that right now.

 
    ,          , 
We're going to talk a lot about
that in a little while.

 
    ,          , 
What do we have here?

 
    ,          , 
Well, these are called frames.

 
    ,          , 
Here is a frame, here's a frame,
and here's a frame.

 
    ,          ,  
a is an environment which
consists of the table which is


    ,           , 
frame two, followed by the
table labeled frame one.


    ,          , 
And, in this environment, in
say this environment, frame


    ,           , 
two, x and y are bound.


     ,           , 
They have values.


     ,           , 
Sorry, in frame one  


     ,          , 
In frame two, z is bound, and
x is bound, and y is bound,


    ,          , 
but the value of x that we see,
looking from this point


    ,           , 
of view, is this x.


     ,          , 
It's x is seven, rather than
this one which is three.

 
    ,          , 
We say that this x
shadows this x.


    ,          ,  


    ,           , 
From environment three  


    ,          , 
from frame three, from
environment b, which refers to


    ,          ,
frame three, we have variables
n and y bound and also x.


    ,         , 


    ,          , 
This y shadow this one.


    ,           , 
So the value, looking
from this point of


     ,          , 
view, of y is two.


    ,          ,  
The value for looking
from this point of

 
    ,           ,  
view and m is one.


    ,           , 
And the value, looking
from this point of


    ,          , 
view, of x is three.


    ,           , 


     ,           ,  
So there we have a very
simple environment


     ,            , 
structure made out of frames.


     ,           , 
These correspond to the
applications of procedures.


     ,          , 
And we'll see that
in a second.


    ,          , 
So now I have to make you some
other nice little structure


    ,          , 
that we build.

 
    ,           , 


     ,          , 
Next slide, we see an object,
which I'm going to draw


    ,          , 
procedures.


    ,           , 
This is a procedure.


     ,          , 
A procedure is made
out of two parts.


    ,          ,
It's sort of like a cons.


    ,         , 


    ,          , 
However, it's the two parts.


    ,           , 


     ,          , 
The first part refers to some
code, something that can be

 
    ,          , 
executed, a set of instructions,
if you will.


    ,           , 
You can think of it that way.


     ,          , 
And the second part is
the environment.


    ,          , 
The procedure is the
whole thing.


    ,           , 
And we're going to have to use
this to capture the values of


     ,           , 
the free variables that occur
in the procedure.


     ,           , 
If a variable occurs in the
procedure it's either bound in


     ,          , 
that procedure or free.


    ,          , 
If it's bound, then the value
will somehow be easy to find.


    ,          ,  
It will be in some easy
environment to get at.

 
    ,           ,  
If it's free, we're going to
have to have something that


    ,           ,  
goes with the procedure that
says where we'll go


    ,           ,  
look for its value.


    ,           , 
And the reasons why are not
obvious yet, but will be soon.


    ,          , 
So here's a procedure object.


    ,           ,  
It's a composite object
consisting of a piece of code


     ,           , 
and a environment structure.


    ,          ,  
Now I will tell you the new
rules, the complete new rules,


    ,           , 
for evaluation.


    ,           , 

 
     ,          , 
The first rule is   there's
only two of them.


    ,          , 
These correspond to the
substitution model rules.


    ,            , 
And the first one has to do
with how do you apply a


      ,           , 
procedure to its arguments?


     ,           , 


     ,           , 
And a procedural object is
applied to a set of arguments


     ,          , 
by constructing a new frame.


    ,          , 
That frame will contain the
mapping of the former


    ,          , 
parameters to the actual
parameters of the arguments


    ,          , 
that were supplied
in the call.

 
    ,          , 
As you know, when we make up
a call to a procedure like


    ,          , 
lambda x times x y, and we call
that with the argument


    ,          , 
three, then we're going
to need some


    ,          , 
mapping of x to three.


    ,          , 
It's the same thing as later
substituting, if you will, the


    ,          , 
three for the x in
the old model.


    ,          , 
So I'm going to build a frame
which contains x equals three


    ,          , 
as the information
in that frame.


    ,          , 


    ,          , 
Now, the body of the procedure
will then have to be evaluated

 
    ,          , 
which is this.


    ,            , 
I will be evaluated in an
environment which is


      ,            , 
constructed by adjoining the new
frame that we just made to


      ,            , 
the environment which
was part of the


      ,           ,  
procedure that we applied.


     ,            , 
So I'm going to make a little
example of that here.


     ,           , 


     ,           , 
Supposing I have some
environment.


     ,           , 
Here's a frame which
represents it.


     ,            , 
And some procedure   which I'm
going to draw with circles

  
      ,           , 
here because it's easier
than little triangles  

 
     ,           , 
Sorry, those are rhombuses,
rhomboidal little pieces of

 
     ,           , 
fruit jelly or something.

 
     ,           , 
So here's a procedure which
takes this environment.

 
     ,           , 
And the procedure has a piece
of code, which is a lambda

 
     ,           ,  
expression, which binds x and
y and then executes an

 
     ,            ,  
expression, e.

 
     ,            ,
And this is the procedure.

 
     ,          , 
We'll call it p.

 
     ,           , 
I wish to apply that procedure
to three and four.

 
     ,           , 
So I want to do p of
three and four.


     ,          , 
What I'm going to do, of course,
is make a new frame.


    ,          , 
I build a frame which contains
x equals three,


    ,          , 
and y equals four.


    ,          , 
I'm going to connect that frame
to this frame over here.


    ,          , 
And then this environment, with
I will call b, is the


    ,          , 
environment in which I will
evaluate the body of e.


    ,          , 


    ,          , 
Now, e may contain references
to x and y and other things.


    ,           , 
x and y will have values
right here.

 
     ,          ,  
Other things will have
their values here.


    ,           , 
How do we get this frame?


    ,            , 
That we do by the construction
of procedures which is the


      ,           , 
other rule.


     ,           ,  
And I think that's
the next slide.


     ,            ,   
Rule two, when a lambda
expression is evaluated,


     ,            , 
relative to a particular
environment  


    ,          , 


    ,          , 
See, the way I get a procedure
is by evaluating the lambda


    ,          ,  
expression.

 
    ,            , 
Here's a lambda expression.


     ,          , 
By evaluating it, I get
a procedure which I


    ,          , 
can apply to three.


    ,          , 
Now this lambda expression is
evaluated in an environment


    ,          , 
where y is defined.


    ,          , 
And I want the body of
this which contains a


    ,          , 
free version of y.


    ,          , 
y is free in here, it's bound
over the whole thing, but it's


    ,          , 
free over here.


    ,          , 
I want that y to be this one.

 
    ,          , 
I evaluate this body of this
procedure in the environment


    ,          , 
where y was created.


    ,          ,  
That's this kind of thing,
because that was done by


    ,           , 
application.


    ,           , 
Now, if I ever want to look up
the value of y, I have to know


     ,           , 
where it is.


     ,           , 
Therefore, this procedural was
created, the creation of the


     ,           , 
procedure which is the result
of evaluating that lambda


     ,          , 
expression had better capture
a pointer or remember the


    ,          , 
frame in which y was bound.

 
    ,          ,  
So that's what this rule
is telling us.


    ,           , 
So, for example, if I happen
to be evaluating a lambda


    ,          , 
expression, lambda expression in
e, lambda of say, x and y,


    ,          ,  
let's call it g in e,
evaluating that.


    ,           , 
Well, all that means is I now
construct a procedure object.


    ,          , 
e is some environment.


    ,          , 
e is something which has
a pointer to it.


    ,          , 
I construct a procedure object
that points up to that


    ,           , 
environment, where the code of
that is a lambda expression or


     ,           , 
whatever that translates into.

 
     ,           , 


     ,           , 
And this is the procedure.


     ,          , 


    ,          , 
So this produces for me   this
object here, this environment


    ,          , 
pointer, captures the place
where this lambda expression


    ,          , 
was evaluated, where the
definition was used, where the


    ,          ,  
definition was used to make a


    ,           , 
procedure, to make the procedure.


    ,          , 
So it picks up the environment
from the place where that


    ,          , 
procedure was defined, stores
it in the procedure itself,

 
    ,          , 
and then when the procedure is
used, the environment where it


    ,          , 
was defined is extended
with the new frame.


    ,          , 


    ,          , 
So this gives us a locus
for putting where a


    ,          ,  
variable has a value.


    ,           ,  
And, for example, if there are
lots of guys pointing in at


    ,            , 
that environment, then they
share that place.


     ,           , 
And we'll see more
of that shortly.


     ,           , 
Well, now you have a new model
for understanding the


     ,          , 
execution of programs. I suppose
I'll take questions

 
    ,          , 
now, and then we'll go on and
use that for something.


    ,          , 


    ,          , 
AUDIENCE  Is it right to say
then, the environment is that


    ,          ,
linked chain of frames  


    ,         , 
PROFESSOR  That's right.


    ,          , 
AUDIENCE  starting with  


    ,          , 
working all the way back?


    ,          ,  
PROFESSOR  Yes, the environment
is a sequence of


    ,           , 
frames linked together.


    ,          ,  
And the way I like to think
about it, it's the pointer to

 
    ,           , 
the first one, because
once you've got that


    ,          ,  
you've got them all.


    ,           ,  


    ,           ,
Anybody else?


    ,         ,  
AUDIENCE  Is it possible to
evaluate a procedure or to


    ,           ,  
define a procedure in two
different environments such


    ,           , 
that it will behave
differently, and


    ,          , 
have pointers to both  


    ,          ,  
PROFESSOR  Oh, yes.


    ,           , 
The same procedure is not going
to have two different

  
    ,          , 
environments.

 
    ,           ,
The same code, the same lambda
expression can be evaluated in

 
     ,          , 
two environments producing
two different procedures.

 
     ,           , 

 
     ,           , 
Each procedure  

 
     ,           , 
AUDIENCE  Their definition
has the same name.

 
     ,           , 
Their operation  

 
     ,          ,  
PROFESSOR  The definition is
written the same, with the

 
    ,           , 
same characters.

 
    ,          ,  
I can evaluate that set of
characters, whatever, that

 
    ,           , 
list structure that defines,
that is the textual


    ,          , 
representation.


    ,          , 
I can evaluate that in two
different environments


    ,          , 
producing two different
procedures.


    ,          ,  
Each of those procedures has
its own local sets of


    ,           , 
variables, and we'll
see that right now.


    ,          , 


    ,          ,  
Anybody else?


    ,           , 


    ,          , 
OK, thank you.

 
    ,          , 
Let's take a break.


    ,          , 


    ,          , 
[MUSIC PLAYING]


    ,          , 
Well, now I've done this
terrible thing to you.


    ,          ,  
I've introduced a very
complicated thing, assignment,


    ,           , 
which destroys most of the
interesting mathematical


    ,          , 
properties of our programs. Why
should I have done this?


    ,          , 
What possible good
could this do?


    ,          , 
Clearly not a nice thing, so I
better have a good excuse.


    ,          , 
Well, let's do a little bit of
playing, first of all, with

 
    ,          , 
some very interesting programs
that have assignment.


    ,           ,   
Understand something special
about them that makes them


     ,             , 
somewhat valuable.


     ,           , 
Start with a very simple program
which I'm going to


     ,           , 
call make counter.


     ,          , 
I'm going to define make counter
to be a procedure


    ,          , 
of one argument n which
returns as its value a


    ,          , 
procedure of no arguments  


    ,          , 
a procedure that produces
a procedure  


    ,          ,  
which sets n to the increment
of n and returns

 
    ,            , 
that value of n.


     ,          , 


    ,          , 
Now we're going to investigate
the behavior of this.


    ,          , 
It's a sort of interesting
thing.


    ,           , 
In order to investigate the
behavior, I have to make an


     ,           , 
environment model, because
we can't understand


     ,           , 
this any other way.


     ,           , 


     ,           ,  
So let's just do that.


     ,           ,  
We start out with
some sort of  

 
    ,           , 
let's say there is a global
environment that the machine


    ,          , 
is born with.


    ,          , 
Global we'll call it.


    ,          , 
And it's going to have in it
a bunch of initial things.


    ,          , 
We all know what it's got.


    ,          , 
It's got things in it like
say, plus, and times, and


    ,          , 
quotient, and difference,
and CAR, and et


    ,          , 
cetera, lots of things.


    ,          , 
I don't know what they are, some
various squiggles that


    ,          , 
are the things the machine
is born with.

 
    ,          , 
And by doing the definition
here, what I plan to do  


    ,          , 
Well, what am I doing?


    ,          , 
I'm doing this relative to
the global environment.


    ,            , 
So here's my environment
pointer.


      ,            , 
In order to do that I have
to evaluate this lambda


      ,            , 
expression.


      ,           , 
That means I make a
procedure object.


     ,           , 
So I'm going to make a procedure
object here.


     ,           ,  


     ,            , 
And the procedure object has, as
the place it's defined, the

 
     ,           , 
global environment.


     ,           , 
The procedure object contains
some code that represents a


     ,           , 
procedure of one argument n
which returns a procedure of


     ,           , 
no arguments which
does something.


     ,           , 


     ,           , 
And the define is a way of
changing this environment, so


     ,           , 
that I now add to it a
make counter, a special rule


     ,           , 
for the special thing defined.


     ,           , 
But what that is, is
it gives me that


     ,           , 
pointer to that procedure.

 
     ,           , 
So now the global environment
contains make counter as well.


     ,           , 


     ,          ,  
Now, we're going to do
some operations.


    ,           ,
I'm going to use this to
make some counters.


    ,         , 
We'll see what a counter is.


    ,          ,  
So let's define c to be a
counter beginning at  .


    ,           , 


    ,          , 
Well, we know how to do this
now, according to the model.


    ,          , 
I have to evaluate the
expression make counter in the


    ,          ,  
global environment,
make counter of  .

 
    ,            ,
Well, I look up make counter and
see that it's a procedure.


     ,         , 


    ,          ,  
I'm going to have to apply
that procedure.


    ,           , 
The way I apply the procedure
is by constructing a frame.


    ,           ,  


     ,           ,  
So I construct a frame which has
a value for n in it which


    ,           , 
is  , and the parent environment
is the one which


    ,          , 
is the environment of definition
of make counter.


    ,          , 


    ,          ,  
So I've made an environment by
applying make counter to  .

  
    ,           , 

 
    ,          ,  
Now, I have to evaluate the body
of make counter, which is

 
    ,           ,
this lambda expression,
in that environment.

 
    ,          , 

 
     ,          , 
Well evaluating this body,
this body is a lambda

 
    ,          , 
expression.

 
    ,          , 
Evaluate a lambda expression
means make a procedure object.

 
    ,           , 
So I'm going to make
a procedure object.

 
     ,          , 

 
    ,          , 
And that procedure object has
the environment it was defined

 
    ,           ,
in being that, where n
was defined to be  .


     ,         , 
And it has some code, which is
the procedure of no arguments


    ,          ,
which does something, that sets
something, and returns n.


    ,         , 
And this thing is going to be
the object, which in the


    ,          ,  
global environment, will
have the name c.


    ,           ,
So we construct a name here, c,
and say that equals that.


    ,         , 


    ,           , 
Now, but also make another
counter, c to be make counter


     ,          ,
say, starting with  .


    ,         , 
Then I do essentially
the same thing.

 
    ,          , 
I apply the make counter
procedure, which I got from


    ,           , 
here, to make another frame
with n being  .


     ,           ,  
That frame has the global
environment as its parent.


     ,           , 
I then construct a procedure
which has that as it's frame


    ,          ,   
of definition.


    ,             , 


     ,          , 
The code of it is the procedure
of no arguments


    ,          , 
which does something.


    ,          ,  
And it does a set, and so on.


    ,           , 
And n comes out.

 
    ,          , 
And c is this.


    ,          , 
Well, you're already beginning
to see something fairly


    ,           ,  
interesting.


     ,           , 
There are two n's here.


    ,          , 
They are not one n.


    ,          , 
Each time I called make counter,
I made another


    ,          , 
instance of n.


    ,          , 
These are distinct and separate
from each other.


    ,          , 


    ,            ,
Now, let's do some execution,
use those counters.

 
      ,          ,
I'm going to use
those counters.


     ,          , 


     ,          ,  
Well, what happens if I
say, c at this point?


    ,           , 
Well, I go over here,
and I say, oh


    ,           , 
yes, c is a procedure.


     ,          , 
I'm going to call this procedure
on no arguments, but


    ,          ,  
it has no parameters.


    ,           ,  
That's right.


    ,           ,  
What's its body?


    ,           ,
Well, I have to look over
here, because I

 
    ,          , 
didn't write it down.


     ,          ,  
It said, set n to one plus n
and return n, increment n.


    ,           , 
Well, the n it sees
is this one.


    ,          , 
So I increment that n.


    ,           ,  
That becomes one, and I
return the value one.


     ,           ,  


    ,           , 
Supposing I then called c.


    ,          , 
Well, what do I do?


    ,           ,  
I say c is this procedure which
does the same thing, but


     ,            , 
here's the n.

 
     ,          , 
It becomes .


    ,          , 
And so I have an  which
is the value.


    ,          , 
I then can say, let's
try c again.


    ,          , 


    ,          , 
c is this, that's two,
so the answer is two.


    ,          , 
And c gives me a  by the same
method, by walking down


    ,          , 
here looking at that and saying,
here's the n, I'm


    ,          , 
incrementing.


    ,          , 


    ,          , 
So what I have are computational
objects.

 
    ,          , 
There are two counters,
each with its own


    ,          ,  
independent local state.


    ,           , 


    ,          , 
Let's talk about
this a little.


    ,          , 
This is a strange thing.


    ,           , 


     ,           , 
What's an object?


     ,           , 
It's not at all obvious
what an object is.


     ,          , 
We like to think about
objects, because it's


    ,          ,  
economical to think that way.

 
    ,           , 
It's an intellectual economy.


    ,          , 
I am an object.


    ,          , 
You are an object.


    ,          ,  
We are not the same object.


    ,           ,  


    ,           ,
I can divide the world into
two parts, me and you, and


    ,         ,  
there's other things as well,
such that most of the things I


    ,           , 
might want to discuss about my
workings do not involve you,


    ,          , 
and most of the things I want to
discuss about your workings


    ,          , 
don't involve me.

 
    ,           , 
I have a blood pressure, a
temperature, a respiration


  f that we have

 
 ate, a certain amount of
sugar in my blood, and


    ,           ,  
numerous, thousands, of state
variables   millions actually,


    ,            ,  
or I don't know how many  


     ,            ,  
huge numbers of state variables
in the physical


     ,            , 
sense which represent the state
of me as a particle, and


     ,          , 
you have gazillions
of them as well.


    ,          , 
And most of mine are uncoupled
to most of yours.


    ,          ,   
So we can compute the properties
of me without


    ,            , 
worrying too much about
the properties of you.

   
    ,          , 
If we had to work about both
of us together, than the

  
    ,          , 
number of states that we have to
consider is the product of

  
    ,          , 
the number of states you have
and the number of states I

  
    ,          , 
have. But this way it's
almost a sum.

  
    ,          , 
Now, indeed there are forces
that couple us.

  
    ,          , 
I'm talking to you and
your state changes.

  
    ,          , 
I'm looking at you and
my state changes.

  
    ,          ,  
Some of my state variables, a
very few of them, therefore,

  
    ,           , 
are coupled to yours.

  
    ,          , 
If you were to suddenly yell
very loud, my blood pressure

  
    ,          , 
would go up.

 
    ,          , 

 
    ,          , 
However, and it may not be
always appropriate to think

 
    ,            , 
about the world as being made
out of independent states and

 
      ,           , 
independent particles.

 
     ,           , 
Lots of the bugs that occur in
things like quantum mechanics,

 
     ,           , 
or the bugs in our minds that
occur when we think about

 
     ,           , 
things like quantum mechanics,
are due the fact that we are

 
     ,          , 
trying to think about things
being broken up into

 
    ,          , 
independent pieces, when in
fact there's more coupling

  
    ,          , 
than we see on the surface, or
that we want to believe in,

 
    ,          ,  
because we want to compute
efficiently and effectively.

 
    ,           , 
We've been trained to
think that way.

 
    ,          ,

 
    ,         , 
Well, let's see.

 
    ,          , 
How would we know if we
had objects at all?

 
    ,          , 
How can we tell if
we have objects?

 
    ,          , 
Consider some possible
optical illusions.

 
    ,          , 
This could be done.

 
    ,          , 
These pieces of chalk are not
appropriately identical, but

  
    ,          , 
supposing you couldn't tell
the difference of them by

 
    ,          , 
looking at them.

 
    ,          , 
Well, there's a possibility
that this all a game I'm

 
    ,          ,
playing with mirrors.

 
    ,         , 
It's really the same piece
of chalk, but you're

 
    ,            , 
seeing two of them.

 
      ,            , 
How would you know if you're
seeing one or two?

 
      ,            , 
Well, there's only
one way I know.

 
      ,            , 
You grab one of them and change
it and see if the other

 
      ,           , 
one changed.

  
     ,           , 

 
     ,           , 
And it didn't, so there's
two of them.

 
     ,           ,  

 
     ,             , 
And, on the other hand, there
is some other screwy

 
      ,           , 
properties of things
like that.

 
     ,           ,  
Like, how do we know if
something changed?

 
     ,            , 
We have to look at it before
and after the change.

 
     ,           ,  
The change is an assignment,
it's a moment in time.

 
     ,            , 
But that means we have to know
it was the same one that we're

 
     ,           , 
looking at.

  
     ,           , 
So some very strange, and
unusual, and obscure, and  

 
     ,           , 
I don't understand the problems
associated with

 
     ,           , 
assignment, and change,
and objects.

 
     ,           , 
These could get very,
very bad.

 
     ,           , 
For example, here I am, I am
a particular person, a

 
     ,           , 
particular object.

 
     ,           , 
Now, I can take out my knife,
and cut my fingernail.

 
     ,           ,  
A piece of my fingernail has
fallen off onto the table.

 
     ,           ,  
I believe I am the same person
I was a second ago, but I'm

 
    ,           , 
not physically the same
in the slightest.

  
    ,          , 
I have changed.

 
    ,          , 
Why am I the same?

 
    ,          ,  
What is the identity of me?

 
    ,           , 
I don't know.

 
    ,          , 

 
    ,          , 
Except for the fact that I have
some sort of identity.

 
    ,          , 
And so, I think by introducing
assignment and objects, we

 
    ,          , 
have opened ourselves up to all
the horrible questions of

 
    ,           , 
philosophy that have been
plaguing philosophers for some

 
     ,          , 
thousands of years about
this sort of thing.

  
    ,          , 
It's why mathematics
is a lot cleaner.

 
    ,          , 
Let's look at the best things
I know to say about actions

 
    ,           , 
and identity.

 
     ,          ,  

 
    ,           ,  
We say that an action, a, had an
effect on an object, x, or

 
    ,           , 
equivalently, that x was
changed by a, if some

 
    ,           , 
property, p, which was true
of x before a, became

 
     ,           ,  
false of x after a.

 
     ,            , 
Let's test. It still means
I have to have the

 
     ,           , 
x before and after.

  
     ,          , 
Or, the other way of saying
this is, we say that two

 
    ,          , 
objects x and y are the same
for any action which has an

 
    ,          , 
effect on x has the
same effect on y.

 
    ,          , 
However, objects are very
useful, as I said, for

 
    ,          , 
intellectual economy.

 
    ,          , 
One of the things that's
incredibly useful about them,

 
    ,          , 
is that the world is, we like
to think about, made out of

 
    ,          ,  
independent objects with
independent local state.

 
    ,           , 
We like to think that
way, although it

 
    ,          , 
isn't completely true.

  
    ,          , 
When we want to make very
complicated programs that deal

 
    ,          ,  
with such a world, if we want
those programs to be

 
    ,           ,  
understandable by us and also
to be changeable, so that if

 
    ,           , 
we change the world we change
the program only a little bit,

 
    ,          , 
then we want there to be
connections, isomorphism,

 
    ,          , 
between the objects in the world
and the objects in our

 
    ,          , 
mental model.

 
    ,            , 
The modularity of the world can
give us the modularity in

 
      ,           ,  
our programming.

 
     ,            , 
So we invent things called
object oriented programming

  
     ,           , 
and things like that to provide
us with that power.

 
     ,           , 
But it's even easier.

 
     ,          , 
Let's play a little game.

 
    ,          , 
I want to play a little game,
show you an even easier

 
    ,          , 
example of where modularity can
be enhanced by using an

 
    ,          , 
assignment statement,
judiciously.

 
    ,          , 
One thing I want to enforce and
impress on you, is don't

 
    ,          , 
use assignment statements the
way you use it in FORTRAN or

 
    ,           , 
Basic or something or Pascal,
to do the things you don't

 
     ,          , 
have to do with it.

 
    ,          ,  


    ,           ,  
It's not the right way to
think for most things.


    ,           , 
Sometimes it's essential,
or maybe it's essential.


    ,          , 
We'll see more about that too.


    ,          , 
OK, let me show you
a fun game here.


    ,          , 


    ,          , 
There was mathematician by
the name of Cesaro  


    ,          , 
or Cesaro, Cesaro I
suppose it is  


    ,          , 
who figured out a clever
way of computing pi.


    ,           , 
It turns out that if I take to
random numbers, two integers

 
     ,          , 
at random, and compute the
greatest common divisor, their


    ,          , 
greatest common divisor is
either one or it's not one.


    ,          ,
If it's one, then they have
no common divisors.


    ,         , 


    ,          ,  
If their greatest common
divisor is one  


    ,           , 
the probability that two random
numbers, two numbers


    ,          , 
chosen at random, has as
greatest common divisor one is


    ,          , 
related to pi.


    ,          , 
In fact  


    ,          ,  
yes, it's very strange  

 
    ,           , 
of course there are other ways
of computing pi, like dropping


    ,          ,  
pins on flags, and things like
that, and sort of the same


    ,            , 
kind of thing.


     ,          , 
So the probability of that the
GCD of number one and number


    ,          , 
two, two random numbers chosen,
is  over pi squared.


    ,          , 
I'm not going to try
to prove that.


    ,           , 
It's actually not too hard
and sort of fun.


     ,           , 
How would we estimate
such probability?


     ,           , 
Well, the way we do that, the
way we estimate probabilities,


     ,           , 
is by doing lots of experiments,
and then

 
     ,          , 
computing the ratios of the ones
that come out one way to


    ,          , 
the total number of
experiments we do.


    ,          , 


    ,          , 
It's called Monte Carlo, and
it's useful in other contexts


    ,          , 
for doing things like integrals
where you have lots


    ,          , 
and lots of variables  


    ,          , 
the space which is limiting the
dimensions you are doing


    ,          , 
you integral in.


    ,          , 
But going back to here, Let's
look at this slide, We can use


    ,           , 
Cesaro's method for estimating
pi with n trials by taking the

 
     ,          , 
square root of six over a Monte
Carlo, a Monte Carlo


    ,          , 
experiment with n trials, using
Cesaro's experiment,


    ,          , 
where Cesaro's experiment is the
test of whether the GCD of


    ,          ,  
two random numbers  


    ,            ,  
And you can see that I've
already got some assignments


     ,            , 
in here, just by what I wrote.


     ,           , 
The fact that this word rand,
in parentheses, therefore,


     ,          , 
that procedure call, yields a
different value than this one,


    ,          , 
at least that's what I'm
assuming by writing this this


    ,          , 
way, indicates that this is not
a function, that there's

 
    ,           ,  
internal state in it
which is changing.


     ,           , 


    ,          , 
If the GCD of those two random
numbers is equal to one,


    ,          , 
that's the experiment.


    ,          , 
So here I have an experimental
method for estimating the


    ,          , 
value of pi.


    ,           , 
Where, I can easily divide this
problem into two parts.


     ,          , 
One is the specific Monte Carlo
experiment of Cesaro,


    ,          ,  
which you just saw, and the
other is the general technique


    ,           , 
of doing Monte Carlo
experiments.

 
    ,          , 
And that's what this is.


    ,          , 
If I want to do Monte Carlo
experiments with n trials, a


    ,          , 
certain number of trials, and
a particular experiment, the


    ,           , 
way I do that is I make a little
iterative procedure


     ,           , 
which has variable the number
of trials remaining and the


     ,           , 
number trials that have been
passed, that I've gotten true.


     ,          ,  
And if the number remaining is
 , then the answer is the


    ,           , 
number past divided by this
whole number of trials, was


    ,          , 
the estimate of the
probability.


    ,          , 
And if it's not, if I have
more trials to do,

 
    ,          , 
then let's do one.


    ,          , 
We do an experiment.


    ,          , 
We call the procedure which is
experiment on no arguments.


    ,           , 
We do the experiment and then,
if that turned out to be true,


     ,          , 
we go around the loop
decrementing the number of


    ,          , 
experiments we have to do by
one and incrementing the


    ,          , 
number that were passed.


    ,          , 
And if the experiment was false,
we just go around the


    ,          ,  
loop decrementing the number of
experiments remaining and


    ,           , 
keeping the number
passed the same.

 
    ,          , 
We start this up iterating
over the total number of


    ,          , 
trials with   experiments
past. A very


    ,          , 
elegant little program.


    ,            , 
And I don't have to just do this
with Cesaro's experiment,


      ,           , 
it could be lots of Monte Carlo
experiments I might do.


     ,           , 
Of course, this depends upon the
existence of some sort of


     ,           , 
random number generator.


     ,           , 
And random number generators
generally look


     ,          , 
something like this.


    ,          , 

  
    ,          , 
There is a random number
generator  

 
    ,          , 
is in fact a procedure which is
going to do something just

 
    ,          , 
like the counter.

 
    ,           , 
It's going to update an x to
the result of applying some

 
     ,          ,  
function to x, where this
function is some screwy kind

 
    ,           ,  
of function that you might find
out in Knuth's books on

 
    ,           ,
the details of programming.

 
    ,         ,  
He does these wonderful books
that are full of the details

 
    ,           ,  
of programming, because I can't
remember how to make a

 
    ,            ,
random number generator, but I
can look it up there, and I

 
     ,         , 
can find out.


    ,          , 
And then, eventually, I return
the value of x which is the


    ,          ,
state variable internal to the
random number generator.


    ,           , 
That state variable
is initialized


      ,           ,
somehow, and has a value.


     ,          , 
And this procedure is defined
in the context where that


     ,           , 
variable is bound.


     ,          , 
So this is a hidden piece of
local state that you see here.


    ,          , 
And this procedure is defined
in that context.


    ,          , 
Now, that's a very simple
thing to do.

 
    ,          ,  
And it's very nice.


    ,           ,  
Supposing, I didn't want
to use assignments.


    ,            ,
Supposing, I wanted to write
this program without


     ,         , 
assignments.


    ,          , 
What problems would I have?


    ,          , 
Well, let's see.


    ,          , 
I'd like to use the overhead
machine here, thank you.


    ,          , 
First of all, let's look
at the whole thing.


    ,          , 
It's a big story.


    ,          , 
Unfortunately, which tells you
there is something wrong.

 
    ,          ,
It's at least that big,
and it's monolithic.


    ,         ,  


    ,           , 
You don't have to understand
or look at the text there


    ,           , 
right now to see that
it's monolithic.


     ,           ,  
It isn't a thing which is
Cesaro's experiment.


     ,            ,  
It's not pulled out from the
Monte Carlo process.


     ,            , 
It's not separated.


     ,          , 
Let's look why.


    ,          , 


    ,          , 
Remember, the constraint here is
that every procedure return

 
    ,          ,  
the same value for the
same arguments.


    ,           ,  
Every procedure represents
a function.


    ,           ,
That's a different kind
of constraint.


    ,          , 
Because when I have assignments,
I can change some


     ,          , 
internal state variable.


    ,          ,  
So let's see how that causes
things to go wrong.


    ,           , 
Well, start at the beginning.


    ,          , 
The estimate of pi looks
sort of the same.


    ,          , 
What I'm doing is I take the
square root of six over the


    ,          , 
random GCD test applied to n,
whereas that's what this is.

 
    ,          , 
But here, we are beginning
to see something funny.


    ,          , 
The random GCD test of a certain
number of trials is


    ,          ,  
just like we had before, an
iteration on the number of


    ,           , 
trials remaining, the number
of trials that have been


    ,          , 
passed, and another
variable x.


    ,         , 
What's that x?


   ,         , 
That x is the state of the
random number generator.


   ,         , 


   ,         , 
And it is now going
to be used here.


   ,         , 
The same random update function
that I have over here

 
   ,         , 
is the one I would have used in
a random number generator


   ,         , 
if I were building it the other
way, the one I get out


   ,         , 
of Knuth's books.


   ,         , 
x is going to get transformed
into x, I


   ,         , 
need two random numbers.


   ,         , 
And x is going to get
transformed into x, I have


   ,         , 
two random numbers.


   ,         , 
I then have to do exactly
what I did before.


   ,         , 
I take the GCD of x x.


   ,         , 
If that's one, then I go around
the loop with x being

 
   ,         , 
the next value of x.


   ,         , 


   ,         , 
You see what's happened here
is that the state of the


   ,           , 
random number generator is no
longer confined to the insides


     ,          ,
of the random number
generator.


    ,         , 
It has leaked out.


    ,          , 
It has leaked out into my
procedure that does the Monte


    ,          , 
Carlo experiment.


    ,         , 
But what's worse than that, is
it's also, because it was


   ,         , 
contained inside my experiment
itself, Cesaro, it leaked out

 
   ,         ,  
of that too.


   ,          , 
Because Cesaro called twice, has
to have a different value


   ,         , 
each time, if I going to have
a legitimate experimental


   ,         , 
test. So Cesaro can't be a
function either, unless I pass


   ,         , 
it the seed of the random number
generator that is going


   ,         , 
to go wandering around.


   ,         , 
So unfortunately, the seed of
random number generator has


   ,         , 
leaked out into Cesaro, from the
random number generator,


   ,         ,
that's leaked into the Monte
Carlo experiment.


   ,        ,
And, unfortunately, my Monte
Carlo experiment here is no

 
   ,         , 
longer general.


    ,         , 
The Monte Carlo experiment here
knows how many random


   ,         , 
numbers I need to do
the experiment.


   ,         , 


   ,           , 
That's sort of horrible.


     ,          ,  
I lost an ability to decompose a
problem into pieces, because


    ,           , 
I wasn't willing to accept the
little loop of information,


    ,         , 
the feedback process, that
happens inside the random


   ,         ,   
number generator before that
was made by having an


   ,            ,  
assignment to a state variable
that was confined to the

  
    ,          , 
random number generator.

 
   ,         ,  
So the fact that the random
number generator is an object,

 
   ,          ,  
with an internal state variable,
it's affected by

 
   ,           ,
nothing, but it'll give you
something, and it will apply

 
    ,        , 
it's force to you, that was
what we're missing now.

 
   ,         , 

 
   ,         , 
OK, well I think we've seen
enough reason for doing this,

 
   ,         , 
and it all sort of looks
very wonderful.

 
   ,         , 
Wouldn't it be nice if
assignment was a good thing

 
   ,         , 
and maybe it's worth it,
but I'm not sure.

 
   ,         , 
As Mr. Gilbert and Sullivan
said, things are seldom what


   ,          , 
they seem, skim milk masquerades
as cream.


    ,          ,
Are there any questions?


    ,        ,  


   ,           , 
Are there any philosophers
here?


    ,         , 
Anybody want to argue
about objects?


   ,         , 


   ,         , 
You're just floored, right?


   ,         , 


   ,          , 
And you haven't done
your homework yet.

 
    ,         , 
You haven't come up with
a good question.


   ,         , 


   ,         ,  
Oh, well.


   ,           , 


    ,         , 
Sure, thank you.


   ,         , 
Let's take the long break now.


   ,         ,
        ,              , 


      ,            , 
PROFESSOR  Well, now that we've
given you some power to


      ,            , 
make independent local state
and to model objects, I


      ,            , 
thought we'd do a bit of
programming of a very


      ,            , 
complicated kind, just to
illustrate what you can do


      ,            , 
with this sort of thing.


      ,             , 


       ,            ,  
I suppose, as I said, we were
motivated by physical systems


      ,             ,  
and the ways we like to think
about physical systems, which

 
      ,             ,  
is that there are these things
that the world is made out of.


      ,             , 
And each of these things has
particular independent local


      ,            , 
state, and therefore
it is a thing.


      ,            , 
That's what makes it a thing.


      ,            , 
And then we're going to say
that in the model in the


      ,            ,  
world  we have a world and a
model in our minds and in the


      ,             , 
computer of that world.


      ,           , 
And what I want to make is a
correspondence between the


     ,           , 
objects in the world and the
objects in the computer, the


     ,           , 
relationships between the
objects in the world and the

 
     ,           ,  
relationships between those same
obj...  the model objects


     ,            , 
in the computer, and the
functions that relate things


     ,           , 
in the world to the functions
that relate


     ,           , 
things in the computer.


     ,            , 


      ,           , 
This buys us modularity.


     ,           ,
If we really believe the world
is like that, that it's made


     ,           , 
out of these little pieces, and
of course we could arrange


      ,           , 
our world to be like that, we
could only model those things


     ,           ,  
that are like that, then we can
inherit the modularity in

 
     ,             , 
the world into our
programming.


      ,           , 
That's why we would invent some
of this object oriented


     ,           , 
programming.


     ,           , 
Well, let's take the best
kind of objects I know.


     ,            , 
They're completely  they're
completely wonderful 


      ,            , 
electrical systems. Electrical
systems really are the


      ,           , 
physicist's best,
best objects.


     ,           , 
You see over here I have some
piece of machinery.


     ,            ,  
Right here's a piece
of machinery.


      ,            , 
And it's got an electrical wire
connecting one part of

 
     ,           , 
the machinery with another
part of the machinery.


     ,            , 
And one of the wonderful
properties of the electrical


      ,           , 
world is that I can say this is
an object, and this is an


     ,           ,  
object, and they're  


     ,            , 
the connection between
them is clear.


     ,           , 
In principle, there is no
connection that I didn't


     ,           , 
describe with these wires.


     ,           ,   
Let's say if I have light bulbs,
a light bulb and a


     ,             , 
power supply that's plugged
into the outlet.


     ,           , 
Then the connection is
perfectly clear.

 
     ,           , 
There's no other connections
that we know of.


     ,           , 
If I were to tie a knot in the
wire that connects the light


     ,            ,  
bulb to the power supply, the
light remains lit up.


      ,             , 
It doesn't care.


      ,            ,  


      ,            , 
That the way the physics is
arranged is such that the


     ,           , 
connection can be made abstract,
at least for low


     ,           , 
frequencies and things
like that.


     ,           , 


     ,            , 
So in fact, we have captured all
of the connections there

 
      ,           , 
really are.


     ,           , 
Well, as you can go one step
further and talk about the


     ,           , 
most abstract types of
electrical systems we have,


     ,            ,
digital to dual circuits.


      ,          , 
And here there are certain
kinds of objects.


     ,           , 
For example, in digital
circuits we


     ,           , 
have things like inverters.


     ,           , 
We have things like and gates.


     ,           , 
We have things like or gates.


     ,           , 
We connect them together by
sort of wires which represent

 
     ,           , 
abstract signals.


     ,           , 
We don't really care as physical
variables whether


     ,             , 
these are voltages or currents
or some combination or


       ,            , 
anything like that, or water,
water pressure.


      ,            , 
These abstract variables
represent certain signals.


      ,           , 
And we build systems by
wiring these things


     ,           ,  
together with wires.


     ,            , 
So today what I'm going to show
you, right now, we're


     ,           , 
going to build up an invented
language in Lisp, embedded in


     ,           , 
the same sense that Henderson's
picture language

 
     ,           , 
was embedded, which is not the
same sense as the language of


     ,           ,  
pattern match and substitution
was done yesterday.


     ,            ,
The pattern match/substitution
language was interpreted by a


     ,          , 
Lisp program.


     ,            , 
But the embedding of Henderson's
program is that we


      ,           , 
just build up more and more
procedures that encapsulate


     ,           , 
the structure we want.


     ,           , 
So for example here, I'm going
to have some various primitive


     ,           , 
kinds of objects, as you see,
that one and that one.


     ,           , 
I'm going to use wires
to combine them.

 
     ,           , 
The way I represent
attaching  


     ,           , 
I can make wires.


     ,            , 
So let's say A is a wire.


      ,            , 
And B is a wire.


      ,            , 
And C is a wire.


      ,            , 
And D is a wire.


      ,            , 
And E is wire.


      ,            , 
And S is a wire.


      ,           , 
Well, an or gate that has both
inputs, the inputs being A and


     ,           , 
B, and the output being Y or
D, you notate like this.

  
     ,           , 
An and gate, which has inputs
A and B and output C, we

 
     ,           , 
notate like that.

 
     ,           , 
By making such a sequence of
declarations, like this, I can

 
     ,           , 
wire together an arbitrary
circuit.

 
     ,           , 
So I've just told you a set
of primitives and means of

 
     ,            , 
combination for building digital
circuits, when I need

 
      ,           , 
more in a real language
than abstraction.

 
     ,           ,
And so for example,
here I have  here

 
     ,          , 
I have a half adder.

 
     ,           , 
It's something you all
know if you've

 
     ,           , 
done any digital design.


     ,             , 
It's used for adding numbers
together on A and B and


       ,            ,
putting out a sum and a carry.


      ,           , 
And in fact, the wiring
diagram is


      ,            , 
exactly what I told you.


      ,           , 
A half adder with things that
come out of the box   you see


     ,           , 
the box, the boundary, the
abstraction is always a box.


     ,           ,  
And there are things that come
out of it, A, B, S, and C.


     ,            , 
Those are the declared
variables  declared variables


     ,           ,  
of a lambda expression,
which is the one that

 
     ,            , 
defines half adder.


     ,           ,  


     ,            ,  
And internal to that, I make up
some more wires, D and E,


     ,            , 
which I'm going to use for
the interconnect  


     ,           , 
here E is this one and D is this
wire, the interconnect


     ,           ,  
that doesn't come through
the walls of the box  


     ,            , 
and wire things together
as you just saw.


     ,           , 
And the nice thing about this
that I've just shown you is


     ,           , 
this language is hierarchical
in the right way.


     ,           , 
If a language isn't hierarchical
in the right way,

 
     ,           , 
if it turns out that a compound
object doesn't look


     ,             , 
like a primitive, there's
something


       ,            , 
wrong with the language  


      ,            ,  
at least the way I
feel about that.


      ,             , 
So here we have  here, instead
of starting with mathematical


      ,            ,  
functions, or things that
compute mathematical


      ,            , 
functions, which is what we've
been doing up until now,


     ,           , 
instead of starting with
things that look like


     ,           ,  
mathematical functions, or
compute such things, we are


     ,            , 
starting with things that are
electrical objects and we

 
     ,           , 
build up more electrical
objects.


     ,           , 
And the glue we're using
is basically the


     ,            ,  
Lisp structure  lambdas.


      ,            , 
Lambda is the ultimate
glue, if you will.


     ,           ,   
And of course, half adder itself
can be used in a more


     ,             , 
complicated abstraction called
a full adder, which in fact


     ,           , 
involves two half adders, as you
see here, hooked together


     ,            ,  
with some extra wires, that you
see here, S, C, and C,


      ,            , 
and an or gate, to manufacture
a full adder, which takes a


     ,            , 
input number, another input
number, a carry in, and

 
      ,            ,  
produces output, a sum
and a carry out.


      ,             , 
And out of full adders, you can
make real adder chains and


      ,           , 
big adders.


     ,           , 
So we have here a language so
far that has primitives, means


     ,           , 
of combination, and means of
abstraction to real language.


     ,           ,   
Now, how are we going
to implement this?


     ,             ,  
Well, let's do it easily.


     ,            , 
Let's look at the primitives.


     ,           , 
The only problem is we have to
implement the primitives.


     ,           , 
Nothing else has to be
implemented, because we're

 
     ,           , 
picking up the means of
combination and abstraction


     ,           ,
from Lisp, inheriting them
in the embedding.


     ,          , 
OK, so let's look at a
particular primitive.


     ,           ,  
An inverter is a nice one.


     ,            , 


     ,           ,  
Now, inverter has two wires
coming in, an in and an out.


     ,            , 


     ,            , 
And somehow, it's going to have
to know what to do when a


      ,            ,  
signal comes in.


      ,             , 
So somehow it's going to have
to tell its input wire  

 
      ,            ,
and now we're going to talk
about objects and we're going


      ,          , 
to see this in a little
more detail soon  


     ,           , 
but it's going to have to tell
its input wire that when you


     ,            , 
change, tell me.


      ,           , 
So this object, the object which
is the inverter has to


     ,           ,  
tell the object which
is the input wire,


     ,            , 
hi, my name is George.


     ,            , 
And my, my job is to do
something with results when


      ,           , 
you change.


     ,           , 
So when you change, you get a
change, tell me about it.

 
     ,           ,  
Because I've got to do
something with that.


     ,            ,  
Well, that's done down here by
adding an action on the input


     ,            ,  
wire called invert in, where
invert in is defined over here


     ,            , 
to be a procedure of no
arguments, which gets the


     ,           , 
logical not of the signal
on the input wire.


     ,           , 
And after some delay, which is
the inverter delay, all these


     ,            , 
electrical objects have delays,
we'll do the following


      ,            , 
thing   set the signal on the
output wire to the new value.


      ,            , 


      ,           ,  
A very simple program.

 
     ,            , 
Now, you have to imagine that
the output wire has to be


     ,           , 
sensitive and know that when
its signal changes, it may


     ,           , 
have to tell other guys,
hey, wake up.


     ,           ,  
My value has changed.


     ,            , 
So when you hook together
inverter with an and gate or


     ,           , 
something like that, there has
to be a lot of communication


     ,           ,  
going on in order to
make sure that the


     ,            , 
signal propagates right.


     ,           , 
And down here is nothing
very exciting.


     ,           ,  
This is just the definition
of logical not for some

  
     ,            , 
particular representations
of the logical values  

 
     ,           , 
,   in this case.

 
     ,           , 
And we can look at things more
complicated like and gates.

 
     ,           ,   
And gates take two inputs, A
and A, we'll call them, and

 
     ,             , 
produce an output.

 
     ,           , 
But the structure of the
and gate is identical to the

 
     ,            , 
one we just saw.

 
      ,           ,   
There's one called an and action
procedure that's

 
     ,             , 
defined, which is the thing that
gets called when an input

 
     ,           , 
is changed.

 
     ,          , 
And what it does, of course, is
nothing more than compute


    ,          ,  
the logical and of the signals
on the inputs.


    ,            , 
And after some delay, called the
and gate delay, calls this


     ,          , 
procedure, which sets a signal
on the output to a new value.


    ,          , 
Now, how I implement
these things


    ,          , 
is all wishful thinking.


    ,          ,  
As you see here, I have an
assignment operation.


    ,           , 
It's not set.


    ,          , 
It's a derived assignment
operation in the same way we


    ,          , 
had functions that were derived
from CAR and CDR. So

 
    ,          , 
I, by convention, label that
with an exclamation point.


    ,           , 
And over here, you see there's
an action, which is to inform


     ,          , 
the wire, called A locally in
this and gate, to call the


    ,            , 
and action procedure when it
gets changed, and the wire A


      ,           ,  
to call the and action
procedure


     ,            , 
when it gets changed.


     ,           , 


     ,           , 
All very simple.


     ,          , 
Well, let's talk a little bit
about this communication that


    ,          , 
must occur between these
various parts.

 
    ,          , 
Suppose, for example, I have
a very simple circuit which


    ,          , 
contains an and with wires A
and B. And that connects


    ,           , 
through a wire called C to an
inverter which has a wire


     ,          , 
output called D. What are
the comput...  here's


    ,          , 
the physical world.


    ,          , 
It's an abstraction of
the physical world.


    ,          ,  
Now I can buy these out of
little pieces that you get at


    ,           , 
Radio Shack for a few cents.


    ,          , 
And there are boxes that act
like this, which have little


    ,           , 
numbers on them like
LS  or something.

 
     ,           , 
Now supposing I were to
try to say what's the


     ,           ,  
computational model.


     ,           , 
What is the thing that
corresponds to that, that part


    ,          , 
of reality in the mind of
us and in the computer?


    ,          ,  
Well, I have to assign for every
object in the world an


    ,           , 
object in the computer, and for
every relationship in the


    ,          , 
world between them a
relationship in the computer.


    ,          , 
That's my goal.


    ,           ,  
So let's do that.


     ,           , 
Well, I have some sort of thing
called the signal, A.

 
    ,          , 
This is A. It's a signal.


    ,          ,  
It's a cloudy thing like that.


    ,           , 
And I have another one down here
which I'm going to call


    ,          , 
B. It's another signal.


    ,          ,  
Now this signal  these two
signals are somehow going to


    ,           , 
have to hook together into a
box, let's call it this, which


    ,            , 
is the and gate, action
procedure.


      ,           ,  
That's the and gate's
action procedure.


     ,            , 


     ,           , 
And it's going to produce  well,
it's going to

 
     ,          , 
interact with a signal object,
which we call C  a wire


    ,          , 
object, excuse me, we call
C. And then the  


    ,          , 
this is going to put out again,
or connect to, another


    ,          , 
action procedure which is one
associated with the inverter


    ,           ,
in the world, not.


     ,         , 


    ,          , 
And I'm going to have
another  another wire, which


    ,          , 
we'll call D.


    ,          , 
So here's my layout of stuff.


    ,          , 
Now we have to say what's inside
them and what they have

 
    ,          ,  
to know to compute.


    ,           ,  
Well, every  every one of these
wires has to know what


    ,           , 
the value of the signal that's
on that wire is.


    ,          , 
So there's going to be some
variable inside here, we'll


    ,            , 
call it signal.


      ,           , 


     ,           , 
And he owns a value.


     ,           , 
So there must be some
environment


     ,           ,
associated with this.


     ,          , 
And for each one of these, there
must be an environment

 
     ,          ,  
that binds signal.


    ,           ,  


    ,           , 
And there must be a signal
here, therefore.


    ,          ,  


    ,           , 
And presumably, signal's a value
that's either  or  ,


    ,          , 
and signal.


    ,          ,   


    ,            , 
Now, we also have to have some
list of people to inform if


    ,          , 
the signal here changes.


    ,          , 

 
    ,          ,  
We're going to have
to inform this.


    ,           , 
So I've got that list.
We'll call it the


    ,          ,  
Action Procedures, AP.


    ,           , 
And it's presumably a list.
But the first thing on the


    ,           ,  
list, in this case,
is this guy.


     ,           , 
And the action procedures of
this one happens to have some


    ,          , 
list of stuff.


    ,          , 
There might be other people
who are sharing A, who are


    ,          ,  
looking at it.


    ,            ,  
So there might be other guys
on this list, like somebody

  
     ,            , 
over there that we
don't know about.

 
     ,           ,  
It's the other guy
attached to A.

 
     ,           , 
And the action procedure here
also has to point to that, the

 
    ,          ,  
list of action procedures.

 
    ,           ,  
And of course, that means this
one, its action procedures has

 
    ,           , 
to point up to here.

 
    ,          , 
This is the things  

 
    ,          , 
the people it has to inform.

 
    ,          , 
And this guy has some too.

 
    ,          , 
But I don't know what they
are because I didn't

 
    ,          , 
draw it in my diagram.


    ,           , 
It's the things connected
to D.


     ,          , 
Now, it's also the case that
when the and action procedure


    ,          ,
is awakened, saying one of the
people who know that you've


    ,         ,  
told  one of the people you've
told to wake you up if their


    ,           , 
signal changes, you have to go
look and ask them what's their


    ,          , 
signal so you can do the
and, and produce a


    ,          , 
signal for this one.


    ,          ,  


    ,           , 
So there has to be, for example,
information here

 
    ,           ,  
saying A, my A is this guy,
and my A is this guy.


     ,            , 


     ,          , 
And not only that, when I do my
and, I'm going to have to


    ,          , 
tell this guy something.


    ,          , 
So I need an output  


    ,          , 


    ,          , 
being this guy.


    ,          ,  


    ,           , 
And similarly, this guy's going
to have a thing called


    ,          , 
the input that he interrogates
to find out what the value of

 
    ,          , 
the signal on the input is, when
the signal wakes up and


    ,          , 
says, I've changed, and sends
a message this way saying,


    ,          , 
I've changed.


    ,          ,  
This guy says, OK, what's
your value now?


    ,            , 
When he gets that value, then
he's going to have to say, OK,


     ,          , 
output changes this guy,
changes this guy.


    ,            ,  


      ,            ,
And so on.


     ,          , 
And so I have to have at least
that much connected ness.


     ,           , 
Now, let's go back and look, for
example, at the and gate.

 
     ,          , 
Here we are back
on this slide.


    ,          ,  
And we can see some
of these parts.


    ,           , 
For any particular and gate,
there is an A, there is an


    ,          ,  
A, and the output.


    ,           ,
And those are, those are an
environment that was created


    ,          , 
at the  those produce a frame
at the time and gate was


     ,          ,  
called, a frame where A, A,
and output are  have as their


    ,           , 
values, they're bound to the
wires which, they are  which


    ,          , 
were passed in.


    ,           , 
In that environment, I
constructed a procedure  

 
     ,          , 
this one right there.


    ,          , 
And action procedure was
constructed in that


    ,          , 
environment.


    ,            , 
That was the result of
evaluating a lambda


      ,           , 
expression.


     ,           , 
So it hangs onto the frame
where these were defined.


     ,          ,  
Local  part of its local
state is that.


    ,           ,   
The and action procedure,
therefore, has access to A,


    ,            , 
A, and output as we see here.


    ,          ,
A, A, and output.

 
    ,         , 


    ,          ,  
Now, we haven't looked
inside of a wire yet.


    ,           ,  
That's all that remains.


    ,            , 
Let's look at a wire.


     ,          , 


    ,          , 
Like the overhead, very good.


    ,          ,  


    ,            , 
Well, the wire, again,
is a, is a


     ,          ,  
somewhat complicated mess.


    ,           , 
Ooh, wrong one.

 
    ,          , 
It's a big complicated
mess, like that.


    ,          , 
But let's look at it in detail
and see what's going on.


    ,          , 
Well, the wire is
one of these.


    ,            , 
And it has to have two things
that are part of


      ,            ,  
it, that it's state.


      ,             , 
One of them is the signal
we see here.


      ,            , 
In other words, when we call
make wire to make a wire, then


      ,           ,  
the first thing we do is we
create some variables which


     ,            , 
are the signal and the action
procedures for this wire.


     ,           , 

 
     ,           , 
And in that context, we define
various functions  or


     ,           , 
procedures, excuse
me, procedures.


     ,           , 
One of them is called
set my signal to a new value.


     ,           , 
And what that does is takes
a new value in.


     ,            , 
If that's equal to my current
value of my signal, I'm done.


      ,           , 
Otherwise, I set the signal to
the new value and call each of


     ,           , 
the action procedures that
I've been, that I've


     ,           ,
been  what's the right word?  


     ,          ,  


     ,            , 
introduced to.

 
     ,           , 
I get introduced when the
and gate was applied to me.


     ,           , 


     ,           , 
I add action procedure
at the bottom.


     ,           , 
Also, I have to define a way
of accepting an action


     ,          , 
procedure   which is what
you see here   


    ,          , 
which increments my action
procedures using set to the


    ,          ,  
result of CONSing up a new
process  a procedure, which is


    ,           , 
passed to me, on to my actions
procedures list. And for


    ,          , 
technical reasons, I have to
call that procedure one.


    ,          , 
So I'm not going to tell you
anything about that, that has

  
    ,          , 
to do with event driven
simulations and getting them

 
    ,          , 
started, which takes a little
bit of thinking.

 
    ,          , 
And finally, I'm going to define
a thing called the

 
    ,          , 
dispatcher, which is a way of
passing a message to a wire,

 
    ,          ,  
which is going to be used to
extract from it various

 
    ,           , 
information, like what is the
current signal value?

 
    ,          , 
What is the method of
setting your signal?

 
    ,            ,  
I want to get that out of it.

 
      ,            ,  
How do I  how do I add another
action procedure?

 
     ,            , 

 
     ,           , 
And I'm going to return
that dispatch, that


     ,           , 
procedure as a value.


     ,          , 
So the wire that I've
constructed is a message


    ,          , 
accepting object which accepts
a message like, like what's


    ,          , 
your method of adding
action procedures?


    ,          , 
In fact, it'll give me a
procedure, which is the add


    ,          ,  
action procedure, which I can
then apply to an action


    ,           ,  
procedure to create another
action procedure in the wire.


    ,           , 


    ,          , 
So that's a permission.

 
    ,          , 
So it's given me permission to
change your action procedures.


    ,          , 
And in fact, you can
see that over here.


    ,          ,
Next slide.


    ,         ,
Ah.


    ,         , 


    ,          , 
This is nothing very
interesting.


    ,          ,  
The call each of the action
procedures is just a CDRing


    ,           ,  
down a list. And I'm
not going to even


    ,           , 
talk about that anymore.


    ,          , 
We're too advanced for that.

 
    ,            , 
However, if I want to
get a signal from a


      ,           , 
wire, I ask the wire  


     ,           ,  
which is, what is the wire?


     ,            , 
The wire is the dispatch
returned by creating the wire.


     ,           , 
It's a procedure.


     ,          , 
I call that dispatch on the
message get signal.


    ,          , 
And what I should expect
to get is a method


    ,          ,  
of getting a signal.


    ,           , 
Or actually, I get the signal.


    ,          ,  
If I want to set a signal, I
want to change a signal, then

 
    ,           , 
what I'm going to do is take a
wire as an argument and a new


    ,          , 
value for the signal, I'm going
to ask the wire for


    ,          , 
permission to set its signal and
use that permission, which


    ,          ,  
is a procedure, on
the new value.


    ,           ,
And if we go back to the
overhead here, thank you, if


    ,         , 
we go back to the overhead here,
we see that the method  


    ,          , 
if I ask for the method of
setting the signal, that's


    ,          , 
over here, it's set my signal,
a procedure that's defined


    ,          , 
inside the wire, which if we
look over here is the thing


    ,           , 
that says set my internal value
called the signal, my

 
     ,           , 
internal variable, which is the
signal, to the new value,


     ,          , 
which is passed to me as an
argument, and then call each


    ,          ,  
of the action procedures
waking them up.


    ,           , 


    ,          ,  
Very simple.


    ,           , 
Going back to that slide, we
also have the one last thing  


    ,          , 
which I suppose now you can
easily work out for yourself  


    ,           ,  
is the way you add an action.


     ,           , 
You take a wire  a wire and
an action procedure.


    ,           ,  
And I ask the wire for
permission to add an action.

 
     ,           , 
Getting that permission, I use
that permission to give it an


    ,          ,  
action procedure.


    ,           , 
So that's a real object.


    ,          , 
There's a few more details
about this.


    ,          , 
For example, how am I going
to control this thing?


    ,           , 
How do I do these delays?


     ,           , 
Let's look at that
for a second.


     ,           ,


     ,          , 
The next one here.


     ,           , 
Let's see.

 
     ,          , 
We know when we looked at the
and gate or the not gate that


    ,          , 
when a signal changed on the
input, there was a delay.


    ,          ,  
And then it was going to call
the procedure, which was going


    ,           , 
to change the output.


    ,          ,  


    ,           , 
Well, how are we going
to do this?


    ,           ,  
We're going to make up some
mechanism, a fairly


     ,           , 
complicated mechanism at that,
which we're going to have to


    ,          , 
be very careful about.


    ,          , 
But after a delay, we're
going to do an action.

 
    ,           , 
A delay is a number, and an
action is a procedure.


     ,          , 
What that's going to be is
they're going to have a


    ,          , 
special structure called an
agenda, which is a thing that


    ,          , 
organizes time and actions.


    ,           , 
And we're going to see
that in a while.


     ,          ,  
I don't want to get into
that right now.


    ,           ,
But the agenda has a
moment at which  at


    ,         , 
which something happens.


    ,           , 
We're setting up for later at
some moment, which is the sum


     ,           ,  
of the time, which is the delay
time plus the current

 
     ,            , 
time, which the agenda
thinks is now.


     ,          , 
We're going to set up to do this
action, and add that to


    ,          ,  
the agenda.


    ,           , 


    ,          , 
And the way this machine will
now run is very simple.


    ,           ,  
We have a thing called
propagate, which is the way


     ,           , 
things run.


    ,          , 
If the agenda is empty, we're
done  if there's nothing more


    ,          , 
to be done.


    ,          , 
Otherwise, we're going to take
the first item off the agenda,

  
    ,          ,  
and that's a procedure
of no arguments.

 
    ,           ,  
So that we're going to see
extra parentheses here.

 
    ,           , 
We call that on no arguments.

 
    ,          ,  
That takes the action.

 
    ,           ,  
Then we remove that first item
from the agenda, and we go

 
    ,           ,
around the propagation loop.

 
    ,          , 
So that's the overall structure
of this thing.

 
     ,          , 

 
    ,          , 
Now, there's a, a few other
things we can look at.

 
    ,          , 
And then we're going to
look into the agenda a

 
    ,            , 
little while from now.


      ,           ,  
Now the overhead again.


     ,            , 
Well, in order to set this thing
going, I just want to


     ,           , 
show you some behavior out
of this simulator.


     ,           , 
By the way, you may think this
simulator is very simple, and


     ,          , 
probably too simple
to be useful.


    ,          , 
The fact of the matter is that
this simulator has been used


    ,          , 
to manufacture a fairly
large computer.


    ,          , 
So this is a real
live example.


    ,          , 
Actually, not exactly this
simulator, because I'll tell

 
    ,          , 
you the difference.


    ,          , 
The difference is that there
were many more different kinds


    ,          , 
of primitives.


    ,          ,  
There's not just the word
inverter or and gate.


    ,           , 
There were things like
edge triggered, flip flops,


    ,          , 
and latches, transparent
latches, and adders, and


    ,          , 
things like that.


    ,          , 
And the difficulty with that
is that there's pages and


    ,          , 
pages of the definitions of
all these primitives with


    ,          , 
numbers like LS .

 
    ,          , 
And then there's many more
parameters for them.


    ,          , 
It's not just one delay.


    ,            ,  
There's things like set
up times and hold


      ,            , 
times and all that.


     ,           , 
But with the exception of that
part of the complexity, the


     ,           , 
structure of the simulator that
we use for building a


     ,          , 
real computer, that works
is exactly what


    ,          , 
you're seeing here.


    ,          , 
Well in any case, what we have
here is a few simple things.


    ,          , 
Like, there's inverter delays
being set up and

 
    ,          ,  
making a new agenda.


    ,           , 
And then we can make
some inputs.


    ,          , 
There's input , input ,
a sum and a


    ,          , 
carry, which are wires.


    ,          , 
I'm going to put a special kind
of object called a probe


    ,          , 
onto, onto some of the wires,
onto sum and onto carry.


    ,          , 
A probe is a, can object that
has the property that when you


    ,          , 
change a wire it's attached to,
it types out a message.


    ,          , 
It's an easy thing to do.


    ,           , 
And then once we have that, of
course, the way you put the

 
     ,          ,  
probe on, the first thing it
does, it says, the current


    ,           ,  
value of the sum at time   is
  because I just noticed it.


    ,            , 
And the value of the carry
at time  , this is


     ,           ,
the time, is  .


     ,          , 
And then we go off and we
build some structure.


     ,          , 
Like, we can build a structure
here that says you have a


    ,          , 
half adder on input , input ,
sum, and carry.


    ,           , 
And we're going to set the
signal on input  to .


     ,          , 
We do some propagation.


    ,          , 
At time , which you could see
going through this thing if

 
    ,          , 
you wanted to, the new value
of sum became .


    ,          , 
And the thing says I'm done.


    ,          , 
That wasn't very interesting.


    ,          , 
But we can send it some
more signals.


    ,          , 
Like, we set signal on
input  to be one.


    ,          , 
And at that time if we
propagate, then it carried at


    ,          , 
, the carry becomes , and
at , the sum's new


    ,          ,  
value becomes  .


    ,           ,  
And you might want to work out
that, if you like, about the


    ,           , 
digital circuitry.

 
    ,           , 
It's true, and it works.


     ,          ,
And it's not very interesting.


    ,         , 
But that's the kind
of behavior we


    ,          , 
get out of this thing.


    ,            , 


      ,            , 
So what I've shown you right now
is a large scale picture,


      ,            , 
how you, at a bigger, big
scale, you implement an


      ,           ,
event driven simulation
of some sort.


     ,          ,  
And how you might organize it
to have nice hierarchical


     ,             , 
structure allowing you to build
abstract boxes that you

 
      ,           ,
can instantiate.


     ,          , 
But I haven't told you any of
the details about how this


     ,           , 
agenda and things
like that work.


     ,           , 
That we'll do next.


     ,           ,  
And that's going to involve
change and mutation of data


     ,            , 
and things like that.


     ,           , 
Are there any questions
now, before I go on?


     ,           , 


     ,           , 
Thank you.


     ,           ,  
Let's take a break.

 
     ,           , 


    ,          ,  
Well, we've been making
a simulation.


    ,           , 
And the simulation is an
event driven simulation where


    ,          , 
the objects in the world are the
objects in the computer.


    ,          ,  
And the changes of state that
are happening in the world in


    ,           , 
time are organized to be time
in the computer, so that if


    ,          , 
something happens after
something else in the world,


    ,            , 
then we have it happen after,
after the corresponding events


      ,           , 
happen in the same order
in the computer.


     ,           ,  
That's where we have
assignments, when

  
     ,            , 
we make that alignment.

 
     ,          , 
Right now I want to show you a
way of organizing time, which

 
    ,          ,  
is an agenda or priority queue,
it's sometimes called.

 
    ,           , 
We'll do some  we'll do
a little bit of just

 
    ,          , 
understanding what are the
things we need to be able to

 
    ,          , 
do to make agendas.

 
    ,          , 

 
    ,           , 
And so we're going to have  and
so right now over

 
     ,          , 
here, I'm going to write down
a bunch of primitive

 
    ,          , 
operations for manipulating
agendas.

 
    ,          , 
I'm not going to show you the
code for them because they're


    ,          ,  
all very simple, and you've got


    ,           , 
listings of all that anyway.


    ,          , 
So what do we have?


    ,          , 
We have things like make agenda
which produces a


    ,          , 
new agenda.


    ,          , 


    ,           , 
We can ask  we get the
current time of an agenda,


     ,          ,
which gives me a
number, a time.


    ,         , 

 
    ,           , 
We can get  we can ask whether
an agenda is empty,


     ,          ,  
empty agenda.


    ,            ,  


     ,           , 
And that produces either
a true or a false.


    ,          , 


    ,          , 
We can add an object
to an agenda.


    ,          , 


    ,          , 
Actually, what we add to an
agenda is an operation  an


    ,          , 
action to be done.


    ,           , 
And that takes a time, the
action itself, and the agenda

 
     ,           , 
I want to add it to.


     ,           , 


     ,           , 
That inserts it in
the appropriate


     ,           ,
place in the agenda.


     ,         , 
I can get the first item off an
agenda, the first thing I


    ,          ,
have to do, which is going
to give me an action.


    ,         , 


    ,          , 
And I can remove the first
item from an agenda.


    ,          , 
That's what I have to be able
to do with agendas.


    ,          ,  
That is a big complicated
mess.

 
    ,           , 


    ,          , 
From an agenda.


    ,          , 


    ,          ,  
Well, let's see how we can
organize this thing as a data


    ,           ,
structure a bit.


    ,         , 
Well, an agenda is going to be
some kind of list. And it's


    ,            , 
going to be a list that
I'm going to have


      ,           , 
to be able to modify.


     ,           , 
So we have to talk about
modifying of lists, because


     ,           , 
I'm going to add things to it,
and delete things from it, and

 
     ,          ,  
things like that.


    ,           , 
It's organized by time.


    ,          , 
It's probably good to keep
it in sorted order.


    ,          , 


    ,          , 
But sometimes there are lots of
things that happen at the


    ,          , 
same time  approximate
same time.


    ,          , 
What I have to do is say, group
things by the time at


    ,          ,  
which they're supposed
to happen.


    ,           , 
So I'm going to make an agenda
as a list of segments.


    ,          , 
And so I'm going to draw you a
data structure for an agenda,

 
    ,          , 
a perfectly reasonable one.


    ,          , 
Here's an agenda.


    ,          , 
It's a thing that begins
with a name.


    ,          , 


    ,          , 
I'm going to do it right now
out of list structure.


    ,          , 


    ,          , 
It's got a header.


    ,          , 
There's a reason
for the header.


    ,          , 
We're going to see
the reason soon.


    ,            , 

 
      ,           , 
And it will have a segment.


     ,           , 
It will have  it will be
a list of segments.


     ,           , 


     ,          , 
Supposing this agenda has two
segments, they're the car's  


    ,          , 
successive car's of this
list. Each segment is


    ,           , 
going to have a time  


     ,          , 


    ,          ,  
say for example,    


    ,           ,  
that says that the things
that happen in this


    ,           , 
segment are at time  .

 
    ,          , 
And what I'm going to have in
here is another data structure


    ,          , 
which I'm not going to describe,
which is a queue of


    ,          , 
things to do at time  .


    ,          , 
It's a queue.


    ,          , 
And we'll talk about
that in a second.


    ,          , 
But abstractly, the queue is
just a list of things to do at


    ,           ,  
a particular time.


     ,           ,  
And I can add things
to a queue.


    ,           , 
This is a queue.


    ,          ,
There's a time, there's
a segment.

 
    ,          ,


     ,          , 
Now, I may have another segment
in this agenda.


     ,           , 


     ,          , 
Supposing this is stuff that
happens at time  .


    ,          ,  
It has, of course, another
queue of things that are


    ,           , 
queued up to be done
at time  .


    ,          , 
Well, there are various
things I have to be


    ,          ,  
able to do to an agenda.


    ,            , 
Supposing I want to add to an
agenda another thing to be


     ,          ,  
done at time  .

  
    ,           ,  
Well, that's not very hard.

 
    ,           , 
I'm going to walk down
here, looking for the

 
    ,          , 
segment of time  .

 
    ,          , 
It is possible that there is
no segment of time  .

 
    ,          , 
We'll cover that case
in a second.

 
    ,          , 
But if I find a segment of time
 , then if I want to add

 
    ,          ,  
another thing to be done
at time  , I just

 
    ,           , 
increase that queue  

 
    ,          , 
"just increase" isn't such
an obvious idea.

 
    ,           , 
But I increase the things
to be done at that time.

 
     ,           ,  
Now, supposing I want to
add something to be


     ,            , 
done at time  .


     ,           , 
There is no segment
for time  .


     ,          , 
I'm going to have to create
a new segment.


    ,          , 
I want my time   segment
to exist between


    ,          , 
time   and time  .


    ,           , 
Well, that takes
a little work.


     ,          ,
I'm going to have
to do a CONS.


    ,         , 


    ,          , 
I'm going to have to make a
new element of the agenda

 
    ,          , 
list  list of segments.


    ,          ,  


    ,           ,  
I'm going to have to change.


    ,           , 
Here's change.


    ,          , 
I'm going to have to change
the CDR of the CDR of the


    ,           , 
agenda to point that a new CONS
of the new segment and


     ,          ,
the CDR of the CDR of the CDR of
the agenda, the CD D D DR.


    ,          , 
And this is going to have a
new segment now of time  


     ,           , 
with its own queue, which now
has one element in it.


     ,           , 

 
     ,          ,  
If I wanted to add something at
the end, I'm going to have


    ,            , 
to replace the CDR of this, of
this list with something.


     ,          ,  
We're going to have to change
that piece of data structure.


    ,           , 
So I'm going to need new
primitives for doing this.


    ,          , 
But I'm just showing you
why I need them.


    ,          , 
And finally, if I wanted to add
a thing to be done at time


    ,          , 
, I'm going to have to change
this one, because I'm going to


    ,          , 
have to add it in over here,
which is why I planned ahead


    ,          ,  
and had a header cell,
which has a place.


    ,            , 
If I'm going to change things,
I have to have

 
     ,          , 
places for the change.


    ,          ,  
I have to have a place
to make the change.


    ,             , 
If I remove things from the
agenda, that's not so hard.


      ,            , 
Removing them from the beginning
is pretty easy,


      ,            , 
which is the only case I have.
I can go looking for the


      ,           , 
first, the first segment.


     ,           , 
I see if it has a
non empty queue.


     ,           , 
If it has a non empty queue,
well, I'm going to delete one


     ,            ,  
element from the queue,
like that.


      ,            , 
If the queue ever becomes empty,
then I have to delete

 
     ,           , 
the whole segment.


     ,           , 
And then this, this changes
to point to here.


     ,            , 
So it's quite a complicated data
structure manipulation


      ,           , 
going on, the details of which
are not really very exciting.


     ,           , 
Now, let's talk about queues.


     ,           , 
They're similar.


     ,           , 
Because each of these agendas
has a queue in it.


     ,           , 
What's a queue?


     ,           , 


     ,           , 
A queue is going to have
the following primitive

 
     ,           , 
operations.


     ,           , 
To make a queue, this gives
me a new queue.


     ,           ,


     ,         , 
I'm going to have to be
able to insert into


    ,          , 
a queue a new item.


    ,          , 


    ,          , 
I'm going to have to be able
to delete from a queue the


    ,          , 
first item in the queue.


    ,          ,


    ,         , 
And I want to be able to get the
first thing in the queue

 
    ,          , 
from some queue.


    ,          , 
I also have to be able to test
whether a queue is empty.


    ,           , 


     ,           , 
And when you invent things like
this, I want you to be


     ,          , 
very careful to use the kinds
of conventions I use for


    ,          , 
naming things.


    ,          , 
Notice that I'm careful to say
these change something and


    ,          , 
that tests it.


    ,          ,
And presumably, I did the
same thing over here.


    ,         , 
OK, and there should be an
empty test over here.

 
    ,          , 
OK, well, how would
I make a queue?


    ,          , 
A queue wants to be something
I can add to at the end of,


    ,          , 
and pick up the thing
at the beginning of.


    ,          , 
I should be able to delete
from the beginning


    ,          , 
and add to the end.


    ,          ,  
Well, I'm going to show
you a very simple


    ,           , 
structure for that.


    ,          ,  
We can make this out
of CONSes as well.


    ,           , 
Here's a queue.


    ,          , 
It has  it has a queue header,
which contains two parts  

 
    ,          , 
a front pointer and
a rear pointer.


    ,           , 


     ,           ,   
And here I have a queue
with two items in it.


     ,            , 
The first item, I don't know,
it's perhaps a .


    ,          , 
And the second item, I don't
know, let's give it a .


    ,          , 


    ,          , 
The reason why I want two
pointers in here, a front


    ,          , 
pointer and a rear pointer,
is so I can add to the end


    ,          , 
without having to chase down
from the beginning.


    ,          , 
So for example, if I wanted to
add one more item to this

  
    ,           , 
queue, if I want to add on
another item to be worried

 
     ,          ,  
about later, all I have to do is
make a CONS, which contains

 
    ,           , 
that item, say a .

 
    ,          , 
That's for inserting
 into the queue.

 
    ,            ,  
Then I have to change this
pointer here to here.

 
      ,            , 
And I have to change this one
to point to the new rear.

 
     ,           , 

 
     ,          , 
If I wish to take the first
element of the queue, the

 
    ,          , 
first item, I just go chasing
down the front pointer until I

 
    ,          , 
find the first one
and pick it up.

 
    ,          , 
If I wish to delete the first
item from the queue,


    ,          , 
delete queue, all I do
is move the front


    ,          , 
pointer along this way.


    ,          ,  
The new front of the
queue is now this.


    ,           , 
So queues are very simple too.


    ,          , 
So what you see now is that I
need a certain number of new


    ,          , 
primitive operations.


    ,          , 
And I'm going to give
them some names.


    ,          , 
And then we're going to look
into how they work, and how


    ,          , 
they're used.

 
    ,          , 
We have set the CAR of some
pair, or a thing produced by


    ,          , 
CONSing, to a new value.


    ,           , 


     ,           , 
And set the CDR of a pair
to a new value.


     ,          , 


    ,          ,  
And then we're going to look
into how they work.


    ,           , 
I needed setting CAR over
here to delete the first


    ,           , 
element of the queue.


     ,          , 
This is the CAR, and
I had to set it.


    ,          ,  
I had to be able to set the
CDR to be able to move the

 
    ,            , 
rear pointer, or to be able to
increment the queue here.


     ,          , 
All of the operations I did were
made out of those that I


    ,          ,
just showed you on the, on
the last blackboard.


    ,         , 


    ,          , 
Good.


    ,           ,
Let's pause the time, and take
a little break then.


     ,         ,


    ,         , 
When we originally introduced
pairs made out of CONS, made


    ,          , 
by CONS, we only said a few
axioms about them, which were


    ,           ,  
of the form  

 
     ,           ,  
what were they  


    ,            ,  
for all X and Y, the CAR of the
CONS of X and Y is X and


     ,           , 
the CDR of the CONS of X and Y
is Y. Now, these say nothing


    ,          , 
about whether a CONS has an
identity like a person.


    ,          , 
In fact, all they say is
something sort of abstract,


    ,          , 
that a CONS is the parts
it's made out of.


    ,          , 
And of course, two things are
made out of the same parts,


    ,          , 
they're the same, at least
from the point of view of


    ,          , 
these axioms.


    ,          , 
But by introducing
assignment  

 
    ,          , 
in fact, mutable data is a kind
of assignment, we have a


    ,          , 
set CAR and a set CDR  


    ,          ,  
by introducing those, these
axioms no longer tell the


    ,           , 
whole story.


    ,          , 
And they're still true if
written exactly like this.


    ,          ,  
But they don't tell
the whole story.


    ,            , 
Because if I'm going to set a
particular CAR in a particular


     ,           , 
CONS, the questions are, well,
is that setting all CARs and


     ,           ,  
all CONSes of the same
two things or not?


     ,           , 
If I  if we use CONSes to make
up things like rational

 
    ,          , 
numbers, or things like  over
, supposing I had two


    ,          , 
three fourths.


    ,          , 
Are they the same one  


    ,          , 
or are they different?


    ,          , 
Well, in the case of numbers,
it doesn't matter.


    ,          , 
Because there's no meaning
to changing the


    ,          ,  
denominator of a number.


    ,           , 
What you could do is make a
number which has a different


    ,          , 
denominator.


    ,          , 
But the concept of changing a
number which has to have a

 
    ,          , 
different denominator is sort
of a very weird, and sort of


    ,          , 
not supported by what you
think of as mathematics.


    ,          , 
However, when these CONSes
represent things in the


    ,           , 
physical world, then changing
something like the CAR is like


     ,          , 
removing a piece of
the fingernail.


    ,          , 
And so CONSes have
an identity.


    ,           , 
Let me show you what I mean
about identity, first of all.


     ,           , 
Let's do some little
example here.


     ,          ,  
Supposing I define A to
the CONS of  and .


    ,           ,  

 
    ,           , 
Well, what that means, first of
all, is that somewhere in


    ,          , 
some environment I've made a
symbol A to have a value which


    ,          ,  
is a pair consisting of pointers
to a  and a pointer


    ,           , 
to a , just like that.


    ,          , 
Now, supposing I also say define
B to be the CONS  


    ,          , 


    ,          , 
it doesn't matter, but I like
it better, it's prettier  


    ,            , 
of A and A.


      ,            , 
Well, first of all, I'm using
the name A twice.


      ,            ,  
At this moment, I'm
going to think of

 
      ,            ,  
CONSes as having identity.


     ,            , 
This is the same one.


     ,           ,  
And so what that means is I make
another pair, which I'm


     ,            , 
going to call B. And it contains
two pointers to A. At


     ,           , 
this point, I have three
names for this object.


     ,           , 
A is its name.


     ,           , 
The CAR of B is its name.


     ,           , 
And the CDR of B is its name.


     ,           , 
It has several aliases,
they're called.


     ,           , 

  
     ,           , 
Now, supposing I do something
like set the CAR, the CAR of

 
     ,           , 
the CAR of B to .

 
     ,          , 

 
    ,          , 
What that means is I find the
CAR of B, that's this.

 
    ,           ,
I set the CAR of that to
be , changing this.

 
     ,         , 

 
    ,          , 
I've changed A. If I were
to ask what's the

 
    ,          , 
CAR of A  of A now?

 
    ,          , 
I would get out , even though
here we see that A was the

 
    ,          , 
CONS of  and .

 
    ,          ,  
I caused A to change
by changing B.


    ,           ,  
There is sharing here.


    ,           , 
That's sometimes what we want.


    ,          ,  
Surely in the queues and things
like that, that's


    ,           , 
exactly what we defined
our  organized our data


    ,           , 
structures to facilitate  


     ,           , 
sharing.


     ,           , 
But inadvertent sharing,
unanticipated interactions


     ,          ,
between objects, is the source
of most of the bugs that occur


    ,         , 
in complicated programs. So by
introducing this possibility

 
    ,          , 
of things having identity and
sharing and having multiple


    ,          , 
names for the same thing,
we get a lot of power.


    ,          , 
But we're going to pay
for it with lots of


    ,          , 
complexity and bugs.


    ,          , 


    ,          , 
So also, for example, if I just
looked at this just to


    ,          , 
drive that home, the CADR of
B, which has nothing to do


    ,          , 
with even the CAR of
B, apparently.


    ,          , 
The CADR of B, what's that?


    ,          , 
Take that CDR of B and now
take the CAR of that.

 
    ,          , 
Oh, that's  also.


    ,           , 
So I can have non local
interactions by sharing.


     ,           , 
And I have to be very
careful of that.


     ,           , 


     ,           , 
Well, so far, of course, it
seems I've introduced several


     ,          ,  
different assignment
operators  


    ,           , 
set, set CAR, set CDR. Well,
maybe I should just get rid of


    ,          , 
set CAR and set CDR. Maybe
they're not worthwhile.


    ,          , 
Well, the answer is that once
you let the camel's nose into


    ,          , 
the tent, the rest
of him follows.

 
    ,           , 


     ,          ,  
All I have to have is set, and
I can make all of the  all of


    ,           , 
the bad things that
can happen.


    ,          , 


    ,           , 
Let's play with that
a little bit.


     ,          , 
A couple of days ago, when we
introduced compound data, you


    ,          , 
saw Hal show you a definition
of CONS in terms


    ,          , 
of a message acceptor.


    ,          , 
I'm going to show you even
a more horrible thing, a


    ,           , 
definition of CONS in terms of
nothing but air, hot air.

 
     ,           , 
What is the definition of CONS,
of the old functional


     ,          , 
kind, in terms of purely
lambdic expressions,


    ,          , 
procedures?


    ,          , 


    ,           , 
Because I'm going to then modify
this definition to get


     ,          ,  
assignment to be only one kind
of assignment, to get rid of


    ,           , 
the set CAR and set CDR
in terms of set.


    ,          ,  
So what if I define CONS of X
and Y to be a procedure of one


    ,           , 
argument called a message
M, which calls that


    ,          , 
message on X and Y?

 
    ,          , 


    ,          ,  
This [? idea ?] was invented by
Alonzo Church, who was the


    ,           , 
greatest programmer of the
 th century, although he


    ,          , 
never saw a computer.


    ,          , 
It was done in the  s.


    ,           , 
He was a logician, I suppose
at Princeton at the time.


     ,           , 


     ,          , 
Define CAR of X to be the result
of applying X to that


    ,          ,   
procedure of two arguments, A
and D, which selects A. I will


    ,            , 
define CDR of X to be that
procedure, to be the result of

 
    ,          , 
applying X to that procedure of
A and D, which selects D.


    ,           , 
Now, you may not recognize this
as CAR, CDR, and CONS.


     ,          , 
But I'm going to demonstrate to
you that it satisfies the


    ,          , 
original axioms, just once.


    ,          , 
And then we're going to do
some playing of games.


    ,           ,
Consider the problem CAR of
CONS of, say,  and .


     ,         , 
Well, what is that?


    ,          ,  
It is the result of taking car
of the result of substituting


    ,           , 
 and  for X and Y
in the body of this.


    ,           , 
Well, that's easy enough.

 
     ,          , 
That's CAR of the result of
substituting into lambda of M,


    ,          , 
M of  and .


    ,          , 
Well, what this is, is the
result of substituting this


    ,          , 
object for X in the
body of that.


    ,          , 
So that's just lambda of M  


    ,          ,  
that's substituted, because
this object is being


    ,           , 
substituted for X, which is
the beginning of a list,


    ,          , 
lambda of M  


    ,           , 
M of  and , applied to that
procedure of A and D,


     ,          , 
which gives me A. Well, that's
the result of substituting

 
    ,          , 
this for M here.


    ,          , 
So that's the same thing
as lambda of A, D, A,


    ,          , 
applied to  and .


    ,          , 
Oh, well that's .


    ,          ,   
That's substituting  for A
and for  for D in A. So I


    ,             , 
don't need any data at all,
not even numbers.


     ,          , 
This is Alonso Church's hack.


    ,          , 


    ,          , 
Well, now we're going to do
something nasty to him.


    ,          , 
Being a logician, he
wouldn't like this.

   
    ,           , 
But as programmers, let's
look at the overhead.

  
     ,           , 
And here we go.

  
     ,           , 
I'm going to change the
definition of CONS.

  
     ,          , 
It's almost the same as Alonzo
Church's, but not quite.

  
    ,          ,  
What do we have here?

  
    ,            , 
The CONS of two arguments, X
and Y, is going to be that

  
     ,          ,  
procedure of one argument M,
which supplies M to X and Y as

  
    ,            ,  
before, but also to two
permissions, the permission to

  
     ,           ,  
set X to N and the permission
to set Y to N, given that I

  
    ,            , 
have an N.

  
     ,          ,  
So besides the things that
I had here in Church's

 
    ,            , 
definition, what I have is
that the thing that CONS

 
     ,          ,  
returns will apply its argument
to not just the

 
    ,             , 
values of the X and Y that the
CONS is made of, but also

 
      ,           ,
permissions to set X and
Y to new values.

 
     ,          , 

 
     ,           , 
Now, of course, just
as before, CAR

 
     ,          , 
is exactly the same.

 
    ,          , 
The CAR of X is nothing more
than applying X, as in

 
    ,          , 
Church's definition, to a
procedure, in this case, of

  
    ,          , 
four arguments, which selects
out the first one.

 
    ,          , 
And just as we did before, that
will be the value of X

 
    ,          , 
that was contained in the
procedure which is the result

 
    ,          , 
of evaluating this lambda
expression in the environment

 
    ,          , 
where X and Y are defined
over here.

 
    ,          , 

 
    ,          , 
That's the value of CONS.

 
    ,          , 
Now, however, the
exciting part.

 
    ,          , 
CDR, of course, is the same.

 
    ,          , 
The exciting part, set CAR and
set CDR. Well, they're nothing

  
    ,          ,  
very complicated anymore.

 
    ,             ,  
Set CAR of a CONS X to a new
value Y is nothing more than

 
      ,             , 
applying that CONS, which is
the procedure of four  the

 
      ,            , 
procedure of one argument which
applies its argument to

 
      ,           , 
four things, to a procedure
which is of four arguments  

 
     ,           , 
the value of X, the value of
Y, permission to set X, the

 
     ,           , 
permission to set Y  

 
     ,           , 
and using it  using that
permission to set

 
     ,           , 
X to the new value.

 
     ,           , 

  
     ,           , 
And similarly, set cdr
is the same thing.

 
     ,           , 

 
     ,           , 
So what you've just seen is that
I didn't introduce any

 
     ,            , 
new primitives at all.

 
      ,           , 
Whether or not I want to
implement it this way is a

 
     ,           , 
matter of engineering.

 
     ,           ,  
And the answer is of course I
don't implement it this way

 
     ,            , 
for reasons that have to
do with engineering.

 
     ,           , 
However in principle, logically,
once I introduced

 
     ,           ,
one assignment operator,
I've assigned  I've

  
     ,          ,
introduced them all.

 
     ,          , 

 
     ,           , 
Are there any questions?

 
     ,           ,  

 
     ,           ,  
Yes, David.

 
    ,           , 
AUDIENCE  I can follow you up
until you get  I can follow

 
    ,          , 
all of that.

 
    ,          , 
But when we bring in the
permissions, defining CONS in

 
    ,          , 
terms of the lambda N, I don't
follow where N gets passed.

 
    ,          ,  
PROFESSOR  Oh, I'm sorry.

  
    ,           , 
I'll show you.

 
    ,          , 
Let's follow it.

 
    ,          , 
Of course, we could do
it on the blackboard.

 
    ,           , 
It's not so hard.

 
     ,          , 
But it's also easy here.

 
    ,          , 
Supposing I wish to set cdr of
X to Y. See that right there.

 
    ,          , 
set cdr of X to Y. X is
presumably a CONS, a thing

 
    ,          , 
resulting from evaluating
CONS.

 
    ,          ,  
Therefore X comes from a place
over here, that that X is of

 
    ,           , 
the result of evaluating
this lambda expression.

  
    ,          , 
Right?

 
    ,           ,
That when I evaluated that
lambda expression, I evaluated

 
     ,          ,  
it in an environment
where the arguments

 
     ,            , 
to CONS were defined.

 
     ,          , 

 
    ,          , 
That means that as free
variables in this lambda

 
    ,          , 
expression, there is the  there
are in the frame,

 
    ,          , 
which is the parent frame of
this lambda expression, the

 
    ,          , 
procedure resulting from this
lambda expression, X and Y

 
    ,          , 
have places.

  
    ,          , 
And it's possible to set them.

 
    ,          , 
I set them to an N, which
is the argument of the

 
    ,          ,  
permission.

 
    ,           , 
The permission is a procedure
which is passed to M, which is

 
    ,          , 
the argument that the CONS
object gets passed.

 
    ,          ,  
Now, let's go back here in the
set cdr The CONS object, which

 
    ,           , 
is the first argument
of set cdr

 
    ,          , 
gets passed an argument.

 
    ,            , 

 
      ,           , 
That  there's a procedure of
four things, indeed, because

  
     ,           , 
that's the same thing as this M
over here, which is applied

 
     ,           , 
to four objects.

 
     ,          , 
The object over here, SD, is,
in fact, this permission.

 
    ,          , 

 
    ,          , 
When I use SD, I apply
it to Y, right there.

 
    ,          , 

 
    ,          , 
So that comes from this.

 
    ,          , 
AUDIENCE  So what do you  

 
    ,          , 
PROFESSOR  So to finish that,
the N that was here is the Y

 
    ,          , 
which is here.

  
    ,          , 
How's that?

 
    ,          , 
AUDIENCE  Right, OK.

 
    ,           , 
Now, when you do a set cdr,
X is the value the

 
     ,          , 
CDR is going to become.

 
    ,          ,
PROFESSOR  The X over here.

 
    ,         ,  
I'm sorry, that's not true.

 
    ,           , 
The X is  set cdr has
two arguments  

 
    ,          , 
The CONS I'm changing and the
value I'm changing it to.

 
    ,          , 
So you have them backwards,
that's all.

 
    ,           , 

 
     ,           ,   
Are there any other questions?


     ,             , 


     ,           , 
Well, thank you.


     ,           , 
It's time for lunch.


     ,          , 
        ,              , 


      ,            , 
PROFESSOR  Well, last time Gerry
really let the cat out


      ,            , 
of the bag.


      ,            , 
He introduced the idea
of assignment.


      ,            , 
Assignment and state.


      ,            , 


      ,            ,  
And as we started to see, the
implications of introducing


      ,             , 
assignment and state into the
language are absolutely


      ,            , 
frightening.

 
      ,            , 
First of all, the substitution
model of


      ,            ,
evaluation breaks down.


      ,           , 
And we have to use this much
more complicated environment


      ,            , 
model and this very mechanistic
thing with


      ,            , 
diagrams, even to say what
statements in the programming


      ,            , 
language mean.


      ,             , 
And that's not a mere
technical point.


       ,            ,  
See, it's not that we had this
particular substitution model


      ,             ,  
and, well, it doesn't quite
work, so we have to do


      ,             , 
something else.

 
      ,            , 
It's that nothing like the
substitution model can work.


      ,           , 
Because suddenly, a variable
is not just something that


     ,           ,  
stands for a value.


     ,            , 
A variable now has to somehow
specify a place


     ,           , 
that holds a value.


     ,           ,
And the value that's in
that place can change.


     ,           , 


      ,           , 
Or for instance, an expression
like f of x might have a side


     ,            , 
effect in it.


      ,           , 
So if we say f of x and it has
some value, and then later we

 
     ,           , 
say f of x again, we might
get a different value


     ,           , 
depending on the order.


     ,           , 
So suddenly, we have to think
not only about values but


     ,           ,  
about time.


     ,            , 


     ,            ,  
And then things like pairs are
no longer just their CARs and


      ,             , 
their CDRs.


      ,            , 
A pair now is not quite its CAR
and its CDR. It's rather


      ,            ,
its identity.


      ,          , 
So a pair has identity.

 
     ,           ,  
It's an object.


     ,            , 


     ,           , 
And two pairs that have the same
CAR and CDR might be the


     ,           , 
same or different, because
suddenly we have to worry


     ,            ,  
about sharing.


      ,            , 


     ,           , 
So all of these things enter
as soon as we introduce


     ,            , 
assignment.


      ,           , 
See, this is a really far cry
from where we started with


     ,           ,  
substitution.

 
     ,             , 
It's a technically harder way
of looking at things because


      ,           , 
we have to think more
mechanistically about our


     ,           , 
programming language.


     ,           , 
We can't just think about
it as mathematics.


     ,           , 
It's philosophically harder,
because suddenly there are all


     ,            ,  
these funny issues about what
does it mean that something


      ,             ,  
changes or that two things
are the same.


      ,             , 
And also, it's programming
harder, because as Gerry


      ,            ,  
showed last time, there are all
these bugs having to do


      ,            , 
with bad sequencing and aliasing
that just don't exist

 
     ,           , 
in a language where we don't
worry about objects.


     ,           ,
Well, how'd we get
into this mess?


     ,          ,  
Remember what we did, the reason
we got into this is


     ,            , 
because we were looking to
build modular systems. We


     ,            , 
wanted to build systems that
fall apart into chunks that


      ,           , 
seem natural.


     ,           , 
So for instance, we want to take
a random number generator


     ,           , 
and package up the state of that
random number generator


     ,           , 
inside of it so that we can
separate the idea of picking


     ,           , 
random numbers from the general
Monte Carlo strategy

 
     ,           , 
of estimating something and
separate that from the


     ,            ,  
particular way that you work
with random numbers in that


      ,             , 
formula developed by
Cesaro for pi.


      ,           ,  
And similarly, when we go off
and construct some models of


     ,            , 
things, if we go off and model
a system that we see in the


     ,           ,  
real world, we'd like our
program to break into natural


     ,            , 
pieces, pieces that mirror the
parts of the system that we


     ,           ,  
see in the real world.


     ,            , 
So for example, if we look at
a digital circuit, we say,


     ,           , 
gee, there's a circuit and
it has a piece and

 
     ,           , 
it has another piece.


     ,            ,  


      ,            , 
And these different pieces
sort of have identity.


     ,           , 
They have state.


     ,           , 
And the state sits
on these wires.


     ,           ,  
And we think of this piece as
an object that's different


     ,            , 
from that as an object.


     ,           ,  
And when we watch the system
change, we think about a


     ,            ,  
signal coming in here and
changing a state that might be


     ,            , 
here and going here and
interacting with a state that

 
     ,            , 
might be stored there,
and so on and so on.


      ,            , 


      ,           , 
So what we'd like is we'd like
to build in the computer


     ,           , 
systems that fall into pieces
that mirror our view of


     ,           , 
reality, of the way that the
actual systems we're modeling


     ,           ,
seem to fall into pieces.


     ,          , 
Well, maybe the reason that
building systems like this


     ,           ,  
seems to introduce such
technical complications has


     ,            , 
nothing to do with computers.


     ,           , 
See, maybe the real reason that
we pay such a price to

  
     ,           , 
write programs that mirror our
view of reality is that we

 
     ,           , 
have the wrong view
of reality.

 
     ,           , 
See, maybe time is just
an illusion, and

 
     ,            , 
nothing ever changes.

 
      ,           , 
See, for example, if I take this
chalk, and we say, gee,

 
     ,           , 
this is an object and
it has a state.

 
     ,           , 
At each moment it has a position
and a velocity.

 
     ,            , 
And if we do something,
that state can change.

 
      ,            , 

 
      ,            ,  
But if you studied any
relativity, for instance, you

 
      ,             , 
know that you don't think of
the path of that chalk as


      ,           , 
something that goes on
instant by instant.


     ,           , 
It's more insightful to think
of that whole chalk's


     ,           ,  
existence as a path
in space time.


     ,            ,  
that's all splayed out.


     ,            , 
There aren't individual
positions and velocities.


     ,           , 
There's just its unchanging
existence in space time.


     ,           ,  
Similarly, if we look at this
electrical system, if we


     ,            , 
imagine this electrical system
is implementing some sort of


     ,           , 
signal processing system, the
signal processing engineer who

 
     ,           ,  
put that thing together doesn't
think of it as, well,


     ,            , 
at each instance there's
a voltage coming in.


     ,           , 
And that translates
into something.


     ,           ,  
And that affects the state over
here, which changes the


     ,            , 
state over here.


     ,           ,  
Nobody putting together a
signal processing system


     ,             , 
thinks about it like that.


      ,           , 
Instead, you say there's
this signal that's


     ,           ,  
splayed out over time.


     ,             ,  
And if this is acting as a
filter, this whole thing

 
      ,             , 
transforms this whole thing for
some sort of other output.


      ,           , 
You don't think of it as what's
happening instant by


     ,           , 
instant as the state
of these things.


     ,           , 
And somehow you think of this
box as a whole thing, not as


     ,            , 
little pieces sending messages
of state to each other at


      ,           , 
particular instants.


     ,           , 


     ,            , 
Well, today we're going to
look at another way to


      ,           , 
decompose systems that's more
like the signal processing


     ,           ,  
engineer's view of the world
than it is like thinking about

 
     ,            , 
objects that communicate
sending messages.


     ,           , 
That's called stream
processing.


     ,           , 


     ,            , 
And we're going to start by
showing how we can make our


      ,            , 
programs more uniform and see
a lot more commonality if we


      ,           , 
throw out of these programs
what you might say is an


     ,           , 
inordinate concern with
worrying about time.


     ,           , 
Let me start by comparing
two procedures.


     ,           , 


     ,           , 
The first one does this.

 
     ,           , 
We imagine that there's
a tree.


     ,            ,  


      ,            ,
Say there's a tree
of integers.


     ,          ,
It's a binary tree.


     ,          ,  


     ,             , 
So it looks like this.


      ,           , 
And there's integers in
each of the nodes.


     ,           ,   
And what we would like to
compute is for each odd number


     ,             , 
sitting here, we'd like to find
the square and then sum


     ,           , 
up all those squares.

 
     ,           , 
Well, that should be a familiar
kind of thing.


     ,            , 
There's a recursive strategy
for doing it.


      ,            , 
We look at each leaf, and
either it's going to


      ,            , 
contribute the square of
the number if it's odd


      ,            , 
or   if it's even.


      ,           , 
And then recursively, we can say
at each tree, the sum of


     ,           , 
all of them is the sum coming
from the right branch and the


     ,           , 
left branch, and recursively
down through the nodes.


     ,            , 
And that's a familiar way of
thinking about programming.


      ,           , 
Let's actually look at
that on the slide.

 
     ,           , 
We say to sum the odd squares
in a tree, well, there's a


     ,            , 
test. Either it's a leaf node,
and we're going to check to


      ,           , 
see if it's an integer, and then
either it's odd, in which


     ,           , 
we take the square,
or else it's  .


     ,            , 
And then the sum of the whole
thing is the sum coming from


      ,           , 
the left branch and
the right branch.


     ,           , 


     ,           , 
OK, well, let me contrast that
with a second problem.


     ,           , 
Suppose I give you an integer
n, and then some function to


     ,           , 
compute of the first of each
integer in  through n.

 
     ,            , 
And then I want to collect
together in a list all those


      ,            ,  
function values that satisfy
some property.


      ,             , 
That's a general
kind of thing.


      ,            , 
Let's say to be specific, let's
imagine that for each


      ,           , 
integer, k, we're
going to compute


     ,           , 
the k Fibonacci number.


     ,           , 
And then we'll see which of
those are odd and assemble


     ,           ,  
those into a list.


     ,             , 
So here's a procedure
that does that.


      ,           , 

 
     ,           , 
Find the odd Fibonacci numbers
among the first n.


     ,           , 
And here is a standard loop the
way we've been writing it.


     ,            ,  
This is a recursion.


      ,            , 
It's a loop on k, and says if
k is bigger than n, it's the


     ,           , 
empty list. Otherwise we compute
the k th Fibonacci


     ,            , 
number, call that f.


      ,           , 
If it's odd, we CONS it on
to the list starting


     ,           , 
with the next one.


     ,            , 
And otherwise, we just
take the next one.


      ,           ,   
And this is the standard
way we've been

  
     ,             ,   
writing iterative loops.

 
     ,             ,  
And we start off calling
that loop with .

 
     ,            ,  
OK, so there are
two procedures.

 
     ,            ,  
Those procedures look
very different.

 
     ,            , 
They have very different
structures.

 
     ,           , 
Yet from a certain point of
view, those procedures are

 
     ,          , 
really doing very much
the same thing.

 
    ,          , 
So if I was talking like a
signal processing engineer,

 
    ,          , 
what I might say is that the
first procedure enumerates the

 
    ,          , 
leaves of a tree.

 
    ,          , 


    ,          , 
And then we can think of a
signal coming out of that,


    ,          , 
which is all the leaves.


    ,          , 
We'll filter them to see which
ones are odd, put them through


    ,          , 
some kind of filter.


    ,          ,   
We'll then put them through
a kind of transducer.


    ,            , 
And for each one of those
things, we'll take the square.


    ,          ,  


    ,           , 
And then we'll accumulate
all of those.


    ,            , 
We'll accumulate them by
sticking them together with

 
      ,           , 
addition starting from  .


     ,           , 


     ,           , 
That's the first program.


     ,           , 
The second program, I can
describe in a very, very


     ,          , 
similar way.


    ,          , 
I'll say, we'll enumerate the
numbers on this interval, for


    ,          ,  
the interval  through n.


    ,           ,  


    ,           ,  
We'll, for each one, compute the
Fibonacci number, put them


    ,           , 
through a transducer.

 
    ,          , 
We'll then take the result
of that, and we'll


    ,          ,
filter it for oddness.


    ,         , 
And then we'll take those and
put them into an accumulator.


    ,          , 
This time we'll build up a list,
so we'll accumulate with


    ,          , 
CONS starting from
the empty list.


    ,           , 
So this way of looking at the
program makes the two seem


     ,          ,  
very, very similar.


    ,           , 
The problem is that that
commonality is completely


    ,          ,  
obscured when we look at the
procedures we wrote.


    ,            , 
Let's go back and look at some
odd squares again, and say

 
     ,           ,  
things like, where's
the enumerator?


     ,            , 
Where's the enumerator
in this program?


     ,          , 
Well, it's not in one place.


    ,          , 
It's a little bit in this
leaf node test,


    ,          , 
which is going to stop.


    ,          , 
It's a little bit in the
recursive structure of the


    ,           , 
thing itself.


     ,          , 


    ,          , 
Where's the accumulator?


    ,          , 
The accumulator isn't
in one place either.

 
    ,          , 
It's partly in this   and
partly in this plus.


    ,          , 
It's not there as a thing
that we can look at.


    ,           , 
Similarly, if we look at odd
Fibs, that's also, in some


     ,          , 
sense, an enumerator and
an accumulator, but


    ,          , 
it looks very different.


    ,          , 
Because partly, the enumerator
is here in this greater than


    ,          ,  
sign in the test. And partly
it's in this whole recursive


    ,           , 
structure in the loop, and
the way that we call it.


    ,          ,  
And then similarly, that's also
mixed up in there with


    ,            ,  
the accumulator, which is partly
over there and partly

 
     ,            ,  
over there.


     ,            , 
So these very, very natural
pieces, these very natural


     ,          , 
boxes here don't appear in our
programs. Because they're kind


    ,          , 
of mixed up.


    ,          , 
The programs don't chop things
up in the right way.


    ,          , 


    ,          , 
Going back to this fundamental
principle of computer science


    ,          , 
that in order to control
something, you need the name


    ,          , 
of it, we don't really have
control over thinking about


    ,           ,  
things this way because we don't
have our hands in them

 
     ,           ,  
explicitly.


    ,           , 
We don't have a good language
for talking about them.


    ,          , 
Well, let's invent an
appropriate language in which


    ,          ,
we can build these pieces.


    ,         , 
The key to the language is these
guys, is what is these


    ,           , 
things I called signals?


     ,          ,  
What are these things that
are flying on the


    ,           , 
arrows between the boxes?


    ,          , 


    ,           , 
Well, those things are going to
be data structures called

 
     ,           , 
streams. That's going
to be the key to


     ,           , 
inventing this language.


     ,           ,  
What's a stream?


     ,            , 
Well, a stream is, like
anything else, a data


     ,          , 
abstraction.


    ,          ,   
So I should tell you what
its selectors and


    ,            , 
constructors are.


    ,           ,
For a stream, we're going to
have one constructor that's


     ,         ,
called CONS stream.


    ,         , 

 
    ,          ,  
CONS stream is going to put two
things together to form a


    ,           ,  
thing called a stream.


    ,           , 
And then to extract things from
the stream, we're going


    ,          ,  
to have a selector called
the head of the stream.


    ,           ,       ,            ,
And so at this point, you're
now certified programmers  


      ,            ,  
it says.


       ,             , 
However, I suppose what we did
is we, aah, sort of got you a


      ,            ,  
little bit of into
an easy state.


      ,             , 
Here, you still believe it's
possible that this might be

 
      ,            , 
programming in BASIC or Pascal
with just a funny syntax.


      ,            , 
Today, that illusion  


      ,            ,
or you can no longer support
that belief.


      ,           , 
What we're going to do
today is going to


      ,            , 
completely smash that.


      ,           , 
So let's start out by writing
a few programs on the


     ,           ,
blackboard that have a lot in
common with each other.


     ,          , 
What we're going to do is try to
make them abstractions that


     ,           , 
are not ones that are easy to
make in most languages.


     ,           ,  
Let's start with some very
simple ones that you can make

 
     ,            ,  
in most languages.


     ,            , 
Supposing I want to write the
mathematical expression which


     ,           ,  
adds up a bunch of integers.


     ,            , 
So if I wanted to write down
and say the sum from i


     ,           , 
equal a to b on i.


     ,           , 
Now, you know that that's an
easy thing to compute in a


     ,           , 
closed form for it, and I'm
not interested in that.


     ,           , 
But I'm going to write
a program that


     ,           , 
adds up those integers.


     ,           , 
Well, that's rather easy to do
to say I want to define the

 
     ,            , 
sum of the integers from
a to b to be  


      ,           , 
well, it's the following
two possibilities.


     ,           , 
If a is greater than b, well,
then there's nothing to be


     ,           ,
done and the answer is zero.


     ,          , 
This is how you're going to
have to think recursively.


     ,           , 
You're going to say if I have
an easy case that I know the


     ,           , 
answer to, just write it down.


     ,           , 
Otherwise, I'm going to try to
reduce this problem to a


     ,           ,  
simpler problem.


     ,            ,   
And maybe in this case, I'm
going to make a subproblem of

 
     ,             , 
the simpler problem and then
do something to the result.


     ,           , 
So the easiest way to do this
is say that I'm going to add


     ,           , 
the index, which in this case is
a, to the result of adding


     ,           , 
up the integers from
a plus  to b.


     ,            ,


      ,           , 
Now, at this point, you should
have no trouble looking at


      ,            , 
such a definition.


      ,            , 
Indeed, coming up with such a
thing might be a little hard


      ,           , 
in synthesis, but being able
to read it at this point


     ,           , 
should be easy.

 
     ,           , 
And what it says to you is,
well, here is the subproblem


     ,           , 
I'm going to solve.


     ,           , 
I'm going to try to add up the
integers, one fewer integer


     ,           , 
than I added up for the
the whole problem.


     ,           , 
I'm adding up the one fewer one,
and that subproblem, once


     ,           , 
I've solved it, I'm going to add
a to that, and that will


     ,           , 
be the answer to this problem.


     ,           ,
And the simplest case, I don't
have to do any work.


     ,          , 
Now, I'm also going to write
down another simple one just


     ,           ,
like this, which is the
mathematical expression, the

 
     ,          , 
sum of the square from
i equal a to b.


     ,           , 
And again, it's a very
simple program.


     ,           , 


     ,           , 
And indeed, it starts
the same way.


     ,           , 


     ,           , 
If a is greater than b, then
the answer is zero.


     ,           , 
And, of course, we're beginning
to see that there's


     ,           , 
something wrong with me writing
this down again.


     ,           , 
It's the same program.


     ,           , 
It's the sum of the square of a
and the sum of the square of

 
     ,           ,
the increment and b.


     ,           , 


      ,           ,  
Now, if you look at these
things, these programs are


     ,            , 
almost identical.


     ,           , 
There's not much to
distinguish them.


     ,            , 
They have the same first clause
of the conditional and


      ,            , 
the same predicate and the
same consequence, and the


      ,            , 
alternatives are very
similar, too.


      ,           , 
They only differ by the fact
that where here I have a,


     ,           ,
here, I have the square of a.

 
     ,          ,  
The only other difference, but
this one's sort of unessential


     ,            , 
is in the name of this procedure
is sum int, whereas


     ,           , 
the name of the procedure
is sum square.


     ,           , 
So the things that vary
between these


     ,           , 
two are very small.


     ,           ,  
Now, wherever you see yourself
writing the same thing down


     ,            , 
more than once, there's
something wrong, and you


     ,            , 
shouldn't be doing it.


      ,           , 
And the reason is not because
it's a waste of time to write


     ,           , 
something down more than once.

 
     ,            , 
It's because there's some idea
here, a very simple idea,


      ,           , 
which has to do with the
sigma notation  


     ,           , 
this much  


     ,            ,
not depending upon what
it is I'm adding up.


      ,           ,  
And I would like
to be able to  


      ,             , 
always, whenever trying to make
complicated systems and


      ,            ,
understand them, it's crucial
to divide the things up into


      ,          ,  
as many pieces as I can, each
of which I understand


     ,            ,  
separately.


     ,            ,  
I would like to understand the
way of adding things up

  
     ,            , 
independently of what it is I'm
adding up so I can do that

 
     ,           , 
having debugged it once and
understood it once and having

 
     ,           ,  
been able to share that among
many different uses of it.

 
     ,            , 
Here, we have another example.

 
     ,            ,  
This is Leibnitz's formula
for finding pi over .

 
      ,            , 
It's a funny, ugly mess.

 
     ,           , 
What is it?

 
     ,            , 
It's something like  over 
times  plus  over  times 

 
      ,           , 
plus  over  times  plus  

 
     ,           , 
and for some reason, things
like this tend to have

 
     ,            , 
interesting values
like pi over .


      ,            , 
But what do we see here?


      ,            , 
It's the same program or almost
the same program.


      ,            , 
It's a sum.


      ,           , 
So we're seeing the figure
notation, although over here,


     ,           , 
we're dealing with incrementing
by , so it's a


     ,            , 
slightly different problem,
which means that over here, I


      ,           , 
have to change a by , as
you see right over here.


     ,           , 
It's not by .


     ,           , 
The other thing, of course,
is that the thing that's

 
     ,           , 
represented by square in the
previous sum of squares, or a


     ,           ,  
when adding up the integers.


     ,            ,  
Well, here, I have a different
thing I'm adding up, a


     ,            , 
different term, which is 
over a times a plus .


     ,           ,
But the rest of this program
is identical.


     ,          , 


     ,            , 
Well, any time we have a bunch
of things like this that are


      ,           ,  
identical, we're going to have
to come up with some sort of


     ,            ,
abstraction to cover them.


     ,          , 
If you think about this, what
you've learned so far is the

 
     ,            , 
rules of some language, some
primitive, some means of


      ,            , 
combination, almost all
of them, the means of


      ,            , 
abstraction, almost
all of them.


      ,           , 
But what you haven't learned is
common patterns of usage.


     ,           , 
Now, most of the time, you learn
idioms when learning a


     ,           , 
language, which is a common
pattern that mean things that


     ,            , 
are useful to know in a flash.


      ,           , 
And if you build a great number
of them, if you're a


     ,           , 
FORTRAN programmer, of course,
everybody knows how to  


     ,           , 
what do you do, for example, to
get an integer which is the

 
     ,           , 
biggest integer in something.


     ,           ,  
It's a classic thing.


     ,            , 
Every FORTRAN programmer
knows how to do that.


     ,           , 
And if you don't know that,
you're in real hot water


     ,           , 
because it takes a long
time to think it out.


     ,           , 
However, one of the things you
can do in this language that


     ,           ,  
we're showing you is not only
do you know something like


     ,            , 
that, but you give the knowledge
of that a name.


     ,            ,  
And so that's what we're going
to be going after right now.


      ,            , 

 
     ,           , 
OK, well, let's see what these
things have in common.


     ,           , 


     ,            , 
Right over here we have what
appears to be a general


      ,            , 
pattern, a general pattern which
covers all of the cases


      ,            ,  
we've seen so far.


      ,            ,  
There is a sum procedure,
which is being defined.


     ,            , 
It has two arguments, which
are a lower bound


     ,           , 
and an upper bound.


     ,           , 
The lower bound is tested to
be greater than the upper


     ,           , 
bound, and if it is greater,
then the result is zero.

 
     ,           , 
Otherwise, we're going to do
something to the lower bound,


     ,           , 
which is the index of the
conversation, and add that


     ,            , 
result to the result of
following the procedure


      ,           ,  
recursively on our lower bound
incremented by some next


     ,            , 
operation with the same upper
bound as I had before.


     ,           , 


     ,           , 
So this is a general pattern,
and what I'd like to do is be


     ,            , 
able to name this general
pattern a bit.


      ,            , 
Well, that's sort of easy,
because one of the things I'm


      ,            , 
going to do right now is  
there's nothing very special

 
      ,           , 
about numbers.


     ,           , 
Numbers are just one
kind of data.


     ,           , 
It seems to me perfectly
reasonable to give all sorts


     ,           , 
of names to all kinds of data,
for example, procedures.


     ,           , 
And now many languages allow you
have procedural arguments,


     ,           , 
and right now, we're
going to talk


     ,           , 
about procedural arguments.


     ,           , 
They're very easy
to deal with.


     ,           ,  
And shortly, we'll do some
remarkable things that are not


     ,            , 
like procedural arguments.

 
     ,           , 
So here, we'll define
our sigma notation.


     ,           , 
This is called sum and it takes
a term, an A, a next


     ,            , 
term, and B as arguments.


      ,           , 
So it takes four arguments,
and there was nothing


     ,           , 
particularly special about me
writing this in lowercase.


     ,           ,  
I hope that it doesn't confuse
you, so I'll write it in


     ,            , 
uppercase right now.


     ,          , 
The machine doesn't care.


    ,          , 


    ,          , 
But these two arguments
are different.

 
    ,          , 
These are not numbers.


    ,          ,  
These are going to be procedures
for computing


    ,           , 
something given a number.


    ,          , 
Term will be a procedure which,
when given an index,


    ,          , 
will produce the value of
the term for that index.


    ,          , 
Next will be given an
index, which will


    ,          ,  
produce the next index.


    ,           ,   
This will be for counting.


    ,            , 
And it's very simple.


    ,           , 

  
     ,          ,  
It's exactly what you see.

 
    ,           , 
If A is greater than B,
then the result is  .

 
    ,           , 
Otherwise, it's the sum of term
applied to A and the sum

 
     ,           , 
of term, next index.

 
     ,          , 

 
    ,          , 
Let me write it this way.

 
    ,          , 

 
    ,          , 
Now, I'd like you to see
something, first of all.

 
    ,          , 
I was writing here, and
I ran out of space.

 
    ,          , 
What I did is I start indenting
according to the

 
    ,          ,  
Pretty printing rule, which says
that I align all of the


    ,           , 
arguments of the procedure
so I can see


    ,          ,  
which ones go together.


    ,           , 
And this is just something I do
automatically, and I want


    ,          , 
you to learn how to do that,
too, so your programs can be


    ,          , 
read and understood.


    ,          , 


    ,          , 
However, what do we have here?


    ,           , 
We have four arguments  the
procedure, the lower index  


     ,           , 
lower bound index  

 
     ,           ,  
the way to get the next index,
and the upper bound.


     ,           , 
What's passed along on the
recursive call is indeed the


    ,          , 
same procedure because I'm going
to need it again, the


    ,          , 
next index, which is using the
next procedure to compute it,


    ,          ,
the procedure for computing
next, which I also have to


    ,         , 
have separately, and
that's different.


    ,          , 
The procedure for computing
next is different from the


    ,           , 
next index, which is the result
of using next on the


     ,          , 
last index.


    ,          , 
And I also have to pass
along the upper bound.

 
    ,          ,  


    ,           , 
So this captures both of these
and the other nice program


    ,          , 
that we are playing with.


    ,          , 
So using this, we can write down
the original program as


    ,          , 
instances of sum very simply.


    ,           , 


     ,          , 
A and B. Well, I'm going to
need an identity procedure


    ,          , 
here because ,ahh, the sum of
the integers requires me to in


    ,          ,  
this case compute a term for
every integer, but the term


    ,           , 
procedure doesn't want to do
anything to that integer.

 
    ,          , 
So the identity procedure on A
is A or X or whatever, and I


    ,          , 
want to say the sum of using
identity of the term procedure


    ,          ,  
and using A as the initial
index and the incrementer


    ,            ,
being the way to get the next
index and B being the high


     ,          , 
bound, the upper bound.


     ,          ,  
This procedure does exactly
the same as the sum of the


    ,           , 
integers over here, computes
the same answer.


    ,          , 


    ,          , 
Now, one thing you should see,
of course, is that there's


    ,          , 
nothing very special over here
about what I used as the

 
    ,          , 
formal parameter.


    ,          , 
I could have, for example,
written this


    ,          , 
X. It doesn't matter.


    ,          , 
I just wanted you to see that
this name does not conflict


    ,          , 
with this one at all.


    ,          , 
It's an internal name.


    ,           ,  
For the second procedure here,
the sum of the squares, it's


     ,           , 
even a little bit easier.


    ,          , 


    ,          , 
And what do we have to do?

 
    ,           , 
Nothing more than add up the
squares, this is the procedure


     ,           , 
that each index will be given,
will be given each  


     ,           , 
yes.


     ,           , 
Each index will have this done
to it to get the term.


     ,          , 
That's the thing that maps
against term over here.


    ,          , 
Then I have A as the lower
bound, the incrementer as the


    ,          , 
next term method, and B
as the upper bound.


    ,          , 


    ,          ,  
And finally, just for the thing
that we did about pi


    ,           , 
sums, pi sums are sort of  

 
    ,          , 
well, it's even easier to think
about them this way


    ,          , 
because I don't have to think.


    ,          , 
What I'm doing is separating the
thing I'm adding up from


    ,          , 
the method of doing
the addition.


    ,          ,  
And so we have here, for
example, pi sum A B


    ,           , 
of the sum of things.


    ,           , 
I'm going to write the terms
procedure here explicitly


     ,           , 
without giving it a name.


     ,           ,
This is done anonymously.


     ,          , 
I don't necessarily have to give
a name to something if I

 
     ,          , 
just want to use it once.


    ,          ,  
And, of course, I can write
sort of a expression that


    ,           ,
produces a procedure.


    ,         , 
I'm going to write the Greek
lambda letter here instead of


    ,          , 
L A M B D A in general to avoid
taking up a lot of space


    ,          , 
on blackboards.


    ,          , 
But unfortunately,
we don't have


    ,          , 
lambda keys on our keyboards.


    ,          , 
Maybe we can convince our
friends in the computer


    ,          ,  
industry that this
is an important.

 
    ,           , 
Lambda of i is the quotient of 
and the product of i and the


    ,          ,  
sum of i , starting at a with
the way of incrementing being


    ,            ,
that procedure of an index i,
which adds i to , and b being


     ,          ,
the upper bound.


     ,         , 


    ,          , 
So you can see that this
notation, the invention of the


    ,          , 
procedure that takes a
procedural argument, allows us


    ,          , 
to compress a lot of these
procedures into one thing.


    ,          , 
This procedure, sums, covers
a whole bunch of ideas.


    ,          , 
Now, just why is
this important?

  
    ,          , 
I tried to say before that it
helps us divide a problem into

 
    ,          , 
two pieces, and indeed, it does,
for example, if someone

 
    ,          , 
came up with a different way of
implementing this, which,

 
    ,           ,  
of course, one might.

 
     ,           , 
Here, for example, an iterative

 
    ,          , 
implementation of sum.

 
    ,          ,  

 
    ,           , 
Iterative implementation for
some reason might be better

 
    ,            , 
than the recursive
implementation.

 
      ,           , 

 
     ,           , 
But the important thing is
that it's different.


     ,           , 
Now, supposing I had written my
program this way that you


     ,          , 
see on the blackboard
on the left.


    ,          , 
That's correct, the left.


    ,          , 
Well, then if I want to change
the method of addition, then


    ,          ,  
I'd have to change
each of these.


    ,            , 
Whereas if I write them like
this that you see here, then


     ,          , 
the method by which I did the
addition is encapsulated in


    ,          , 
the procedure sum.


    ,          , 
That decomposition allows me
to independently change one

 
    ,          , 
part of the program and prove
it perhaps without changing


    ,          , 
the other part that was
written for some


    ,          , 
of the other cases.


    ,           ,


     ,         ,  
Thank you.


    ,           , 
Are there any questions?


    ,          , 
Yes, sir.


    ,          , 
AUDIENCE  Would you go over
next A and next again on  


    ,          , 
PROFESSOR  Yes.


    ,          , 
It's the same problem.

 
    ,          ,  
I'm sure you're going to  


    ,           , 
you're going to have
to work on this.


    ,            , 
This is hard the first
time you've ever seen


      ,            , 
something like this.


      ,            ,  
What I have here is
a   procedures


      ,             , 
can be named by variables.


      ,            ,  


      ,            , 
Procedures are not special.


     ,           , 
Actually, sum square is a
variable, which has gotten a


     ,           , 
value, which is a procedure.

 
     ,            ,  
This is define sum square to be


      ,            , 
lambda of A and B something.


     ,           ,  
So the procedure can be named.


     ,            ,  
Therefore, they can be passed
from one to another, one


     ,            , 
procedure to another,
as arguments.


     ,           , 
Well, what we're doing here is
we're passing the procedure


     ,           , 
term as an argument to sum just
when we get it around in


     ,           ,  
the next recursive.


     ,            , 
Here, we're passing
the procedure next


     ,           , 
as an argument also.

 
     ,            , 
However, here we're using
the procedure next.


      ,           , 
That's what the parentheses
mean.


     ,           , 
We're applying next to A to get
the next value of A. If


     ,           , 
you look at what next is mapped
against, remember that


     ,           , 
the way you think about this
is that you substitute the


     ,           ,  
arguments for the formal
parameters in the body.


     ,            , 
If you're ever confused, think
of the thing that way.


     ,          , 
Well, over here, with
sum of the integers.


    ,          , 
I substitute identity for
a term and  plus the


    ,          ,  
incrementer for next
in the body.

 
    ,            ,  
Well, the identity procedure
on A is what I get here.


     ,           , 
Identity is being passed
along, and here, I have


    ,          ,  
increment  plus being applied
to A and  plus is being


    ,           , 
passed along.


    ,          , 
Does that clarify
the situation?


    ,          ,
AUDIENCE  We could also define
explicitly those two


    ,         ,  
functions, then pass them.


    ,           , 
PROFESSOR  Sure.


    ,          , 
What we can do is we could have
given names to them, just


    ,          , 
like I did here.

 
    ,          , 
In fact, I gave you various
ways so you


    ,          , 
could see it, a variety.


    ,           , 
Here, I define the thing which
I passed the name of.


     ,           , 
I referenced it by its name.


     ,           ,  
But the thing is, in fact, that
procedure, one argument


     ,           ,  
X, which is X. And the identity
procedure is just


    ,            , 
lambda of X X. And that's
what you're seeing here.


     ,          , 
Here, I happened to just write
its canonical name there for


    ,          , 
you to see.


    ,          , 

 
    ,          ,  
Is it OK if we take our
five minute break?


    ,           , 


    ,          , 
As I said, computers to make
people happy, not people to


    ,          ,  
make computers happy.


    ,           ,  
And for the most part, the
reason why we introduce all


    ,           , 
this abstraction stuff is to
make it so that programs can


    ,          , 
be more easily written
and more easily read.


    ,          , 
Let's try to understand what's
the most complicated program


    ,          , 
we've seen so far using
a little bit of


    ,          , 
this abstraction stuff.

 
    ,          , 
If you look at the slide, this
is the Heron of Alexandria's


    ,          , 
method of computing square roots
that we saw yesterday.


    ,          , 
And let's see.


    ,            , 
Well, in any case, this
program is a little


      ,           , 
complicated.


     ,           ,  
And at the current state of your
thinking, you just can't


     ,            , 
look at that and say, oh,
this obviously means


     ,           , 
something very clear.


     ,          , 
It's not obvious from
looking at the


    ,          ,  
program what it's computing.

  
    ,           , 
There's some loop here inside
try, and a loop does something

 
    ,          ,  
about trying the improvement
of y.

 
    ,            , 
There's something called
improve, which does some

 
     ,          , 
averaging and quotienting
and things like that.

 
    ,          , 
But what's the real idea?

 
    ,          , 
Can we make it clear
what the idea is?

 
    ,          , 
Well, I think we can.

 
    ,          ,  
I think we can use abstraction
that we have learned about so

 
    ,           , 
far to clarify what's
going on.

 
    ,          , 
Now, what we have mathematically
is a procedure

 
    ,          ,
for improving a guess
for square roots.


    ,          , 
And if y is a guess for a square
root, then what we want


     ,           , 
to get we'll call
a function f.


     ,           , 
This is the means
of improvement.


     ,          , 
I want to get y plus x/y over
, so the average of y and x


    ,          ,  
divided by y as the improved
value for the square root of x


    ,           , 
such that   one thing you can
notice about this function f


    ,          , 
is that f of the square root
of f is in fact the


    ,          , 
square root of x.


    ,          , 
In other words, if I take
the square root of x and

 
    ,          , 
substitute it for y here, I see
the square root of x plus


    ,          , 
x divided by the square of x,
which is the square root of x.


    ,          , 
That's  times the square root
of x divided by , is the


    ,          , 
square root of x.


    ,          , 
So, in fact, what we're really
looking for is we're looking


    ,          , 
for a fixed point, a fixed
point of the function f.


    ,          , 


    ,          , 
A fixed point is a place which
has the property that if you


    ,          , 
put it into the function, you
get the same value out.


    ,          , 

 
    ,          ,  
Now, I suppose if I were giving
some nice, boring


    ,           , 
lecture, and you happened to
have in front of you an HP 


    ,          , 
desk calculator like I
used to have when I


    ,          , 
went to boring lectures.


    ,          , 
And if you think it was really
boring, you put it into


    ,          , 
radians mode, and you hit
cosine, and you hit cosine,


    ,          , 
and you hit cosine.


    ,          , 
And eventually, you end
up with  . or


    ,           ,  
something like that.


     ,           , 
 ., I don't remember what
exactly, and it gets closer

 
    ,          , 
and closer to that.


    ,          , 
Some functions have the property
that you can find


    ,           , 
their fixed point by iterating
the function, and that's


     ,           , 
essentially what's happening in
the square root program by


     ,           , 
Heron's method.


     ,          , 


    ,          ,
So let's see if we can write
that down, that idea.


    ,         , 
Now, I'm not going to say how
I compute fixed points yet.


    ,          , 
There might be more
than one way.


    ,          , 
But the first thing to
do is I'm going to

 
    ,          , 
say what I just said.


    ,          , 
I'm going to say it
specifically, the square root.


    ,          , 


    ,          , 
The square root of x is the
fixed point of that procedure


    ,          , 
which takes an argument
y and averages of x


    ,           , 
divided by y with y.


     ,           , 


     ,           , 
And we're going to start up with
the initial guess for the


     ,           , 
fixed point of .


     ,          , 
It doesn't matter
where it starts.

 
    ,          , 
A theorem having to do
with square roots.


    ,          , 


    ,          , 
So what you're seeing here is
I'm just trying to write out


    ,          , 
by wishful thinking.


    ,          , 
I don't know how I'm going to
make fixed point happen.


    ,          , 
We'll worry about that later.


    ,          , 
But if somehow I had a way of
finding the fixed point of the


    ,          , 
function computed by this
procedure, then I would have  


    ,          , 
that would be the square root
that I'm looking for.


    ,          , 

 
    ,          ,  
OK, well, now let's see how
we're going to write  


    ,           , 
how we're going to come
up with fixed points.


    ,          , 
Well, it's very simple,
actually.


    ,          , 
I'm going to write an
abbreviated version here just


    ,          , 
so we understand it.


    ,            , 


      ,           , 
I'm going to find the fixed
point of a function f  


     ,           , 
actually, the fixed point of the
function computed by the


     ,           , 
procedure whose name will
be f in this procedure.


     ,          , 
How's that?

 
    ,          , 
A long sentence  


    ,          , 
starting with a particular
starting value.


    ,          , 


    ,          , 
Well, I'm going to have a little
loop inside here, which


    ,          ,  
is going to push the button on
the calculator repeatedly,


    ,           , 
hoping that it will eventually
converge.


    ,          , 
And we will say here internal
loops are written by defining


    ,          , 
internal procedures.


    ,          , 


    ,          , 
Well, one thing I'm going to
have to do is I'm going to

 
    ,          , 
have to say whether I'm done.


    ,          , 
And the way I'm going to decide
when I'm done is when


    ,          , 
the old value and the new value
are close enough so I


    ,           , 
can't distinguish
them anymore.


     ,          , 
That's the standard thing you
do on the calculator unless


    ,          , 
you look at more precision,
and eventually,


    ,          , 
you run out of precision.


    ,            , 
So the old value and new value,
and I'm going to stay


      ,           ,
here if I can't distinguish them
if they're close enough,


     ,          , 
and we'll have to worry about
what that is soon.

  
     ,            , 

 
      ,           , 
The old value and the new value
are close enough to each

 
     ,           , 
other and let's pick the new
value as the answer.

 
     ,           , 
Otherwise, I'm going to iterate
around again with the

 
     ,           ,  
next value of old being the
current value of new and the

 
     ,            , 
next value of new being the
result of calling f on new.

 
     ,           , 

 
     ,           , 
And so this is my iteration loop
that pushes the button on

 
     ,           ,  
the calculator.

 
     ,             , 
I basically think of it as
having two registers on the

 
      ,           ,
calculator  old and new.


     ,          ,  
And in each step, new becomes
old, and new gets F of new.


     ,           ,  
So this is the thing where I'm
getting the next value.


    ,            , 
And now, I'm going to
start this thing up


     ,          , 
by giving two values.


    ,          , 


    ,           , 
I wrote down on the blackboard
to be slow


     ,          , 
so you can see this.


    ,          , 
This is the first time you've
seen something quite this


    ,          ,  
complicated, I think.

 
    ,           , 
However, we might want to see
the whole thing over here in


    ,           , 
this transparency or
slide or whatever.


     ,          ,  
What we have is all of the
details that are required to


    ,           ,  
make this thing work.


    ,            , 
I have a way of getting a
tolerance for a close enough


     ,           ,  
procedure, which we see here.


     ,            ,  
The close enough procedure, it
tests whether u and v are


     ,            , 
close enough by seeing if the
absolute value of the


     ,          , 
difference in u and v is less
than the given tolerance, OK?


    ,          , 
And here is the iteration loop
that I just wrote on the

 
    ,          , 
blackboard and the
initialization for it, which


    ,          , 
is right there.


    ,          , 


    ,          , 
It's very simple.


    ,          , 


    ,          , 
But let's see.


    ,          , 
I haven't told you enough.


    ,          ,  
It's actually easier
than this.


    ,           , 
There is more structure to
this problem than I've


    ,          , 
already told you.

 
    ,          ,  
Like why should this work?


    ,           ,  
Why should it converge?


    ,            , 
There's a hairy theorem in
mathematics tied up in what


     ,          , 
I've written here.


    ,          , 
Why is it that I should assume
that by iterating averaging


    ,          , 
the quotient of x and y
and y that I should


    ,            , 
get the right answer?


      ,           , 
It isn't so obvious.


     ,           , 


     ,           , 
Surely there are other things,
other procedures, which

 
     ,           , 
compute functions whose fixed
points would also be the


     ,          ,  
square root.


    ,            , 
For example, the obvious one
will be a new function g,


     ,          , 
which maps y to x/y.


    ,          , 


    ,           , 
That's even simpler.


     ,          , 
The fixed point of g is surely
the square root also, and it's


    ,          ,  
a simpler procedure.


    ,           ,  
Why am I not using it?


    ,            , 
Well, I suppose you know.

 
     ,          , 
Supposing x is  and I start out
with , and if I divide 


    ,          ,  
into , I get .


    ,           , 
And then if I divide
 into , I get .


    ,          , 
If I divide  into , I get ,
and  into , I get , and I


    ,          , 
never get any closer
to the square root.


    ,          , 
It just oscillates.


    ,          ,  


    ,            , 
So what we have is a signal
processing system, an


     ,           , 
electrical circuit which is
oscillating, and I want to


     ,           , 
damp out these oscillations.

 
     ,           , 


     ,          , 
Well, I can do that.


    ,          , 
See, what I'm really doing
here when I'm taking my


    ,          , 
average, the average is
averaging the last two values


    ,          , 
of something which oscillates,
getting something in between.


    ,          , 
The classic way is damping out
oscillations in a signal


    ,          , 
processing system.


    ,          , 


    ,          ,
So why don't we write down the
strategy that I just said in a


    ,         ,
more clear way?

 
    ,         , 
Well, that's easy enough.


    ,          ,


    ,         , 
I'm going to define the square
root of x to be a fixed point


    ,          , 
of the procedure resulting
from average damping.


    ,           , 
So I have a procedure resulting
from average damp of


     ,          , 
the procedure, that procedure
of y, which divides x by y


    ,          ,  
starting out at .


    ,           , 


    ,          , 
Ah, but average damp is a
special procedure that's going


    ,          , 
to take a procedure as its
argument and return a

 
    ,          ,  
procedure as its value.


    ,           ,  
It's a generalization that says
given a procedure, it's


    ,           ,  
the thing which produces a
procedure which averages the


    ,           , 
last value and the
value before and


    ,          , 
after running the procedure.


    ,          , 
You can use it for anything
if you want to damp out


    ,          , 
oscillations.


    ,          ,
So let's write that down.


    ,         ,
It's very easy.


    ,           ,

  
      ,          , 
And stylistically here, I'm
going to use lambda notation

 
     ,           , 
because it's much easier to
think when you're dealing with

 
     ,           ,
procedure, the mid line
procedures, to understand that

 
     ,         ,
the procedures are the objects
I'm dealing with, so I'm going

 
    ,         , 
to use lambda notation here.

 
    ,          , 
Not always.

 
    ,          , 
I don't always use it, but
very specifically here to

 
    ,          ,  
expand on that idea,
to elucidate it.

 
    ,           , 

 
    ,          , 
Well, average damp is a
procedure, which takes a

 
    ,          , 
procedure as its argument,
which we will call f.


    ,          , 
And what does it produce?


    ,           , 
It produces as its value  


     ,          , 
the body of this procedure is
a thing which produces a


    ,          , 
procedure, the construct of the
procedures right here, of


    ,            , 
one argument x, which averages
f of x with x.


      ,           , 


     ,          ,  
This is a very special thing.


    ,           , 
I think for the first time
you're seeing a procedure


    ,          , 
which produces a procedure
as its value.

 
    ,          , 
This procedure takes the
procedure f and does something


    ,          , 
to it to produce a new procedure
of one argument x,


    ,          ,  
which averages f  


    ,           , 
this f  


    ,          ,  
applied to x and x itself.


    ,            , 
Using the context here, I apply
average damping to the


     ,          , 
procedure, which just
divides x by y.


    ,          , 
It's a division.


    ,          ,


    ,         , 
And I'm finding to fixed point
of that, and that's a clearer

 
    ,          , 
way of writing down what
I wrote down over


    ,          ,
here, wherever it was.


    ,          , 
Here, because it tells why
I am writing this down.


     ,           , 


     ,          , 
I suppose this to some extent
really clarifies what Heron of


    ,          , 
Alexandria was up to.


    ,          , 
I suppose I'll stop now.


    ,          , 
Are there any questions?


    ,          , 


    ,          ,
AUDIENCE  So when you define
average damp, don't you need

 
    ,         , 
to have a variable on f?


    ,          , 
PROFESSOR  Ah, the question was,
and here we're having  


    ,          ,  
again, you've got to learn
about the syntax.


    ,           , 
The question was when defining
average damp, don't you have


    ,          ,  
to have a variable
defined with f?


    ,            , 
What you are asking about is
the formal parameter of f?


     ,          , 
AUDIENCE  Yeah.


    ,          , 
PROFESSOR  OK.


    ,          , 
The formal parameter
of f is here.


    ,          ,
The formal parameter of f  

 
    ,          , 
AUDIENCE  The formal parameter
of average damp.


     ,          , 
PROFESSOR  F is being
used to apply it to


    ,          ,  
an argument, right?


    ,           , 
It's indeed true that f must
have a formal parameter.


    ,            , 
Let's find out what f's
formal parameter is.


      ,           , 
AUDIENCE  The formal parameter
of average damp.


     ,           ,  
PROFESSOR  Oh, f is the formal
parameter of average damp.


     ,            ,  
I'm sorry.


     ,            , 
You're just confusing
a syntactic thing.


     ,           , 
I could have written
this the other way.

 
     ,          , 
Actually, I didn't understand
your question.


    ,          , 
Of course, I could have written
it this other way.


    ,          , 


    ,          , 
Those are identical notations.


    ,          , 
This is a different way
of writing this.


    ,          , 


    ,          , 
You're going to have to get
used to lambda notation


    ,          , 
because I'm going to use it.


    ,           , 
What it says here, I'm defining
the name average damp


     ,          ,  
to name the procedure whose
of one argument f.

 
    ,           , 
That's the formal parameter of
the procedure average damp.


    ,          , 
What define does is it says
give this name a value.


    ,          , 
Here is the value of for it.


    ,            , 


      ,            ,  
That there happens to be a
funny syntax to make that


      ,             , 
easier in some cases is
purely convenience.


      ,            ,  


      ,            , 
But the reason why I wrote it
this way here is to emphasize


     ,           , 
that I'm dealing with a
procedure that takes a


     ,           ,  
procedure as its argument
and produces a

 
     ,            , 
procedure as its value.


     ,           , 


     ,           ,  
AUDIENCE  I don't understand
why you use lambda twice.


     ,            , 
Can you just use one
lambda and take two


     ,           , 
arguments f and x?


     ,           , 
PROFESSOR  No.


     ,            , 
AUDIENCE  You can't?


      ,           ,  
PROFESSOR  No, that would
be a different thing.


     ,            , 
If I were to write the procedure
lambda of f and x,


     ,            ,  
the average of f of x and x,
that would not be something

 
      ,            , 
which would be allowed to take a
procedure as an argument and


     ,           , 
produce a procedure
as its value.


     ,           , 
That would be a thing that
takes a procedure as its


     ,           ,  
argument and numbers
its argument and


     ,             , 
produces a new number.


      ,           , 
But what I'm producing here is
a procedure to fit in the


     ,           ,  
procedure slot over here,
which is going to


     ,            , 
be used over here.


     ,           , 
So the number has to
come from here.


     ,           , 
This is the thing that's going
to eventually end up in the x.

  
     ,           , 
And if you're confused, you
should do some substitution

 
     ,           ,  
and see for yourself.

 
     ,           ,  

 
    ,           ,
Yes?

 
    ,         , 
AUDIENCE  Will you please show
the definition for average

 
    ,          , 
damp without using lambda
notation in both cases.

 
    ,          , 
PROFESSOR  I can't make a very
simple one like that.

 
    ,          , 
Let me do it for you, though.

 
    ,          , 
I can get rid of this
lambda easily.

 
    ,          , 
I don't want to be  

 
    ,          , 


    ,          , 
actually, I'm lying to you.


    ,          , 
I don't want to do what you want
because I think it's more


    ,          , 
confusing than you think.


    ,           , 
I'm not going to write
what you want.


     ,          , 


    ,          ,  
So we'll have to get a name.


    ,           , 
FOO of x to be of F of x and x
and return as a value FOO.


    ,          , 


    ,           , 
This is equivalent, but
I've had to make an

 
     ,          ,  
arbitrary name up.


    ,           , 
This is equivalent to this
without any lambdas.


    ,          , 
Lambda is very convenient for
naming anonymous procedures.


    ,          ,  
It's the anonymous name
of something.


    ,           , 
Now, if you really want to know
a cute way of doing this,


    ,          , 
we'll talk about it later.


    ,          , 
We're going to have to define
the anonymous procedure.


    ,          , 
Any other questions?


    ,          ,


    ,          , 
And so we go for our
break again.

 
     ,          , 


    ,          , 
So now we've seen how
to use high order


    ,          , 
procedures, they're called.


    ,          , 
That's procedures that take
procedural arguments and


    ,          , 
produce procedural values to
help us clarify and abstract


    ,          , 
some otherwise complicated
processes.


    ,          ,  
I suppose what I'd like to do
now is have a bit of fun with


    ,           ,  
that and sort of a little
practice as well.


    ,           , 
So let's play with this square
root thing even more.


    ,          ,  
Let's elaborate it and
understand what's going on and

 
    ,            , 
make use of this kind of
programming style.


     ,           , 
One thing that you might know
is that there is a general


     ,          , 
method called Newton's method
the purpose of which is to


    ,          , 
find the roots  


    ,          , 
that's the zeroes  


    ,          , 
of functions.


    ,          , 
So, for example, to find a y
such that f of y equals  , we


    ,           , 
start with some guess.


     ,          , 
This is Newton's method.


    ,          , 

 
    ,          , 
And the guess we start with
we'll call y , and then we


    ,           ,  
will iterate the following
expression.


     ,            , 
y n plus    this is a
difference equation  


     ,          ,
is yn minus f of yn over the
derivative with respect to y


    ,         , 
of f evaluated at y equal yn.


    ,          , 
Very strange notation.


    ,          ,  
I must say ugh.


    ,           , 
The derivative of f with respect
to y is a function.


    ,          , 
I'm having a little bit of
unhappiness with that, but


    ,          , 
that's all right.

 
    ,          ,  
It turns out in the programming
language world,


    ,           , 
the notation is much clearer.


    ,          , 
Now, what is this?


    ,          , 
People call it Newton's
method.


    ,          , 
It's a method for finding the
roots of the function f.


    ,          , 
And it, of course, sometimes
converges, and when it does,


    ,          , 
it does so very fast. And
sometimes, it doesn't


    ,           , 
converge, and, oh well, we have
to do something else.


     ,           , 
But let's talk about square
root by Newton's method.


     ,           , 
Well, that's rather
interesting.

 
     ,          , 
Let's do exactly the same thing
we did last time  a bit


    ,          , 
of wishful thinking.


    ,          , 
We will apply Newton's method,
assuming we knew how to do it.


    ,           , 
You don't know how
to do it yet.


     ,          , 
Well, let's go.


    ,          ,  


    ,           ,  
What do I have here?


    ,           , 
The square root of x.


    ,          , 


    ,          , 
It's Newton's method applied
to a procedure which will

 
    ,          , 
represent that function
of y, which computes


    ,          , 
that function of y.


    ,          , 
Well, that procedure is that
procedure of y, which is the


    ,          , 
difference between x and
the square of y.


    ,            ,  


      ,            , 
Indeed, if I had a value of y
for which this was zero, then


     ,           ,  
y would be the square
root of x.


     ,           , 


    ,          , 
See that?


    ,          , 
OK, I'm going to start this
out searching at .

 
    ,          , 
Again, completely arbitrary
property of square roots that


    ,          , 
I can do that.


    ,          , 


    ,          , 
Now, how am I going to compute
Newton's method?


    ,          , 
Well, this is the method.


    ,          , 
I have it right here.


    ,          , 
In fact, what I'm doing is
looking for a fixed point of


    ,          , 
some procedure.


    ,          , 
This procedure involves some
complicated expressions in


    ,          , 
terms of other complicated
things.

  
    ,          ,  
Well, I'm trying to find the
fixed point of this.

 
    ,           , 
I want to find the values of y,
which if I put y in here, I

 
    ,            , 
get the same value out here up
to some degree of accuracy.

 
      ,           , 
Well, I already have a
fixed point process

 
     ,           ,  
around to do that.

 
     ,            , 
And so, let's just define
Newton's method over here.

 
     ,          , 

 
    ,          , 
A procedure which computes
a function and a

 
    ,          , 
guess, initial guess.

 
    ,          , 
Now, I'm going to have
to do something here.

 
    ,          , 
I'm going to need the derivative
of the function.


    ,          , 
I'm going to need a procedure
which computes the derivative


    ,          , 
of the function computed by
the given a procedure f.


    ,          , 


    ,          , 
I'm trying to be very careful
about what I'm saying.


    ,          , 
I don't want to mix up the word
procedure and function.


    ,          ,
Function is a mathematical
word.


    ,         , 
It says I'm mapping from values
to other values, a set


    ,          , 
of ordered pairs.


    ,            , 
But sometimes, I'll accidentally
mix those up.

 
      ,           ,
Procedures compute functions.


     ,          ,  


     ,           ,  
So I'm going to define the
derivative of f to be by


    ,           , 
wishful thinking again.


    ,          , 
I don't know how I'm
going to do it.


    ,          , 
Let's worry about that later  


    ,          ,


    ,         , 
of F. So if F is a procedure,
which happens to be this one


    ,          ,  
over here for a square root,
then DF will be the derivative


    ,           , 
of it, which is also the
derivative of the function

 
    ,          ,  
computed by that procedure.


    ,           , 
DF will be a procedure that
computes the derivative of the


    ,          , 
function computed by the
procedure F. And then given


    ,          , 
that, I will just go looking
for a fixed point.


    ,          , 


    ,          , 
What is the fixed point
I'm looking for?


    ,          , 
It's the one for that procedure
of one argument x,


    ,             ,  
which I compute by
subtracting x.


       ,             , 
That's the old   that's
the yn here.


      ,           , 
The quotient of f of x and df
of x, starting out with the

 
     ,           , 
original guess.


     ,           , 


     ,           , 
That's all very simple.


     ,           , 
Now, I have one part left that
I haven't written, and I want


     ,           , 
you to see the process by which
I write these things,


     ,            , 
because this is really true.


      ,           , 
I start out with some
mathematical idea, perhaps.


     ,           , 
By wishful thinking, I assume
that by some magic I can do


     ,            , 
something that I have
a name for.


      ,           , 
I'm not going to worry about
how I do it yet.

 
     ,           , 
Then I go walking down here and
say, well, by some magic,


     ,           ,
I'm somehow going to figure how
to do that, but I'm going


     ,          , 
to write my program anyway.


     ,           , 
Wishful thinking, essential
to good engineering, and


     ,           ,  
certainly essential to a
good computer science.


     ,           , 


    ,          ,  
So anyway, how many of
you wished that your


    ,           , 
computer ran faster?


    ,          , 


    ,          , 
Well, the derivative isn't
so bad either.

 
    ,          , 
Sort of like average damping.


    ,          ,


    ,         ,  
The derivative is a procedure
that takes a procedure that


    ,           , 
computes a function as its
argument, and it produces a


    ,          , 
procedure that computes a
function, which needs one


    ,          , 
argument x.


    ,          , 
Well, you all know
this definition.


    ,          ,  
It's f of x plus delta x minus
f of x over delta x, right?


    ,            ,  
For some small delta x.


     ,           , 
So that's the quotient of the
difference of f of the sum of

 
    ,           ,
x and dx minus f point
x divided by dx.


     ,         , 


    ,          , 
I think the thing was lining up
correctly when I balanced


    ,          , 
the parentheses.


    ,          , 


    ,          ,  
Now, I want you to
look at this.


    ,           , 
Just look.


    ,          , 


    ,          , 
I suppose I haven't told
you what dx is.


    ,          , 
Somewhere in the world I'm going
to have to write down

 
    ,          , 
something like that.


    ,          , 
I'm not interested.


    ,          , 
This is a procedure which takes
a procedure and produces


    ,          , 
an approximation, a procedure
that computes an approximation


    ,          ,  
of the derivative of the
function computed by the


    ,            , 
procedure given by the standard
methods that you all


     ,           ,  
know and love.


     ,            , 
Now, it may not be the case that
doing this operation is


     ,          , 
such a good way of approximating
a derivative.


    ,          ,  
Numerical analysts here
should jump on me and

 
    ,           , 
say don't do that.


    ,           , 
Computing derivatives produces
noisy answers, which is true.


     ,          , 
However, this again is for the
sake of understanding.


    ,          , 
Look what we've got.


    ,          ,  
We started out with what is
apparently a mathematically


    ,           , 
complex thing.


    ,          , 
and.


    ,          , 
In a few blackboards full, we
managed to decompose the


    ,          ,  
problem of computing square
roots by the way you were


    ,           , 
taught in your college
calculus class  

  
    ,          , 
Newton's method  

 
    ,          , 
so that it can be understood.

 
    ,          , 
It's clear.

 
    ,          ,
Let's look at the structure
of what it is we've got.

 
    ,         , 
Let's look at this slide.

 
    ,           , 
This is a diagram of the machine
described by the

 
     ,           , 
program on the blackboard.

 
     ,           , 
There's a machine
described here.

 
     ,           ,  
And what have I got?

 
     ,           , 
Over here is the Newton's method
function f that we have

 
    ,          ,  
on the left most blackboard.


    ,           , 
It's the thing that takes an
argument called y and puts out


    ,          ,  
the difference between x and
the square of y, where x is


    ,           ,  
some sort of free variable that
comes in from the outside


    ,           ,  
by some magic.


    ,           , 
So the square root routine picks
up an x, and builds this


    ,          , 
procedure, which I have the
x rolled up in it by


    ,           , 
substitution.


     ,          , 
Now, this procedure in the cloud
is fed in as the f into


    ,           , 
the Newton's method which
is here, this box.

 
     ,           , 


     ,           , 
The f is fanned out.


     ,          , 
Part of it goes into something
else, and the other part of it


    ,          , 
goes through a derivative
process into something else to


    ,           , 
produce a procedure, which
computes the function which is


     ,          ,  
the iteration function of
Newton's method when we use


    ,           , 
the fixed point method.


    ,          ,  
So this procedure, which
contains it by substitution  


    ,           , 
remember, Newton's method over
here, Newton's method builds


    ,          ,  
this procedure, and Newton's
method has in it defined f and

 
    ,           ,  
df, so those are captured
over here  f and df.


    ,           , 
Starting with this procedure,
I can now feed this to the


    ,          , 
fixed point process within an
initial guess coming out from


    ,          ,
the outside from square
root to produce the


    ,           ,
square root of x.


      ,          , 


     ,           , 
So what we've built is a very
powerful engine, which allows


     ,          ,
us to make nice things
like this.


    ,         ,   
Now, I want to end this with
basically an idea of Chris


    ,            , 
Strachey, one of the

 
    ,          , 
grandfathers of computer science.


    ,          , 
He's a logician who
lived in the  


    ,           , 
I suppose about   years ago
or  years ago, he died.


     ,          , 
I don't remember exactly when.


    ,          , 
He's one of the inventors
of something called


    ,          , 
denotational semantics.


    ,           , 
He was a great advocate of
making procedures or functions


     ,          , 
first class citizens in a
programming language.


    ,          , 
So here's the rights and
privileges of first class


    ,           , 
citizens in a programming
language.

 
     ,          ,  
It allows you to make any
abstraction you like if you


    ,           , 
have functions as first class
citizens.


    ,          ,  
The first class citizens
must be able


    ,            , 
to be named by variables.


     ,           ,  
And you're seeing me doing
that all the time.


     ,            ,  
Here's a nice variable which
names a procedure which


     ,            , 
computes something.


     ,          , 


    ,          , 
They have to be passed as
arguments to procedures.


    ,          , 
We've certainly seen that.

 
    ,           , 
We have to be able to return
them as values from


     ,          , 
procedures.


    ,          ,  
And I suppose we've seen that.


    ,           , 
We haven't yet seen anything
about data structures.


    ,          , 
We will soon, but it's also the
case that in order to have


    ,          , 
a first class citizen in a
programming language, the


    ,          ,  
object has to be allowed to be
part of a data structure.


    ,           , 
We're going to see that soon.


    ,          , 
So I just want to close with
this and say having things


    ,          , 
like procedures as first class
data structures, first class

 
    ,           , 
data, allows one to make
powerful abstractions, which


     ,          , 
encode general methods
like Newton's method


    ,          , 
in very clear way.


    ,          , 
Are there any questions?


    ,          , 
Yes.


    ,            ,  
AUDIENCE  Could you put
derivative instead of df


      ,            , 
directly in the fixed point?


     ,           , 
PROFESSOR  Oh, sure.


     ,           , 
Yes, I could have put deriv of
f right here, no question.


     ,          , 

 
    ,          , 
Any time you see something
defined, you can put the thing


    ,          , 
that the definition is
there because you


    ,          ,  
get the same result.


    ,           ,  
In fact, what that would look
like, it's interesting.


    ,           , 
AUDIENCE  Lambda.


    ,          , 
PROFESSOR  Huh?


    ,          , 
AUDIENCE  You could put the
lambda expression in there.


    ,          , 
PROFESSOR  I could also put
derivative of f here.


    ,          , 
It would look interesting
because of the open paren,


    ,          , 
open paren, deriv of f,
closed paren on an x.

 
    ,           ,  
Now, that would have the bad
property of computing the


     ,           , 
derivative many times, because
every time I would run this


    ,          , 
procedure, I would compute
the derivative again.


    ,          ,  


    ,           , 
However, the two open parens
here both would be meaningful.


    ,          ,  
I want you to understand
syntactically that that's a


    ,           , 
sensible thing.


    ,          , 
Because if was to rewrite this
program   and I should do it


    ,            , 
right here just so
you see because


      ,           , 
that's a good question  

   
     ,          , 

  
    ,          , 
of F and guess to be fixed point
of that procedure of one

  
    ,          , 
argument x, which subtracts
from x the quotient of F

  
    ,          , 
applied to x and the deriv
of F applied to x.

  
    ,          ,

  
    ,         , 
This is guess.

  
    ,          , 

  
    ,            , 
This is a perfectly legitimate
program,

  
      ,            , 
because what I have here  

  
      ,            , 
remember the evaluation rule.

  
      ,            , 
The evaluation rule is evaluate
all of the parts of

 
      ,           ,  
the combination  the operator
and the operands.

 
     ,            ,
This is the operator of
this combination.

 
     ,          ,  

 
     ,            ,  
Evaluating this operator will,
of course, produce the

 
     ,            , 
derivative of F.

 
     ,            ,  
AUDIENCE  To get it one step
further, you could put the

 
      ,            ,  
lambda expression there, too.

 
     ,            , 
PROFESSOR  Oh, of course.

 
     ,           , 
Any time I take something which
is define, I can put the

  
     ,            , 
thing it's defined to be in
the place where the thing

 
      ,           , 
defined is.

 
     ,           , 
I can't remember which is
definiens and which is

 
     ,           , 
definiendum.

 
     ,           , 

 
     ,            , 
When I'm trying to figure out
how to do a lecture about this

 
      ,           , 
in a freshman class, I use such
words and tell everybody

 
     ,           , 
it's fun to tell
their friends.

 
     ,           , 

 
     ,           , 
OK, I think that's it.

  
     ,          , 
        ,               , 


       ,            , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, last time we
talked about compound data,


      ,            ,  
and there were two main points
to that business.


      ,             , 
First of all, there was
a methodology of data


      ,            ,  
abstraction, and the point of
that was that you could


      ,              ,  
isolate the way that data
objects are used from the way


       ,             , 
that they're represented  this
idea that there's this guy,


      ,            ,  
George, and you go out make a
contract with him; and it's

 
      ,             ,  
his business to represent the
data objects; and at the


      ,             , 
moment you are using them,
you don't think


      ,            , 
about George's problem.


      ,            , 
And then secondly, there was
this particular way that Lisp


      ,             , 
has of gluing together things to
form objects called pairs,


       ,            , 
and that's done with cons, car
and cdr. And the way that


      ,            , 
cons, car and cdr are
implemented is basically


      ,            , 
irrelevant.


      ,            , 
That's sort of George's
problem of how


      ,            ,  
to build those things.

 
      ,            , 
It could be done
as primitives.


     ,           , 
It could be done using
procedures in some weird way,


     ,           , 
but we're not going to
worry about that.


     ,            , 
And as an example, we looked at
rational number arithmetic.


      ,           ,  
We looked at vectors,
and here's


     ,            , 
just a review of vectors.


     ,           ,
Here's an operation that takes
the sum of of two vectors, so


     ,          , 
we want to add this vector, v,
and this vector, v, and


     ,           , 
we get the sum.


     ,           , 
And the sum is the vector whose
coordinates are the sum

 
     ,           , 
of the coordinates of the
pieces you're adding.


     ,           , 
So I can say, to define
make vect, right, to add two


     ,            , 
vectors I make a vector, whose x
coordinate is the sum of the


      ,           , 
two x coordinates, and whose y
coordinate is the sum of the


     ,           , 
two y coordinates.


     ,            , 
And then similarly, we could
have an operation that scales


      ,            ,
vectors, so here's a procedure
scale that multiplies a


      ,          , 
vector, v, by some number, s.


     ,           , 
So here's v, v goes from there
to there and I scale v, and I


     ,           , 
get a vector in the same
direction that's longer.

 
     ,           , 
And again, to scale a vector,
I multiply the successive


     ,           , 
coordinates.


     ,           ,  
So I make a vector, whose x
coordinate is the scale factor


     ,            ,  
times the x coordinate and
whose y coordinate is the


     ,            , 
scale factor times
the y coordinate.


     ,           , 
So those are two operations that
are implemented using the


     ,            , 
representation of vectors.


      ,           ,  
And the representation of
vectors, for instance, is


     ,            , 
something that we can build
in terms of pairs.


     ,           , 
So George has gone out and
implemented for us make vector

 
     ,           , 
and x coordinate and y
coordinate, and this could be


     ,            , 
done, for instance, using cons,
car and cdr; and notice


      ,            , 
here, I wrote this in a slightly
different way.


      ,            , 
The procedures we've seen
before, I've said something


      ,           , 
like say, make vector of x
and y  cons of x and y.


     ,           , 
And here I just wrote
make vector cons.


     ,            , 
And that means something
slightly different.


      ,           , 
Previously we'd say, define
make vector to be a procedure


     ,           , 
that takes two arguments,
x and y, and does


     ,           , 
cons of x and y.

 
     ,           , 
And here I am saying define
make vector to be the thing


     ,           , 
that cons is, and that's almost
the same as the other


     ,           , 
way we've been writing things.


     ,           , 
And I just want you to get
used to the idea that


     ,           , 
procedures can be objects, and
that you can name them.


     ,           , 


     ,           , 
OK, well there's vector
representation, and again, if


     ,           , 
that was all there was
to it, this would


     ,           ,
all be pretty boring.


     ,            , 
And the point is, remember, that
you can use cons to glue

 
       ,            , 
together not just numbers to
form pairs, but to glue


      ,            , 
together arbitrary things.


      ,           ,  
So for instance, if we'd like
to represent a line segment,


     ,            ,
say the line segment that goes
from a certain vector  say,


     ,          , 
the segment from the vector ,
to the point represented


     ,           , 
by the vector ,.


     ,           , 
If we want to represent that
line segment, then we can


     ,           ,
build that as a pair of pairs.


     ,          , 


     ,           , 
So again, we can represent
line segments.

 
     ,           , 
We can make a constructor that
makes a segment using cons,


     ,            , 
selects out the start of a
segment, selects out the end


      ,           , 
point of the segment; and then
if we actually look at that,


     ,             ,  
if we peel away the abstraction
layers, and say


       ,             , 
what's that really is a pair
of pairs, we'd say


      ,            , 
well that's a pair.


      ,            , 
Here's the segment.


      ,            , 


      ,           ,  
It's car, right, it's car
pointer is a pair, and it's


     ,            , 
cdr is also a pair, and then
what the car is   here's the

 
     ,           , 
car, that itself is
a pair of  and .


     ,           ,  
And similarly the cdr is
a pair of  and .


     ,             ,  
And let me remind you again,
that a lot of people have some


      ,            , 
idea that if I'd taken this
arrow and somehow written it


     ,           , 
to point down, that would
mean something else.


     ,           , 
That's irrelevant.


     ,            ,  
It's only how these are
connected and not whether this


      ,            , 
arrow happens to go vertically
or horizontally.


     ,           , 


     ,           , 
And again just to remind
you, there was

  
     ,           , 
this notion of closure.

 
     ,            ,  
See, closure was the thing
that allowed us to start

 
      ,             , 
building up complexity, that
didn't trap us in pairs.

 
      ,           , 
Particularly what I mean is
the things that we make,

 
     ,           , 
having combined things using
cons to get a pair, those

 
     ,           , 
things themselves can be
combined using cons to make

 
     ,           ,  
more complicated things.

 
     ,            , 
Or as a mathematician might say,
the set of data objects

 
     ,           , 
in List is closed under the
operation of forming pairs.

 
     ,           , 
That's the thing that allows
us to build complexity.

 
     ,            ,   
And that seems obvious, but
remember, a lot of the things


      ,             , 
in the computer languages that
people use are not closed.


     ,           , 
So for example, forming arrays
in basic and Fortran is not a


     ,            , 
closed operation, because you
can make an array of numbers


      ,           , 
or character strings or
something, but you can't make


     ,           ,  
an array of arrays.


     ,            , 
And when you look at means of
combination, you should be


     ,            , 
should be asking yourself
whether things are closed


      ,            , 
under that means
of combination.


      ,            , 

 
      ,            ,  
Well in any case, because we
can form pairs of pairs, we


      ,            , 
can start using pairs to glue
things together in all sorts


     ,           , 
of different ways.


     ,           ,  
So for instance if I'd like to
glue together the four things,


     ,             , 
, ,  and , there are a
lot of ways I can do it.


      ,           ,  
I could, for example, like we
did with that line segment, I


     ,            , 
could make a pair that
had a  and a  and


     ,           ,  
a  and a , right?


     ,             ,  
Or if I liked, I could do
something like this.


      ,            , 
I could make a pair, whose first
thing is a pair, whose

 
     ,           ,  
car is , and his cdr is itself
a pair that has the 


     ,            , 
and the , and then I could
put the  up here.


     ,           , 
So you see, there are a lot of
different ways that I can


     ,            , 
start using pairs to glue things
together, and so it'll


      ,            , 
be a good idea to establish
some kind of conventions,


      ,            , 
right, that allow us to deal
with this thing in some


      ,           , 
conventional way, so we're
not constantly


     ,           ,  
making an ad hoc choice.


     ,            , 
And List has a particular
convention for representing a


     ,           , 
sequence of things as,
essentially, a chain of pairs,

 
     ,           ,
and that's called a List.


     ,          ,
And what a List is is
essentially just a convention


     ,           ,
for representing a sequence.


      ,          , 
I would represent the sequence
, ,  and  by


     ,           , 
a sequence of pairs.


     ,           , 
I'd put  here and then the
cdr of this would point to


     ,            , 
another pair whose car was the
next thing in the sequence,


      ,            , 
and the cdr would point to
another pair whose car was the


      ,            ,  
next thing in the sequence  
so there's   


      ,             , 
and then another one.

 
      ,           , 
So for each item in the
sequence, I'll get a pair.


     ,           , 
And now there are no more, so
I put a special marker that


     ,           , 
means there's nothing more in
the List. OK, so that's a


     ,           , 
conventional way to glue things
together if you want to


     ,           , 
represent a sequence, right.


     ,           , 
And what it is is a bunch of
pairs, the successive cars of


     ,           , 
each pair are the items that you
want to glue together, and


     ,            , 
the cdr pointer points
to the next pair.


      ,           , 
Now if I actually wanted to
construct that, what I would


     ,           , 
type into List is this  I'd
actually construct that as

 
     ,            , 
saying, well this thing is the
cons of  onto the cons of 


      ,           , 
onto the cons of  onto
the cons of  onto,


     ,           , 
well, this thing nil.


     ,           ,  
And what nil is is a name for
the end of List marker.


     ,            , 
It's a special name, which means
this is the end of the


     ,           , 
List. OK, so that's how I would
actually construct that.


     ,           ,


     ,           , 
Of course, it's a terrible drag
to constantly have to


      ,           ,   
write something like the cons
of  onto the cons of  onto


     ,             , 
the cons of , whenever you
want to make this thing.

 
     ,           , 
So List has an operation that's
called List, and List


     ,           , 
is just an abbreviation for
this nest of conses.


     ,           , 
So I could say, I could
construct that by saying that


     ,           ,  
is the List of , ,  and .


     ,           , 
And all this is is another
way, a piece of syntactic


    ,          , 
sugar, a more convenient
way for writing


    ,          , 
that chain of conses  


    ,          , 
cons of cons of cons of cons
of cons of cons onto nil.


    ,          , 
So for example, I could build
this thing and say, I'll


    ,          , 
define  TO  to be the
List of , ,  and .

 
    ,          ,  


    ,           , 
OK, well notice some of the
consequences of using this


    ,          , 
convention.


    ,          , 
First of all if I have this
List, this , ,  and , the


    ,          , 
car of the whole thing
is the first element


    ,           ,  
in the List, right.


     ,            ,  
How do I get ?


     ,           , 
Well,  would be the car of the
cdr of this thing  TO ,


    ,          , 
it would be , right.


    ,           ,  
I take this thing, I take the
cdr of it, which is this much,

 
     ,           , 
and the car of that is , and
then similarly, the car of the


    ,          ,  
cdr of the cdr of  TO ,
cdr, cdr, car  


    ,           ,
would give me , and so on.


    ,         , 
Let's take a look at that
on the computer


    ,          ,  
screen for a second.


    ,           , 


    ,           ,  
I could come up to List, and I
could type define  TO  to be


     ,           , 
the List of , ,
 and , right.


    ,          , 
And I'll tell that to List, and
it says, fine, that's the


    ,          , 
definition of  TO .

  
    ,          , 
And I could say, for instance,
what's the car of the cdr of

 
    ,          , 
the cdr of  TO , close
paren, close paren.

 
    ,          ,
Right, so the car of the cdr
of the cdr would be .

 
    ,         , 
Right, or I could say,
what's  TO  itself.

 
    ,          , 
And you see what List typed out
is , , , , enclosed in

 
    ,          , 
parentheses, and this notation,
typing the elements

 
    ,           , 
of the List enclosed in
parentheses is List's

 
     ,           , 
conventional way for printing
back this chain of pairs that

 
     ,           , 
represents a sequence.

 
     ,          , 
So for example, if I said,
what's the cdr of  TO ,

 
    ,          ,  
that's going to be the rest of
the List. That's the thing


    ,           , 
pointed to by the first pair,
which is, again, a sequence


    ,          , 
that starts off with .


    ,          , 
Or for example, I go off and
say, what's the cdr of the cdr


    ,          , 
of  TO ; then that's ,.


    ,          , 
Or if I say, what's the cdr of
the cdr of the cdr of the cdr


    ,           ,  
of  TO , and I'm down there
looking at the end of List


     ,            , 
pointer itself, and List prints
that as just open


     ,           , 
paren, close paren.


     ,          , 
You can think of that as a List
with nothing in there.

 
    ,          , 
All right, see at the end what
I did there was I looked at


    ,          , 
the cdr of the cdr of the cdr
of  TO , and I'm just left


    ,          , 
with the end of List
pointer itself.


    ,          , 
And that gets printed
as open close.


    ,          , 


    ,          , 
All right, well that's a
conventional way you can see


    ,          ,  
for working down a
List by taking


    ,           , 
successive cdrs of things.


    ,          , 
It's called cdring down a
List. And of course it's


    ,          , 
pretty much of a drag to type
all those cdrs by hand.

 
    ,           , 
You don't do that.


     ,          , 
You write procedures
that do that.


    ,          ,  
And in fact one very, very
common thing to do in List is


    ,            , 
to write procedures that, sort
of, take a List of things and


     ,           , 
do something to every element in
List, and return you a List


     ,           ,  
of the results.


     ,            , 
So what I mean for example, is
I might write a procedure


     ,          , 
called Scale List, and
Scale List I might say I want


    ,          , 
to scale by   the entire List
 TO , and that would return


    ,          ,
for me the List  ,
 ,  ,  .

 
    ,         , 
[UNINTELLIGIBLE PHRASE]


    ,          , 
Right, it returns List, and well
you can see that there's


    ,          , 
going to be some kind
of recursive


    ,          , 
strategy for doing it.


    ,          ,  
How would I actually write
that procedure?


    ,           , 
The idea would be, well if you'd
like to build up a List


    ,           , 
where you've multiplied every
element by  , what you'd say


     ,           ,  
is well you imagine that you'd
taken the rest of the List  


     ,            , 
right, the thing represented
by the cdr of the List, and


     ,          ,
suppose I'd already built a List
where each of these was

 
    ,         , 
multiplied by    


    ,           ,
that would be Scale List of the
cdr of the List. And then


     ,         , 
all I have to do is multiply the
car of the List by  , and


    ,          ,
then cons that onto the rest,
and I'll get a List.


    ,         , 
Right and then similarly, to
have scaled the cdr of the


    ,          ,  
List, I'll scale the cdr of
that and cons onto that 


    ,           , 
multiplied by  .


    ,          , 
And finally when I get all the
way down to the end, and I


    ,          ,
only have this end
of List pointer.


    ,         , 
All right, this thing whose
name is nil   well I just

 
    ,          ,
returned an end of
List pointer.


    ,         ,  
So there's a recursive strategy
for doing that.


    ,           , 
Here's the actual procedure
that does that.


    ,          , 
Right, this is an example of
the general strategy of


    ,          ,  
cdr ing down a List and
so called cons ing


    ,           , 
up the result, right.


    ,           ,  
So to Scale a List l by some
scale factor s, what do I do?


     ,            , 
Well there's a test, and List
has the predicate called null.


     ,          ,  
Null means is this thing the
end of List pointer, or


    ,           ,  
another way to think of that is
are there any elements in

 
    ,           , 
this List, right.


    ,           , 
But in any case if I'm looking
at the end of List pointer,


     ,          , 
then I just return the
end of List pointer.


    ,          , 
I just return nil, otherwise I
cons together the result of


    ,          , 
doing what I'm going to do to
the first element in the List,


    ,           , 
namely taking the car of l and
multiplying it by s, and I


     ,           , 
cons that onto recursively
scaling the rest of the List.


     ,          , 
OK, so again, the general idea
is that you recursively do


    ,          , 
something to the rest of the
List, to the cdr of the List,


    ,          , 
and then you cons that onto
actually doing something to

 
    ,           , 
the first element of the List.
When you get down to the end


     ,           , 
here, you return the end of
List pointer, and that's a


     ,          ,  
general pattern for doing
something to a List. Well of


    ,           , 
course you should know by now
that the very fact that


    ,          , 
there's a general pattern there
means I shouldn't be


    ,          , 
writing this procedure at all.


    ,          ,  
What I should do is write a
procedure that's the general


    ,           , 
pattern itself that says, do
something to everything in the


    ,           , 
List and define this thing
in terms of that.


     ,          ,  
Right, make some higher order
procedure, and here's the

 
    ,           , 
higher order procedure
that does that.


    ,           ,  
It's called MAP, and what MAP
does is it takes a List, takes


     ,           ,  
a List l, and it takes a
procedure p, and it returns


    ,           , 
the List of the elements gotten
by applying p to each


    ,          ,
successive element in the List.
All right, so p to v, p


    ,         , 
to v, p of en.


    ,          , 
Right, so I think of taking this
List and transforming it


    ,            , 
by applying p to each element.


      ,            ,  
And you see all this procedure
is is exactly the general


      ,             ,  
strategy I said.

  
      ,             , 
Instead of multiply by  ,
it's do the procedure.

 
      ,           , 
If the List is empty,
return nil.

 
     ,           , 
Otherwise, apply p to the first
element of the List.

 
     ,           , 
Right, apply p to car of l, and
cons that onto the result

 
     ,           , 
of applying p to everything in
the cdr of the List, so that's

 
     ,            , 
a general procedure
called MAP.

 
      ,           , 
And I could define Scale List
in terms of MAP.

 
     ,           ,
Let me show you that first.

 
     ,          , 
But I could say Scale List is
another way to define it is

 
     ,           , 
just MAP along the List by the
procedure, which takes an item

 
     ,           , 
and multiplies it by s.


     ,           , 


     ,           , 
Right, so this is really the
way I should think about


     ,           , 
scaling the List, build that
actual recursion into the


     ,           , 
general strategy, not to every
particular procedure I write.


     ,           ,  
And of course, one of the values
of doing this is that


     ,           ,
you start to see commonality.


    ,         , 
Right, again you're capturing
general patterns of usage.


    ,          , 
For instance, if I said MAP,
the square procedure, down


    ,          , 
this List  TO , then I'd end
up with , ,  and .

 
    ,          , 
Right, or if I said MAP down
this List, lambda of x plus


    ,          ,  
x , if I MAP that down  TO ,
then I'd get the List


    ,           ,  
where everything had   added
to it  right, so I'd get ,


    ,             ,  
, , .


      ,            , 
And you can see that's going
to be a very, very common


     ,           , 
idea  doing something to every
element in the List.


     ,          , 
One thing you might think about
is writing MAP in an


    ,          , 
iterative style.


    ,          , 
The one I wrote happens to
evolve a recursive process,


    ,          ,  
but we could just as easily have
made one that evolves an

 
    ,           , 
iterative process.


    ,          , 
But see the interesting thing
about it is that once you


    ,          , 
start thinking in
terms of MAP  


    ,          , 
see, once you say scale is just
MAP, you stop thinking


    ,          ,  
about whether it's iterative
or recursive, and you just


    ,           , 
say, well there's this
aggregate, there's this List,


    ,          , 
and what I do is transform every
item in the List, and I


    ,          , 
stop thinking about the
particular control


    ,          ,  
structure in order.


    ,           , 
That's a very, very important
idea, and it, I guess it

 
    ,          , 
really comes out of APL.


    ,          , 
It's, sort of, the really
important idea in APL that you


    ,          ,  
stop thinking about control
structures, and you start


    ,           , 
thinking about operations on
aggregates, and then about


    ,          , 
halfway through this course,
we'll see when we talk about


    ,            , 
something called stream
processing, how that view of


      ,           , 
the world really comes
into its glory.


     ,           ,  
This is just us a, sort
of, cute idea.


     ,            , 
But we'll see much more
applications of that later on.


     ,          , 
Well let me mention that there's
something that's very

 
    ,          , 
similar to MAP that's also a
useful idea, and that's  


    ,          , 
see, MAP says I take a List, I
apply something to each item,


    ,          , 
and I return a List of the
successive values.


    ,          ,  
There's another thing I might
do, which is very, very


    ,           , 
similar, which is take a List
and some action you want to do


    ,          , 
and then do it to each item
in the List in sequence.


    ,          , 
Don't make a List of the
values, just do this


    ,           , 
particular action, and that's
something that's


     ,          ,  
very much like MAP.


    ,           , 
It's called for each, and
for each takes a procedure and

 
    ,          , 
a List, and what it's going to
do is do something to every


    ,          , 
item in the List. So basically
what it does  it says if the


    ,           , 
List is not empty, right, if
the List is not null, then


     ,           , 
what I do is, I apply my
procedure to the first item in


     ,          , 
the List, and then I do this
thing to the rest of the List.


    ,          , 
I apply for each to the
cdr of the List.


    ,          , 
All right, so I do it to the
first of the List, do it to


    ,           , 
the rest of the List, and of
course, when I call it


     ,          , 
recursively, that's going to do
it to the rest of the rest


    ,          ,  
of the List and so on.

 
    ,           , 
And finally, when I get done, I
have to just do something to


    ,           , 
say I'm done, so we'll return
the message "done." So that's


     ,          , 
very, very similar to MAP.


    ,          , 
It's mostly different
in what it returns.


    ,          , 
And so for example, if I had
some procedure that printed


    ,          ,  
things on the screen, if I
wanted to print everything in


    ,           , 
the List, I could say for each,
print this List. Or


    ,           , 
if I had a List of figures, and
I wanted to draw them on


     ,          ,  
the display, I could say
for each, display on the


    ,           , 
screen this figure.

 
    ,          , 


    ,            , 
Let's take questions.


      ,           , 
AUDIENCE  Does it create a new
copy with something done to


     ,           ,
it, unless you explicitly
tell it to do that?


     ,          ,  
Is that correct?


     ,            ,  
PROFESSOR  Right.


     ,            , 
Yeah, that's right.


     ,          ,  
For each does not create
a List. It just


    ,           , 
sort of does something.


    ,          , 
So if you have a bunch of things
you want to do and

 
    ,          , 
you're not worried about
values like printing


    ,          ,  
something, or drawing something
on the screen, or


    ,           , 
ringing the bell on the
terminal, or for something,


    ,          , 
you can say for each, you know,
do this for each of


    ,          , 
those things in the List,
whereas MAP actually builds


    ,          , 
you this new collection
of values that you


    ,          , 
might want to use.


    ,          , 
It's just a subtle difference
between them.


    ,          , 
AUDIENCE  Could you write MAP
using for each, so that you


    ,          , 
did some sort of cons or
something to build

  
    ,          , 
the List back up?

 
    ,          , 
PROFESSOR  Well, sort of.

 
    ,          , 
I mean, I probably could.

 
    ,          , 
I can't think of how to do it
right offhand, but yeah, I

 
    ,          , 
could arrange something.

 
    ,          , 
AUDIENCE  The vital difference
between MAP and for each is

 
    ,          , 
one is recursive and the other
is not in the sense you

 
    ,           , 
defined early yesterday,
I believe.

 
     ,           , 
PROFESSOR  Yeah, about MAP and
for each and recursion.

 
     ,           , 
Yeah, that's a good point.

 
     ,           , 


     ,          ,
For the MAP procedure I
wrote, that happens to


    ,         , 
be a recursive process.


    ,          , 
And the reason for that is that
when you've done this


    ,          ,   
thing to the rest of the List,
you're waiting for that value


    ,            , 
so that you can stick it on to
the beginning of the List,


    ,          , 
whereas for each doesn't
really have any


    ,          , 
values to wait for.


    ,          , 
So that turns out to be
an iterative process.


    ,          , 
That's not fundamental.

 
    ,           , 
I could have defined MAP so
that it's evolved by an


     ,          , 
iterative process.


    ,          , 
I just didn't happen to.


    ,          , 
AUDIENCE  If you were to cons
for each with a List that had


    ,          , 
embedded Lists, I imagine
it would work, right?


    ,          ,  
It would give you the internal
elements of each of those


    ,           , 
internal Lists?


    ,           , 
PROFESSOR  OK, the question
is if I [UNINTELLIGIBLE]


     ,          , 
for each or MAP, for that
matter, with a List that had


    ,          , 
Lists in it  

 
    ,          , 
although we haven't really
looked at that yet  


    ,           , 
would that work.


     ,           , 
The answer is yes in the sense
I mean work and no in the


     ,           , 
sense that you mean work,
because all that  


     ,          , 
see if I give you a List, where
hanging off here is, you


    ,          ,  
know, is something that's not
a number, maybe another List


    ,           , 
or you know, another cons or
something, for each just says


    ,          , 
do something to each item in
this List. It goes down


    ,          ,
successively looking
at the cdrs.


    ,         , 
AUDIENCE  OK.

 
    ,          , 
PROFESSOR  And as far as it's
concerned, the first item in


    ,           , 
this List is whatever
is hanging off here.


     ,          , 
AUDIENCE  Mhm.


    ,          , 
PROFESSOR  That might or might
not be the right thing.


    ,          , 
AUDIENCE  So it wouldn't
go down into the  


    ,          ,  
PROFESSOR  Absolutely not.


    ,           , 
I could certainly write
something else.


    ,           , 
There's another, what you're
looking for is a common


     ,          ,  
pattern of usage called tree
recursion, where you take a


    ,           ,
List, and you actually go all
the way down to the what's

 
    ,         , 
called the leaves of the tree.


    ,           , 
And you could write such a
thing, but that's not for each


     ,          , 
and it's not MAP.


    ,          , 
Remember, these things
are really


    ,          ,
being very simple minded.


    ,         , 
OK, no more questions?


    ,          ,
All right, let's break.


    ,         , 
[MUSIC PLAYING]


    ,          , 
PROFESSOR  What I'd like to do
now is spend the rest of this


    ,           , 
time talking about one example,
and this example, I

 
     ,          , 
think, pretty much summarizes
everything that we've done up


    ,          ,  
until now  all right, and that's
List structure and


    ,            , 
issues of abstraction, and
representation and capturing


     ,           , 
commonality with higher order
procedures, and also is going


     ,           , 
to introduce something we
haven't really talked about a


     ,          , 
lot yet   what I said is the
major third theme in this


    ,          , 
course  meta linguistic
abstraction, which is the idea


    ,           , 
that one of the ways of
tackling complexity in


     ,          , 
engineering design is to build
a suitable powerful language.


    ,          , 
You might recall what I said was
pretty much the very most

 
    ,          , 
important thing that we're
going to tell you in this


    ,          ,  
course is that when you think
about a language, you think


    ,           , 
about it in terms of what are
the primitives; what are the


    ,          ,
means of combination  


    ,         , 


    ,          , 
right, what are the things that
allow you to build bigger


    ,          ,
things; and then what are the
means of abstraction.


    ,           , 


      ,            ,  
How do you take those bigger
things that you've built and


      ,             , 
put black boxes around them and
use them as elements in

 
      ,           ,
making something even
more complicated?


     ,          , 
Now the particular language I'm
going to talk about is an


     ,           ,
example that was made up
by a friend of ours


     ,          ,
called Peter Henderson.


     ,          , 


     ,           ,  
Peter Henderson is
at the University


     ,            , 
of Stirling in Scotland.


     ,           , 
And what this language is about
is making figures that


     ,           ,  
sort of look like this.


     ,            , 
This is this is a woodcut by
Escher called "Square Limit."

 
     ,           , 
You, sort of, see it has this
complicated, kind of,


     ,           , 
recursive, sort of, recursive
kind of figure, where there's


     ,           ,  
this fish pattern in the middle
and things sort of


     ,            , 
bleed out smaller and smaller
in self similar ways.


     ,           , 


     ,          , 
Anyway, Peter Henderson's
language was for describing


    ,          , 
figures that look like that and
designing new ones that


    ,           , 
look like that and drawing
them on a display screen.


     ,          , 
There's another theme that we'll
see illustrated by this


    ,          ,  
example, and that's the issue
of what Gerry and I have

  
    ,           ,  
already mentioned a lot  that
there's no real difference, in

 
    ,           , 
some sense, between procedures
and data.

 
    ,          , 
And anyway I hope by the end of
this morning, if you're not

 
    ,          , 
already, you will be completely
confused about what

 
    ,          ,
the difference between
procedures and data are, if

 
    ,         , 
you're not confused about
that already.

 
    ,          , 
Well in any case, let's start
describing Peter's language.

 
    ,          , 
I should start by telling you
what the primitives are.

 
    ,          , 
This language is very
simple because

 
    ,            , 
there's only one primitive.

 
      ,           , 


     ,           , 
A primitive is not quite
what you think it is.


     ,           , 
There's only one primitive
called a picture, and a


     ,          ,  
picture is not quite what
you think it is.


    ,           , 
Here's an example.


    ,          , 
This is a picture of George.


    ,          , 


    ,          , 
The idea is that a picture in
this language is going to be


    ,           , 
something that draws a figure
scaled to fit a rectangle that


     ,          ,  
you specify.

 
    ,           ,  
So here you see in [? Saint ?]


    ,           , 
[? Lawrence's ?]


    ,          ,  
outline of a rectangle, that's
not really part of the


    ,           , 
picture, but the picture  


    ,          , 
you'll give it a rectangle, and
it will draw this figure


    ,          ,  
scaled to fit the rectangle.


    ,            , 
So for example, there's
George, and here,


     ,          , 
this is also George.


    ,          , 
It's the same picture,
right, just scaled to


    ,          , 
fit a different rectangle.

 
    ,          , 
Here's George as a fat kid.


    ,           ,  


     ,            , 
That's the same George.


     ,           , 
It's all the same figure.


     ,           , 
All of these three things
are the same


     ,           , 
picture in this language.


     ,          ,  
I'm just giving it different
rectangles to scale itself in.


    ,           ,  


    ,           , 
OK, those are the primitives.


    ,          , 
That is the primitive.

 
    ,          , 
Now let's start talking about
the means of combination and


    ,          , 
the operations.


    ,          ,  
There is, for example, an
operation called Rotate.


    ,           ,  
And what Rotate does is, if I
have a picture, say a picture


    ,           ,  
that draws an "A" in some
rectangle that I give it, the


    ,           ,  
Rotate of that  


    ,           , 
say the Rotate by   degrees
would, if I give it a


    ,          , 
rectangle, draw the same image,
but again, scaled to


    ,          ,  
fit that rectangle.


    ,           , 

 
    ,          ,  
So that's Rotate
by   degrees.


    ,             ,  
There's another operation called
Flip that can flip


      ,            ,
something, either horizontally
or vertically.


     ,          , 
All right, so those are, sort
of, operations, or you can


     ,          ,  
think of those as means of
combination of one element.


    ,           , 
I can put things together.


    ,          , 
There's a means of combination
called Beside, and what Beside


    ,          ,
does  it'll take two pictures,
let's say A and B  


    ,         ,


    ,         , 
and by picture I mean something
that's going to draw

 
    ,          ,
an image in a specified
rectangle  


    ,         ,
and what Beside will do  


    ,         ,
I have to say, Beside of A and
B, the side of two pictures


    ,         , 
and some number, s.


    ,          ,
And s will be a number
between zero and one.


    ,          , 


     ,          , 
And Beside will draw a picture
that looks like this.


    ,          ,  
It will take the rectangle
you give it and


    ,           , 
scale its base by s.


    ,          , 
Say s is  ..

 
    ,            , 


      ,           , 
And then over here
it will draw  


     ,          ,  
it'll put the first picture,
and over here it'll put the


    ,           ,  
second picture.


    ,           , 
Or for instance if I gave it a
different value of s, if I


    ,          , 
said Beside with a  ., it
would do the same thing,


    ,          , 
except the A would
be much skinnier.


    ,          , 


    ,          , 
So it would draw something
like that.


    ,          , 
So there's a means of
combination Beside, and

 
    ,          , 
similarly there's an Above,
which does the same thing


    ,          , 
except it puts them vertically
instead of horizontally.


    ,          , 


    ,           , 
Well let's look at that.


     ,          , 
All right, there's George and
his kid brother, which is,


    ,           , 
right, constructed by taking
George and putting him Beside


     ,          , 
the Above  


    ,          , 
taking the empty picture, and
there's a thing called the


    ,          , 
empty picture, which does
the obvious thing  


    ,          ,
putting the empty picture above
a copy of George, and

 
    ,         ,  
then putting that whole
thing Beside George.


    ,           ,  


    ,           , 
Here's something called P which
is, again, George Beside


    ,          , 
Flipping George, I think,
horizontally in this case, and


    ,          ,  
then Rotating the whole result
  degrees and putting them


    ,            , 
Beside one another with the
basic rectangle divided at


     ,          , 
 ., right, and I can call that
P. And then I can take P,


    ,           ,  
and put it above the Flipped
copy of itself, and I can call


     ,            , 
that Q.


     ,          , 
Notice how rapidly that we've
built up complexity, just in,

  
    ,          , 
you know,  seconds, you've
gotten from George to that

 
    ,          , 
thing Q. Why is that?

 
    ,          ,  
How are how we able to
do that so fast?

 
    ,           , 
The answer is the closure
property.

 
    ,          , 
See, it's the fact that when
I take a picture and put it

 
    ,          , 
Beside another picture, that's
then, again, a picture that I

 
    ,          ,  
can go and Rotate and Flip or
put Above something else.

 
    ,           ,
Right, and when I take that
element P, which is the Beside

 
    ,         , 
or the Flip or the Rotate
of something,

 
    ,          , 
that's, again, a picture.

 
    ,          , 
Right, the world of pictures is
closed under those means of


    ,           , 
combination.


     ,          , 
So whenever I have something,
I can turn right around and


    ,          , 
use that as an element
in something else.


    ,          ,  
So maybe better than List and
segments, that just gives you


    ,            ,  
an image for how fast you can
build up complexity, because


     ,            , 
operations are closed.


     ,           ,  


     ,           , 
OK, well before we go on with
building more things, let's


    ,          ,
talk about how this language
is actually implemented.

 
    ,         ,  


    ,           , 
The basic element that sits
under the table here is a


    ,          , 
thing called a rectangle, and
what a rectangle is going to


    ,          ,  
be, it's a thing that specified
by an origin that's


    ,           , 
going to be some vector
that says where


    ,           , 
the rectangle starts.


     ,          ,  
And then there's going to be
some other vector that I'm


    ,           ,  
going to call the horizontal
part of the rectangle, and


    ,           , 
another picture called the


    ,            , 
vertical part of the rectangle.

 
      ,           , 
And those three pieces are the
elements  where the lower


     ,           ,  
vertex is, how you get to the
next vertex over here, and how


     ,            , 
you get to the vertex
over there.


     ,          , 
The three vectors specify
a rectangle.


    ,          ,  


    ,           , 
Now to actually build
rectangles, what I'll assume


    ,          , 
is that we have a constructor
called "make rectangle," or


    ,          , 
"make rect," and selectors for
horiz and vert and origin that


    ,          , 
get out the pieces of
that rectangle.


    ,          ,  
And well, you know a lot of
ways you can do this now.

 
    ,           , 
You can do it by using pairs in
some way or other standard


    ,          , 
List or not.


    ,           , 
But in any case, the
implementation of these


     ,          , 
things, that's George's
problem.


    ,          ,  
It's just a data representation
problem.


    ,           ,  
So let's assume we have these
rectangles to work with.


    ,           , 


    ,             ,
OK.


       ,           , 


      ,            ,  
Now the idea of this, remember
what's got to happen.

 
      ,             , 
Somehow we have to worry about
taking the figure and scaling


      ,           , 
it to fit some rectangle that
you give it, that's the basic


     ,           , 
thing you have to arrange, that
these pictures can do.


     ,           , 


     ,           , 
How do we think about that?


     ,           ,  
Well, one way to think about
that is that any time I give


     ,             ,  
you a rectangle, that defines,
in some sense, a


      ,            , 
transformation from
the standard


     ,           ,
square into that rectangle.


     ,          , 
Let me say what I mean.

 
     ,           , 
By the standard square, I'll
mean something, which is a


     ,           , 
square whose coordinates are
 , , and , , and  , and ,.


     ,           , 


     ,           , 
And there's some sort of
the obvious scaling


     ,           , 
transformation, which maps this
to that and this to that,


     ,          , 
and sort of, stretches
everything uniformly.


    ,          ,
So we take a line segment like
this and end up mapping it to


    ,         , 
a line segment like that, so
some point xy goes to some


    ,          ,   
other point up there.


    ,            , 
And although it's not important,
with a little

 
    ,          , 
vector algebra, you could
write that formula.


    ,          , 
The thing that xy goes to, the
point that xy goes to is


    ,          , 
gotten by taking the origin of
the rectangle and then adding


    ,          , 
that as a vector to  


    ,          ,  
well, take x, the x coordinate,
which is something


    ,            ,  
between zero and one, multiply
that by the horizontal vector


     ,            , 
of the rectangle; and take the
y coordinate, which is also


     ,          , 
something between zero and one
and multiply that by the


    ,          , 
vertical vector of
the rectangle.


    ,          , 
That's just a little
linear algebra.

 
    ,          ,  
Anyway, that's the formula,
which is the right obvious


    ,           ,  
transformation that takes things
into the unit square,


    ,           , 
into the interior of
that rectangle.


    ,          , 


    ,          ,  
OK well, let's actually look
at that as a procedure.


    ,           , 
So what we want is the thing
which tells us that particular


    ,          ,  
transformation that a
rectangle defines.


    ,           , 
So here's the procedure.


    ,          ,  
I'll call it coordinate map.


    ,           , 
Coordinate map is the thing that
takes as its argument a

 
    ,          , 
rectangle and returns for you
a procedure on points.


    ,            , 


      ,           ,  
Right, so for each rectangle you
get a way of transforming


     ,            , 
a point xy into that
rectangle.


     ,           ,  
And how do you get it?


     ,            , 
Well I just  


     ,           , 
writing in List what I wrote
there on the blackboard  


     ,          ,  
I add to the origin
of the rectangle


    ,            , 
the result of adding  


     ,          ,  
I take the horizontal part of
the rectangle; I scale that by

  
    ,           , 
the x coordinate of the point.

 
    ,          , 
I take the vertical vector
of the rectangle.

 
    ,          , 
I scale that by the y coordinate
of the point, and

 
    ,           , 
then add all those
three things up.

 
     ,          , 
That's the procedure.

 
    ,          , 
That is the procedure that I'm
going to apply to a point.

 
    ,          , 

 
    ,          , 
And this whole thing is
generated for each rectangle.

 
    ,          ,  
So any rectangle defines a
coordinate MAP, which is a

 
    ,           , 
procedure on points.

 
    ,            , 
OK.


      ,           , 


     ,          ,  
All right, so for example,
George here, my original


    ,           ,  
George, might have been
something that I specified by


    ,            , 
segments in the unit square, and
then for each rectangle I


     ,          ,  
give this thing, I'm going to
draw those segments inside


    ,           , 
that rectangle.


    ,           , 
How actually do I do that?


     ,          , 
Well I take each segment in my
original reference George that


    ,           ,  
was specified, and to each of
the end points of those

 
     ,           , 
segments, I applied the
coordinate MAP of the


    ,          , 
particular rectangle I
want to draw it in.


    ,          , 
So for example, this lower
rectangle, this George as a


    ,          , 
fat kid rectangle, has
its coordinate MAP.


    ,          , 
And if I want to draw this
image, what I do is for each


    ,           ,  
segment here, say for this
segment, I transformed that


     ,            ,  
point by the coordinate MAP,
transform that point by the


     ,            , 
coordinate MAP.


     ,           , 
That will give me this point
and that point and draw the


     ,           , 
segment between them.

 
     ,          , 
Right, that's the idea.


    ,          , 
Right, and if I give it a
different rectangle like this


    ,          ,  
one, that's a different
coordinate MAP, so I get a


    ,           ,
different image of those
line segments.


    ,         ,  
Well how do we actually get
a picture to start with?


    ,           , 
I can build a picture to start
with out of a List of line


    ,          , 
segments initially.


    ,          , 
Here's a procedure that builds
what I'll call a primitive


    ,          , 
picture, meaning one I, sort of,
got that didn't come out


    ,          , 
of Beside or Rotate
or something.

 
    ,          , 
It starts with a List of
line segments, and now


    ,          ,  
it does what I said.


    ,           ,  
What's a picture have to be?


    ,           , 
First of all it's a procedure
that's defined on rectangles.


    ,          ,  


    ,           , 
What does it do?


    ,          , 
It says for each  


    ,          , 
this is going to be a List
of line segments  


    ,           , 
for each segment, for each s,
which is a segment in this


     ,           , 
List of segments, well
it draws a line.

 
     ,           , 
What line does it draw?


     ,          , 
It gets the start point of that
segment, transforms that


    ,          , 
by the coordinate MAP
of the rectangle.


    ,          , 
That's the first new point
it wants to do.


    ,          , 
Then it takes the endpoint of
the segment, transforms that


    ,          , 
by the coordinate MAP of the
rectangle, and then draws a


    ,          , 
line between.


    ,           , 
Let's assume drawline is some
primitive that's built into


     ,          , 
the system that actually draws
a line on the display.


    ,          , 
All right, so it transforms
the endpoints by the

 
    ,          , 
coordinate MAP of the rectangle,
draws a line


    ,          , 
between them, does that
for each s in


    ,          , 
this List of segments.


    ,          ,   
And now remember again, a
picture is a procedure that


    ,            , 
takes a rectangle as argument.


    ,          , 
So when you hand it a rectangle,
this is what it


    ,          , 
does  draws those lines.


    ,          , 
All right, so there's  


    ,           , 
how would I actually
use this thing?


     ,           ,
Let's make it a little
bit more concrete.

 
     ,          , 


     ,          ,  
Right, I would say for instance,
define R to be


    ,           , 
make rectangle of some stuff,
and I'd have to specify some


    ,           ,  
vectors here using
make vector.


     ,           ,  
And then I could say, define
say, G to be make picture, and


    ,           ,  
then some stuff.


    ,           , 
And what I'd have to specify
here is a List of line


    ,          , 
segments, right, using
make segment.


    ,          , 
Make segment might be made out
of vectors, and vectors might


    ,          , 
be made out of points.

 
    ,           , 
And then if I actually wanted to
see the image of G inside a


     ,           , 
rectangle, well a picture is
a procedure that takes a


     ,          , 
rectangle as argument.


    ,          , 
So if I then called G with an
input of R, that would cause


    ,          , 
whatever image G is worrying
about to be drawn inside the


    ,          ,
rectangle R. Right, so that's
how you'd use that.


    ,          , 
[MUSIC PLAYING]


     ,          , 
PROFESSOR  Well why is it that
I say this example is nice?


    ,          , 
You probably don't
think it's nice.


    ,          , 
You probably think it's
more weird than nice.

 
    ,          , 
Right, representing these
pictures as procedures, which


    ,          , 
do complicated things
with rectangles.


    ,          , 
So why is it nice?


    ,          , 


    ,          ,  
The reason it's nice is that
once you've implemented the


    ,           , 
primitives in this way, the
means of combination just fall


    ,          , 
out by implementing
procedures.


    ,          ,  
Let me show you what I mean.


    ,           , 
Suppose we want to
implement Beside.


    ,          , 

  
    ,          ,  
So I'd like to  

 
    ,           , 
suppose I've got a picture.

 
    ,          , 
Let's call it P.

 
    ,          ,  
P is going to be   and
now remember what a

 
    ,            , 
picture really is.

 
     ,          ,  
It's a thing that if you can
hand it some rectangle, it

 
    ,              , 
will cause an image to be drawn
in whatever rectangle

 
       ,            , 
you hand it.

 
      ,            , 
And suppose P two is some other
picture, and you hand

 
      ,            , 
that a rectangle.

 
      ,           , 
And whatever rectangle
you hand it,


     ,           , 
it draws some picture.


     ,           , 


     ,           , 
And now if I'd like to implement
Beside of P and P


     ,           , 
with a scale factor A, well
what does that have to be?


     ,           , 
That's got to be picture.


     ,           , 
It's got to be a thing that you
hand it a rectangle, and


     ,           ,  
it draws something in
that rectangle.


     ,            , 
So if hand Beside
this rectangle  


     ,           , 
let's hand it a rectangle.

 
     ,           , 
Well what's it going to do?


     ,           ,  
it's going to take this
rectangle and split it into


     ,            , 
two at a ratio of A and one
minus A. And it will say, oh


     ,           ,
sure, now I've got
two rectangles.


     ,          , 


     ,           , 
And now it goes off to P and
says P, well draw yourself in


     ,           , 
this rectangle, and goes off
to P, and says, P, fine,


     ,          , 
draw yourself in
this rectangle.


    ,          , 
The only computation it has to
do is figure out what these


    ,          , 
rectangles are.

 
    ,          , 
Remember a rectangle is
specified by an origin and a


    ,          , 
horizontal vector and a vertical
vector, so it's got


    ,          ,  
to figure out what
these things are.


    ,            , 
So for this first rectangle, the
origin turns out to be the


     ,          , 
origin of the original
rectangle, and the vertical


    ,          , 
vector is the same as the
vertical vector of the


    ,          , 
original rectangle.


    ,          , 
The horizontal vector is the
horizontal vector of the


    ,          , 
original rectangle
scaled by A. And


    ,          , 
that's the first rectangle.

 
    ,          , 
The second rectangle, the origin
is the original origin


    ,           , 
plus that horizontal vector
scaled by A. The horizontal


     ,           ,  
vector of the second rectangle
is the rest of the horizontal


     ,            , 
vector of the first one, which
is  minus A times the


     ,          , 
original H, and the vertical
vector is still v. But


    ,          , 
basically it goes and
constructs these two


    ,          , 
rectangles, and the important
point is having constructed


    ,          , 
the rectangles, it says OK,
p, you draw yourself in


    ,          ,  
there, and p, you draw yourself
in there, and that's


    ,           , 
all Beside has to do.

 
    ,          ,
All right, let's look at
that piece of code.


    ,         ,  


    ,           , 
Beside of a picture and another
picture with some


    ,          ,  
scaling ratio is first of all,
since it's a picture, a


    ,           , 
procedure that's going to take
a rectangle as argument.


    ,          ,  
What's it going to do?


    ,             , 
It says, p draw yourself in
some rectangle and p draw


      ,           , 
yourself in some other
rectangle.


     ,           , 
And now what are those
rectangles?


     ,           , 
Well here's the computation.

 
     ,           , 
It makes a rectangle, and this
is the algebra I just did on


     ,          , 
the board  the origin,
something; the horizontal


    ,          ,  
vector, something; and the
vertical vector, something.


    ,           , 
And for p, the rectangle it
wants has some other origin


    ,          , 
and horizontal vector
and vertical vector.


    ,          , 
But the important point is that
all it's saying is, p,


    ,          , 
go do your thing in one
rectangle, and p, go do your


    ,          , 
thing in another rectangle.


    ,           , 
That's all the Beside
has to do.


     ,          ,  
OK, similarly Rotate  

 
    ,           , 
see if I have this picture A,
and I want to look at say


    ,          ,  
rotating A by   degrees, what
that should mean is, well take


    ,           ,  
this rectangle, which is origin
and horizontal vector


    ,            , 
and vertical vector, and now
pretend that it's really the


     ,           , 
rectangle that looks like this,
which has an origin and


     ,           , 
a horizontal vector up here, and
a vertical vector there,


     ,          , 
and now draw yourself with
respect to that rectangle.


    ,          , 
Let me show you that
as a procedure.


    ,          , 
All right, so we'll Rotate   of
the picture, because again,


    ,          , 
a procedure for rectangle, which
says, OK picture, draw

 
    ,          , 
yourself in some rectangle; and
then this algebra is the


    ,           , 
transformation on
the rectangle.


     ,          , 
It's the one which makes it
look like the rectangle is


    ,          , 
sideways, the origin is
someplace else and the


    ,          , 
vertical vector is someplace
else, and the horizontal


    ,          ,
vector is someplace else,
and vertical vector


    ,         , 
is someplace else.


    ,          ,
OK?


    ,         ,
OK.


    ,         , 

 
    ,           , 
OK, again notice, the crucial
thing that's going on here is


     ,          ,  
you're using the representation
of pictures as


    ,            , 
procedures to automatically
get the closure property,


     ,           , 
because what happens is, Beside
just has this thing p.


     ,           , 
Beside doesn't care if that's
a primitive picture or it's


     ,          , 
line segments or if p is,
itself, the result of doing


    ,          , 
Aboves or Besides or Rotates.


    ,          , 
All Beside has to know about,
say, p is that if you hand p


    ,          ,  
a rectangle, it will cause
something to be drawn.


    ,           , 
And above that level, Beside
just doesn't  

  
    ,          ,
it's none of its business how p
accomplishes that drawing.

 
    ,         , 
All right, so you're using the
procedural representation to

 
    ,          , 
ensure this closure.

 
    ,          , 

 
    ,          , 
OK.

 
    ,           ,  
So implementing pictures as
procedures makes these means

 
     ,           ,  
of combination, you know, both
pretty simple and also, I

 
    ,           ,  
think, elegant.

 
    ,           , 
But that's not the
real punchline.

 
    ,          ,  
The real punchline comes when
you look at the means of

 
    ,           , 
abstraction in this language.


    ,          ,  
Because what have we done?


    ,            , 
We've implemented the means of
combination themselves as


     ,           ,  
procedures.


     ,            , 


     ,           , 
And what that means is that when
we go to abstract in this


     ,          , 
language, everything that List
supplies us for manipulating


    ,           ,  
procedures is automatically
available to do things in this


     ,           ,  
picture language.


    ,           , 
The technical term I want to
say is not only is this

 
    ,          ,  
language implemented in List,
obviously it is, but the


    ,           , 
language is nicely embedded
in List. What I mean is by


    ,          ,  
embedding the language in this
way, all the power of List is


    ,           , 
automatically available
as an extension to


    ,          , 
whatever you want to do.


    ,          ,  
And what do I mean by that?


    ,           , 
Example  say, suppose I want
to make a thing that takes


    ,           ,  
four pictures A, B, C and D, and
makes a configuration that


     ,            , 
looks like this.


     ,          , 

 
    ,          , 
Well you might call that, you
know, four pictures or


    ,          , 
something, four pict
configuration.


    ,          , 
How do I do that?


    ,          ,  
Well I can obviously do that.


    ,           , 
I just write a procedure that
takes B above D and A above C


    ,          , 
and puts those things
beside each other.


    ,          , 
So I automatically have List's
ability to do procedure


    ,          ,  
composition.


    ,           , 
And I didn't have to make
that specifically


    ,          , 
in the picture language.

 
    ,          , 
It's automatic from the fact
that the means of combination


    ,          ,  
are themselves procedures.


    ,           , 
Or suppose I wanted to do
something a little bit more


    ,          ,  
complicated.


    ,           , 
I wanted to put in a parameter
so that for each of these, I


    ,           , 
could independently specify
a rotation by   degrees.


     ,          ,  
That's just putting a parameter
in the procedure.


    ,           , 
It's automatically there.


    ,          , 
Right, it automatically comes
from the embedding.


    ,           , 
Or even more, suppose I wanted
to, you know, use recursion.

 
     ,           , 
Let's look at a recursive
means of


     ,           , 
combination on pictures.


     ,          , 
I could say define  


    ,          , 
let's see if you can figure out
what this one is   suppose


    ,          , 
I say define what it means
to right push a picture,


    ,          , 
right push a picture and some
integer N and some scale


    ,           ,   
factor A. I'll define this to
say if N equals  , then the


     ,            , 
answer is the picture.


    ,          ,
Otherwise I'm going to put  


    ,         ,  
oops, name change  P. Otherwise,
I'm going to take P

 
    ,            , 
and put it beside the results of
recursively right pushing P


     ,          , 
with N minus  and A and use a
scale factor of A. OK, so if


    ,          ,  
N  , it's P. Otherwise I put P
with a scale factor of A  


    ,           , 
I'm sorry I didn't align
this right  


    ,          ,  
recursively beside the result of
right pushing P, N minus 


    ,           , 
times with a scale
factor of A.


    ,          , 
There's a recursive means
of combination.


    ,          , 
What's that look like?


    ,          ,  
Well, here's what
it looks like.


    ,           , 
There's George right pushed
against himself twice with a

 
    ,          , 
scale factor of  ..


    ,             ,  
OK.


       ,              , 
Where'd that come from?


       ,            , 
How did I get all this
fancy recursion?


      ,            , 
And the answer is just


      ,            , 
automatic, absolutely automatic.


      ,            , 
Since these are procedures, the
embedding says, well sure,


      ,            , 
I can define recursive
procedures.


      ,           , 
I didn't have to arrange that.


     ,           , 
And of course, we can
do more complicated

 
     ,           , 
things of the same sort.


     ,           , 
I could make something
that does an up push.


     ,           , 
Right, that sort of goes like
this, by recursively putting


     ,           , 
something above.


     ,           , 
Or I could make something
that, sort


     ,           , 
of, was this scheme.


     ,           , 
I might start out with a picture
and then, sort of,


     ,           , 
recursively both push it aside
and above, and that might put


     ,           , 
something there.


     ,           , 
And then up here I put the same
recursive thing, and I

 
     ,           , 
might end up with something
like this.


     ,           , 
Right, so there's a procedure
that's a little bit more


     ,           ,  
complicated than right push
but not much.


     ,            , 
I just do an Above
and a Beside,


     ,           , 
rather than just a Beside.


     ,           , 


     ,           , 
Now if I take that and apply
that with the idea of putting


     ,           ,  
four pictures together, which I
can surely do; and I go and


     ,           , 
I apply that to Q, which we
defined before, right, what I


    ,          , 
end up with this is this thing,
which is, sort of, the

   
    ,          , 
square limit of Q, done twice.

  
    ,          , 

  
    ,          , 
Right, and then we can compare
that with Escher's "Square

  
    ,          , 
Limit." And you see, it's
sort of the same idea.

  
    ,          ,  
Escher's is, of course,
much, much prettier.

  
    ,           , 
If we go back and look at
George, right, if we go look

  
    ,          , 
at George here  

  
    ,          , 
see, I started with a fairly
arbitrary design, this picture

  
    ,          , 
of George and did
things with it.

  
    ,          , 
Right, whereas if we go look at
the Escher picture, right,

  
    ,          ,  
the Escher picture is not
an arbitrary design.

 
    ,           , 
It's this very, very clever
thing, so that when you take

 
    ,           , 
this fish body and Rotate it and
shrink it down, it bleeds

 
     ,           , 
into the next one
really nicely.

 
     ,           , 

 
     ,           , 
And of course with George,
I didn't really do

 
     ,          , 
anything like that.

 
    ,          ,  
So if we look at George, right,
there's a little bit of

 
    ,           , 
match up, but not very nice,
and it's pretty arbitrary.

 
    ,          , 
One very nice project, by the
way, would be to write a

  
    ,          , 
procedure that could take some
basic figure like this George

 
    ,           ,  
thing and start moving the ends
of the lines around, so

 
     ,           , 
you got a really nice one when
you went and did that "Square

 
    ,          , 
Limit" process.

 
    ,          , 
That'd be a really nice
thing to think about.

 
    ,          , 
Well so, we can combine
things.

 
    ,           , 
We can recursive procedures.

 
     ,          , 
We can do all kinds of things,
and that's all automatic.

 
    ,          ,  
Right, the important point, the
difference between merely

 
    ,           , 
implementing something in
a language and embedding

  
    ,          , 
something in the language, so
that you don't lose the

 
    ,          , 
original power of the language,
and what List is

 
    ,          , 
great at, see List is a lousy
language for doing any

 
    ,          ,  
particular problem.

 
    ,             , 
What it's good for is figuring
out the right language that

 
      ,           ,   
you want and embedding that in
List. That's the real power of

 
     ,             , 
this approach to design.

 
     ,           , 
Of course, we can go further.

 
     ,           , 
See, you saw the other thing
that we can do in List is

 
     ,          ,  
capture general methods of doing
things as higher order

  
    ,           ,  
procedures.

 
    ,           ,  
And you probably just from me
drawing it got the idea that

 
    ,           ,  
right push and the analogous
thing where you push something

 
    ,           , 
up and up and up and up and this
corner push thing are all

 
    ,          , 
generalizations of a common
kind of idea.

 
    ,          , 
So just to illustrate and give
you practice in looking at a

 
    ,          , 
fairly convoluted use of higher
order procedures, let

 
    ,          , 
me show you the general idea
of pushing some means of

 
    ,          , 
combination to recursively
repeat it.

 
    ,          , 
So here's a good one
to puzzle out.

  
    ,          , 
We'll define it what it means
to push using a means of

 
    ,           ,  
combination.

 
     ,            ,
Comb is going to be something
like the Beside or Above.

 
     ,          , 
Well what's that going to be.

 
     ,           , 
That's going to be a procedure,
remember what

 
     ,          , 
Beside actually was, right.

 
    ,          ,  
It took a picture, took two
pictures and a scale factor.

 
    ,           , 
Using that I produced something
that took a level

 
    ,          ,  
number and a picture and a scale
factor, that I called

 
    ,           , 
right push.

  
    ,          ,  
So this is going to be something
that takes a

 
    ,           ,  
picture, a level number and
a scale factor, and

 
    ,           , 
it's going to say  

 
    ,          , 

 
    ,          , 
I'm going to do some
repeated operation.

 
    ,          ,  
I'm going to repeatedly apply
the procedure which takes a

 
    ,           , 
picture and applies the means of
combination to the picture

 
    ,          , 
and the original picture and the
one I took in here and the

 
    ,           ,  
scale factor, and I do the
thing which repeats this

 
     ,           , 
procedure N times, and I apply
that whole thing to my

  
    ,          , 
original picture.

 
    ,          ,  

 
    ,           , 
Repeated here, in case you
haven't seen it, is another

 
    ,          , 
higher order procedure that
takes a procedure and a number

 
    ,          , 
and returns for you another
procedure that applies this

 
    ,          , 
procedure N times.

 
    ,          , 
And I think some of you have
already written repeated as an

 
    ,          , 
exercise, but if you haven't,
it's a very good exercise in

 
    ,          , 
thinking about higher
order procedures.

 
    ,          , 
But in any case, the result of
this repeated is what I apply

  
    ,          , 
to picture.

 
    ,          , 

 
    ,          , 
And having done that, that's
going to capture  

 
    ,          ,  
that is the thing, the way I got
from the idea of Beside to

 
    ,             , 
the idea of right push So having
done that, I could say

 
      ,          , 
define right push to
be push of Beside.

 
    ,          , 

 
    ,           , 
Or if I say, define up push to
be push of Beside, I'd get the

 
     ,          , 
analogous thing or define
corner push to be push of some

 
    ,          ,
appropriate thing that did both
the Beside and Above, or

  
    ,         , 
I could push anything.

 
    ,          , 
Anyway this is, if you're having
trouble with lambdas,

 
    ,          , 
this is an excellent exercise
in figuring

 
    ,          ,  
out what this means.

 
    ,           , 
OK, well there's a lot to
learn from this example.

 
    ,          ,  
The main point I've been
dwelling on is the notion of

 
    ,            , 
nicely embedding a language
inside another language.

 
     ,          ,  
Right, so that all the power of
this language like List of

 
    ,           , 
the surrounding language is
still accessible to you and

 
    ,          , 
appears as a natural
extension of the

  
    ,           ,   
language that you built.

 
     ,             , 
That's one thing that this
example shows very well.

 
     ,           , 
OK.

 
     ,           , 
Another thing is, if you go
back and think about that,

 
     ,          , 
what's procedures
and what's data.

 
    ,          , 
You know, by the time we
get up to here, my God,

 
    ,          , 
what's going on.

 
    ,          , 
I mean, this is some procedure,
and it takes a

 
    ,           , 
picture and an argument,
and what's a picture.

 
     ,          ,  
Well, a picture itself, as you
remember, was a procedure, and

 
    ,           , 
that took a rectangle.


    ,          ,  
And a rectangle is
some abstraction.


    ,           ,  
And I hope now that by now
you're completely lost as to


    ,           , 
the question of what
in the system is


    ,          , 
procedure and what's data.


    ,          ,  
You see, there isn't
any difference.


    ,           ,  
There really isn't.


    ,           , 
And you might think of a
picture sometimes as a


    ,          , 
procedure and sometimes as data,
but that's just, sort


    ,          , 
of, you know, making you
feel comfortable.

 
    ,          , 
It's really both in some sense
or neither in some sense.


    ,          , 
OK, there's a more general point
about the structure of


    ,           , 
the system as creating a
language, viewing the


     ,           ,  
engineering design process as
one of creating language or


     ,           , 
rather one of creating
a sort of sequence


    ,          , 
of layers of language.


    ,          ,  
You see, there's this
methodology, or maybe I should


    ,           , 
say mythology, that's, sort
of, charitably called


    ,          ,
software, quote, engineering.


    ,         ,  
All right, and what does it say,
it's says well, you go

 
    ,           , 
and you figure out your task,
and you figure out exactly


    ,           , 
what you want to do.


     ,          ,  
And once you figure out exactly
what you want to do,


    ,           , 
you find out that it breaks out
into three sub tasks, and


    ,          , 
you go and you start working
on   and you work on this


    ,          , 
sub task, and you figure out
exactly what that is.


    ,           ,
And you find out that that
breaks down into three


     ,         , 
sub tasks, and you specify them
completely, and you go


    ,          , 
and you work on those two, and
you work on this sub one, and


    ,          ,
you specify that exactly.

 
    ,         , 
And then finally when you're
done, you come back way up


    ,          ,
here, and you work on your
second sub task, and specify


    ,         , 
that out and work it out.


    ,          , 
And then you end up with  


    ,          , 
you end up at the end with
this beautiful edifice.


    ,           , 
Right, you end up with a
marvelous tree, where you've


     ,           , 
broken your task into sub tasks
and broken each of


     ,           , 
these into sub tasks
and broken those


     ,           , 
into sub tasks, right.


     ,          ,  
And each of these nodes is
exactly and precisely defined

 
    ,           ,
to do the wonderful, beautiful
task to make it fit into the


    ,         , 
whole edifice, right.


    ,          ,  
That's this mythology.


    ,           , 
See only a computer scientist
could possibly believe that


    ,          , 
you build a complex system
like that, right.


    ,          ,  
Contrast that with this
Henderson example.


    ,           ,
It didn't work like that.


    ,         ,
What happened was that
there was a sequence


    ,         ,
of layers of language.


    ,         , 
What happened?

 
    ,          , 
There was a layer of a thing
that allowed us to build


    ,          ,  
primitive pictures.


    ,           ,


    ,         , 
There's primitive pictures
and that was a language.


    ,          , 
I didn't say much about it.


    ,          ,  
We talked about how to construct
George, but that was


    ,            , 
a language where you talked
about vectors and line


     ,           , 
segments and points and where
they sat in the unit square.


     ,          ,   
And then on top of that,
right, on top of that  


    ,            , 
so this is the language
of primitive pictures.

 
    ,          ,  


    ,           , 
Right, talking about line
segments in particular


    ,          , 
pictures in the unit square.


    ,          , 
On top of that was
a whole language.


    ,          , 
There was a language of
geometric combinators, a


    ,          , 
language of geometric positions,
which talks about


    ,          , 
things like Above and Beside
and right push and Rotate.


    ,          ,  
And those things, sort of,
happened with reference to the


    ,           , 
things that are talked about
in this language.


    ,          , 

 
    ,          ,  
And then if we like, we saw that
above that there was sort


    ,          , 
of a language of schemes
of combination.


   ,         , 


   ,         , 
For example, push, which talked
about repeatedly doing


   ,         , 
something over with
a scale factor.


   ,         , 
And the things that were being
discussed in that language


   ,         , 
were, sort of, the things
that happened down here.


   ,         , 
So what you have is, at each
level, the objects that are


   ,         ,  
being talked about are the
things that were erected at


   ,          , 
the previous level.

 
   ,         , 
What's the difference between
this thing and this thing?


   ,         , 
The answer is that over here in
the tree, each node, and in


   ,          , 
fact, each decomposition down
here, is being designed to do


    ,          , 
a specific task, whereas in
the other scheme, what you


    ,         ,  
have is a full range
of linguistic


   ,          , 
power at each level.


   ,         , 
See what's happening there, at
any level, it's not being set


   ,         , 
up to do a particular task.


   ,         , 
It's being set up to talk about
a whole range of things.


   ,         , 
The consequence of that for
design is that something

  
   ,         , 
that's designed in that method
is likely to be more robust,

 
   ,          , 
where by robust, I mean that if
you go and make some change

 
    ,         , 
in your description, it's more
likely to be captured by a

 
   ,         ,  
corresponding change, in the
way that the language is

 
   ,          , 
implemented at the next level
up, right, because you've made

 
   ,         , 
these levels full.

 
   ,         , 
So you're not talking about a
particular thing like Beside.

 
   ,          , 
You've given yourself a whole
vocabulary to express things

 
    ,          , 
of that sort, so if you go and
change your specifications a

 
    ,          , 
little bit, it's more likely
that your methodology will

 
    ,         , 
able to adapt to capture that
change, whereas a design like


   ,         , 
this is not going to be robust,
because if I go and


   ,         , 
change something that's in here,
that might affect the


   ,          , 
entire way that I decomposed
everything down,


    ,         , 
further down the tree.


   ,         , 
Right, so very big difference
in outlook in decomposition,


   ,         , 
levels of language
rather than, sort


   ,          , 
of, a strict hierarchy.


    ,         , 
Not only that, but when you have
levels of language you've


   ,         , 
given yourself a different
vocabularies for talking about

 
   ,         , 
the design at different
levels.


   ,         , 
So if we go back and look at
George one last time, if I


   ,         , 
wanted to change this picture
George, see suddenly I have a


   ,         ,  
whole different ways of
describing the change.


   ,          , 
Like for example, I may want to
go to the basic primitive


   ,         , 
design and move the endpoint
of some vector.


   ,          , 
That's a change that I would
discuss at the lowest level.


    ,          , 
I would say the endpoint
is somewhere else.


    ,          , 
Or I might come up and say, well
the next thing I wanted


    ,          , 
to do, this little replicated
element, I might want to do by

 
    ,          , 
something else.


    ,         , 
I might want to put a scale
factor in that Beside.


   ,         , 
That's a change that I would
discuss at the next level of


   ,         , 
design, the level
of combinators.


   ,         , 
Or I might want to say, I might
want to change the basic


   ,         , 
way that I took this pattern
and made some recursive


   ,         ,  
decomposition, maybe not
bleeding out toward the


   ,           , 
corners or something else.


    ,         , 
That would be a change
that I would discuss


   ,         , 
at the highest level.

 
   ,         ,  
And because I've structured the
system to be this way, I


   ,          , 
have all these vocabularies for
talking about change in


   ,         , 
different ways and a lot of
flexibility to decide which


   ,         , 
one's appropriate.


   ,         , 


   ,         , 
OK, well that's sort of a big
point about the difference in


   ,         , 
software methodology that comes
out from List, and it


   ,         , 
all comes, again, out of the
notion that really, the design


   ,         , 
process is not so much
implementing programs as


   ,         , 
implementing languages.

 
   ,          , 
And that's really the powerful
of List. OK, thank you.


    ,          , 
Let's take a break.


    ,         ,
        ,               ,


       ,           , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, Hal just told
us how you build robust


      ,            , 
systems. The key idea was  


      ,             ,   
I'm sure that many of you don't
really assimilate that


       ,              , 
yet   but the key idea is that
in order to make a system


      ,            , 
that's robust, it has to be
insensitive to small changes,


      ,            , 
that is, a small change in the
problem should lead to only a


      ,            , 
small change in the solution.

 
      ,            , 
There ought to be
a continuity.


      ,            ,
The space of solutions ought to
be continuous in this space


      ,           , 
of problems.


      ,             , 
The way he was explaining how
to do that was instead of


       ,            , 
solving a particular problem
at every level of


      ,            , 
decomposition of the problem at
the subproblems, where you


      ,            , 
solve the class of problems,
which are a neighborhood of


      ,            , 
the particular problem that
you're trying to solve.


      ,            , 
The way you do that is by
producing a language at that


      ,            ,  
level of detail in which the
solutions to that class of

 
      ,            , 
problems is representable
in that language.


     ,           , 
Therefore when you makes more
changes to the problem you're


     ,           , 
trying to solve, you generally
have to make only small local


     ,            , 
changes to the solution you've
constructed, because at the


      ,           , 
level of detail you're working,
there's a language


     ,           , 
where you can express the
various solutions to alternate


     ,            , 
problems of the same type.


      ,           ,  
Well that's the beginning of a
very important idea, the most


     ,            , 
important perhaps idea that
makes computer science more


     ,            , 
powerful than most of the other
kinds of engineering

 
      ,           ,  
disciplines we know about.


     ,            , 
What we've seen so far
is sort of how to use


     ,           ,  
embedding of languages.


     ,            , 
And, of course, the power of
embedding languages partly


     ,           , 
comes from procedures
like this one that


     ,           ,  
I showed you yesterday.


     ,             , 
What you see here is the
derivative program that we


      ,            , 
described yesterday.


      ,            , 
It's a procedure that takes a
procedure as an argument and


      ,            , 
returns a procedure
as a value.

 
      ,           , 
And using such things
is very nice.


     ,           , 
You can make things like push
combinators and all that sort


     ,           ,  
of wonderful thing that
you saw last time.


     ,            , 
However, now I'm going to
really muddy the waters.


     ,           , 
See this confuses the issue of
what's the procedure and what


     ,           , 
is data, but not very badly.


     ,           , 
What we really want to do is
confuse it very badly.


     ,           ,  
And the best way to do that is
to get involved with the


     ,            , 
manipulation of the algebraic
expressions that the


     ,           , 
procedures themselves
are expressed in.

 
     ,           , 
So at this point, I want to talk
about instead of things


     ,           ,  
like on this slide, the
derivative procedure being a


     ,            , 
thing that manipulates
a procedure  


     ,           , 
this is a numerical method
you see here.


     ,           , 
And what you're seeing is
a representation of the


     ,           ,
numerical approximation
to the derivative.


     ,            , 
That's what's here.


       ,            , 
In fact what I'd like to talk
about is instead things that


      ,            , 
look like this.


      ,           ,  
And what we have here are rules
from a calculus book.

 
     ,            ,  
These are rules for finding
the derivatives of the


     ,            , 
expressions that one
might write in


     ,           , 
some algebraic language.


     ,           , 
It says things like a derivative
of a constant is  .


     ,           ,  
The derivative of the valuable
with respect to which you are


     ,            , 
taking the derivative is .


     ,           , 
The derivative of a constant
times the function is the


     ,           , 
constant times the derivative
of the function,


     ,           ,  
and things like that.


     ,            , 
These are exact expressions.

 
     ,           ,  
These are not numerical
approximations.


     ,            , 
Can we make programs?


     ,           ,   
And, in fact, it's very easy
to make programs that


     ,             , 
manipulate these expressions.


     ,           , 


     ,           , 
Well let's see.


     ,            , 
Let's look at these rules
in some detail.


      ,            , 
You all have seen these rules
in your elementary calculus


      ,            , 
class at one time or another.


      ,            , 
And you know from calculus
that it's easy to produce

 
      ,           , 
derivatives of arbitrary
expressions.


     ,           ,  
You also know from your
elementary calculus that it's


     ,            , 
hard to produce integrals.


     ,           , 
Yet integrals and derivatives
are opposites of each other.


     ,           ,  
They're inverse operations.


     ,            , 
And they have the same rules.


     ,           , 
What is special about these
rules that makes it possible


     ,           , 
for one to produce derivatives
easily and


     ,           ,  
integrals why it's so hard?


     ,            , 
Let's think about that
very simply.

 
     ,           , 
Look at these rules.


     ,           , 
Every one of these rules, when
used in the direction for


     ,           , 
taking derivatives, which is
in the direction of this


     ,           , 
arrow, the left side is
matched against your


     ,           , 
expression, and the right side
is the thing which is the


     ,           , 
derivative of that expression.


     ,           , 
The arrow is going that way.


     ,           , 


     ,            , 
In each of these rules, the
expressions on the right hand


      ,            ,  
side of the rule that are
contained within derivatives

  
      ,             , 
are subexpressions, are proper
subexpressions, of the

 
      ,            , 
expression on the
left hand side.

 
      ,           , 
So here we see the derivative
of the sum, with is the

 
     ,           , 
expression on the left hand
side is the sum of the

 
     ,            ,  
derivatives of the pieces.

 
      ,            ,  
So the rule of moving to the
right are reduction rules.

 
     ,            , 
The problem becomes easier.

 
     ,            , 
I turn a big complicated problem
it's lots of smaller

 
      ,           ,   
problems and then combine the
results, a perfect place for

 
     ,             , 
recursion to work.

 
     ,           , 
If I'm going in the other
direction like this, if I'm


     ,           , 
trying to produce integrals,
well there are several


     ,           , 
problems you see here.


     ,           , 
First of all, if I try to
integrate an expression like a


     ,            , 
sum, more than one
rule matches.


      ,           , 
Here's one that matches.


     ,           , 
Here's one that matches.


     ,           , 
I don't know which
one to take.


     ,           , 
And they may be different.


     ,             , 
I may get to explore
different things.

 
       ,            , 
Also, the expressions become
larger in that direction.


      ,            , 
And when the expressions become
larger, then there's no


      ,            , 
guarantee that any particular
path I choose will terminate,


      ,           , 
because we will only terminate
by accidental cancellation.


     ,           , 
So that's why integrals
are complicated


     ,           , 
searches and hard to do.


     ,           , 
Right now I don't want to do
anything as hard as that.


     ,           , 
Let's work on derivatives
for a while.


     ,           , 
Well, these roles are
ones you know for


     ,           , 
the most part hopefully.

 
     ,           , 
So let's see if we can write a
program which is these rules.


     ,           , 
And that should be very easy.


     ,           , 
Just write the program.


     ,           ,  
See, because while I showed you
is that it's a reduction


     ,            , 
rule, it's something appropriate
for a recursion.


     ,           , 
And, of course, what we have for
each of these rules is we


     ,           ,
have a case in some
case analysis.


     ,           , 
So I'm just going to write
this program down.


      ,           , 


     ,           , 
Now, of course, I'm going to be
saying something you have

 
     ,           , 
to believe.


     ,           , 
Right?


     ,           , 
What you have to believe is I
can represent these algebraic


     ,            , 
expressions, that I can grab
their parts, that I can put


      ,            , 
them together.


      ,            , 
We've invented list structures
so that you can do that.


      ,            , 
But you don't want to worry
about that now.


      ,           , 
Right now I'm going to write the
program that encapsulates


     ,           , 
these rules independent of
the representation of the


     ,           , 
algebraic expressions.

 
     ,            , 


      ,           , 
You have a derivative of
an expression with


     ,            , 
respect to a variable.


      ,           ,  
This is a different
thing than the


     ,            ,  
derivative of the function.


     ,            , 
That's what we saw last time,
that numerical approximation.


     ,            , 
It's something you can't
open up a function.


      ,           , 
It's just the answers.


     ,           , 
The derivative of
an expression is


     ,           , 
the way it's written.

 
     ,           , 
And therefore it's a syntactic
phenomenon.


     ,            , 
And so a lot of what we're going
to be doing today is


      ,           ,  
worrying about syntax,
syntax of expressions


     ,            , 
and things like that.


     ,           ,  
Well, there's a case analysis.


     ,              , 
Anytime we do anything
complicated thereby a


       ,            , 
recursion, we presumably
need a case analysis.


      ,            , 
It's the essential
way to begin.


      ,            , 
And that's usually
a conditional


      ,            , 
of some large kind.

 
      ,            ,   
Well, what are their
possibilities?


      ,             , 
the first rule that you saw is
this something a constant?


     ,           , 


     ,            , 
And what I'm asking is, is the
expression a constant with


      ,           , 
respect to the variable given?


     ,           , 


     ,           , 
If so, the result is  ,
because the derivative


     ,           , 
represents the rate of
change of something.


     ,           ,
If, however, the expression that
I'm taking the derivative


     ,          , 
of is the variable I'm varying,
then this is the same

 
     ,           , 
variable, the expression var,
then the rate of change of the


     ,           , 
expression with respect
to the variable is .


     ,           , 
It's the same .


     ,           , 


     ,            , 
Well now there are a couple
of other possibilities.


      ,            ,  
It could, for example,
be a sum.


      ,             , 
Well, I don't know how I'm going
to express sums yet.


      ,            , 
Actually I do.


      ,            , 
But I haven't told you yet.


      ,           , 
But is it a sum?

 
     ,           , 
I'm imagining that there's
some way of telling.


     ,            , 
I'm doing a dispatch on the type
of the expression here,


      ,           , 
absolutely essential in
building languages.


     ,           , 
Languages are made out of
different expressions.


     ,           , 
And soon we're going to see
that in our more powerful


     ,           , 
methods of building languages
on languages.


     ,           , 
Is an expression a sum?


     ,           , 
If it's a sum, well, we know the
rule for derivative of the


     ,           , 
sum is the sum of the
derivatives of the parts.


     ,           , 
One of them is called
the addend and the

  
     ,           ,  
other is the augend.

 
     ,            , 
But I don't have enough space
on the blackboard

 
     ,           , 
to such long names.

 
     ,           , 
So I'll call them A and A.

 
     ,            , 
I want to make a sum.

 
      ,           ,  

 
     ,            ,  
Do you remember which is the sum
for end or the menu end?

 
     ,              , 
Or was it the dividend
and the divisor or

 
       ,            ,  
something like that?

 
      ,             , 
Make sum of the derivative
of the A, I'll call it.

 
      ,           , 
It's the addend of the
expression with respect to the


     ,           , 
variable, and the derivative of
the A of the expression,


     ,           ,  
because the two arguments,
the addition with


     ,            , 
respect to the variable.


     ,           , 


     ,           , 
And another rule that we know is
product rule, which is, if


     ,           ,  
the expression is a product.


     ,            ,  


     ,            ,  
By the way, it's a good idea
when you're defining things,


     ,            , 
when you're defining predicates,
to give them a

 
     ,           , 
name that ends in
a question mark.


     ,           , 
This question mark doesn't
mean anything.


     ,           , 
It's for us as an agreement.


     ,           , 
It's a conventional interface
between humans so you can read


     ,           , 
my programs more easily.


     ,           , 
So I want you to, when you write
programs, if you define


     ,           , 
a predicate procedure, that's
something that rings true of


     ,           , 
false, it should have a name
which ends in question mark.


     ,           , 
The list doesn't care.


     ,          , 
I care.

 
    ,          ,  
I want to make a sum.


    ,           , 
Because the derivative of a
product is the sum of the


    ,          , 
first times the derivative of
the second plus the second


    ,          , 
times the derivative of the
first. Make a sum of two


    ,          , 
things, a product of, well, I'm
going to say the M of the


    ,          , 
expression, and the derivative
of the M of the expression


    ,           , 
with respect to the variable,
and the product of the


     ,           , 
derivative of M, the multiplier
of the expression,


     ,          , 
with respect to the variable.


    ,          , 
It's the product of that and the
multiplicand, M, of the

 
    ,          , 
expression.


    ,          , 


    ,          , 
Make that product.


    ,          , 
Make the sum.


    ,          ,  
Close that case.


    ,           , 
And, of course, I could add as
many cases as I like here for


    ,           , 
a complete set of rules you
might find in a calculus book.


     ,          , 


    ,          ,
So this is what it takes to
encapsulate those rules.


    ,         ,  
And you see, you have to realize
there's a lot of

 
    ,           , 
wishful thinking here.


    ,          , 
I haven't told you anything
about how I'm going to make


    ,          , 
these representations.


    ,          , 
Now, once I've decided that
this is my set of rules, I


    ,          , 
think it's time to play with
the representation.


    ,          ,  
Let's attack that/


    ,            , 
Well, first of all, I'm
going to play a pun.


     ,           , 
It's an important pun.


     ,           , 
It's a key to a sort
of powerful idea.


     ,           , 

 
     ,          , 
If I want to represent sums, and
products, and differences,


    ,          , 
and quotients, and things like
that, why not use the same


    ,           , 
language as I'm writing
my program in?


     ,          , 
I write my program in algebraic
expressions that


    ,          , 
look like the sum of the product
on a and the product


    ,          , 
of x and x, and things
like that.


    ,          , 
And the product of b and x and
c, whatever, make that a sum


    ,           , 
of the product.


     ,          , 
Right now I don't want to have
procedures with unknown


    ,          ,  
numbers of arguments, a product
of b and x and c.

 
    ,           ,  


    ,           , 
This is list structure.


    ,          , 
And the reason why this is nice,
is because any one of


    ,            , 
these objects has a property.


      ,           , 
I know where the car is.


     ,           ,  
The car is the operator.


     ,            , 
And the operands are the
successive cdrs the successive


     ,          ,
cars of the cdrs of the
list that this is.


    ,         , 
It makes it very convenient.


    ,          , 
I have to parse it.

 
    ,          , 
It's been done for me.


    ,          ,
I'm using the embedding
and Lisp to advantage.


    ,         , 


    ,          , 
So, for example, let's start
using list structure to write


    ,          , 
down the representation that I'm
implicitly assuming here.


    ,          , 
Well I have to define various
things that are implied in


    ,          , 
this representation.


    ,          , 
Like I have to find out
how to do a constant,


    ,          , 
how you do same variable.


    ,          , 
Let's do those first. That's
pretty easy enough.

 
    ,          , 
Now I'm going to be introducing
lots of primitives


    ,          , 
here, because these are
the primitives that


    ,          ,
come with list structure.


    ,         , 
OK, you define a constant.


    ,           ,  


     ,            , 
And what I mean by a constant,
an expression that's constant


     ,           , 
with respect to a veritable,
is that the expression is


     ,          , 
something simple.


    ,          , 
I can't take it into
pieces, and yet


    ,          , 
it isn't that variable.

  
    ,          , 
I can't break it up, and yet
it isn't that variable.

 
    ,          , 
That does not mean that there
may be other expressions that

 
    ,          , 
are more complicated
that are constants.

 
    ,          ,  
It's just that I'm going to
look at the primitive

 
    ,            , 
constants in this way.

 
     ,          ,  
So what this is, is it says
that's it's the and.

 
    ,           ,  
I can combine predicate
expressions which return true

 
    ,           , 
or false with and.

 
    ,          ,  
Something atomic, The expression
is atomic, meaning

 
    ,           ,  
it cannot be broken
into parts.

 
    ,           , 
It doesn't have a car and a cdr.
It's not a list. It adds


    ,          , 
a special test built
into the system.


    ,           , 
And it's not identically
equal to that variable.


     ,          , 
I'm representing my variable
by things that are symbols


    ,          , 
which cannot be broken into
pieces, things like x, and y,


    ,          ,  
things like this.


    ,           , 


    ,          , 
Whereas, of course, something
like this can be broken up


    ,          , 
into pieces.


    ,          , 

 
    ,           , 
And the same variable of an
expression with respect to a


     ,          , 
variable is, in fact, an
atomic expression.


    ,           ,  
I want to have an atomic


     ,           , 
expression, which is identical.


    ,           ,  


     ,           ,
I don't want to look inside
this stuff anymore.


    ,         ,  
These are primitive maybe.


    ,           , 
But it doesn't matter.


    ,          ,
I'm using things that are given
to me with a language.


    ,         ,  
I'm not terribly interest
in them

 
    ,           ,  
Now how do we deal with sums?


    ,           ,  
Ah, something very interesting
will happen.


    ,           , 
A sum is something which is not
atomic and begins with the


    ,          , 
plus symbol.


    ,          , 
That's what it means.


    ,          ,
So here, I will define.


    ,         , 


    ,           , 
An question is a sum if and it's
not atomic and it's head,


     ,          , 
it's beginning, its car of the
expression is the symbol plus.


    ,          , 

 
    ,          , 
Now you're about to see
something you haven't seen


    ,          , 
before, this quotation.


    ,          , 


    ,          , 
Why do I have that
quotation there?


    ,           , 
Say your name,


     ,          , 
AUDIENCE  Susanna.


    ,          , 
PROFESSOR  Louder.


    ,          , 
AUDIENCE  Susanna


    ,          , 
PROFESSOR  Say your name.


    ,          , 
AUDIENCE  Your name.

 
    ,          , 
PROFESSOR  Louder.


    ,          , 
AUDIENCE  Your name.


    ,          ,  
PROFESSOR  OK.


    ,           ,  
What I'm showing you here
is that the words


    ,           , 
of English are ambiguous.


    ,          , 
I was saying, say your name.


    ,          ,  
I was also possibly saying
say, your name.


    ,             , 


      ,           ,  
But that cannot be distinguished
in speech.


     ,            ,  
However, we do have a notation
in writing, which is quotation

 
     ,           , 
for distinguishing these
two possible meanings.


    ,          , 
In particular, over here, in
Lisp we have a notation for


    ,          , 
distinguishing these meetings.


    ,          ,
If I were to just write a plus
here, a plus symbol, I would


    ,         ,  
be asking, is the first element
of the expression, is


    ,           , 
the operator position
of the expression,


    ,          , 
the addition operator?


    ,          , 
I don't know.


    ,          , 
I would have to have written the
addition operator there,


    ,          , 
which I can't write.

 
    ,          , 
However, this way I'm asking,
is this the symbolic object


    ,          , 
plus, which normally stands
for the addition operator?


    ,           , 
That's what I want.


     ,          , 
That's the question
I want to ask.


    ,          , 
Now before I go any further,
I want to point out the


    ,          , 
quotation is a very complex
concept, and adding it to a


    ,            , 
language causes a great
deal of troubles.


      ,            , 
Consider the next slide.


      ,           , 
Here's a deduction which we
should all agree with.


     ,           , 
We have, Alyssa is smart and
Alyssa is George's mother.

 
     ,           , 
This is an equality, is.


     ,           , 
From those two, we can deduce
that George's mother is smart.


     ,           , 
Because we can always substitute
equals for equals


     ,           , 
in expressions.


     ,           , 
Or can we?


     ,           ,  
Here's a case where we have
"Chicago" has seven letters.


     ,            ,  
The quotation means that I'm
discussing the word Chicago,


     ,            ,
not what the word represents.


     ,          , 


     ,           , 
Here I have that Chicago is the
biggest city in Illinois.

 
     ,           , 
As a consequence of this, I
would like to deduce that the


     ,           , 
biggest city in Illinois
has seven letters.


     ,            ,
But that's manifestly false.


      ,          , 


     ,           , 
Wow, it works.


     ,          , 
OK, so once we have things like
that, our language gets


    ,          , 
much more complicated.


    ,          , 
Because it's no longer true that
things we tend to like to


    ,          , 
do with languages, like
substituting equals for equals


    ,          , 
and getting right answers, are
going to work without being

  
    ,          , 
very careful.

 
    ,          , 
We can't substitute into what's
called referentially

 
    ,           , 
opaque contexts, of which a
quotation is the prototypical

 
     ,          , 
type of referentially
opaque context.

 
    ,          , 
If you know what that means, you
can consult a philosopher.

 
    ,          , 
Presumably there is
one in the room.

 
    ,          , 
In any case, let's continue now,
now that we at least have

 
    ,          , 
an operational understanding of
a     year old issue that

 
    ,          , 
has to do with name, and
mention, and all sorts of

 
    ,          ,  
things like that.

 
    ,           , 


    ,          , 
I have to define what I mean,
how to make a sum of two


    ,           , 
things, an a and a.


     ,           , 
And I'm going to do
this very simply.


     ,          ,  
It's a list of the symbol
plus, and a, and a.


    ,           , 
And I can determine
the first element.


    ,          ,  


    ,           , 
Define a to be cadr. I've just


    ,          , 
introduced another primitive.


    ,          , 
This is the car of the
cdr of something.

 
    ,          , 
You might want to know why car
and cdr are names of these


    ,          , 
primitives, and why they've
survived, even though they're


    ,          , 
much better ideas like
left and right.


    ,          , 
We could have called them
things like that.


    ,          , 
Well, first of all, the names
come from the fact that in the


    ,          , 
great past, when Lisp was
invented, I suppose in ' or


    ,            , 
something, it was on a
  or something like


      ,           , 
that, which had a machine.


     ,           , 
It was a machine that had an
address register and a


     ,           , 
decrement register.

 
     ,           , 
And these were the contents of
the address register and the


     ,           , 
decrement register.


     ,           , 
So it's an historical
accident.


     ,          , 
Now why have these
names survived?


    ,          , 
It's because Lisp programmers
like to talk to each other


    ,          ,  
over the phone.


    ,           , 
And if you want to have a long
sequence of cars and cdrs you


    ,          , 
might say, cdaddedr, which
can be understood.


    ,          , 
But left of right or right of
left is not so clear if you


    ,          , 
get good at it.

 
    ,           , 
So that's why we have
these words.


     ,          ,
All of them up to four deep
are defined typically in a


    ,         ,
Lisp system.


    ,         , 


    ,           , 
A to be  


     ,          , 


    ,          , 
and, of course, you can see
that if I looked at one of


    ,          , 
these expressions like the sum
of  and , what that is is a


    ,           ,  
list containing the symbol
plus, and a number ,


     ,           , 
and a number .

 
    ,          ,  
Then the car is the
symbol plus.


    ,           , 
The car of the cdr. Well
I take the cdr and


    ,           ,  
then I take the car.


     ,           ,  
And that's how I get to the .


    ,           , 
That's the first argument.


    ,          , 
And the car of the cdr
of the cdr gets me to


    ,          , 
this one, the .


    ,          , 


    ,          , 
And similarly, of course, I
can define what's going on


    ,          ,  
with products.

 
    ,           , 
Let's do that very quickly.


    ,          , 


    ,          , 
Is the expression a product?


    ,           , 
Yes if and if it's true, that's
it's not atomic and


     ,          , 
it's EQ quote, the asterisk
symbol, which is the operator


    ,          ,  
for multiplication.


    ,           ,  
Make product of an M and an
M to be list, quote, the


    ,            , 
asterisk operation
and M and M.


     ,            ,
and I define M to be cadr and
M to be caddr. You get to be


      ,          , 
a good Lisp programmer because
you start talking that way.

 
     ,           , 
I cdr down lists and console
them up and so on.


     ,           , 
Now, now that we have
essentially a complete program


     ,           , 
for finding derivatives,
you can add more


     ,          , 
rules if you like.


    ,          ,  
What kind of behavior
do we get out of it?


    ,           , 
I'll have to clear that x.


    ,          ,  
Well, supposing I define foo
here to be the sum of the


    ,            , 
product of ax square
and bx plus c.


     ,          ,  
That's the same thing we see
here as the algebraic


    ,           , 
expression written in the
more conventional

 
    ,          , 
notation over there.


    ,           , 
Well, the derivative of foo with
respect to x, which we


     ,          , 
can see over here, is this
horrible, horrendous mess.


    ,           , 
I would like it to
be ax plus b.


     ,          , 
But it's not.


    ,          , 
It's equivalent to it.


    ,          ,  
What is it?


    ,             , 
I have here, what do I have?


      ,           , 
I have the derivative of
the product of x and x.


     ,           , 
Over here is, of course,
the sum of x times

 
     ,          , 
 and  times x.


    ,          ,  
Now, well, it's the first times
the derivative of the


    ,           , 
second plus the second times the
derivative of the first.


    ,          , 
It's right.


    ,           , 
That's x of course.


     ,          ,  
a times x is ax plus  X square
doesn't count plus B


    ,           ,  
over here plus a bunch of  's.


    ,            , 
Well the answer is right.


     ,          , 
But I give people take off
points on an exam for that,


    ,          , 
sadly enough.

  
    ,          , 
Let's worry about that
in the next segment.

 
    ,          ,  
Are there any questions?

 
    ,           , 

 
    ,          ,  
Yes?

 
    ,           , 
AUDIENCE  If you had left the
quote when you put the plus,

 
    ,          , 
then would that be referring
to the procedure plus and

 
    ,          , 
could you do a comparison
between that procedure and

 
    ,          , 
some other procedure
if you wanted to?

 
    ,          , 
PROFESSOR  Yes.

 
    ,          , 
Good question.

 
    ,           , 
If I had left this quotation
off at this point, if I had


     ,           , 
left that quotation off at that
point, then I would be


     ,          , 
referring here to the procedure
which is the thing


    ,          , 
that plus is defined to be.


    ,          , 
And indeed, I could compare
some procedures with each


    ,          ,  
other for identity.


    ,           ,  
Now what that means is
not clear right now.


    ,            ,  
I don't like to think
about it.


     ,           , 
Because I don't know exactly
what it would need to compare


    ,          , 
procedures.

 
    ,          , 
There are reasons why that
may make no sense at all.


    ,          , 
However, the symbols,
we understand.


    ,          , 
And so that's why I
put that quote in.


    ,          , 
I want to talk about
the symbol that's


    ,          , 
apparent on the page.


    ,          , 


    ,          ,  
Any other questions?


    ,            , 
OK.


     ,          ,  
Thank you.


    ,           , 
Let's take a break.

 
    ,           ,  
[MUSIC PLAYING]


     ,           , 
PROFESSOR  Well, let's see.


    ,          , 
We've just developed a fairly
plausible program for


    ,          , 
computing the derivatives of
algebraic expressions.


    ,           ,  
It's an incomplete program,
if you would


     ,           , 
like to add more rules.


    ,          ,  
And perhaps you might extend
it to deal with uses of


    ,           , 
addition with any number of
arguments and multiplication


    ,          , 
with any of the number
of arguments.


    ,          , 
And that's all rather easy.

 
    ,          , 
However, there was a little
fly in that ointment.


    ,            , 
We go back to this slide.


      ,            ,   
We see that the expressions that
we get are rather bad.


      ,             , 
This is a rather
bad expression.


     ,           ,   
How do we get such
an expression?


     ,             , 
Why do we have that
expression?


     ,           ,  
Let's look at this expression
in some detail.


     ,            , 
Let's find out where all
the pieces come from.


     ,           , 
As we see here, we
have a sum  


     ,           , 
just what I showed you at the
end of the last time  

 
     ,            , 
of X times  plus 
time X. That is a


      ,           , 
derivative of this product.


     ,           , 
The produce of a times that,
where a does not depend upon


     ,            , 
x, and therefore is constant
with respect to x, is this


      ,           , 
sum, which goes from here all
the way through here and


     ,           , 
through here.


     ,           , 
Because it is the first thing
times the derivative of the


     ,           ,  
second plus the derivative of
the first times the second as


     ,            , 
the program we wrote
on the blackboard


     ,            , 
indicated we should do.

 
      ,           , 
And, of course, the product of
bx over here manifests itself


     ,          , 
as B times  plus   times X
because we see that B does not


    ,          , 
depend upon X. And so the
derivative of B is this  , and


    ,          ,  
the derivative of X with respect
itself is the .


    ,           , 
And, of course, the derivative
of the sums over here turn


    ,          , 
into these two sums of the
derivatives of the parts.


    ,          , 
So what we're seeing here is
exactly the thing I was trying


    ,          , 
to tell you about with Fibonacci
numbers a while ago,


    ,          , 
that the form of the process
is expanded from the local


    ,          , 
rules that you see in the
procedure, that the procedure

 
    ,          , 
represents a set of local rules
for the expansion of


    ,          , 
this process.


    ,          , 
And here, the process left
behind some stuff, which is


    ,            , 
the answer.


      ,           , 
And it was constructed by the
walk it takes of the tree


     ,           ,
structure, which is
the expression.


     ,          , 


     ,          , 
So every part in the answer we
see here derives from some


    ,          , 
part of the problem.


    ,          , 
Now, we can look at, for
example, the derivative of

 
    ,           ,  
foo, which is ax square plus
bx plus c, with respect to


     ,           , 
other things, like here, for
example, we can see that the


    ,          , 
derivative of foo with
respect to a.


    ,          , 
And it's very similar.


    ,          , 
It's, in fact, the identical
algebraic expression, except


    ,          , 
for the fact that theses
 's and 's are


    ,          ,  
in different places.


    ,           , 
Because the only degree of
freedom we have in this tree


    ,          ,
walk is what's constant with
respect to the variable we're


    ,         , 
taking the derivative
with respect to and

 
    ,          ,  
was the same variable.


    ,           , 


    ,          , 
In other words, if we go back
to this blackboard and we


    ,          , 
look, we have no choice what
to do when we take the


    ,          , 
derivative of the sum
or a product.


    ,           , 
The only interesting place here
is, is the expression the


     ,           , 
variable, or is the expression
a constant with respect to


     ,           , 
that variable for very, very
small expressions?


     ,          , 
In which case we get various
's and  's, which if we go


    ,          , 
back to this slide, we can see
that the  's that appear here,

  
    ,          , 
for example, this  over here
in derivative of foo with

 
    ,          , 
respect to A, which gets us an
X square, because that  gets

 
    ,          , 
the multiply of X and X into
the answer, that  is  .

 
    ,          ,
Over here, we're not taking
the derivative of foo with

 
    ,         , 
respect to c.

 
    ,           , 
But the shapes of these
expressions are the same.

 
     ,          ,
See all those shapes.

 
    ,         ,
They're the same.

 
    ,          , 

 
     ,          , 
Well is there anything
wrong with our rules?

 
    ,          ,  
No.


    ,           , 
They're the right rules.


    ,          , 
We've been through
this one before.


    ,           ,  
One of the things you're going
to begin to discover is that


     ,            , 
there aren't too many
good ideas.


     ,           , 


     ,          ,
When we were looking at rational
numbers yesterday,


    ,         , 
the problem was that we got
/ rather then /.


    ,          ,
The answer was unsimplified.


    ,         , 
The problem, of course,
is very similar.

 
    ,          , 
There are things I'd like to be
identical by simplification


    ,          , 
that don't become identical.


    ,           , 
And yet the rules for doing
addition a multiplication of


     ,          ,   
rational numbers were correct.


    ,            , 
So the way we might solve this
problem is do the thing we did


    ,          , 
last time, which always works.


    ,           , 
If something worked last time
it ought to work again.


     ,          , 
It's changed representation.


    ,          , 
Perhaps in the representation
we could put in a


    ,          , 
simplification step that
produces a simplified

 
    ,           ,
representation.


     ,         , 
This may not always
work, of course.


    ,          , 
I'm not trying to say that
it always works.


    ,          , 
But it's one of the pieces of
artillery we have in our war


    ,           , 
against complexity.


     ,           , 
You see, because we solved our
problem very carefully.


     ,           , 
What we've done, is
we've divided the


     ,           , 
world in several parts.


     ,          , 
There are derivatives rules and
general rules for algebra


    ,          , 
of some sort at this
level of detail.

 
    ,          ,
and i have an abstraction
barrier.


    ,         ,


    ,         , 
And i have the representation of
the algebraic expressions,


    ,          , 
list structure.


    ,          , 


    ,          ,  
And in this barrier, I have
the interface procedures.


    ,           , 
I have constant, and things
like same var.


    ,          , 


    ,          , 
I have things like
sum, make sum.


    ,           , 

 
     ,           , 
I have A, A.


     ,           , 
I have products and things
like that, all the other


     ,          , 
things I might need for various
kinds of algebraic


    ,          ,   
expressions.


    ,            ,  
Making this barrier allows me
to arbitrarily change the


    ,           , 
representation without changing
the rules that are


    ,          ,  
written in terms of that
representation.


    ,           , 
So if I can make the problem
go away by changing


    ,          , 
representation, the composition
of the problem


    ,          , 
into these two parts has
helped me a great deal.

 
    ,          , 
So let's take a very simple
case of this.


    ,           , 
What was one of the problems?


     ,          ,
Let's go back to this
transparency again.


    ,         , 
And we see here, oh yes, there's
horrible things like


    ,          , 
here is the sum of an
expression and  .


    ,          , 
Well that's no reason to think
of it as anything other than


    ,          ,  
the expression itself.


    ,           , 
Why should the summation
operation have


    ,           , 
made up this edition?


     ,           , 
It can be smarter than that.

 
     ,           ,  
Or here, for example, is
a multiplication of


     ,            ,
something by .


     ,         , 
It's another thing like that.


    ,          , 
Or here is a product of
something with  , which is


    ,          ,  
certainly  .


    ,           , 
So we won't have to make
this construction.


    ,          ,  
So why don't we just do that?


    ,           , 
We need to change the way
the representation


    ,          , 
works, almost here.


    ,          ,  

 
    ,           ,  
Make sum to be.


    ,           ,  
Well, now it's not something
so simple.


    ,           ,  
I'm not going to make a list
containing the symbol plus and


    ,           ,
things unless I need to.


    ,         , 
Well, what are the
possibilities?


    ,          , 


    ,          , 
I have some sort
of cases here.


    ,           , 
If I have numbers, if
anyone is a number  


     ,           , 
and here's another primitive
I've just introduced, it's


     ,          , 
possible to tell whether
something's number  

 
    ,          ,  
and if number A, meaning
they're not symbolic


    ,           , 
expressions, then why not
do the addition now?


    ,          , 
The result is just a
plus of A and A.


    ,          , 


    ,          ,   
I'm not asking if these
represent numbers.


    ,            ,  
Of course all of these symbols
represent numbers.


    ,           ,  
I'm talking about whether
the one I've got is the


    ,           , 
number  right now.


    ,          ,  
And, for example, supposing A
is a number, and it's equal to


    ,            ,  
 , well then the answer
is just A.

  
     ,            ,
There is no reason to
make anything up.

 
     ,         , 
And if A is a number,
and equal A , then

 
    ,           , 
the result is A.

 
     ,          , 
And only if I can't figure out
something better to do with

 
    ,          , 
this situation, well, I can
start a list. Otherwise I want

 
    ,          , 
the representation to be the
list containing the quoted

 
    ,          , 
symbol plus, and A, and A.

 
    ,          , 

 
    ,             , 
And, of course, a very
similar thing

 
       ,            ,  
can be done for products.

 
      ,             , 
And I think I'll avoid
boring you with them.


      ,            , 
I was going to write it
on the blackboard.


      ,            ,  
I don't think it's necessary.


      ,             , 
You know what to do.


      ,           , 
It's very simple.


     ,           , 
But now, let's just see the kind
of results we get out of


     ,           , 
changing our program
in this way.


     ,           , 
Well, here's the derivatives
after having just changed the


     ,           , 
constructors for expressions.


     ,           , 
The same foo, aX square plus bX
plus c, and what I get is

 
     ,            ,
nothing more than the derivative
of that is aX plus


      ,           , 
B.


      ,           , 
Well, it's not completely
simplified.


     ,           , 
I would like to collect
common terms and sums.


     ,           , 
Well, that's more work.


     ,           , 
And, of course, programs to do
this sort of thing are huge


     ,           , 
and complicated.


     ,           , 
Algebraic simplification, it's
a very complicated mess.


     ,           , 
There's a very famous program
you may have heard of called


     ,           , 
Maxima developed at MIT in the
past, which is ,    pages of

 
     ,           , 
Lisp code, mostly the algebraic
simplification


     ,           ,  
operations.


     ,            ,  


     ,           , 
There we see the derivative
of foo.


    ,          , 
In fact, X is at something I
wouldn't take off more than 


    ,          , 
point for on an elementary
calculus class.


    ,           , 
And the derivative of foo with
respect to a, well it's gone


     ,          , 
down to X times X, which
isn't so bad.


    ,          ,  
And the derivative of foo with
respect to b is just X itself.


    ,            , 
And the derivative of foo with
respect to c comes out .

 
     ,          , 
So I'm pretty pleased
with this.


    ,          , 
What you've seen is, of
course, a little bit


    ,          ,  
contrived, carefully organized
example to show you how we can


    ,           , 
manipulate algebraic
expressions, how we do that


    ,          , 
abstractly in terms of abstract
syntax rather than


    ,          , 
concrete syntax and how we can
use the abstraction to control


    ,          , 
what goes on in building
these expressions.


    ,            , 
But the real story isn't just
such a simple thing as that.


      ,           , 
The real story is, in fact, that
I'm manipulating these


     ,           , 
expressions.

 
     ,           , 
And the expressions are
the same expressions  


     ,           , 
going back to the slide  


     ,          , 
as the ones that are
Lisp expressions.


    ,          , 
There's a pun here.


    ,          ,  
I've chosen my representation
to be the same as the


    ,           , 
representation in my language
of similar things.


    ,          , 
By doing so, I've invoked
a necessity.


    ,           , 
I created the necessity to have
things like quotation


     ,          , 
because of the fact that my
language is capable of writing


    ,          , 
expressions that talk about
expressions of the language.

 
    ,          , 
I need to have something that
says, this is an expression


    ,          , 
I'm talking about rather than
this expression is talking


    ,          ,  
about something, and I want
to talk about that.


    ,           , 


    ,          , 
So quotation stops and says,
I'm talking about this


    ,          , 
expression itself.


    ,          , 


    ,           ,  
Now, given that power, if I can
manipulate expressions of


     ,            , 
the language, I can begin to
build even much more powerful


     ,           , 
layers upon layers
of languages.

 
     ,          , 
Because I can write languages
that not only are embedded in


    ,          , 
Lisp or whatever language you
start with, but languages that


    ,           ,  
are completely different, that
are just, if we say,


     ,           , 
interpreted in Lisp or
something like that.


    ,          ,
We'll get to understand those
words more in the future.


    ,          , 
But right now I just want to
leave you with the fact that


     ,          , 
we've hit a line which gives
us tremendous power.


    ,          ,  
And this point we've bought
a sledgehammer.


    ,           , 
We have to be careful to what
flies when we apply it.


    ,          , 
Thank you.

 
    ,          , 
[MUSIC PLAYING]


    ,           ,
        ,              , 


      ,            , 
PROFESSOR  Well, yesterday we
learned a bit about symbolic


      ,            , 
manipulation, and we wrote a
rather stylized program to


      ,             , 
implement a pile of calculus
rule from the calculus book.


       ,            , 
Here on the transparencies, we
see a bunch of calculus rules


      ,            , 
from such a book.


      ,            ,  
And, of course, what we did is
sort of translate these rules


      ,             ,  
into the language
of the computer.


      ,             , 
But, of course, that's a
sort of funny strategy.

 
      ,            , 
Why should we have to translate
these rules into the


      ,            ,
language of the computer?


      ,           , 
And what do I really
mean by that?


      ,            , 
These are  the program we wrote


      ,           , 
yesterday was very stylized.


     ,           , 
It was a conditional, a dispatch
on the type of the


     ,           , 
expression as observed
by the rules.


     ,           , 
What we see here are rules that
say if the object being


     ,           , 
the derivative is being taken
of, if that expression is a


     ,           , 
constant, then do one thing.

 
     ,           , 
If it's a variable,
do another thing.


     ,           ,  
If it's a product of a constant
times a variable, do


     ,            , 
something and so on.


     ,           , 
There's sort of a dispatch
there on a type.


     ,           , 


     ,           , 
Well, since it has such a
stylized behavior and


     ,           , 
structure, is there some other
way of writing this program


     ,            , 
that's more clear?


      ,           , 
Well, what's a rule,
first of all?


     ,           , 
What are these rules?

 
     ,           , 


     ,           , 
Let's think about that.


     ,           , 
Rules have parts.


     ,            ,  
If you look at these rules in
detail, what you see, for


      ,             , 
example, is the rule has
a left hand side and a


      ,            , 
right hand side.


      ,           , 
Each of these rules has a
left hand side and the


     ,           , 
right hand side.


     ,           , 
The left hand side is somehow
compared with the expression


     ,           , 
you're trying to take
the derivative of.

 
     ,           , 
The right hand side is the
replacement for that


     ,           , 
expression.


     ,           , 


     ,           ,  
So all rules on this page
are something like this.


     ,            ,  


     ,            , 
I have patterns, and somehow,
I have to produce, given a


     ,           ,
pattern, a skeleton.


     ,          ,  


     ,            , 
This is a rule.


     ,           , 

 
     ,           , 
A pattern is something that
matches, and a skeleton is


     ,            , 
something you substitute into
in order to get a new


      ,            , 
expression.


      ,            , 


      ,           , 
So what that means is that the
pattern is matched against the


     ,           , 
expression, which is the
source expression.


     ,           , 


     ,           , 
And the result of the
application of the rule is to


     ,           ,  
produce a new expression, which
I'll call a target, by


     ,            , 
instantiation of a skeleton.

 
     ,           , 
That's called instantiation.


     ,            , 


      ,           , 
So that is the process by which


     ,           , 
these rules are described.


     ,            , 
What I'd like to do today is
build a language and a means


      ,            , 
of interpreting that language,
a means of executing that


      ,            , 
language, where that language
allows us to directly express


      ,            , 
these rules.


      ,           , 
And what we're going to do is
instead of bringing the rules


     ,           , 
to the level of the computer by
writing a program that is

 
     ,            ,
those rules in the computer's
language  


      ,          , 
at the moment, in a Lisp  


     ,           , 
we're going to bring the
computer to the level of us by


     ,           ,  
writing a way by which the
computer can understand rules


     ,             , 
of this sort.


      ,           , 
This is slightly emphasizing the
idea that we had last time


     ,           , 
that we're trying to make
a solution to a class of


     ,           , 
problems rather than
a particular one.


     ,           , 
The problem is if I want to
write rules for a different


     ,           , 
piece of mathematics, say,
to simple algebraic

 
     ,           ,  
simplification or something like
that, or manipulation of


     ,            , 
trigonometric functions,
I would have to write a


     ,            , 
different program in using
yesterday's method.


      ,            , 
Whereas I would like to
encapsulate all of the things


      ,            , 
that are common to both of those
programs, meaning the


      ,            , 
idea of matching, instantiation,
the control


      ,           ,  
structure, which turns out to be
very complicated for such a


     ,            , 
thing, I'd like to encapsulate
that separately from the rules


     ,            ,  
themselves.


      ,            , 
So let's look at, first of
all, a representation.

 
     ,           , 
I'd like to use the
overhead here.


     ,           ,
I'd like   there it is.


     ,          , 
I'd like to look at a
representation of the rules of


     ,           ,  
calculus for derivatives in a
sort of simple language that


     ,            , 
I'm writing right here.


     ,           , 
Now, I'm going to avoid  I'm
going to avoid


     ,           , 
worrying about syntax.


     ,           , 
We can easily pretty this, and
I'm not interested in making  


     ,           , 
this is indeed ugly.


     ,           , 
This doesn't look like the
beautiful text set dx by dt or

  
     ,           , 
something that I'd
like to write,

 
     ,           , 
but that's not essential.

 
     ,             , 
That's sort of an accidental
phenomenon.

 
       ,            , 
Here, we're just worrying
about the fact that the

 
      ,            ,  
structure of the rules is that
there is a left hand side

 
      ,             , 
here, represents the thing I
want to match against the

 
      ,           , 
derivative expression.

 
     ,           , 
This is the representation
I'm going to say for the

 
     ,           , 
derivative of a constant, which
we will call c with

 
     ,           , 
respect to the variable we will
call v. And what we will

 
     ,           ,  
get on the right hand
side is  .


     ,            , 
So this represents a rule.


     ,           , 
The next rule will be the
derivative of a variable,


     ,           ,  
which we will call v with
respect to the same variable


     ,            , 
v, and we get a .


     ,           , 
However, if we have the
derivative of a variable


     ,           , 
called u with respect to
a different variables


     ,           , 
v, we will get  .


     ,            , 
I just want you look at these
rules a little bit and see how


      ,           , 
they fit together.

 
     ,           , 
For example, over here, we're
going to have the derivative


     ,             , 
of the sum of an expression
called x and an


       ,            , 
expression called x.


      ,            , 
These things that begin with
question marks are called


      ,            , 
pattern variables in the
language that we're inventing,


      ,           , 
and you see we're just making
it up, so pattern variables


     ,           , 
for matching.


     ,           ,  
And so in this  


     ,            , 
here we have the derivative of
the sum of the expression


     ,            , 
which we will call x.

 
      ,           , 
And the expression we will call
x with respect to the


     ,           ,  
variable we call v will be  
here is the right hand side 


     ,            ,  
the sum of the derivative of
that expression x with


     ,            , 
respect to v   the right hand
side is the skeleton  


     ,           , 
and the derivative of x with
respect to v. Colons here will


     ,           , 
stand for substitution
objects.


     ,           , 


     ,           , 
They're  we'll call them
skeleton evaluations.


     ,           , 
So let me put up here on the
blackboard for a second some


     ,           , 
syntax so we'll know
what's going on

 
     ,           , 
for this rule language.


     ,           , 
First of all, we're going to
have to worry about the


     ,           , 
pattern matching.


     ,            , 


      ,           , 
We're going to have things like
a symbol like foo matches


     ,           ,  
exactly itself.


     ,            , 


     ,           ,
The expression f of a and b will
be used to match any list


     ,          , 
whose first element is f, whose
second element is a, and


     ,           , 
whose third element is b.

 
     ,            ,  
Also, another thing we might
have in a pattern is that  


      ,             , 
a question mark with some
variable like x.


      ,           ,
And what that means, it says
matches anything, which we


     ,          ,
will call x.


     ,          , 


     ,            ,
Question mark c x will
match only constants.


      ,          , 
So this is something which
matches a constant colon x.


     ,           , 


     ,           , 
And question mark v x will
match a variable,


     ,           , 
which we call x.

 
     ,            , 


      ,            , 
This is sort of the language
we're making up now.


      ,            , 
If I match two things against
each other, then they are


      ,            ,  
compared element by element.


      ,            , 
But elements in the pattern may
contain these syntactic


     ,           , 
variables, pattern variables,
which will be used to match


     ,           , 
arbitrary objects.


     ,           , 
And we'll get that object as the
value in the name x here,


     ,           ,  
for example.


     ,            , 
Now, when we make skeletons
for instantiation.

 
     ,           , 
Well, then we have
things like this.


     ,           , 
foo, a symbol, instantiates
to itself.


     ,           ,  


     ,            , 
Something which is a list
like f of a and b,


     ,           , 
instantiates to  


     ,          , 
well, f instantiates to a
 list, a list of three


    ,          , 
elements, okay, which are the
results of instantiating each


    ,          , 
of f, a, and b.


    ,          , 


    ,          , 
And x well  we instantiate to
the value of x as in the

 
    ,          , 
matched pattern.


    ,           , 


     ,           , 
So going back to the overhead
here, we see  we see that all


     ,          ,  
of those kinds of objects, we
see here a pattern variable


    ,           , 
which matches a constant, a
pattern variable which matches


    ,          , 
a variable, a pattern variable
which will match anything.


    ,          , 
And if we have two instances of
the same name, like this is


    ,          , 
the derivative of the expression
which is a variable


    ,          , 
only whose name will be v with
respect to some arbitrary


    ,          , 
expression which we will call v,
since this v appears twice,

 
    ,          , 
we're going to want that to mean
they have to be the same.


    ,          , 
The only consistent match is
that those are the same.


    ,          , 
So here, we're making
up a language.


    ,           , 
And in fact, that's a very
nice thing to be doing.


     ,          ,
It's so much fun to make
up a language.


    ,         , 
And you do this all the time.


    ,          , 
And the really most powerful
design things you ever do are


    ,           ,  
sort of making up a language to
solve problems like this.


     ,            , 
Now, here we go back here and
look at some of these rules.


     ,           ,  
Well, there's a whole
set of them.

  
     ,            , 
I mean, there's one for
addition and one for

 
     ,          , 
multiplication, just
like we had before.

 
    ,          ,  
The derivative of the product of
x and x with respect to v

 
    ,           , 
is the sum of the product of x
and the derivative x with

 
    ,          , 
respect to v and the
product of the

 
    ,          ,  
derivative of x and x.

 
    ,           , 
And here we have
exponentiation.

 
    ,           , 
And, of course, we run off
the end down here.

 
     ,          , 
We get as many as we like.

 
    ,          , 
But the whole thing over here,
I'm giving this  this list of

 
    ,           , 
rules the name "derivative
rules."


     ,          , 
What would we do with such
a thing once we have it?


    ,          ,  
Well, one of the nicest ideas,
first of all, is I'm going to


    ,           , 
write for you, and we're going
to play with it all day.


    ,          , 
What I'm going to write for
you is a program called


    ,            , 
simplifier, the general purpose
simplifier.


      ,           , 
And we're going to say something
like define dsimp to


     ,          , 
be a simplifier of the
derivative rules.


    ,          , 


    ,          , 
And what simplifier is going
to do is, given a set of

 
    ,          , 
rules, it will produce for
me a procedure which will


    ,          ,  
simplify expressions containing
the things that are


    ,           , 
referred to by these rules.


    ,          , 


    ,          , 
So here will be a procedure
constructed for your purposes


    ,          , 
to simplify things with
derivatives in them such that,


    ,          ,  
after that, if we're typing at
some list system, and we get a


    ,           ,  
prompt, and we say dsimp, for
example, of the derivative of


    ,            ,
the sum of x and y with
respect to x  


     ,          , 

 
     ,           , 
note the quote here because
I'm talking about the


     ,           , 
expression which is
the derivative  


     ,          , 


    ,          , 
then I will get back as
a result plus   .


    ,          , 
Because the derivative of x plus
y is the derivative of x


    ,          , 
plus derivative y.


    ,          ,  
The derivative of x with
respect to x is .


    ,           , 
The derivative of y with
respect to x is  .


    ,          , 
It's not what we're
going to get.


    ,          , 
I haven't put any simplification
at that level  

 
    ,          , 
algebraic simplification  


    ,          ,  
yet.


    ,           , 
Of course, once we have such a
thing, then we can  then we


    ,          , 
can look at other rules.


    ,          , 
So, for example, we can, if
we go to the slide, OK?


    ,          , 
Here, for example, are other
rules that we might have,


    ,          , 
algebraic manipulation rules,
ones that would be used for


    ,          , 
simplifying algebraic
expressions.


    ,           , 
For example, just looking at
some of these, the left hand


     ,           , 
side says any operator applied
to a constant e and a

 
     ,          , 
constant e is the result of
evaluating that operator on


    ,          , 
the constants e and e.


    ,           , 
Or an operator, applied to e,
any expression e and a


     ,          , 
constant e, is going to move
the constant forward.


    ,          , 
So that'll turn into
the operator with


    ,          , 
e followed by e.


    ,           ,  
Why I did that, I don't know.


     ,           , 
It wouldn't work if I had
division, for example.


    ,          , 
So there's a bug in the
rules, if you like.


    ,          , 
So the sum of   and e is e.

 
    ,          , 
The product of  and any
expression e is e.


    ,          , 
The product of   and any
expression e is  .


    ,          , 
Just looking at some more of
these rules, we could have


    ,          , 
arbitrarily complicated ones.


    ,          ,  
We could have things like the
product of the constant e and


    ,            , 
any constant e with e is the
result of multiplying the


     ,           , 
result of  multiplying now the
constants e and e together


     ,          ,
and putting e there.


    ,         , 
So it says combine the constants
that I had, which


    ,           , 
was if I had a product of e and
e and e just multiply  I

 
     ,          ,  
mean and e and e are both
constants, multiply them.


    ,           , 
And you can make up the
rules as you like.


    ,          ,
There are lots of them here.


    ,         ,  
There are things as complicated,
for example, as  


    ,           , 
oh, I suppose down here some
distributive law, you see.


    ,          , 
The product of any object c and
the sum of d and e gives


    ,          , 
the result as the same as the
sum of the product of c and d


    ,          , 
and the product of c and e.


    ,          , 
Now, what exactly these
rules are doesn't very


    ,          , 
much interest me.

 
    ,          , 
We're going to be writing the
language that will allow us to


    ,          , 
interpret these rules so that
we can, in fact, make up


    ,         , 
whatever rules we like, another
whole language of


    ,            , 
programming.


      ,           , 


     ,           , 
Well, let's see.


     ,           , 
I haven't told you how we're
going to do this.


     ,           , 
And, of course, for a while,
we're going to work on that.


     ,          , 
But there's a real question of
what is  what am I going to do


    ,          , 
at all at a large scale?

 
    ,          , 
How do these rules work?


    ,          , 
How is the simplifier program
going to manipulate these


    ,          , 
rules with your expression to
produce a reasonable answer?


    ,          , 
Well, first, I'd like to think
about these rules as being


    ,          ,  
some sort of deck of them.


    ,           ,  
So here I have a whole bunch
of rules, right?


    ,           , 
Each rule  


    ,          , 
here's a rule  


    ,          , 
has a pattern and a skeleton.


    ,          , 
I'm trying to make up a control
structure for this.

  
    ,           , 
Now, what I have is a matcher,
and I have something which is

 
     ,           , 
an instantiater.

 
     ,           , 

 
     ,          , 
And I'm going to pass from the
matcher to the instantiater

 
    ,          ,  
some set of meaning for the
pattern variables, a

 
    ,            , 
dictionary, I'll call it.

 
     ,          , 
A dictionary, which will say
x was matched against the

 
    ,           , 
following subexpression and y
was matched against another

 
     ,          , 
following subexpression.

 
    ,          ,  
And from the instantiater, I
will be making expressions,

 
    ,           , 
and they will go into
the matcher.


    ,          , 
They will be expressions.


    ,          , 


    ,          , 
And the patterns of the rules
will be fed into the matcher,


    ,          ,  
and the skeletons from the same
rule will be fed into the


    ,           , 
instantiater.


    ,          , 
Now, this is a little
complicated because when you


    ,             ,
have something like an algebraic
expression, where


       ,           , 
someth  the rules are intended
to be able to allow you to


      ,            , 
substitute equal for equal.

 
      ,            , 
These are equal transformation
rules.


      ,            , 
So all subexpressions
of the expression


      ,           ,  
should be looked at.


     ,            , 
You give it an expression,
this thing, and the rules


     ,           ,  
should be cycled around.


     ,            , 
First of all, for every
subexpression of the


     ,           , 
expression you feed in, all
of the rules must be


     ,           , 
tried and looked at.


     ,           ,  
And if any rule matches, then
this process occurs.


     ,             , 
The dictionary  the dictionary
is to have some values in it.

 
      ,           ,  
The instantiater makes a new
expression, which is basically


     ,            ,   
replaces that part of the
expression that was matched in


     ,              ,  
your original expression.


      ,            ,  
And then, then, of course, we're
going to recheck that,


     ,            , 
going to go around these rules
again, seeing if that could be


     ,           , 
simplified further.


     ,            , 
And then, then we're going
to do that for every


      ,           , 
subexpression until the thing
no longer changes.


     ,           , 
You can think of this as sort
of an organic process.


     ,            , 
You've got some sort
of stew, right?

 
      ,           , 
You've got bacteria or
something, or enzymes in some,


     ,           , 
in some gooey mess.


     ,           , 
And there's these  and these
enzymes change things.


     ,          , 
They attach to your expression,
change it, and


    ,          ,  
then they go away.


    ,           ,  
And they have to match.


    ,           , 
The key in lock phenomenon.


    ,          , 
They match, they change
it, they go away.


    ,          , 
You can imagine it as a parallel
process of some sort.


    ,          , 
So you stick an expression into
this mess, and after a

 
    ,          , 
while, you take it out, and
it's been simplified.


    ,          , 
And it just keeps changing
until it no


    ,          , 
longer can be changed.


    ,          , 
But these enzymes can attach
to any part of the, of the


    ,          , 
expression.


    ,          , 
OK, at this point, I'd like to
stop and ask for questions.


    ,          , 
Yes.


    ,          , 
AUDIENCE  This implies that the
matching program and the


    ,           , 
instantiation program
are separate


     ,          , 
programs; is that right?

 
    ,          , 
Or is that   they are.


    ,          ,  
PROFESSOR  They're separate
little pieces.


    ,           , 
They fit together in
a larger structure.


    ,            , 
AUDIENCE  So I'm going through
and matching and passing the


      ,           , 
information about what I matched
to an instantiater,


     ,           , 
which makes the changes.


     ,           , 
And then I pass that back
to the matcher?


     ,           ,  
PROFESSOR  It won't
make a change.


     ,           , 
It will make a new expression,
which has, which has


    ,          , 
substituted the values of the
pattern variable that were

 
    ,          , 
matched on the left hand side
for the variables that are


    ,           , 
mentioned, the skeleton
variables or evaluation


     ,          , 
variables or whatever I called
them, on the right hand side.


    ,          , 
AUDIENCE  And then that's passed
back into the matcher?


    ,          , 
PROFESSOR  Then this is going
to go around again.


    ,          , 
This is going to go through
this mess until


    ,          , 
it no longer changes.


    ,          , 
AUDIENCE  And it seems that
there would be a danger of


    ,          , 
getting into a recursive loop.


    ,          , 
PROFESSOR  Yes.

 
    ,          , 
Yes, if you do not write your
rules nicely, you are  


    ,          , 
indeed, in any programming
language you invent, if it's


    ,          , 
sufficiently powerful to do
anything, you can write


    ,          , 
programs that will go
into infinite loops.


    ,          ,  
And indeed, writing a program
for doing algebraic


    ,           ,  
manipulation for long will
produce infinite loops.


    ,             ,


      ,          , 
Go ahead.


     ,           , 
AUDIENCE  Some language
designers feel that this


     ,           , 
feature is so important that it
should become part of the

 
     ,          , 
basic language, for example,
scheme in this case.


    ,          , 
What are your thoughts on  


    ,          ,
PROFESSOR  Which language
feature?


    ,         , 
AUDIENCE  The pairs matching.


    ,          , 
It's all application of
such rules should be  


    ,          , 
PROFESSOR  Oh, you
mean like Prolog?


    ,          ,
AUDIENCE  Like Prolog, but it
becomes a more general  


    ,         , 
PROFESSOR  It's possible.


    ,          , 
OK, I think my feeling about
that is that I would like to


    ,          , 
teach you how to do it so you
don't depend upon some

  
    ,          , 
language designer.

 
    ,           , 
AUDIENCE  OK.

 
     ,          , 
PROFESSOR  You make
it yourself.

 
    ,          , 
You can roll your own.

 
    ,          , 
Thank you.

 
    ,          , 

 
    ,          ,  
Well, let's see.

 
    ,           ,  
Now we have to tell
you how it works.

 
    ,           ,

 
    ,         ,
It conveniently breaks up
into various pieces.

 
    ,         , 
I'd like to look now
at the matcher.


    ,          , 
The matcher has the following
basic structure.


    ,          ,  
It's a box that takes as its
input an expression and a


    ,           , 
pattern, and it turns
out a dictionary.


    ,           , 


     ,           , 
A dictionary, remember, is a
mapping of pattern variables


     ,           , 
to the values that were found
by matching, and it puts out


     ,           , 
another dictionary, which is the
result of augmenting this


     ,          , 
dictionary by what was found
in matching this expression


    ,          ,  
against this pattern.

 
    ,           , 


    ,          , 
So that's the matcher.


    ,          ,  


    ,           ,  
Now, this is a rather
complicated program, and we


    ,           , 
can look at it on the overhead
over here and see, ha, ha,


    ,          , 
it's very complicated.


    ,          , 
I just want you to look
at the shape of it.


    ,          , 
It's too complicated to look
at except in pieces.


    ,          , 
However, it's a fairly large,
complicated program with a lot


    ,            , 
of sort of indented structure.

 
      ,           ,  
At the largest scale  


     ,            , 
you don't try to read those
characters, but at the largest


     ,           , 
scale, you see that there is a
case analysis, which is all


     ,          ,  
these cases lined up.


    ,           ,  
What we're now going to do is
look at this in a bit more


    ,           , 
detail, attempting to understand
how it works.


    ,          , 
Let's go now to the first slide,
showing some of the


    ,          , 
structure of the matcher
at a large scale.


    ,          , 
And we see that the matcher, the
matcher takes as its input


    ,          ,  
a pattern, an expression,
and a dictionary.

 
    ,           , 


    ,          , 
And there is a case analysis
here, which is made out of


    ,          , 
several cases, some of which
have been left out over here,


    ,           , 
and the general case, which
I'd like you to see.


     ,          , 
Let's consider this
general case.


    ,          , 
It's a very important pattern.


    ,          , 


    ,            , 
The problem is that we have
to examine two trees


      ,           ,   
simultaneously.


     ,             , 
One of the trees is the tree
of the expression, and the

 
     ,           , 
other is the tree
of the pattern.


     ,          , 
We have to compare them with
each other so that the


    ,          , 
subexpressions of the expression
are matched against


    ,          , 
subexpressions of the pattern.


    ,          , 
Looking at that in a bit more
detail, suppose I had a


    ,          , 
pattern, a pattern, which was
the sum of the product of a


    ,          , 
thing which we will call x and
a thing which we will call y,


    ,          ,   
and the sum of that, and the
same thing we call y.


    ,            ,  


    ,           , 
So we're looking for a sum of a
product whose second  whose

 
    ,          , 
second argument is the
same as the second


    ,          , 
argument of the sum.


    ,          , 
That's a thing you might
be looking for.


    ,           , 
Well, that, as a pattern,
looks like this.


     ,           , 
There is a tree, which consists
of a sum, and a


     ,          , 
product with a pattern variable
question mark x and


    ,          , 
question mark y, the other
pattern variable, and question


    ,          ,
mark y, just looking at the
same, just writing down the


    ,         , 
list structure in
a different way.


    ,          ,  
Now, suppose we were matching
that against an expression

 
    ,           , 
which matches it, the sum of,
say, the product of  and x


    ,          , 
and, say, x.


    ,          , 
That's another tree.


    ,          , 
It's the sum of the product
of  and x and of x.


    ,          , 


    ,           ,  
So what I want to do is traverse
these two trees


     ,            , 
simultaneously.


     ,           , 
And what I'd like to do is
walk them like this.


     ,          , 
I'm going to say are
these the same?


    ,          ,  
This is a complicated object.

 
    ,           , 
Let's look at the
left branches.


    ,          , 
Well, that could be the car.


    ,          , 
How does that look?


    ,          , 
Oh yes, the plus looks
just fine.


    ,          ,  
But the next thing here is
a complicated thing.


    ,           , 
Let's look at that.


    ,          , 
Oh yes, that's pretty
fine, too.


    ,          , 
They're both asterisks.


    ,           , 
Now, whoops!


     ,          ,  
My pattern variable, it
matches against the .

 
    ,           ,  
Remember, x equals  now.


    ,           , 
That's in my dictionary, and
the dictionary's going to


    ,          , 
follow along with me 
x equals three.


    ,          ,  
Ah yes, x equals  and y
equals x, different x.


    ,           ,  
The pattern x is the expression
x, the pattern y.


    ,           , 


    ,          , 
Oh yes, the pattern variable
y, I've already


    ,          , 
got a value for it.


    ,          , 
It's x.


    ,          ,  
Is this an x?

  
    ,              ,  
Oh yeah, sure it is.

 
       ,             ,  
That's fine.

 
      ,             , 
Yep, done.

 
      ,            ,  
I now have a dictionary,
which I've accumulated

 
      ,             , 
by making this walk.

 
      ,           , 

 
     ,           ,  
Well, now let's look at this
general case here and see how

 
     ,            , 
that works.

 
     ,           , 
Here we have it.

 
     ,            , 
I take in a pattern variable  a
pattern, an

 
      ,           , 
expression, and a dictionary.


     ,           , 
And now I'm going to do a
complicated thing here, which


     ,           , 
is the general case.


     ,           , 
The expression is made out of
two parts  a left and a right


     ,           , 
half, in general.


     ,           ,  
Anything that's complicated is
made out of two pieces in a


     ,            , 
Lisp system.


     ,           , 
Well, now what do
we have here?


     ,           , 
I'm going to match the car's of
the two expressions against


     ,            , 
each other with respect to the
dictionary I already have,

 
      ,           , 
producing a dictionary as its
value, which I will then use


     ,           , 
for matching the cdr's
against each other.


     ,            , 
So that's how the dictionary
travels,


      ,           , 
threads the entire structure.


     ,           , 
And then the result of that is
the dictionary for the match


     ,          , 
of the car and the cdr, and
that's what's going to be


    ,          , 
returned as a value.


    ,          , 
Now, at any point, a
match might fail.


    ,          , 
It may be the case, for example,
if we go back and


    ,          ,  
look at an expression that
doesn't quite match, like

 
    ,           ,  
supposing this was a .


    ,           , 
Well, now these two don't match
any more, because the x


    ,          , 
that had to be   sorry, the y
that had to be x here and this


    ,           , 
y has to be .


     ,          , 
But x and  were not the same
object syntactically.


    ,          , 
So this wouldn't match, and
that would be rejected


    ,           , 
sometimes, so matches
may fail.


     ,          , 
Now, of course, because this
matcher takes the dictionary


    ,          , 
from the previous match as
input, it must be able to


    ,          , 
propagate the failures.

 
    ,            ,  
And so that's what the
first clause of


      ,            , 
this conditional does.


     ,           , 
It's also true that if it turned
out that the pattern


     ,           , 
was not atomic  


     ,           , 
see, if the pattern was atomic,
I'd go into this


     ,          ,  
stuff, which we haven't
looked at yet.


    ,           , 
But if the pattern is
not atomic and the


    ,          ,
expression is atomic  


    ,          ,  
it's not made out of pieces  


     ,           , 
then that must be a failure,
and so we go over here.

 
    ,          , 
If the pattern is not atomic
and the pattern is not a


    ,          , 
pattern variable  


    ,          ,
I have to remind myself
of that  


    ,          , 
then we go over here.


     ,          , 
So that way, failures
may occur.


    ,          , 


    ,          ,
OK, so now let's look at the
insides of this thing.


    ,         ,  
Well, the first place to look
is what happens if I have an


    ,           , 
atomic pattern?


    ,          , 
That's very simple.

 
    ,          ,
A pattern that's not made
out of any pieces  foo.


    ,         ,  
That's a nice atomic pattern.


    ,           ,  
Well, here's what we see.


    ,           , 
If the pattern is atomic, then
if the expression is atomic,


    ,            ,  
then if they are the same thing,
then the dictionary I


      ,            , 
get is the same one
as I had before.


     ,           , 
Nothing's changed.


     ,           , 
It's just that I matched plus
against plus, asterisk against


     ,          , 
asterisk, x against x.


    ,          , 
That's all fine.

 
    ,          , 
However, if the pattern is
not the one which is the


    ,          , 
expression, if I have two
separate atomic objects, then


    ,          , 
it was matching plus against
asterisk, which case I fail.


    ,          ,  
Or if it turns out that the
pattern is atomic but the


    ,           , 
expression is complicated,
it's not atomic,


    ,          , 
then I get a failure.


    ,          ,  


    ,           ,  
That's very simple.


    ,           ,  
Now, what about the various
kinds of pattern variables?


    ,           , 
We had three kinds.

 
    ,          , 
I give them the names.


    ,           , 
They're arbitrary constants,
arbitrary variables, and


     ,          , 
arbitrary expressions.


    ,           , 
A question mark x is an
arbitrary expression.


     ,           , 
A question mark cx is an
arbitrary constant, and a


     ,           ,
question mark vx is an
arbitrary variable.


     ,          , 
Well, what do we do here?


     ,          ,
Looking at this, we see that
if I have an arbitrary


    ,         ,  
constant, if the pattern is an
arbitrary constant, then it


    ,           , 
had better be the case
that the expression

 
    ,          , 
had better be a constant.


    ,          , 
If the expression is
not a constant,


    ,          , 
then that match fails.


    ,          , 
If it is a constant, however,
then I wish to extend the


    ,          , 
dictionary.


    ,          , 
I wish to extend the dictionary
with that pattern


    ,          , 
being remembered to be that
expression using the old


    ,          ,  
dictionary as a starting
point.


    ,           ,  


    ,           ,
So really, for arbitrary
variables, I have to check

  
    ,         , 
first if the expression is a
variable by matching against.

 
    ,           , 
If so, it's worth extending
the dictionary so that the

 
     ,          ,
pattern is remembered to
be matched against that

 
    ,         ,  
expression, given the original
dictionary, and this makes a

 
    ,           , 
new dictionary.

 
    ,            , 
Now, it has to check.

 
      ,           , 
There's a sorts of failure
inside extend dictionary,

 
     ,           , 
which is that  

 
     ,           ,  
if one of these pattern
variables already has a value

 
     ,           , 
and I'm trying to match the
thing against something else

 
    ,          , 
which is not equivalent to the
one that I've already matched


    ,          , 
it against once, then a failure
will come flying out


    ,           , 
of here, too.


     ,          , 
And I will see that some time.


    ,          , 
And finally, an arbitrary
expression does not have to


    ,          ,  
check anything syntactic about
the expression that's being


    ,           , 
matched, so all it does is
it's an extension of the


    ,          ,
dictionary.


    ,         ,  
So you've just seen a complete,
very simple matcher.


    ,           , 
Now, one of the things that's
rather remarkable about this

 
    ,          , 
is people pay an awful lot of
money these days for someone


    ,          , 
to make a, quote, AI expert
system that has nothing more


    ,          , 
in it than a matcher and maybe
an instantiater like this.


    ,          , 
But it's very easy to do, and
now, of course, you can start


    ,          ,  
up a little start up company and
make a couple of megabucks


    ,            ,
in the next week taking some
people for a ride.


     ,          , 


     ,           , 
  years ago, this
was remarkable,


     ,           , 
this kind of program.


     ,          , 
But now, this is sort of easy.

 
    ,          , 
You can teach it to freshmen.


    ,          , 
Well, now there's an
instantiater as well.


    ,          , 


    ,          , 
The problem is they're all
going off and making more


    ,          , 
money than I do.


    ,          , 
But that's always been
true of universities.


    ,          , 
As expression, the purpose of
the instantiater is to make


    ,          ,
expressions given a dictionary
and a skeleton.


    ,         , 


    ,          , 
And that's not very
hard at all.

 
    ,          , 
We'll see that very simply in
the next, the next slide here.


    ,          , 
To instantiate a skeleton,
given a particular


    ,          , 
dictionary  


    ,          , 
oh, this is easy.


    ,           ,  
We're going to do a recursive
tree walk over the skeleton.


     ,            , 
And for everything which is
a skeleton variable  


     ,           , 
I don't know, call it a
skeleton evaluation.


     ,           ,
That's the name and the abstract
syntax that I give it


     ,         , 
in this program  a skeleton
evaluation, a thing beginning


    ,          , 
with a colon in the rules.

 
    ,          , 
For anything of that case, I'm
going to look up the answer in


    ,          , 
the dictionary, and we'll worry
about that in a second.


    ,          ,  
Let's look at this as a whole.


    ,           , 
Here, I have  


    ,          , 
I'm going to instantiate a
skeleton, given a dictionary.


    ,          ,  
Well, I'm going to define some
internal loop right there, and


    ,            , 
it's going to do something
very simple.


     ,          ,  
Even if a skeleton  even if a
skeleton is simple and atomic,


    ,           , 
in which case it's nothing more
than giving the skeleton


    ,          , 
back as an answer, or in
the general case, it's

 
    ,          , 
complicated, in which case
I'm going to make up the


    ,          , 
expression which is the result
of instantiating  


    ,           ,   
calling this loop
recursively  


     ,             , 
instantiating the car of the
skeleton and the cdr.


     ,           ,  
So here is a recursive
tree walk.


     ,           , 
However, if it turns out to be a
skeleton evaluation, a colon


    ,          ,  
expression in the skeleton, then
what I'm going to do is


    ,           , 
find the expression that's
in the colon  


    ,          , 
the CADR in this case.


    ,          , 
It's a piece of abstract syntax
here, so I can change

 
    ,          , 
my representation of rules.


    ,          , 
I'm going to evaluate that
relative to this dictionary,


    ,          , 
whatever evaluation means.


    ,          ,  
We'll find out a lot about
that sometime.


    ,           , 
And the result of that
is my answer.


    ,          , 
so.


    ,          , 
I start up this loop   here's
my initialization  


    ,          ,  
by calling it with the whole
skeleton, and this will just


    ,      00  ,00
do a recursive decomposition
into pieces.


    ,           , 

 
    ,          ,  
Now, one more little bit
of detail is what


    ,           , 
happens inside evaluate?


    ,            ,  
I can't tell you that
in great detail.


      ,            , 
I'll tell you a little
bit of it.


     ,           , 
Later, we're going to see  look
into this in much


     ,           , 
more detail.


     ,           , 
To evaluate some form, some
expression with respect to a


     ,          ,
dictionary, if the expression is
an atomic object, well, I'm


    ,         , 
going to go look it up.


    ,           , 
Nothing very exciting there.

 
     ,          ,  
Otherwise, I'm going to do
something complicated here,


    ,           , 
which is I'm going to apply a
procedure which is the result


    ,           , 
of looking up the operator part
in something that we're


     ,          , 
going to find out
about someday.


    ,          , 
I want you realize you're
seeing magic now.


    ,           ,   
This magic will become clear
very soon, but not today.


     ,            , 
Then I'm looking at  looking
up all the pieces, all the


    ,          , 
arguments to that in
the dictionary.


    ,          , 
So I don't want you to look
at this in detail.


    ,          , 
I want you to say that there's
more going on here, and we're

  
    ,          ,   
going to see more about this.

 
    ,            , 
But it's  

 
    ,            , 
the magic is going to stop.

 
      ,            , 
This part has to do with Lisp,
and it's the end of that.

 
      ,            , 

 
      ,           ,  
OK, so now we know about
matching and instantiation.

 
     ,            , 
Are there any questions
for this segment?

 
     ,           ,

 
     ,          , 
AUDIENCE  I have a question.

 
     ,            , 
PROFESSOR  Yes.

 
      ,           ,  
AUDIENCE  Is it possible to
bring up a previous slide?


     ,            , 
It's about this define
match pattern.


     ,           ,  
PROFESSOR  Yes.


     ,             , 
You'd like to see the overall
slide define match pattern.


      ,           , 
Can somebody put up the  


     ,           , 
no, the overhead.


     ,           ,  
That's the biggest scale one.


     ,            , 
What part would you
like to see?


     ,           , 
AUDIENCE  Well, the
top would be fine.


     ,           , 
Any of the parts where you're
passing failed.

 
     ,           ,  
PROFESSOR  Yes.


     ,            ,
AUDIENCE  The idea is to pass
failed back to the dictionary;


     ,          ,   
is that right?


     ,             , 
PROFESSOR  The dictionary is the
answer to a match, right?


     ,          , 
And it is either some mapping
or there's no match.


    ,          , 
It doesn't match.


    ,          , 
AUDIENCE  Right.


    ,          , 
PROFESSOR  So what you're seeing
over here is, in fact,


    ,          , 
because the fact that a match
may have another match pass in


    ,          , 
the dictionary, as you see in
the general case down here.

 
    ,          ,
Here's the general case where
a match passes another match


    ,         ,  
to the dictionary.


    ,           , 
When I match the cdr's, I match
them in the dictionary


    ,          ,  
that is resulting from
matching the car's.


    ,           , 
OK, that's what I have here.


    ,          , 
So because of that, if the match
of the car's fails, then


    ,          , 
it may be necessary that the
match of the cdr's propagates


    ,          , 
that failure, and that's
what the first line is.


    ,          ,  
AUDIENCE  OK, well, I'm still
unclear what matches  


    ,           ,  
what comes out of one instance
of the match?

 
    ,           , 
PROFESSOR  One of two
possibilities.


    ,          , 
Either the symbol failed, which
means there is no match.


    ,          , 
AUDIENCE  Right.


    ,           , 
PROFESSOR  Or some mapping,
which is an abstract thing


     ,           , 
right now, and you should know
about the structure of it,


     ,          , 
which relates the pattern
variables to their values as


    ,          , 
picked up in the match.


    ,          , 
AUDIENCE  OK, so it is  


    ,          , 
PROFESSOR  That's constructed
by extend dictionary.


    ,          , 
AUDIENCE  So the recursive
nature brings about the fact

 
    ,          , 
that if ever a failed gets
passed out of any calling of


    ,           , 
match, then the first condition
will pick it up  


     ,          , 
PROFESSOR  And just propagate
it along without any further


    ,          , 
ado, right.


    ,          , 
AUDIENCE  Oh, right.


    ,          , 
OK.


    ,          , 
PROFESSOR  That's just the
fastest way to get that


    ,          ,  
failure out of there.


    ,           , 


    ,          , 
Yes.

 
    ,          , 
AUDIENCE  If I don't fail, that
means that I've matched a


    ,          , 
pattern, and I run the procedure
extend dict and then


    ,          ,
pass in the pattern
in the expression.


    ,         , 


    ,          , 
But the substitution will
not be made at that


    ,          ,  
point; is that right?


    ,           , 
I'm just  


    ,          , 
PROFESSOR  No, no.


    ,            , 
There's no substitution being
there because there's no


      ,           , 
skeleton to be substituted in.

 
     ,           , 
AUDIENCE  Right.


     ,           ,  
So what  


     ,            , 
PROFESSOR  All you've got there
is we're making up the


     ,           , 
dictionary for later
substitution.


     ,           , 
AUDIENCE  And what would the
dictionary look like?


     ,          , 
Is it ordered pairs?


    ,          , 
PROFESSOR  That's  that's
not told to you.


    ,          ,  
We're being abstract.


    ,           , 
AUDIENCE  OK.


    ,          , 
PROFESSOR  Why do you
want to know?

 
    ,           , 
What it is, it's a function.


     ,          , 
It's a function.


    ,          ,  
AUDIENCE  Well, the reason
I want to know is  


    ,           ,  
PROFESSOR  A function
abstractly is a


    ,           , 
set of ordered pairs.


    ,          ,  
It could be implemented as
a set of list pairs.


    ,           , 
It could be implemented as some
fancy table mechanism.


    ,          , 
It could be implemented
as a function.


    ,          ,  
And somehow, I'm building
up a function.


    ,            , 
But I'm not telling you.

 
     ,          ,  
That's up to George, who's going
to build that later.


    ,           , 


    ,          , 
I know you really badly want
to write concrete things.


    ,          , 
I'm not going to let
you do that.


    ,          ,  
AUDIENCE  Well, let me at
least ask, what is the


    ,           , 
important information
there that's being


    ,          , 
passed to extend dict?


    ,           , 
I want to pass the
pattern I found  


     ,           , 
PROFESSOR  Yes.


     ,           , 
The pattern that's matched
against the expression.

  
     ,           , 
You want to have the pattern,
which happens to be in those

 
     ,           , 
cases pattern variables,
right?

 
     ,          , 
All of those three
cases for extend

 
    ,          , 
dict are pattern variables.

 
    ,          ,  
AUDIENCE  Right.

 
    ,           , 
PROFESSOR  So you have a pattern
variable that is to be

 
    ,          ,
given a value in a dictionary.

 
    ,         , 
AUDIENCE  Mm hmm.

 
    ,          , 
PROFESSOR  The value is the
expression that it matched

 
    ,          , 
against. The dictionary is the
set of things I've already

 
    ,           ,
figured out that I have
memorized or learned.


     ,         , 
And I am going to make a new
dictionary, which is extended


    ,          , 
from the original one by having
that pattern variable


    ,          , 
have a value with the
new dictionary.


    ,          , 
AUDIENCE  I guess what I don't
understand is why can't the


    ,          , 
substitution be made right
as soon as you find  


    ,          , 
PROFESSOR  How do I know what
I'm going to substitute?


    ,          , 
I don't know anything
about this skeleton.


    ,          , 
This pattern, this matcher
is an independent unit.


    ,           , 
AUDIENCE  Oh, I see.

 
     ,          ,  
OK.


    ,           , 
PROFESSOR  Right?


    ,          , 
AUDIENCE  Yeah.


    ,          ,  
PROFESSOR  I take the matcher.


    ,           , 
I apply the matcher.


    ,          ,
If it matches, then it was worth
doing instantiation.


    ,         ,
AUDIENCE  OK, good.


    ,         ,  
Yeah.


    ,             ,
PROFESSOR  OK?


      ,          , 
AUDIENCE  Can you just do that
answer again using that

 
     ,           , 
example on the board?


     ,           , 
You know, what you just passed
back to the matcher.


     ,           ,  
PROFESSOR  Oh yes.


     ,            , 
OK, yes.


     ,           , 
You're looking at
this example.


     ,          , 
At this point when I'm
traversing this structure, I


    ,          , 
get to here  x.


    ,          , 
I have some dictionary,
presumably an empty dictionary


    ,          ,  
at this point if this is
the whole expression.


    ,           , 
So I have an empty dictionary,
and I've matched x against .

 
    ,          , 
So now, after this point,
the dictionary


    ,          , 
contains x is , OK?


    ,          , 
Now, I continue walking
along here.


    ,          ,  
I see y.


    ,           , 
Now, this is a particular
x, a pattern x.


    ,          , 
I see y, a pattern y.


    ,          , 
The dictionary says, oh yes, the
pattern y is the symbol x


    ,          , 
because I've got
a match there.


    ,          , 
So the dictionary now contains
at this point two entries.


    ,           , 
The pattern x is , and the
pattern y is the expression x.

 
     ,           , 
Now, I get that, I can
walk along further.


     ,           ,  
I say, oh, pattern y
also wants to be .


     ,            , 
But that isn't possible,
producing a failure.


     ,          , 


    ,          , 
Thank you.


    ,          ,  
Let's take a break.


    ,            , 


     ,           ,  
OK, you're seeing your first
very big and hairy program.


     ,            , 
Now, of course, one of the goals
of this subsegment is to


     ,          , 
get you to be able to read
something like this and not be

 
    ,          , 
afraid of it.


    ,          ,
This one's only about
four pages of code.


    ,          , 
By the end of the subject, I
hope a   page program will


     ,          , 
not look particularly
frightening.


    ,          , 
But I don't expect   and I don't
want you to think that I


    ,          ,  
expect you to be getting
it as it's coming out.


    ,           , 
You're supposed to feel the
flavor of this, OK?


    ,          ,  
And then you're supposed to
think about it because it is a


    ,           , 
big program.


    ,           ,
There's a lot of stuff
inside this program.

 
     ,         ,  
Now, I've told you about the
language we're implementing,


    ,           , 
the pattern match substitution
language.


    ,          , 
I showed you some rules.


    ,          , 
And I've told you about matching
and instantiation,


    ,          , 
which are the two halves
of how a rule works.


    ,          , 
Now we have to understand the
control structure by which the


    ,           , 
rules are applied to the
expressions so as to do


     ,           , 
algebraic simplification.


     ,           , 


     ,          ,  
Now, that's also a big
complicated mess.

 
    ,           , 
The problem is that there is
a variety of interlocking,


    ,           , 
interwoven loops, if you
will, involved in this.


     ,          , 
For one thing, I
have to apply  


    ,          , 
I have to examine every
subexpression of my expression


    ,          ,  
that I'm trying to simplify.


    ,           , 
That we know how to do.


    ,          ,  
It's a car cdr recursion of some
sort, or something like


    ,           , 
that, and some sort
of tree walk.


    ,          , 
And that's going to
be happening.


    ,          , 
Now, for every such place, every
node that I get to in

 
    ,          , 
doing my traversal of the
expression I'm trying to


    ,          , 
simplify, I want to apply
all of the rules.


    ,          , 
Every rule is going to
look at every node.


    ,          , 
I'm going to rotate
the rules around.


    ,           , 


     ,           , 
Now, either a rule will
or will not match.


     ,           , 
If the rule does not match,
then it's not very


     ,          , 
interesting.


    ,          ,  
If the rule does match, then I'm
going to replace that node


    ,            , 
in the expression by an
alternate expression.

  
     ,          , 
I'm actually going
to make a new

 
    ,          , 
expression, which contains  

 
    ,          , 
everything contains that new
value, the result of

 
    ,          , 
substituting into the skeleton,
instantiating the

 
    ,          , 
skeleton for that rule
at this level.

 
    ,          , 
But no one knows whether that
thing that I instantiated

 
    ,          , 
there is in simplified form.

 
    ,          , 
So we're going to have to
simplify that, somehow to call

 
    ,          , 
the simplifier on the thing
that I just constructed.

 
    ,          , 

 
    ,          , 
And then when that's done, then
I sort of can build that


    ,          , 
into the expression I
want as my answer.


    ,          , 
Now, there is a basic idea
here, which I will call a


    ,          , 
garbage  in, garbage out
simplifier.


    ,            , 


      ,            , 
It's a kind of recursive
simplifier.


      ,            , 
And what happens is the way you
simplify something is that


      ,            , 
simple objects like variables
are simple.


      ,           , 
Compound objects, well,
I don't know.


     ,           , 
What I'm going to do is I'm
going to build up from simple

 
     ,           , 
objects, trying to make simple
things by assuming that the


     ,           , 
pieces they're made
out of are simple.


     ,           , 


     ,           , 
That's what's happening here.


     ,            ,  
Well, now, if we look
at the first slide  


      ,            ,
no, overhead, overhead.


     ,          , 
If we look at the overhead, we
see a very complicated program


     ,           , 
like we saw before for the
matcher, so complicated that


     ,           , 
you can't read it like that.


     ,           , 
I just want you to get the feel
of the shape of it, and

 
     ,           , 
the shape of it is that this
program has various


     ,            , 
subprograms in it.


      ,           , 


     ,           ,  
One of them  this part is the
part for traversing the


     ,            , 
expression, and this part is
the part for trying rules.


     ,           , 
Now, of course, we can look at
that in some more detail.


     ,          , 
Let's look at  let's look at the
first transparency, right?


    ,          , 
The simplifier is made
out of several parts.


    ,           ,  
Now, remember at the very
beginning, the simplifier is


     ,           ,  
the thing which takes a rules  a
set of rules and

 
    ,           , 
produces a program which will
simplify it relative to them.


    ,          , 


    ,          , 
So here we have our
simplifier.


    ,          , 
It takes a rule set.


    ,          , 
And in the context where that
rule set is defined, there are


    ,          , 
various other definitions
that are done here.


    ,          , 
And then the result of this
simplifier procedure is, in


    ,           , 
fact, one of the procedures
that was defined.


     ,          ,  
Simplify x.


    ,           , 
What I'm returning as the
value of calling the

 
    ,           , 
simplifier on a set of rules is
a procedure, the simplify x


     ,           , 
procedure, which is defined in
that context, which is a


     ,           ,  
simplification procedure
appropriate for using those


     ,            , 
set of rules.


     ,          , 


    ,          , 
That's what I have there.


    ,          , 
Now, the first two of these
procedures, this one and this


    ,          ,  
one, are together going to be
the recursive traversal of an


    ,           , 
expression.


    ,          , 
This one is the general
simplification for any

 
    ,          , 
expression, and this is the
thing which simplifies a list


    ,          , 
of parts of an expression.


    ,          , 
Nothing more.


    ,          , 
For each of those, we're going
to do something complicated,


    ,           , 
which involves trying
the rules.


     ,          ,  
Now, we should look at
the various parts.


    ,           , 


    ,          , 
Well let's look first at the
recursive traversal of an


    ,          , 
expression.


    ,          , 
And this is done in a
sort of simple way.

 
    ,          , 
This is a little nest of
recursive procedures.


    ,           , 
And what we have here
are two procedures  


     ,           ,  
one for simplifying an
expression, and one for


     ,            ,
simplifying parts of
an expression.


     ,         , 
And the way this works
is very simple.


    ,          , 
If the expression I'm trying
to simplify is a compound


    ,          , 
expression, I'm going to
simplify all the parts of it.


    ,          , 
And that's calling  that
procedure, simplify parts, is


    ,          ,  
going to make up a new
expression with all the parts


    ,           , 
simplified, which I'm then
going to try the

 
    ,           , 
rules on over here.


     ,          , 
If it turns out that the
expression is not compound, if


    ,          , 
it's simple, like just a symbol
or something like pi,


    ,           ,  
then in any case, I'm going to
try the rules on it because it


     ,           ,  
might be that I want in my set
of rules to expand pi to


    ,           , 
.,
dot, dot, dot.


    ,          , 
But I may not.


    ,          , 
But there is no reason
not to do it.


    ,          ,  
Now, if I want to simplify the
parts, well, that's easy too.


    ,            , 
Either the expression is an
empty one, there's no more

 
     ,           , 
parts, in which case I have
the empty expression.


     ,          , 
Otherwise, I'm going to make a
new expression by cons, which


    ,          , 
is the result of simplifying
the first part of the


    ,          , 
expression, the car, and
simplifying the rest of the


    ,          ,  
expression, which is the cdr.


    ,           , 
Now, the reason why I'm showing
you this sort of stuff


    ,          , 
this way is because I want you
get the feeling for the


    ,          ,  
various patterns that are very
important when writing


    ,           , 
programs. And this could be
written a different way.


    ,          , 
There's another way to write
simplified expressions so

   
    ,          ,
there would be only
one of them.

  
    ,         , 
There would only be one
little procedure here.

  
    ,          , 
Let me just write that on the
blackboard to give you a

  
    ,          , 
feeling for that.

  
    ,          , 

  
    ,          , 
This in another idiom,
if you will.

  
    ,          ,

  
    ,          ,
To simplify an expression
called x, what

  
     ,          ,  
am I going to do?

  
     ,           ,  
I'm going to try the rules on
the following situation.

  
    ,           , 
If  

 
    ,          ,  
on the following expression  

 
    ,           , 
compound, just like
we had before.

 
    ,          ,  

 
    ,           , 
If the expression is compound,
well, what am I going to do?

 
    ,          , 
I'm going to simplify
all the parts.

 
    ,           , 
But I already have a cdr
recursion, a common pattern of

 
     ,          , 
usage, which has been captured
as a high order procedure.

 
    ,          ,  
It's called map.

 
    ,           , 
So I'll just write that here.

  
    ,          , 
Map simplify the expression,
all the parts of the

 
    ,          ,  
expression.

 
    ,           , 
This says apply the
simplification operation,

 
    ,          , 
which is this one, every part
of the expression, and then

 
    ,           , 
that cuts those up into a list.
It's every element of

 
     ,           ,
the list which the expression is
assumed to be made out of,

 
     ,          , 
and otherwise, I have
the expression.

 
     ,          , 
So I don't need the helper
procedure, simplify parts,

 
    ,          , 
because that's really this.

 
    ,          , 
So sometimes, you just
write it this way.

  
    ,           , 
It doesn't matter very much.

 
     ,          , 
Well, now let's take
a look at  

 
    ,          , 
let's just look at how
you try rules.

 
    ,           , 
If you look at this slide,
we see this is a

 
     ,          , 
complicated mess also.

 
    ,          , 
I'm trying rules on
an expression.

 
    ,          ,  
It turns out the expression
I'm trying it on is some

 
    ,            , 
subexpression now of the
expression I started with.

 
     ,          ,  
Because the thing I just
arranged allowed us to try

 
    ,           , 
every subexpression.

  
    ,          ,  

 
    ,            , 
So now here we're taking in
a subexpression of the

 
     ,          ,  
expression we started with.

 
    ,           ,
That's what this is.

 
    ,         , 
And what we're going to define
here is a procedure called

 
    ,          , 
scan, which is going
to try every rule.

 
    ,           , 
And we're going to start it up
on the whole set of rules.

 
     ,           , 
This is going to go cdr ing down
the rules, if you will,

 
     ,           , 
looking for a rule to apply.

 
     ,          , 
And when it finds one,
it'll do the job.

  
    ,          , 
Well, let's take a look at
how try rules works.

 
    ,          , 
It's very simple 
the scan rules.

 
    ,          , 
Scan rules, the way
of scanning.

 
    ,          , 
Well, is it so simple?

 
    ,          , 
It's a big program, of course.

 
    ,          ,  
We take a bunch of rules,
which is a sublist

 
    ,            ,  
of the list of rules.

 
     ,           ,  
We've tried some of them
already, and they've not been

 
    ,           , 
appropriate, so we
get to some here.

 
    ,          , 
We get to move to
the next one.

  
    ,          ,  
If there are no more rules, well
then, there's nothing I

 
    ,           ,  
can do with this expression,
and it's simplified.

 
    ,           , 
However, if it turns out that
there are still rules to be

 
    ,          , 
done, then let's match the
pattern of the first rule

 
    ,          , 
against the expression using the
empty dictionary to start

 
    ,            , 
with and use that as
the dictionary.

 
      ,           , 
If that happens to
be a failure, try

 
     ,           ,  
the rest of the rules.

 
     ,            , 

 
     ,           , 
That's all it says here.

  
     ,          ,  
It says discard that rule.

 
    ,           , 
Otherwise, well, I'm going to
get the skeleton of the first

 
    ,          , 
rule, instantiate that relative
to the dictionary,

 
    ,           , 
and simplify the result, and
that's the expression I want.

 
     ,          ,  

 
    ,           , 
So although that was a
complicated program, every

 
    ,          , 
complicated program is made out
of a lot of simple pieces.

 
    ,          , 
Now, the pattern of recursions
here is very complicated.

 
    ,          , 
And one of the most important
things is not

 
    ,          ,
to think about that.

  
    ,         , 
If you try to think about the
actual pattern by which this

 
    ,          , 
does something, you're going
to get very confused.

 
    ,          , 
I would.

 
    ,          , 
This is not a matter of you
can do this with practice.

 
    ,          ,
These patterns are hard.

 
    ,         , 
But you don't have to
think about it.

 
    ,          ,  
The key to this  

 
    ,             , 
it's very good programming and
very good design   is to know

 
      ,           , 
what not to think about.

 
     ,           , 
The fact is, going back to this
slide, I don't have to

  
     ,          , 
think about it because I have
specifications in my mind for

 
    ,          ,   
what simplify x does.

 
    ,            ,
I don't have to know
how it does it.

 
    ,          , 
And it may, in fact, call scan
somehow through try rules,

 
     ,          , 
which it does.

 
    ,          , 
And somehow, I've got another
recursion going on here.

 
    ,          , 
But since I know that simplify
x is assumed by wishful

 
    ,          ,
thinking to produce the
simplified result, then I

 
    ,         ,  
don't have to think
about it anymore.

 
    ,           ,  
I've used it.

  
    ,           , 
I've used it in a
reasonable way.

 
    ,          ,
I will get a reasonable
answer.

 
    ,         , 
And you have to learn how
to program that way  

 
    ,          ,  
with abandon.

 
    ,           , 

 
    ,           , 
Well, there's very little
left of this thing.

 
     ,          , 
All there is left is a few
details associated with what a

 
    ,          ,  
dictionary is.

 
    ,           , 
And those of you who've been
itching to know what a

 
    ,            , 
dictionary is, well, I will flip
it up and not tell you

 
      ,            , 
anything about it.


      ,            ,  
Dictionaries are easy.


      ,             , 
It's represented in terms of
something else called an A


      ,           , 
list, which is a particular
pattern of usage for making


     ,           , 
tables in lists.


     ,           , 
They're easy.


     ,           , 
They're made out of pairs,
as was asked a bit ago.


     ,           , 
And there are special procedures
for dealing with


     ,           ,  
such things called assq, and you
can find them in manuals.


     ,            , 
I'm not terribly excited
about it.

 
     ,           , 
The only interesting thing here
in extend dictionary is I


     ,           , 
have to extend the dictionary
with a pattern, a datum, and a


     ,           , 
dictionary.


     ,           ,
This pattern is, in fact, at
this point a pattern variable.


     ,          , 
And what do I want to do?


     ,           , 
I want to pull out the name of
that pattern variable, the


     ,           ,  
pattern variable name, and I'm
going to look up in the


     ,            , 
dictionary and see if it
already has a value.


     ,           ,  
If not, I'm going to
add a new one in.


     ,             , 
If it does have one, if it has a
value, then it had better be

 
      ,           , 
equal to the one that was
already stored away.


     ,           , 
And if that's the case, the
dictionary is what I


     ,           , 
expected it to be.


     ,          , 
Otherwise, I fail.


    ,          , 
So that's easy, too.


    ,          , 
If you open up any program,
you're going to find inside of


    ,           ,   
it lots of little pieces,
all of which are easy.


     ,            , 
So at this point, I suppose,
I've just told you some


    ,          ,
million dollar valuable
information.


    ,          , 
And I suppose at this point
we're pretty much done with

 
     ,          , 
this program.


    ,          , 
I'd like to ask about
questions.


    ,          , 
AUDIENCE  Yes, can you give me
the words that describe the


    ,          , 
specification for a simplified
expression?


    ,          ,
PROFESSOR  Sure.


    ,         , 
A simplified expression takes
an expression and produces a


    ,          ,
simplified expression.


    ,         , 
That's it, OK?


    ,          ,
How it does it is very easy.


    ,         , 
In compound expressions, all the
pieces are simplified, and

 
    ,          , 
then the rules are tried
on the result.


    ,          ,
And for simple expressions, you
just try all the rules.


    ,          , 
AUDIENCE  So an expression
is simplified by


     ,           ,
virtue of the rules?


     ,          , 
PROFESSOR  That's,
of course, true.


     ,           , 
AUDIENCE  Right.


     ,           ,  
PROFESSOR  And the way this
works is that simplifi


     ,            ,   
expression, as you see here,
what it does is it breaks the


     ,            , 
expression down into the
smallest pieces, simplifies


    ,          , 
building up from the bottom
using the rules to be the

 
    ,          ,  
simplifier, to do the
manipulations, and constructs


    ,           ,  
a new expression
as the result.


    ,           , 
Eventually, one of things you
see is that the rules


    ,           , 
themselves, the try rules, call
a simplified expression


     ,          , 
on the results when it changes
something, the


    ,          , 
results of a match.


    ,          , 
I'm sorry, the results of
instantiation of a skeleton


    ,          ,  
for a rule that has matched.


    ,           , 
So the spec of a simplified
expression is that any


    ,          , 
expression you put into it comes
out simplified according

 
    ,          , 
to those rules.


    ,           , 
Thank you.


     ,          , 
Let's take a break.


    ,           ,
        ,                ,   


        ,              , 
[MUSIC PLAYING]


      ,            , 
PROFESSOR  Well, so far we've
invented enough programming to


      ,            , 
do some very complicated
things.


      ,            , 
And you surely learned
a lot about


      ,            , 
programming at this point.


      ,            ,
You've learned almost all the
most important tricks that


      ,           , 
usually don't get taught to
people until they have had a


      ,            , 
lot of experience.

 
      ,             ,  
For example, data directed
programming is a major trick,


       ,             ,
and yesterday you also saw
an interpreted language.


      ,           ,  


      ,              , 
We did this all in a computer
language, at this point, where


       ,            ,  
there was no assignment
statement.


      ,             , 
And presumably, for those of you
who've seen your Basic or


      ,             , 
Pascal or whatever, that's
usually considered the most


       ,            ,  
important thing.


      ,             , 
Well today, we're going to
do some thing horrible.


      ,            , 
We're going to add an assignment
statement.

 
      ,            , 
And since we can do all these
wonderful things without it,


      ,           , 
why should we add it?


     ,           ,  
An important thing to understand
is that today we're


     ,            , 
going to, first of all, have a
rule, which is going to always


     ,           , 
be obeyed, which is the only
reason we ever add a feature


     ,           ,
to our language is because
there is a good reason.


     ,          , 
And the good reason is going to
boil down to the ability,


     ,            ,  
you now get an ability to break
a problem into pieces


      ,            ,  
that are different sets of
pieces then you could have


     ,            , 
broken it down without that,
give you another means of

 
     ,           , 
decomposition.


     ,           , 


     ,           , 
However, let's just start.


     ,           , 
Let me quick begin by reviewing
the kind of language


     ,           , 
that we have now.


     ,           , 
We've been writing what's called
functional programs.


     ,           , 
And functional programs are
a kind of encoding of


     ,           , 
mathematical truths.


     ,            , 
For example, when we look at the
factorial procedure that


      ,            ,  
you see on the slide here, it's
basically two clauses.

 
      ,             , 
If n is one, the result is
one, otherwise n times


      ,           , 
factorial n minus one.


     ,           , 
That's factorial of n.


     ,           , 
Well, that is factorial of n.


     ,           , 
And written down in some other
obscure notation that you


     ,           , 
might have learned in calculus
classes, mathematical logic,


     ,           ,  
what you see there is if n
equals one, for the result of


     ,            ,  
n factorial is one, otherwise,
greater than one, n factorial


     ,            , 
is n times n minus
one factorial.


     ,           , 
True statements, that's
the kind of

 
     ,           ,   
language we've been using.


     ,             , 
And whenever we have true
statements of that sort, there


     ,           , 
is a kind of, a way of
understanding how they work


     ,            , 
which is that such processes
can be involved by


      ,           , 
substitution.


     ,           , 
And so we see on the second
slide here, that the way we


     ,            ,  
understand the execution implied
by those statements in


      ,             , 
arranged in that order, is
that you do successive


      ,            , 
substitutions of arguments for
formal parameters in the body


      ,           , 
of a procedure.

 
     ,           , 
This is basically a sequence
of equalities.


     ,           , 
Factorial four is four times
factorial three.


     ,           , 
That is four times three times
factorial of two and so on.


     ,           ,
We're always preserving truth.


     ,          , 


     ,           , 
Even though we're talking about
true statements, there


     ,           , 
might be more than one
organization of these true


     ,           , 
statements to describe the
computation of a particular


     ,           , 
function, the computation
of the value of


     ,           , 
a particular function.

 
     ,           , 
So, for example, looking
at the next one here.


     ,           , 
Here is a way of looking
at the sum of n and m.


     ,           , 
And we did this one by
a recursive process.


     ,             , 
It's the increment of the sum
of the decrement of n and m.


       ,            , 
And, of course, there is some
piece of mathematical logic


      ,            , 
here that describes that.


      ,           , 
It's the increment of the sum
of the decrement of n and m,


     ,           , 
just like that.


     ,           , 
So there's nothing particularly
magic about that.


     ,           , 
And, of course, if we can also
look at an iterative process

 
     ,           , 
for the same, a program that
evolves an iterative process,


     ,           , 
for the same function.


     ,           , 
These are two things that
compute the same answer.


     ,           , 
And we have equivalent
mathematical truths that are


     ,           , 
arranged there.


     ,           , 
And just the way you arrange
those truths determine the


     ,            , 
particular process.


      ,           , 
In the way choose and arrange
them determines the process


     ,           ,  
that's evolved.


     ,            , 
So we have the flexibility
of talking about both the

 
     ,           , 
function to be computed,
and the method


     ,            , 
by which it's computed.


      ,           , 
So it's not clear
we need more.


     ,           , 
However, today I'm going
to this awful thing.


     ,           ,  
I'm going to introduce this
assignment operation.


     ,             , 
Now, what is this?


      ,            , 
Well, first of all, there is
going to be another kind of


      ,            , 
kind of statement, if you
will, in a programming


      ,           , 
language called Set!


     ,           ,  

  
     ,            , 
Things that do things like
assignment, I'm going to put

 
     ,           , 
exclamation points after.

 
     ,            , 
We'll talk about what that
means in a second.

 
      ,           , 
The exclamation point, again
like question mark, is an

 
     ,           , 
arbitrary thing we attach to the
symbol which is the name,

 
     ,           ,  
has no significance
to the system.

 
     ,            , 
The only significance is to me
and you to alert you that this

 
     ,           , 
is an assignment of some sort.

 
     ,           , 
But we're going to set a
variable to a value.

 
     ,           ,  

 
     ,            , 
And what that's going to mean
is that there is a time at


     ,           ,  
which something happens.


     ,             ,  
Here's a time.


      ,            ,  
If I have time going this
way, it's a time access.


     ,            , 
Time progresses by walking
down the page.


     ,            , 
Then an assignment is the
first thing we have that


      ,            , 
produces the difference between
a before and an after.


      ,            , 
All the other programs that
we've written, that have no


      ,           ,  
assignments in them, the order
in which they were evaluated


     ,            , 
didn't matter.

 
     ,           , 
But assignment is special, it
produces a moment in time.


     ,           , 
So there is a moment before the
set occurs and after, such


     ,           ,  
that after this moment in time,
the variable has the


     ,            , 
value, value.


     ,           , 


     ,           , 
Independent of what value
it had before, set!


     ,           , 
changes the value
of the variable.


     ,            , 
Until this moment, we had
nothing that changed.


      ,            , 
So, for example, one of the
things we can think of is that


      ,            , 
the procedures we write for
something like factorial are

 
      ,           , 
in fact pretty much identical
to the function factorial.


     ,           , 
Factorial of four, if I write
fact, independent of what


     ,            , 
context it's in, and independent
of how many times


      ,           ,  
I write it, I always get
the same answer.


     ,            , 
It's always .


     ,            , 
It's a unique map from the
argument to the answer.


      ,           , 
And all the programs we've
written so far are like that.


     ,           ,  
However, once I have assignment,
that isn't true.


     ,             ,  
So, for example, if I were to
define count to be one.


      ,            , 
And then I'm going to define
also a procedure, a simple

 
     ,            , 
procedure called demo, which
takes argument x and does the


      ,            , 
following operations.


      ,            , 
It first sets x to x plus one.


      ,           , 
My gosh, this looks just
like FORTRAN, right  


     ,           , 
in a funny syntax.


     ,           , 


     ,           , 
And then add to x count, Oh,
I just made a mistake.


     ,           ,  
I want to say, set! count
to one plus count.


     ,             , 


      ,           , 
It's this thing defined here.

 
     ,           , 


     ,           ,
And then plus x count.


     ,           , 


      ,           ,
Then I can try this procedure.


     ,          , 
Let's run it.


     ,           ,
So, suppose I get a prompt
and I say, demo three.


     ,          , 


     ,           , 
Well, what happens here?


     ,           ,  
The first thing that happens
is count is currently one.


     ,            , 
Currently, there is a time.

 
     ,             , 
We're talking about time.


       ,            , 
x gets three.


      ,            ,  
At this moment, I say,
oh yes, count is


      ,             , 
incremented, so count is two.


      ,            , 
two plus three is five.


      ,           , 
So the answer I get
out is five.


     ,           , 
Then I say, demo of
say, three again.


     ,           , 
What do I get?


     ,           , 
Well, now count is two, it's
not one anymore, because I


     ,            , 
have incremented it.

 
      ,           ,  
But now I go through this
process, three goes into x,


     ,            , 
count becomes one plus count,
so that's three now.


     ,           , 
The sum of those two is six,
so the answer is six.


     ,           , 
And what we see is the same
expression leads to two


     ,           , 
different answers, depending
upon time.


     ,           ,  
So demo is not a function,
does not compute a


     ,            , 
mathematical function.


     ,             ,  


       ,             , 
In fact, you could also see why
now, of course, this is


      ,            , 
the first place where the
substitution model

 
      ,            , 
isn't going to work.


      ,           , 
This kills the substitution
model dead.


     ,           ,  
You know, with quotation there
were some little problems that


     ,            , 
a philosopher might notice
with the substitutions,


     ,           , 
because you have to worry about
what deductions you can


     ,           ,  
make when you substitute into
quotes, if you're allowed to


     ,            , 
do that at all.


     ,           , 
But here the substitution
model is dead, can't do


     ,           , 
anything at all.


     ,           , 
Because, supposing I wanted to
use a substitution model to

 
     ,           , 
consider substituting
for count?


     ,           , 
Well, my gosh, if I substitute
for here and here, they're


     ,           , 
different ones.


     ,           , 
It's not the same
count any more.


     ,           , 
I get the wrong answer.


     ,           , 
The substitution model is
a static phenomenon that


     ,           , 
describes things that are true
and not things that change.


     ,           , 
Here, we have truths
that change.


     ,           , 


     ,           , 
OK, Well, before I give you
any understanding of this,

  
     ,           , 
this is very bad.

 
     ,          , 
Now, we've lost our model
of computation.

 
    ,          , 
Pretty soon, I'm going to have
to build you a new model of

 
    ,          ,  
computation.

 
    ,           , 
But ours plays with this, just
now, in an informal sense.

 
    ,          , 
Of course, what you already
see is that when I have

 
    ,          ,  
something like assignment, the
model that we're going to need

 
    ,           , 
is different from the model that
we had before in that the

 
    ,          , 
variables, those symbols like
count, or x are no longer

 
    ,          ,  
going to refer to the values
they have, but rather to some

 
    ,           , 
sort of place where the
value restored.


    ,           , 
We're going to have to think
that way for a while.


     ,          , 
And it's going to be a
very bad thing and


    ,          , 
cause a lot of trouble.


    ,          , 
And so, as I said, the very fact
that we're inventing this


    ,          , 
bad thing, means that there had
better be a good reason


    ,          ,  
for it, otherwise, just
a waste of time


    ,           , 
and a lot of effort.


    ,          ,  
Let's just look at some
of it just to play.


    ,           , 
Supposing we write down the
functional version, functional

 
    ,           , 
meaning in the old style,
of factorial by


     ,           , 
an iterative process.


     ,           , 


     ,          , 
Factorial of n, we're going to
iterate of m and i, which says


    ,           ,  
if i is greater than n, then
the result is m, otherwise,


     ,           , 
the result of iterating the
product of i and m.


    ,          , 
So m is going to be the product
that I'm accumulating.


    ,          , 
m is the product.


    ,          , 


    ,          , 
And the count I'm going
to increase by one.

 
    ,           , 


     ,          ,  
Plus, ITER, ELSE,
COND, define.


    ,           , 
I'm going to start this up.


    ,          ,   


    ,            , 
And these days, you should
have no trouble reading


    ,          ,  
something like this.


    ,           , 
What I have here is a
product there being


    ,          , 
accumulated and a counter.


    ,          ,  
I start them up both at one.


    ,           , 
I'm going to buzz the counter
up, i goes to i plus one every

 
    ,          ,  
time around.


    ,           , 
But that's only our putting a
time on the process, each of


    ,          , 
this is just a set of
truths, true rules.


    ,          ,  
And m is going to get a new
values of i and m, i times m


    ,           , 
each time around, and eventually
i is going to be


    ,          , 
bigger than n, in which case,
the answer's going to be m.


    ,          , 
Now, I'm speaking to you,
use time in this.


    ,          , 
That's just because I know
how the computer works.


    ,          ,  
But I didn't have to.


    ,            , 
This could be a purely
mathematical description at

 
     ,           ,  
this point, because
substitution


     ,            , 
will work for this.


     ,           , 
But let's set right down a
similar sort of program, using


     ,          ,
the same algorithm, but
with assignments.


    ,         ,


    ,         , 
So this is called the
functional version.


    ,          , 


    ,          ,
I want to write down an
imperative version.


    ,         , 


    ,          ,  
Factorial of n.

 
    ,           , 
I'm going to create
my two variables.


    ,           , 


     ,          , 
Let i initialize itself to one,
and m be initialized to


    ,           , 
one, similar.


     ,           , 
We'll create a loop which has
COND greater than i, and if i


     ,           , 
is greater than n, we're done.


     ,           , 
And the result is m, the product
I'm accumulating.


     ,          , 
Otherwise, I'm going to write
down three things to do.


    ,          ,  
I'm going to set!


    ,           , 
m to the product of i and m,
set! i to the sum of i and

 
    ,           , 
one, and go around
the loop again.


     ,          , 
Looks very familiar to you
FORTRAN programmers.


    ,          , 
ELSE, COND, define, funny
syntax though.


    ,          , 


    ,          , 
Start the loop up, and
that's the program.


    ,           , 
Now, this program, how
do we think about it?


     ,           , 
Well, let's just say what
we're seeing here.


     ,           , 
There are two local variables,
i and m, that have been


     ,           , 
initialized to one.


     ,          , 
Every time around the loop, I
test to see if i is greater

 
    ,          ,  
than n, which is the input
argument, and if so, the


    ,           , 
result is the product being
accumulated in m.


    ,          , 
However, if it's not the end of
the loop, if I'm not done,


    ,          , 
then what I'm going to do is
change the product to be the


    ,          , 
result of multiplying i times
the current product.


    ,          , 
Which is sort of what
we were doing here.


    ,          ,
Except here I wasn't changing.


    ,         , 
I was making another copy,
because the substitution model


    ,          , 
says, you copy the body of the
procedure with the arguments


    ,          , 
substituted for the
formal parameters.

 
    ,          , 
Here I'm not worried about
copying, here I've changed the


    ,          , 
value of m.


    ,          ,  
I also then change the value
of i to i plus one, and go


    ,           ,  
buzzing around.


    ,            , 
Seems like essentially the same
program, but there are


     ,           , 
some ways of making
errors here that


     ,           , 
didn't exist until today.


     ,           , 
For example, if I were to do
the horrible thing of not


     ,          ,
being careful in writing my
program and interchange those


    ,         , 
two assignments, the
program wouldn't

  
    ,           ,
compute the same function.

 
     ,         ,
I get a timing error because
there's a dependency that m

 
    ,         , 
depends upon having the
last value of i.

 
    ,          , 
If I try to i first, then I've
got the wrong value of i when

 
    ,          ,  
I multiply by m.

 
    ,           ,  
It's a bug that wasn't available
until this moment,

 
    ,            , 
until we introduced something
that had time in it.

 
     ,          , 

 
    ,          , 
So, as I said, first we need a
new model of computation, and

 
    ,          , 
second, we have to be damn good
reason for doing this

 
    ,          ,  
kind of ugly thing.


    ,           ,  
Are there any questions?


    ,           ,  


    ,             , 
Speak loudly, David.


      ,           , 
AUDIENCE  I'm confused about,
we've introduced set now, but


     ,           , 
we had let before and
define before.


     ,           , 
I'm confused about the
difference between the three.


     ,          ,  
Wouldn't define work in the same
situation as set if you


    ,           , 
introduced it a bit?


    ,          , 
PROFESSOR  No, define is
intended for setting something

 
    ,           , 
once the first time,
for making it.


     ,          , 


    ,          , 
You've never seen me write on a
blackboard two defines in a


    ,           , 
row whose intention was to
change the old value of some


     ,          , 
variable to a new one.


    ,          , 
AUDIENCE  Is that by
convention or  


    ,          , 
PROFESSOR  No, it's intention.


    ,          , 
The answer is that, for
example, internal to a


    ,          , 
procedure, two defines in a row
are illegal, two defines


    ,          , 
in a row of the same variable.

 
    ,          , 
x can't be defined twice.


    ,          ,  
Whether or not a system catches
that error is a


    ,           , 
different question, but I
legislate to you that define


    ,            , 
happens once on anything.


      ,           , 
Now, indeed, in interactive
debugging, we intend that you


     ,           , 
interacting with your computer
will redefine things, and so


     ,           ,  
there's a special
exception made


     ,           , 
for interactive debugging.


    ,          , 
But define is intended to mean
to set up something which will


    ,          , 
be forever that value
after that point.

 
    ,          , 
It's as if all the defines were
done at the beginning.


    ,          , 
In fact, the only legal place
to put a define in Scheme,


    ,          , 
internal to a procedure, is
just at the beginning of a


    ,          , 
lambda expression,
the beginning of


    ,          ,
the body of a procedure.


    ,         , 


    ,          , 
Now, let of course does nothing
like either of that.


    ,           , 
I mean, if you look at what's
happening with a let, this


     ,          , 
happens again exactly once.


    ,          , 
It sets up a context where i and
m are values one and one.

 
    ,            , 
That context exists throughout
this scope, this


      ,            , 
region of the program.


      ,            ,  


      ,            , 
However, you don't think of that
let as setting i again.


     ,           , 
It doesn't change it.


     ,           , 
i never changes because
of the let.


     ,           , 
i gets created because of let.


     ,           ,  
In fact, the let is a
very simple idea.


     ,             , 
Let does nothing more, Let a
variable one to have value


      ,           , 
one; I'll write this down a
little bit more neatly; Let's

 
     ,           , 
write, var one have value, the
value of expression e, and


     ,           , 
variable two, have this value
of the expression e, in an


     ,            , 
expression e, is the same thing
as a procedure of var


      ,           , 
one and var two, the formal
parameters, and e being the


     ,          ,  
body, where var one is bound
to the value of e, and var


    ,           , 
two gets the value of e.


    ,          , 


    ,          ,  
So this is, in fact, a perfectly
understandable thing


    ,           , 
from a substitution
point of view.


    ,          ,  
This is really the same
expression written in two

 
    ,           , 
different ways.


    ,          , 


    ,          , 
In fact, the way the actual
system works is this gets


    ,          ,
translated into this before
anything happens.


    ,         , 
AUDIENCE  OK, I'm still unclear
as then what makes the


    ,          , 
difference between a
let and a define.


    ,          ,
They could  


    ,         , 
PROFESSOR  A define is a
syntactic sugar, whereby,


    ,          , 
essentially a bunch of variables
get created by lets


    ,          , 
and then set up once.

 
    ,          , 


    ,          , 
OK, time for the first
break, I think.


    ,            ,  
Thank you.


      ,            , 


     ,           , 
[MUSIC PLAYING]


     ,           , 
Well let's see.


     ,           , 
I now have to rebuild the model
of computation, so you


     ,          , 
understand how some such
mechanical mechanism could


    ,          ,  
work that can do what we've
just talked about.


    ,           , 
I just recently destroyed
your substitution model.

 
    ,          ,  
Unfortunately, this model is
significantly more complicated


    ,           , 
than the substitution model.


    ,          ,  
It's called the environment
model.


    ,           , 
And I'm going to have to
introduce some terminology,


    ,          , 
which is very good terminology
for you to know anyway.


    ,          , 
It's about names.


    ,          , 
And we're going to give names
to the kinds of names things


    ,          , 
have and the way those
names are used.


    ,          , 
So this is a meta description,
if you will.


    ,           , 
Anyway, there is a pile of an
unfortunate terminology here,

  
     ,          , 
but we're going to need this
to understand what's called

 
    ,          , 
the environment model.

 
    ,          , 
We're about to do a little bit
of boring, dog work here.

 
    ,           , 
Let's look at the first
transparency.

 
     ,           , 
And we see a description
of a word called bound.

 
     ,          , 
And we're going to say that a
variable, v, is bound in an

 
    ,          , 
expression, e, if the meaning
of e is unchanged by the

 
    ,          , 
uniform replacement of a
variable w, not occurring in

 
    ,          , 
e, for every occurrence
of v in e.

 
    ,          , 
Now that's a long sentence, so,
I think, I'm going to have

 
    ,          , 
to say a little bit about
that before we even fool


    ,          , 
around at all here.


    ,          , 
Bound variables we're
talking about here.


    ,          ,  


    ,           , 
And you've seen lots of them.


    ,          , 
You may not know that you've
seen lots of them.


    ,          , 
Well, I suppose in your logic
you saw a logical variables


    ,          , 
like, for every x there exists
a y such that p is true of x


    ,          , 
and y from your calculus
class.


    ,           , 

 
     ,           , 
This variable, x, and this
variable, y, are bound,


     ,           , 
because the meaning of this
expression does not depend


     ,          , 
upon the particular letters I
used to describe x and y.


    ,          , 
If I were to change the w for x,
then said for every w there


    ,          , 
exists a y such that p is true
of w and y, it would be the


    ,          , 
same sentence.


    ,           , 
That's what it means.


     ,          , 
Or another case of this that
you've seen is integral say,


    ,          ,
from   to one of dx over
one plus x square.


    ,         ,  

 
    ,           , 
Well that's something you
see all the time.


    ,          , 
And this x is a bound
variable.


    ,          , 
If I change that to a
t, the expression is


    ,          , 
still the same thing.


    ,           , 
This is a / of the arctan of
one or something like that.


     ,           , 
Yes, that's the arctan of one.


     ,           , 
So bound variables are actually
fairly common, for


     ,          , 
those of you who have played
a bit with mathematics.


    ,          ,  
Well, let's go into the
programming world.


    ,           , 
Instead of the quantifier being
something like, for

 
    ,          ,   
every, or there exists, or
integral, a quantifier is a


    ,            , 
symbol that binds a variable.


    ,           , 
And we are going to use the
quantifier lambda as being the


     ,          , 
essential thing that
binds variables.


    ,          , 
And so we have some nice
examples here like that


    ,          , 
procedure of one argument
y which does


    ,          , 
the following thing.


    ,           ,  
It calls the procedure of one
argument x, which multiplies x


     ,           ,
by y, and applies
that to three.


    ,         , 

 
    ,            , 
That procedure has the property
there of two bound


      ,           , 
variables in it, x and y.


     ,           ,  
This quantifier, lambda here,
binds this y, and this


     ,           , 
quantifier, lambda,
binds that x.


    ,          ,   
Because, if I were to take an
arbitrary symbol does not


    ,             , 
occur in this expression like w
and replace all y's with w's


     ,          , 
in this expression, the
expression is still the same,


    ,          , 
the same procedure.


    ,          , 
And this is an important idea.


    ,           ,  
The reason why we had such
things like that is a kind of

 
     ,           ,  
modularity.


    ,           ,  
If two people are writing
programs, and they work


    ,           , 
together, it shouldn't matter
what names they use internal


    ,          , 
to their own little machines
that they're building.


    ,          , 
And so, what I'm really telling
you there, is that,


    ,          , 
for example, this is equivalent
to that procedure


    ,          , 
of one argument y which uses
that procedure of one argument


    ,           ,  
d which multiplies z by y.


     ,            , 
Because nobody cares what
I used in here.


     ,           , 

 
     ,           , 
It's a nice example.


     ,          , 
On the other hand, I have some
variables that are not bound.


    ,          , 
For example, that procedure
of one argument x which


    ,          , 
multiplies x by y.


    ,          , 
In this case, y is not bound.


    ,          , 
Supposing y had the value three,
and z had the value


    ,          , 
four, then this procedure
would be the thing that


    ,          , 
multiplies its argument
by three.


    ,          ,
If I were to replace every
instance of y with z, I would


    ,          , 
have a different procedure
which multiplies every

 
     ,          ,
argument that's given by four.


    ,         , 
And, in fact, we have a name
for such a variable.


    ,           , 
Here, we say that a variable, v,
is free in the expression,


     ,           ,  
e, if the meaning of the
expression, e, is changed by


     ,            ,
the uniform replacement of a
variable, w, not occurring in


     ,         , 
e for every occurrence
of v and e.


    ,           , 
So that's why this variable
over here,


     ,          ,
y, is a free variable.


    ,         ,  


    ,           , 
And so free variables
in this expression  

 
    ,          , 
And other examples of that is
that procedure of one argument


    ,          , 
y, which is just what we had
before, which uses that


    ,          , 
procedure of one argument x
that multiplies x by y  


    ,          , 


    ,          , 
use that on three.


    ,          , 


    ,             ,  
This procedure has
a free variable


       ,             ,
in it which is asterisk.


      ,           ,  


      ,             , 
See, because, if that has
a normal meaning of

  
      ,           , 
multiplication, then if I were
to replace uniformly all

 
     ,           , 
asterisks with pluses, then the
meaning of this expression

 
     ,           ,  
would change.

 
     ,            , 

 
     ,           , 
That's what you mean
by a free variable.

 
     ,           , 
So, so far you've learned some
logician words which describe

 
     ,           ,  
the way names are used.

 
     ,            , 
Now, we have to do a little bit
more playing around here,

 
     ,           ,  
a little bit more.

 
     ,            ,  
I want to tell you about the
regions are over which

 
     ,            , 
variables are defined.


     ,           , 


     ,           , 
You see, we've been very
informal about this up till


     ,           , 
now, and, of course, many of you
have probably understood


     ,           , 
very clearly or most of you,
that the x that's being


     ,           , 
declared here is defined
only in here.


     ,           , 


     ,           , 
This x is the defined only in
here, and this y is defined


     ,           , 
only in here.


     ,           ,  

 
     ,            ,  
We have a name for
such an idea.


     ,           , 
It's called a scope.


    ,          , 
And let me give you another
piece of terminology.


    ,          ,  
It's a long story.


    ,           , 
If x is a bound variable in
e, then there is a lambda


    ,           , 
expression where it is bound.


     ,          ,
So the only way you can get a
bound variable ultimately is


    ,         , 
by lambda expression.


    ,          , 
Then you may worry, does
define quite an


    ,          , 
exception to this?

 
    ,          , 
And it turns out, we could
always arrange things so you


    ,          ,  
don't need any defines.


    ,           ,  
And we'll see that in a while.


    ,           ,  
It's a very magical thing.


    ,           ,   
So define really can go away.


    ,            , 
The really, only thing that
makes names is lambda .


    ,          , 
That's its job.


    ,          ,
And what's so amazing about
a lot of things is you can


    ,         , 
compute with only lambda.


    ,          , 
But, in any case, a lambda
expression has a place where

 
    ,          , 
it declares a variable.


    ,          , 
We call it the formal parameter
list or the bound


    ,           , 
variable list. We say that the
lambda expression binds  


     ,           , 
so it's a verb  


     ,           , 
binds the variables declared in
it's found variable list.


     ,           , 
In addition, those parts of
the expression where the


     ,          , 
variable is defined, which was
declared by some declaration,


    ,           ,  
is called the scope
of that variable.


     ,           , 
So these are scopes.


    ,          , 
This is the scope of y.

 
    ,          , 


    ,          , 
And this is the scope of x  


    ,          ,  


    ,           , 
that sort of thing.


    ,          , 


    ,          , 
OK, well, now we have enough
terminology to begin to


    ,          , 
understand how to make a new
model for computation, because


    ,          ,  
the key thing going on here
is that we destroyed the


    ,           , 
substitution model, and we now
have to have a model that


    ,           , 
represents the names as
referring to places.

 
     ,           , 
Because if we are going to
change something, then we have


     ,           , 
a place where it's stored.


     ,          , 
You see, if a name only refers
to a value, and if I tried to


    ,          , 
change the name's meaning,
well, that's not clear.


    ,          , 
There's nothing that is
the place that that


    ,          ,  
name referred to.


    ,           , 
How am I really saying it?


    ,          , 
There is nothing shared
among all of the


    ,          , 
instances of that name.


    ,          ,  
And what we really mean,
by a name, is that we

 
    ,           , 
fan something out.


    ,          , 
We've given something a name,
and you have it, and you have


    ,          , 
it, because I'm given you a
reference to it, and I've


    ,          , 
given you a reference to it.


    ,          , 
And we'll see a lot
about that.


    ,          ,
So let me tell you about
environments.


    ,         , 
I need the overhead projection
machine, thank you.


    ,           , 
And so here is a bunch of
environment structures.


     ,           , 
An environment is a way of doing
substitutions virtually.


     ,           ,
It represents a place where
something is stored which is

 
     ,         , 
the substitutions that
you haven't done.


    ,          , 


    ,          ,
It's a place where everything
accumulates, where the names


    ,          ,  
of the variables are associated
with the values


     ,           ,  
they have such that when you
say, what dose this name mean,


    ,           ,  
you look it up in
an environment.


    ,           , 
So an environment is a function,
or a table, or


    ,          , 
something like that.


    ,          , 
But it's a structured
sort of table.


    ,          ,
It's made out of things
called frames.

 
    ,         ,  


    ,           , 
Frames are pieces of
environment, and they are


    ,           , 
chained together, in some nice
ways, by what's called parent


     ,          , 
links or something like that.


    ,          , 
So here, we have an environment
structure


    ,            ,  
consisting of three
environments,


      ,            , 
basically, a, b, and c.


     ,          , 
d is also an environment, but
it's the same one, they share.


    ,          , 
And that's the essence
of assignment.


    ,          , 
If I change a variable, a value
of a valuable that lives

  
    ,          , 
here, like that one, it should
be visible from all places

 
    ,          , 
that you're looking
at it from.

 
    ,          , 
Take this one, x.

 
    ,          , 
If I change the x to four, it's

 
    ,           , 
visible from other places.

 
     ,          , 
But I'm not going to worry
about that right now.

 
    ,          , 
We're going to talk a lot about
that in a little while.

 
    ,          , 
What do we have here?

 
    ,          , 
Well, these are called frames.

 
    ,          , 
Here is a frame, here's a frame,
and here's a frame.

 
    ,          ,  
a is an environment which
consists of the table which is


    ,           , 
frame two, followed by the
table labeled frame one.


    ,          , 
And, in this environment, in
say this environment, frame


    ,           , 
two, x and y are bound.


     ,           , 
They have values.


     ,           , 
Sorry, in frame one  


     ,          , 
In frame two, z is bound, and
x is bound, and y is bound,


    ,          , 
but the value of x that we see,
looking from this point


    ,           , 
of view, is this x.


     ,          , 
It's x is seven, rather than
this one which is three.

 
    ,          , 
We say that this x
shadows this x.


    ,          ,  


    ,           , 
From environment three  


    ,          , 
from frame three, from
environment b, which refers to


    ,          ,
frame three, we have variables
n and y bound and also x.


    ,         , 


    ,          , 
This y shadow this one.


    ,           , 
So the value, looking
from this point of


     ,          , 
view, of y is two.


    ,          ,  
The value for looking
from this point of

 
    ,           ,  
view and m is one.


    ,           , 
And the value, looking
from this point of


    ,          , 
view, of x is three.


    ,           , 


     ,           ,  
So there we have a very
simple environment


     ,            , 
structure made out of frames.


     ,           , 
These correspond to the
applications of procedures.


     ,          , 
And we'll see that
in a second.


    ,          , 
So now I have to make you some
other nice little structure


    ,          , 
that we build.

 
    ,           , 


     ,          , 
Next slide, we see an object,
which I'm going to draw


    ,          , 
procedures.


    ,           , 
This is a procedure.


     ,          , 
A procedure is made
out of two parts.


    ,          ,
It's sort of like a cons.


    ,         , 


    ,          , 
However, it's the two parts.


    ,           , 


     ,          , 
The first part refers to some
code, something that can be

 
    ,          , 
executed, a set of instructions,
if you will.


    ,           , 
You can think of it that way.


     ,          , 
And the second part is
the environment.


    ,          , 
The procedure is the
whole thing.


    ,           , 
And we're going to have to use
this to capture the values of


     ,           , 
the free variables that occur
in the procedure.


     ,           , 
If a variable occurs in the
procedure it's either bound in


     ,          , 
that procedure or free.


    ,          , 
If it's bound, then the value
will somehow be easy to find.


    ,          ,  
It will be in some easy
environment to get at.

 
    ,           ,  
If it's free, we're going to
have to have something that


    ,           ,  
goes with the procedure that
says where we'll go


    ,           ,  
look for its value.


    ,           , 
And the reasons why are not
obvious yet, but will be soon.


    ,          , 
So here's a procedure object.


    ,           ,  
It's a composite object
consisting of a piece of code


     ,           , 
and a environment structure.


    ,          ,  
Now I will tell you the new
rules, the complete new rules,


    ,           , 
for evaluation.


    ,           , 

 
     ,          , 
The first rule is   there's
only two of them.


    ,          , 
These correspond to the
substitution model rules.


    ,            , 
And the first one has to do
with how do you apply a


      ,           , 
procedure to its arguments?


     ,           , 


     ,           , 
And a procedural object is
applied to a set of arguments


     ,          , 
by constructing a new frame.


    ,          , 
That frame will contain the
mapping of the former


    ,          , 
parameters to the actual
parameters of the arguments


    ,          , 
that were supplied
in the call.

 
    ,          , 
As you know, when we make up
a call to a procedure like


    ,          , 
lambda x times x y, and we call
that with the argument


    ,          , 
three, then we're going
to need some


    ,          , 
mapping of x to three.


    ,          , 
It's the same thing as later
substituting, if you will, the


    ,          , 
three for the x in
the old model.


    ,          , 
So I'm going to build a frame
which contains x equals three


    ,          , 
as the information
in that frame.


    ,          , 


    ,          , 
Now, the body of the procedure
will then have to be evaluated

 
    ,          , 
which is this.


    ,            , 
I will be evaluated in an
environment which is


      ,            , 
constructed by adjoining the new
frame that we just made to


      ,            , 
the environment which
was part of the


      ,           ,  
procedure that we applied.


     ,            , 
So I'm going to make a little
example of that here.


     ,           , 


     ,           , 
Supposing I have some
environment.


     ,           , 
Here's a frame which
represents it.


     ,            , 
And some procedure   which I'm
going to draw with circles

  
      ,           , 
here because it's easier
than little triangles  

 
     ,           , 
Sorry, those are rhombuses,
rhomboidal little pieces of

 
     ,           , 
fruit jelly or something.

 
     ,           , 
So here's a procedure which
takes this environment.

 
     ,           , 
And the procedure has a piece
of code, which is a lambda

 
     ,           ,  
expression, which binds x and
y and then executes an

 
     ,            ,  
expression, e.

 
     ,            ,
And this is the procedure.

 
     ,          , 
We'll call it p.

 
     ,           , 
I wish to apply that procedure
to three and four.

 
     ,           , 
So I want to do p of
three and four.


     ,          , 
What I'm going to do, of course,
is make a new frame.


    ,          , 
I build a frame which contains
x equals three,


    ,          , 
and y equals four.


    ,          , 
I'm going to connect that frame
to this frame over here.


    ,          , 
And then this environment, with
I will call b, is the


    ,          , 
environment in which I will
evaluate the body of e.


    ,          , 


    ,          , 
Now, e may contain references
to x and y and other things.


    ,           , 
x and y will have values
right here.

 
     ,          ,  
Other things will have
their values here.


    ,           , 
How do we get this frame?


    ,            , 
That we do by the construction
of procedures which is the


      ,           , 
other rule.


     ,           ,  
And I think that's
the next slide.


     ,            ,   
Rule two, when a lambda
expression is evaluated,


     ,            , 
relative to a particular
environment  


    ,          , 


    ,          , 
See, the way I get a procedure
is by evaluating the lambda


    ,          ,  
expression.

 
    ,            , 
Here's a lambda expression.


     ,          , 
By evaluating it, I get
a procedure which I


    ,          , 
can apply to three.


    ,          , 
Now this lambda expression is
evaluated in an environment


    ,          , 
where y is defined.


    ,          , 
And I want the body of
this which contains a


    ,          , 
free version of y.


    ,          , 
y is free in here, it's bound
over the whole thing, but it's


    ,          , 
free over here.


    ,          , 
I want that y to be this one.

 
    ,          , 
I evaluate this body of this
procedure in the environment


    ,          , 
where y was created.


    ,          ,  
That's this kind of thing,
because that was done by


    ,           , 
application.


    ,           , 
Now, if I ever want to look up
the value of y, I have to know


     ,           , 
where it is.


     ,           , 
Therefore, this procedural was
created, the creation of the


     ,           , 
procedure which is the result
of evaluating that lambda


     ,          , 
expression had better capture
a pointer or remember the


    ,          , 
frame in which y was bound.

 
    ,          ,  
So that's what this rule
is telling us.


    ,           , 
So, for example, if I happen
to be evaluating a lambda


    ,          , 
expression, lambda expression in
e, lambda of say, x and y,


    ,          ,  
let's call it g in e,
evaluating that.


    ,           , 
Well, all that means is I now
construct a procedure object.


    ,          , 
e is some environment.


    ,          , 
e is something which has
a pointer to it.


    ,          , 
I construct a procedure object
that points up to that


    ,           , 
environment, where the code of
that is a lambda expression or


     ,           , 
whatever that translates into.

 
     ,           , 


     ,           , 
And this is the procedure.


     ,          , 


    ,          , 
So this produces for me   this
object here, this environment


    ,          , 
pointer, captures the place
where this lambda expression


    ,          , 
was evaluated, where the
definition was used, where the


    ,          ,  
definition was used to make a


    ,           , 
procedure, to make the procedure.


    ,          , 
So it picks up the environment
from the place where that


    ,          , 
procedure was defined, stores
it in the procedure itself,

 
    ,          , 
and then when the procedure is
used, the environment where it


    ,          , 
was defined is extended
with the new frame.


    ,          , 


    ,          , 
So this gives us a locus
for putting where a


    ,          ,  
variable has a value.


    ,           ,  
And, for example, if there are
lots of guys pointing in at


    ,            , 
that environment, then they
share that place.


     ,           , 
And we'll see more
of that shortly.


     ,           , 
Well, now you have a new model
for understanding the


     ,          , 
execution of programs. I suppose
I'll take questions

 
    ,          , 
now, and then we'll go on and
use that for something.


    ,          , 


    ,          , 
AUDIENCE  Is it right to say
then, the environment is that


    ,          ,
linked chain of frames  


    ,         , 
PROFESSOR  That's right.


    ,          , 
AUDIENCE  starting with  


    ,          , 
working all the way back?


    ,          ,  
PROFESSOR  Yes, the environment
is a sequence of


    ,           , 
frames linked together.


    ,          ,  
And the way I like to think
about it, it's the pointer to

 
    ,           , 
the first one, because
once you've got that


    ,          ,  
you've got them all.


    ,           ,  


    ,           ,
Anybody else?


    ,         ,  
AUDIENCE  Is it possible to
evaluate a procedure or to


    ,           ,  
define a procedure in two
different environments such


    ,           , 
that it will behave
differently, and


    ,          , 
have pointers to both  


    ,          ,  
PROFESSOR  Oh, yes.


    ,           , 
The same procedure is not going
to have two different

  
    ,          , 
environments.

 
    ,           ,
The same code, the same lambda
expression can be evaluated in

 
     ,          , 
two environments producing
two different procedures.

 
     ,           , 

 
     ,           , 
Each procedure  

 
     ,           , 
AUDIENCE  Their definition
has the same name.

 
     ,           , 
Their operation  

 
     ,          ,  
PROFESSOR  The definition is
written the same, with the

 
    ,           , 
same characters.

 
    ,          ,  
I can evaluate that set of
characters, whatever, that

 
    ,           , 
list structure that defines,
that is the textual


    ,          , 
representation.


    ,          , 
I can evaluate that in two
different environments


    ,          , 
producing two different
procedures.


    ,          ,  
Each of those procedures has
its own local sets of


    ,           , 
variables, and we'll
see that right now.


    ,          , 


    ,          ,  
Anybody else?


    ,           , 


    ,          , 
OK, thank you.

 
    ,          , 
Let's take a break.


    ,          , 


    ,          , 
[MUSIC PLAYING]


    ,          , 
Well, now I've done this
terrible thing to you.


    ,          ,  
I've introduced a very
complicated thing, assignment,


    ,           , 
which destroys most of the
interesting mathematical


    ,          , 
properties of our programs. Why
should I have done this?


    ,          , 
What possible good
could this do?


    ,          , 
Clearly not a nice thing, so I
better have a good excuse.


    ,          , 
Well, let's do a little bit of
playing, first of all, with

 
    ,          , 
some very interesting programs
that have assignment.


    ,           ,   
Understand something special
about them that makes them


     ,             , 
somewhat valuable.


     ,           , 
Start with a very simple program
which I'm going to


     ,           , 
call make counter.


     ,          , 
I'm going to define make counter
to be a procedure


    ,          , 
of one argument n which
returns as its value a


    ,          , 
procedure of no arguments  


    ,          , 
a procedure that produces
a procedure  


    ,          ,  
which sets n to the increment
of n and returns

 
    ,            , 
that value of n.


     ,          , 


    ,          , 
Now we're going to investigate
the behavior of this.


    ,          , 
It's a sort of interesting
thing.


    ,           , 
In order to investigate the
behavior, I have to make an


     ,           , 
environment model, because
we can't understand


     ,           , 
this any other way.


     ,           , 


     ,           ,  
So let's just do that.


     ,           ,  
We start out with
some sort of  

 
    ,           , 
let's say there is a global
environment that the machine


    ,          , 
is born with.


    ,          , 
Global we'll call it.


    ,          , 
And it's going to have in it
a bunch of initial things.


    ,          , 
We all know what it's got.


    ,          , 
It's got things in it like
say, plus, and times, and


    ,          , 
quotient, and difference,
and CAR, and et


    ,          , 
cetera, lots of things.


    ,          , 
I don't know what they are, some
various squiggles that


    ,          , 
are the things the machine
is born with.

 
    ,          , 
And by doing the definition
here, what I plan to do  


    ,          , 
Well, what am I doing?


    ,          , 
I'm doing this relative to
the global environment.


    ,            , 
So here's my environment
pointer.


      ,            , 
In order to do that I have
to evaluate this lambda


      ,            , 
expression.


      ,           , 
That means I make a
procedure object.


     ,           , 
So I'm going to make a procedure
object here.


     ,           ,  


     ,            , 
And the procedure object has, as
the place it's defined, the

 
     ,           , 
global environment.


     ,           , 
The procedure object contains
some code that represents a


     ,           , 
procedure of one argument n
which returns a procedure of


     ,           , 
no arguments which
does something.


     ,           , 


     ,           , 
And the define is a way of
changing this environment, so


     ,           , 
that I now add to it a
make counter, a special rule


     ,           , 
for the special thing defined.


     ,           , 
But what that is, is
it gives me that


     ,           , 
pointer to that procedure.

 
     ,           , 
So now the global environment
contains make counter as well.


     ,           , 


     ,          ,  
Now, we're going to do
some operations.


    ,           ,
I'm going to use this to
make some counters.


    ,         , 
We'll see what a counter is.


    ,          ,  
So let's define c to be a
counter beginning at  .


    ,           , 


    ,          , 
Well, we know how to do this
now, according to the model.


    ,          , 
I have to evaluate the
expression make counter in the


    ,          ,  
global environment,
make counter of  .

 
    ,            ,
Well, I look up make counter and
see that it's a procedure.


     ,         , 


    ,          ,  
I'm going to have to apply
that procedure.


    ,           , 
The way I apply the procedure
is by constructing a frame.


    ,           ,  


     ,           ,  
So I construct a frame which has
a value for n in it which


    ,           , 
is  , and the parent environment
is the one which


    ,          , 
is the environment of definition
of make counter.


    ,          , 


    ,          ,  
So I've made an environment by
applying make counter to  .

  
    ,           , 

 
    ,          ,  
Now, I have to evaluate the body
of make counter, which is

 
    ,           ,
this lambda expression,
in that environment.

 
    ,          , 

 
     ,          , 
Well evaluating this body,
this body is a lambda

 
    ,          , 
expression.

 
    ,          , 
Evaluate a lambda expression
means make a procedure object.

 
    ,           , 
So I'm going to make
a procedure object.

 
     ,          , 

 
    ,          , 
And that procedure object has
the environment it was defined

 
    ,           ,
in being that, where n
was defined to be  .


     ,         , 
And it has some code, which is
the procedure of no arguments


    ,          ,
which does something, that sets
something, and returns n.


    ,         , 
And this thing is going to be
the object, which in the


    ,          ,  
global environment, will
have the name c.


    ,           ,
So we construct a name here, c,
and say that equals that.


    ,         , 


    ,           , 
Now, but also make another
counter, c to be make counter


     ,          ,
say, starting with  .


    ,         , 
Then I do essentially
the same thing.

 
    ,          , 
I apply the make counter
procedure, which I got from


    ,           , 
here, to make another frame
with n being  .


     ,           ,  
That frame has the global
environment as its parent.


     ,           , 
I then construct a procedure
which has that as it's frame


    ,          ,   
of definition.


    ,             , 


     ,          , 
The code of it is the procedure
of no arguments


    ,          , 
which does something.


    ,          ,  
And it does a set, and so on.


    ,           , 
And n comes out.

 
    ,          , 
And c is this.


    ,          , 
Well, you're already beginning
to see something fairly


    ,           ,  
interesting.


     ,           , 
There are two n's here.


    ,          , 
They are not one n.


    ,          , 
Each time I called make counter,
I made another


    ,          , 
instance of n.


    ,          , 
These are distinct and separate
from each other.


    ,          , 


    ,            ,
Now, let's do some execution,
use those counters.

 
      ,          ,
I'm going to use
those counters.


     ,          , 


     ,          ,  
Well, what happens if I
say, c at this point?


    ,           , 
Well, I go over here,
and I say, oh


    ,           , 
yes, c is a procedure.


     ,          , 
I'm going to call this procedure
on no arguments, but


    ,          ,  
it has no parameters.


    ,           ,  
That's right.


    ,           ,  
What's its body?


    ,           ,
Well, I have to look over
here, because I

 
    ,          , 
didn't write it down.


     ,          ,  
It said, set n to one plus n
and return n, increment n.


    ,           , 
Well, the n it sees
is this one.


    ,          , 
So I increment that n.


    ,           ,  
That becomes one, and I
return the value one.


     ,           ,  


    ,           , 
Supposing I then called c.


    ,          , 
Well, what do I do?


    ,           ,  
I say c is this procedure which
does the same thing, but


     ,            , 
here's the n.

 
     ,          , 
It becomes .


    ,          , 
And so I have an  which
is the value.


    ,          , 
I then can say, let's
try c again.


    ,          , 


    ,          , 
c is this, that's two,
so the answer is two.


    ,          , 
And c gives me a  by the same
method, by walking down


    ,          , 
here looking at that and saying,
here's the n, I'm


    ,          , 
incrementing.


    ,          , 


    ,          , 
So what I have are computational
objects.

 
    ,          , 
There are two counters,
each with its own


    ,          ,  
independent local state.


    ,           , 


    ,          , 
Let's talk about
this a little.


    ,          , 
This is a strange thing.


    ,           , 


     ,           , 
What's an object?


     ,           , 
It's not at all obvious
what an object is.


     ,          , 
We like to think about
objects, because it's


    ,          ,  
economical to think that way.

 
    ,           , 
It's an intellectual economy.


    ,          , 
I am an object.


    ,          , 
You are an object.


    ,          ,  
We are not the same object.


    ,           ,  


    ,           ,
I can divide the world into
two parts, me and you, and


    ,         ,  
there's other things as well,
such that most of the things I


    ,           , 
might want to discuss about my
workings do not involve you,


    ,          , 
and most of the things I want to
discuss about your workings


    ,          , 
don't involve me.

 
    ,           , 
I have a blood pressure, a
temperature, a respiration


     ,          ,  
rate, a certain amount of
sugar in my blood, and


    ,           ,  
numerous, thousands, of state
variables   millions actually,


    ,            ,  
or I don't know how many  


     ,            ,  
huge numbers of state variables
in the physical


     ,            , 
sense which represent the state
of me as a particle, and


     ,          , 
you have gazillions
of them as well.


    ,          , 
And most of mine are uncoupled
to most of yours.


    ,          ,   
So we can compute the properties
of me without


    ,            , 
worrying too much about
the properties of you.

   
    ,          , 
If we had to work about both
of us together, than the

  
    ,          , 
number of states that we have to
consider is the product of

  
    ,          , 
the number of states you have
and the number of states I

  
    ,          , 
have. But this way it's
almost a sum.

  
    ,          , 
Now, indeed there are forces
that couple us.

  
    ,          , 
I'm talking to you and
your state changes.

  
    ,          , 
I'm looking at you and
my state changes.

  
    ,          ,  
Some of my state variables, a
very few of them, therefore,

  
    ,           , 
are coupled to yours.

  
    ,          , 
If you were to suddenly yell
very loud, my blood pressure

  
    ,          , 
would go up.

 
    ,          , 

 
    ,          , 
However, and it may not be
always appropriate to think

 
    ,            , 
about the world as being made
out of independent states and

 
      ,           , 
independent particles.

 
     ,           , 
Lots of the bugs that occur in
things like quantum mechanics,

 
     ,           , 
or the bugs in our minds that
occur when we think about

 
     ,           , 
things like quantum mechanics,
are due the fact that we are

 
     ,          , 
trying to think about things
being broken up into

 
    ,          , 
independent pieces, when in
fact there's more coupling

  
    ,          , 
than we see on the surface, or
that we want to believe in,

 
    ,          ,  
because we want to compute
efficiently and effectively.

 
    ,           , 
We've been trained to
think that way.

 
    ,          ,

 
    ,         , 
Well, let's see.

 
    ,          , 
How would we know if we
had objects at all?

 
    ,          , 
How can we tell if
we have objects?

 
    ,          , 
Consider some possible
optical illusions.

 
    ,          , 
This could be done.

 
    ,          , 
These pieces of chalk are not
appropriately identical, but

  
    ,          , 
supposing you couldn't tell
the difference of them by

 
    ,          , 
looking at them.

 
    ,          , 
Well, there's a possibility
that this all a game I'm

 
    ,          ,
playing with mirrors.

 
    ,         , 
It's really the same piece
of chalk, but you're

 
    ,            , 
seeing two of them.

 
      ,            , 
How would you know if you're
seeing one or two?

 
      ,            , 
Well, there's only
one way I know.

 
      ,            , 
You grab one of them and change
it and see if the other

 
      ,           , 
one changed.

  
     ,           , 

 
     ,           , 
And it didn't, so there's
two of them.

 
     ,           ,  

 
     ,             , 
And, on the other hand, there
is some other screwy

 
      ,           , 
properties of things
like that.

 
     ,           ,  
Like, how do we know if
something changed?

 
     ,            , 
We have to look at it before
and after the change.

 
     ,           ,  
The change is an assignment,
it's a moment in time.

 
     ,            , 
But that means we have to know
it was the same one that we're

 
     ,           , 
looking at.

  
     ,           , 
So some very strange, and
unusual, and obscure, and  

 
     ,           , 
I don't understand the problems
associated with

 
     ,           , 
assignment, and change,
and objects.

 
     ,           , 
These could get very,
very bad.

 
     ,           , 
For example, here I am, I am
a particular person, a

 
     ,           , 
particular object.

 
     ,           , 
Now, I can take out my knife,
and cut my fingernail.

 
     ,           ,  
A piece of my fingernail has
fallen off onto the table.

 
     ,           ,  
I believe I am the same person
I was a second ago, but I'm

 
    ,           , 
not physically the same
in the slightest.

  
    ,          , 
I have changed.

 
    ,          , 
Why am I the same?

 
    ,          ,  
What is the identity of me?

 
    ,           , 
I don't know.

 
    ,          , 

 
    ,          , 
Except for the fact that I have
some sort of identity.

 
    ,          , 
And so, I think by introducing
assignment and objects, we

 
    ,          , 
have opened ourselves up to all
the horrible questions of

 
    ,           , 
philosophy that have been
plaguing philosophers for some

 
     ,          , 
thousands of years about
this sort of thing.

  
    ,          , 
It's why mathematics
is a lot cleaner.

 
    ,          , 
Let's look at the best things
I know to say about actions

 
    ,           , 
and identity.

 
     ,          ,  

 
    ,           ,  
We say that an action, a, had an
effect on an object, x, or

 
    ,           , 
equivalently, that x was
changed by a, if some

 
    ,           , 
property, p, which was true
of x before a, became

 
     ,           ,  
false of x after a.

 
     ,            , 
Let's test. It still means
I have to have the

 
     ,           , 
x before and after.

  
     ,          , 
Or, the other way of saying
this is, we say that two

 
    ,          , 
objects x and y are the same
for any action which has an

 
    ,          , 
effect on x has the
same effect on y.

 
    ,          , 
However, objects are very
useful, as I said, for

 
    ,          , 
intellectual economy.

 
    ,          , 
One of the things that's
incredibly useful about them,

 
    ,          , 
is that the world is, we like
to think about, made out of

 
    ,          ,  
independent objects with
independent local state.

 
    ,           , 
We like to think that
way, although it

 
    ,          , 
isn't completely true.

  
    ,          , 
When we want to make very
complicated programs that deal

 
    ,          ,  
with such a world, if we want
those programs to be

 
    ,           ,  
understandable by us and also
to be changeable, so that if

 
    ,           , 
we change the world we change
the program only a little bit,

 
    ,          , 
then we want there to be
connections, isomorphism,

 
    ,          , 
between the objects in the world
and the objects in our

 
    ,          , 
mental model.

 
    ,            , 
The modularity of the world can
give us the modularity in

 
      ,           ,  
our programming.

 
     ,            , 
So we invent things called
object oriented programming

  
     ,           , 
and things like that to provide
us with that power.

 
     ,           , 
But it's even easier.

 
     ,          , 
Let's play a little game.

 
    ,          , 
I want to play a little game,
show you an even easier

 
    ,          , 
example of where modularity can
be enhanced by using an

 
    ,          , 
assignment statement,
judiciously.

 
    ,          , 
One thing I want to enforce and
impress on you, is don't

 
    ,          , 
use assignment statements the
way you use it in FORTRAN or

 
    ,           , 
Basic or something or Pascal,
to do the things you don't

 
     ,          , 
have to do with it.

 
    ,          ,  


    ,           ,  
It's not the right way to
think for most things.


    ,           , 
Sometimes it's essential,
or maybe it's essential.


    ,          , 
We'll see more about that too.


    ,          , 
OK, let me show you
a fun game here.


    ,          , 


    ,          , 
There was mathematician by
the name of Cesaro  


    ,          , 
or Cesaro, Cesaro I
suppose it is  


    ,          , 
who figured out a clever
way of computing pi.


    ,           , 
It turns out that if I take to
random numbers, two integers

 
     ,          , 
at random, and compute the
greatest common divisor, their


    ,          , 
greatest common divisor is
either one or it's not one.


    ,          ,
If it's one, then they have
no common divisors.


    ,         , 


    ,          ,  
If their greatest common
divisor is one  


    ,           , 
the probability that two random
numbers, two numbers


    ,          , 
chosen at random, has as
greatest common divisor one is


    ,          , 
related to pi.


    ,          , 
In fact  


    ,          ,  
yes, it's very strange  

 
    ,           , 
of course there are other ways
of computing pi, like dropping


    ,          ,  
pins on flags, and things like
that, and sort of the same


    ,            , 
kind of thing.


     ,          , 
So the probability of that the
GCD of number one and number


    ,          , 
two, two random numbers chosen,
is  over pi squared.


    ,          , 
I'm not going to try
to prove that.


    ,           , 
It's actually not too hard
and sort of fun.


     ,           , 
How would we estimate
such probability?


     ,           , 
Well, the way we do that, the
way we estimate probabilities,


     ,           , 
is by doing lots of experiments,
and then

 
     ,          , 
computing the ratios of the ones
that come out one way to


    ,          , 
the total number of
experiments we do.


    ,          , 


    ,          , 
It's called Monte Carlo, and
it's useful in other contexts


    ,          , 
for doing things like integrals
where you have lots


    ,          , 
and lots of variables  


    ,          , 
the space which is limiting the
dimensions you are doing


    ,          , 
you integral in.


    ,          , 
But going back to here, Let's
look at this slide, We can use


    ,           , 
Cesaro's method for estimating
pi with n trials by taking the

 
     ,          , 
square root of six over a Monte
Carlo, a Monte Carlo


    ,          , 
experiment with n trials, using
Cesaro's experiment,


    ,          , 
where Cesaro's experiment is the
test of whether the GCD of


    ,          ,  
two random numbers  


    ,            ,  
And you can see that I've
already got some assignments


     ,            , 
in here, just by what I wrote.


     ,           , 
The fact that this word rand,
in parentheses, therefore,


     ,          , 
that procedure call, yields a
different value than this one,


    ,          , 
at least that's what I'm
assuming by writing this this


    ,          , 
way, indicates that this is not
a function, that there's

 
    ,           ,  
internal state in it
which is changing.


     ,           , 


    ,          , 
If the GCD of those two random
numbers is equal to one,


    ,          , 
that's the experiment.


    ,          , 
So here I have an experimental
method for estimating the


    ,          , 
value of pi.


    ,           , 
Where, I can easily divide this
problem into two parts.


     ,          , 
One is the specific Monte Carlo
experiment of Cesaro,


    ,          ,  
which you just saw, and the
other is the general technique


    ,           , 
of doing Monte Carlo
experiments.

 
    ,          , 
And that's what this is.


    ,          , 
If I want to do Monte Carlo
experiments with n trials, a


    ,          , 
certain number of trials, and
a particular experiment, the


    ,           , 
way I do that is I make a little
iterative procedure


     ,           , 
which has variable the number
of trials remaining and the


     ,           , 
number trials that have been
passed, that I've gotten true.


     ,          ,  
And if the number remaining is
 , then the answer is the


    ,           , 
number past divided by this
whole number of trials, was


    ,          , 
the estimate of the
probability.


    ,          , 
And if it's not, if I have
more trials to do,

 
    ,          , 
then let's do one.


    ,          , 
We do an experiment.


    ,          , 
We call the procedure which is
experiment on no arguments.


    ,           , 
We do the experiment and then,
if that turned out to be true,


     ,          , 
we go around the loop
decrementing the number of


    ,          , 
experiments we have to do by
one and incrementing the


    ,          , 
number that were passed.


    ,          , 
And if the experiment was false,
we just go around the


    ,          ,  
loop decrementing the number of
experiments remaining and


    ,           , 
keeping the number
passed the same.

 
    ,          , 
We start this up iterating
over the total number of


    ,          , 
trials with   experiments
past. A very


    ,          , 
elegant little program.


    ,            , 
And I don't have to just do this
with Cesaro's experiment,


      ,           , 
it could be lots of Monte Carlo
experiments I might do.


     ,           , 
Of course, this depends upon the
existence of some sort of


     ,           , 
random number generator.


     ,           , 
And random number generators
generally look


     ,          , 
something like this.


    ,          , 

  
    ,          , 
There is a random number
generator  

 
    ,          , 
is in fact a procedure which is
going to do something just

 
    ,          , 
like the counter.

 
    ,           , 
It's going to update an x to
the result of applying some

 
     ,          ,  
function to x, where this
function is some screwy kind

 
    ,           ,  
of function that you might find
out in Knuth's books on

 
    ,           ,
the details of programming.

 
    ,         ,  
He does these wonderful books
that are full of the details

 
    ,           ,  
of programming, because I can't
remember how to make a

 
    ,            ,
random number generator, but I
can look it up there, and I

 
     ,         , 
can find out.


    ,          , 
And then, eventually, I return
the value of x which is the


    ,          ,
state variable internal to the
random number generator.


    ,           , 
That state variable
is initialized


      ,           ,
somehow, and has a value.


     ,          , 
And this procedure is defined
in the context where that


     ,           , 
variable is bound.


     ,          , 
So this is a hidden piece of
local state that you see here.


    ,          , 
And this procedure is defined
in that context.


    ,          , 
Now, that's a very simple
thing to do.

 
    ,          ,  
And it's very nice.


    ,           ,  
Supposing, I didn't want
to use assignments.


    ,            ,
Supposing, I wanted to write
this program without


     ,         , 
assignments.


    ,          , 
What problems would I have?


    ,          , 
Well, let's see.


    ,          , 
I'd like to use the overhead
machine here, thank you.


    ,          , 
First of all, let's look
at the whole thing.


    ,          , 
It's a big story.


    ,          , 
Unfortunately, which tells you
there is something wrong.

 
    ,          ,
It's at least that big,
and it's monolithic.


    ,         ,  


    ,           , 
You don't have to understand
or look at the text there


    ,           , 
right now to see that
it's monolithic.


     ,           ,  
It isn't a thing which is
Cesaro's experiment.


     ,            ,  
It's not pulled out from the
Monte Carlo process.


     ,            , 
It's not separated.


     ,          , 
Let's look why.


    ,          , 


    ,          , 
Remember, the constraint here is
that every procedure return

 
    ,          ,  
the same value for the
same arguments.


    ,           ,  
Every procedure represents
a function.


    ,           ,
That's a different kind
of constraint.


    ,          , 
Because when I have assignments,
I can change some


     ,          , 
internal state variable.


    ,          ,  
So let's see how that causes
things to go wrong.


    ,           , 
Well, start at the beginning.


    ,          , 
The estimate of pi looks
sort of the same.


    ,          , 
What I'm doing is I take the
square root of six over the


    ,          , 
random GCD test applied to n,
whereas that's what this is.

 
    ,          , 
But here, we are beginning
to see something funny.


    ,          , 
The random GCD test of a certain
number of trials is


    ,          ,  
just like we had before, an
iteration on the number of


    ,           , 
trials remaining, the number
of trials that have been


    ,          , 
passed, and another
variable x.


    ,         , 
What's that x?


   ,         , 
That x is the state of the
random number generator.


   ,         , 


   ,         , 
And it is now going
to be used here.


   ,         , 
The same random update function
that I have over here

 
   ,         , 
is the one I would have used in
a random number generator


   ,         , 
if I were building it the other
way, the one I get out


   ,         , 
of Knuth's books.


   ,         , 
x is going to get transformed
into x, I


   ,         , 
need two random numbers.


   ,         , 
And x is going to get
transformed into x, I have


   ,         , 
two random numbers.


   ,         , 
I then have to do exactly
what I did before.


   ,         , 
I take the GCD of x x.


   ,         , 
If that's one, then I go around
the loop with x being

 
   ,         , 
the next value of x.


   ,         , 


   ,         , 
You see what's happened here
is that the state of the


   ,           , 
random number generator is no
longer confined to the insides


     ,          ,
of the random number
generator.


    ,         , 
It has leaked out.


    ,          , 
It has leaked out into my
procedure that does the Monte


    ,          , 
Carlo experiment.


    ,         , 
But what's worse than that, is
it's also, because it was


   ,         , 
contained inside my experiment
itself, Cesaro, it leaked out

 
   ,         ,  
of that too.


   ,          , 
Because Cesaro called twice, has
to have a different value


   ,         , 
each time, if I going to have
a legitimate experimental


   ,         , 
test. So Cesaro can't be a
function either, unless I pass


   ,         , 
it the seed of the random number
generator that is going


   ,         , 
to go wandering around.


   ,         , 
So unfortunately, the seed of
random number generator has


   ,         , 
leaked out into Cesaro, from the
random number generator,


   ,         ,
that's leaked into the Monte
Carlo experiment.


   ,        ,
And, unfortunately, my Monte
Carlo experiment here is no

 
   ,         , 
longer general.


    ,         , 
The Monte Carlo experiment here
knows how many random


   ,         , 
numbers I need to do
the experiment.


   ,         , 


   ,           , 
That's sort of horrible.


     ,          ,  
I lost an ability to decompose a
problem into pieces, because


    ,           , 
I wasn't willing to accept the
little loop of information,


    ,         , 
the feedback process, that
happens inside the random


   ,         ,   
number generator before that
was made by having an


   ,            ,  
assignment to a state variable
that was confined to the

  
    ,          , 
random number generator.

 
   ,         ,  
So the fact that the random
number generator is an object,

 
   ,          ,  
with an internal state variable,
it's affected by

 
   ,           ,
nothing, but it'll give you
something, and it will apply

 
    ,        , 
it's force to you, that was
what we're missing now.

 
   ,         , 

 
   ,         , 
OK, well I think we've seen
enough reason for doing this,

 
   ,         , 
and it all sort of looks
very wonderful.

 
   ,         , 
Wouldn't it be nice if
assignment was a good thing

 
   ,         , 
and maybe it's worth it,
but I'm not sure.

 
   ,         , 
As Mr. Gilbert and Sullivan
said, things are seldom what


   ,          , 
they seem, skim milk masquerades
as cream.


    ,          ,
Are there any questions?


    ,        ,  


   ,           , 
Are there any philosophers
here?


    ,         , 
Anybody want to argue
about objects?


   ,         , 


   ,         , 
You're just floored, right?


   ,         , 


   ,          , 
And you haven't done
your homework yet.

 
    ,         , 
You haven't come up with
a good question.


   ,         , 


   ,         ,  
Oh, well.


   ,           , 


    ,         , 
Sure, thank you.


   ,         , 
Let's take the long break now.


   ,         ,
        ,              , 


      ,            , 
PROFESSOR  Well, now that we've
given you some power to


      ,            , 
make independent local state
and to model objects, I


      ,            , 
thought we'd do a bit of
programming of a very


      ,            , 
complicated kind, just to
illustrate what you can do


      ,            , 
with this sort of thing.


      ,             , 


       ,            ,  
I suppose, as I said, we were
motivated by physical systems


      ,             ,  
and the ways we like to think
about physical systems, which

 
      ,             ,  
is that there are these things
that the world is made out of.


      ,             , 
And each of these things has
particular independent local


      ,            , 
state, and therefore
it is a thing.


      ,            , 
That's what makes it a thing.


      ,            , 
And then we're going to say
that in the model in the


      ,            ,  
world  we have a world and a
model in our minds and in the


      ,             , 
computer of that world.


      ,           , 
And what I want to make is a
correspondence between the


     ,           , 
objects in the world and the
objects in the computer, the


     ,           , 
relationships between the
objects in the world and the

 
     ,           ,  
relationships between those same
obj...  the model objects


     ,            , 
in the computer, and the
functions that relate things


     ,           , 
in the world to the functions
that relate


     ,           , 
things in the computer.


     ,            , 


      ,           , 
This buys us modularity.


     ,           ,
If we really believe the world
is like that, that it's made


     ,           , 
out of these little pieces, and
of course we could arrange


      ,           , 
our world to be like that, we
could only model those things


     ,           ,  
that are like that, then we can
inherit the modularity in

 
     ,             , 
the world into our
programming.


      ,           , 
That's why we would invent some
of this object oriented


     ,           , 
programming.


     ,           , 
Well, let's take the best
kind of objects I know.


     ,            , 
They're completely  they're
completely wonderful 


      ,            , 
electrical systems. Electrical
systems really are the


      ,           , 
physicist's best,
best objects.


     ,           , 
You see over here I have some
piece of machinery.


     ,            ,  
Right here's a piece
of machinery.


      ,            , 
And it's got an electrical wire
connecting one part of

 
     ,           , 
the machinery with another
part of the machinery.


     ,            , 
And one of the wonderful
properties of the electrical


      ,           , 
world is that I can say this is
an object, and this is an


     ,           ,  
object, and they're  


     ,            , 
the connection between
them is clear.


     ,           , 
In principle, there is no
connection that I didn't


     ,           , 
describe with these wires.


     ,           ,   
Let's say if I have light bulbs,
a light bulb and a


     ,             , 
power supply that's plugged
into the outlet.


     ,           , 
Then the connection is
perfectly clear.

 
     ,           , 
There's no other connections
that we know of.


     ,           , 
If I were to tie a knot in the
wire that connects the light


     ,            ,  
bulb to the power supply, the
light remains lit up.


      ,             , 
It doesn't care.


      ,            ,  


      ,            , 
That the way the physics is
arranged is such that the


     ,           , 
connection can be made abstract,
at least for low


     ,           , 
frequencies and things
like that.


     ,           , 


     ,            , 
So in fact, we have captured all
of the connections there

 
      ,           , 
really are.


     ,           , 
Well, as you can go one step
further and talk about the


     ,           , 
most abstract types of
electrical systems we have,


     ,            ,
digital to dual circuits.


      ,          , 
And here there are certain
kinds of objects.


     ,           , 
For example, in digital
circuits we


     ,           , 
have things like inverters.


     ,           , 
We have things like and gates.


     ,           , 
We have things like or gates.


     ,           , 
We connect them together by
sort of wires which represent

 
     ,           , 
abstract signals.


     ,           , 
We don't really care as physical
variables whether


     ,             , 
these are voltages or currents
or some combination or


       ,            , 
anything like that, or water,
water pressure.


      ,            , 
These abstract variables
represent certain signals.


      ,           , 
And we build systems by
wiring these things


     ,           ,  
together with wires.


     ,            , 
So today what I'm going to show
you, right now, we're


     ,           , 
going to build up an invented
language in Lisp, embedded in


     ,           , 
the same sense that Henderson's
picture language

 
     ,           , 
was embedded, which is not the
same sense as the language of


     ,           ,  
pattern match and substitution
was done yesterday.


     ,            ,
The pattern match/substitution
language was interpreted by a


     ,          , 
Lisp program.


     ,            , 
But the embedding of Henderson's
program is that we


      ,           , 
just build up more and more
procedures that encapsulate


     ,           , 
the structure we want.


     ,           , 
So for example here, I'm going
to have some various primitive


     ,           , 
kinds of objects, as you see,
that one and that one.


     ,           , 
I'm going to use wires
to combine them.

 
     ,           , 
The way I represent
attaching  


     ,           , 
I can make wires.


     ,            , 
So let's say A is a wire.


      ,            , 
And B is a wire.


      ,            , 
And C is a wire.


      ,            , 
And D is a wire.


      ,            , 
And E is wire.


      ,            , 
And S is a wire.


      ,           , 
Well, an or gate that has both
inputs, the inputs being A and


     ,           , 
B, and the output being Y or
D, you notate like this.

  
     ,           , 
An and gate, which has inputs
A and B and output C, we

 
     ,           , 
notate like that.

 
     ,           , 
By making such a sequence of
declarations, like this, I can

 
     ,           , 
wire together an arbitrary
circuit.

 
     ,           , 
So I've just told you a set
of primitives and means of

 
     ,            , 
combination for building digital
circuits, when I need

 
      ,           , 
more in a real language
than abstraction.

 
     ,           ,
And so for example,
here I have  here

 
     ,          , 
I have a half adder.

 
     ,           , 
It's something you all
know if you've

 
     ,           , 
done any digital design.


     ,             , 
It's used for adding numbers
together on A and B and


       ,            ,
putting out a sum and a carry.


      ,           , 
And in fact, the wiring
diagram is


      ,            , 
exactly what I told you.


      ,           , 
A half adder with things that
come out of the box   you see


     ,           , 
the box, the boundary, the
abstraction is always a box.


     ,           ,  
And there are things that come
out of it, A, B, S, and C.


     ,            , 
Those are the declared
variables  declared variables


     ,           ,  
of a lambda expression,
which is the one that

 
     ,            , 
defines half adder.


     ,           ,  


     ,            ,  
And internal to that, I make up
some more wires, D and E,


     ,            , 
which I'm going to use for
the interconnect  


     ,           , 
here E is this one and D is this
wire, the interconnect


     ,           ,  
that doesn't come through
the walls of the box  


     ,            , 
and wire things together
as you just saw.


     ,           , 
And the nice thing about this
that I've just shown you is


     ,           , 
this language is hierarchical
in the right way.


     ,           , 
If a language isn't hierarchical
in the right way,

 
     ,           , 
if it turns out that a compound
object doesn't look


     ,             , 
like a primitive, there's
something


       ,            , 
wrong with the language  


      ,            ,  
at least the way I
feel about that.


      ,             , 
So here we have  here, instead
of starting with mathematical


      ,            ,  
functions, or things that
compute mathematical


      ,            , 
functions, which is what we've
been doing up until now,


     ,           , 
instead of starting with
things that look like


     ,           ,  
mathematical functions, or
compute such things, we are


     ,            , 
starting with things that are
electrical objects and we

 
     ,           , 
build up more electrical
objects.


     ,           , 
And the glue we're using
is basically the


     ,            ,  
Lisp structure  lambdas.


      ,            , 
Lambda is the ultimate
glue, if you will.


     ,           ,   
And of course, half adder itself
can be used in a more


     ,             , 
complicated abstraction called
a full adder, which in fact


     ,           , 
involves two half adders, as you
see here, hooked together


     ,            ,  
with some extra wires, that you
see here, S, C, and C,


      ,            , 
and an or gate, to manufacture
a full adder, which takes a


     ,            , 
input number, another input
number, a carry in, and

 
      ,            ,  
produces output, a sum
and a carry out.


      ,             , 
And out of full adders, you can
make real adder chains and


      ,           , 
big adders.


     ,           , 
So we have here a language so
far that has primitives, means


     ,           , 
of combination, and means of
abstraction to real language.


     ,           ,   
Now, how are we going
to implement this?


     ,             ,  
Well, let's do it easily.


     ,            , 
Let's look at the primitives.


     ,           , 
The only problem is we have to
implement the primitives.


     ,           , 
Nothing else has to be
implemented, because we're

 
     ,           , 
picking up the means of
combination and abstraction


     ,           ,
from Lisp, inheriting them
in the embedding.


     ,          , 
OK, so let's look at a
particular primitive.


     ,           ,  
An inverter is a nice one.


     ,            , 


     ,           ,  
Now, inverter has two wires
coming in, an in and an out.


     ,            , 


     ,            , 
And somehow, it's going to have
to know what to do when a


      ,            ,  
signal comes in.


      ,             , 
So somehow it's going to have
to tell its input wire  

 
      ,            ,
and now we're going to talk
about objects and we're going


      ,          , 
to see this in a little
more detail soon  


     ,           , 
but it's going to have to tell
its input wire that when you


     ,            , 
change, tell me.


      ,           , 
So this object, the object which
is the inverter has to


     ,           ,  
tell the object which
is the input wire,


     ,            , 
hi, my name is George.


     ,            , 
And my, my job is to do
something with results when


      ,           , 
you change.


     ,           , 
So when you change, you get a
change, tell me about it.

 
     ,           ,  
Because I've got to do
something with that.


     ,            ,  
Well, that's done down here by
adding an action on the input


     ,            ,  
wire called invert in, where
invert in is defined over here


     ,            , 
to be a procedure of no
arguments, which gets the


     ,           , 
logical not of the signal
on the input wire.


     ,           , 
And after some delay, which is
the inverter delay, all these


     ,            , 
electrical objects have delays,
we'll do the following


      ,            , 
thing   set the signal on the
output wire to the new value.


      ,            , 


      ,           ,  
A very simple program.

 
     ,            , 
Now, you have to imagine that
the output wire has to be


     ,           , 
sensitive and know that when
its signal changes, it may


     ,           , 
have to tell other guys,
hey, wake up.


     ,           ,  
My value has changed.


     ,            , 
So when you hook together
inverter with an and gate or


     ,           , 
something like that, there has
to be a lot of communication


     ,           ,  
going on in order to
make sure that the


     ,            , 
signal propagates right.


     ,           , 
And down here is nothing
very exciting.


     ,           ,  
This is just the definition
of logical not for some

  
     ,            , 
particular representations
of the logical values  

 
     ,           , 
,   in this case.

 
     ,           , 
And we can look at things more
complicated like and gates.

 
     ,           ,   
And gates take two inputs, A
and A, we'll call them, and

 
     ,             , 
produce an output.

 
     ,           , 
But the structure of the
and gate is identical to the

 
     ,            , 
one we just saw.

 
      ,           ,   
There's one called an and action
procedure that's

 
     ,             , 
defined, which is the thing that
gets called when an input

 
     ,           , 
is changed.

 
     ,          , 
And what it does, of course, is
nothing more than compute


    ,          ,  
the logical and of the signals
on the inputs.


    ,            , 
And after some delay, called the
and gate delay, calls this


     ,          , 
procedure, which sets a signal
on the output to a new value.


    ,          , 
Now, how I implement
these things


    ,          , 
is all wishful thinking.


    ,          ,  
As you see here, I have an
assignment operation.


    ,           , 
It's not set.


    ,          , 
It's a derived assignment
operation in the same way we


    ,          , 
had functions that were derived
from CAR and CDR. So

 
    ,          , 
I, by convention, label that
with an exclamation point.


    ,           , 
And over here, you see there's
an action, which is to inform


     ,          , 
the wire, called A locally in
this and gate, to call the


    ,            , 
and action procedure when it
gets changed, and the wire A


      ,           ,  
to call the and action
procedure


     ,            , 
when it gets changed.


     ,           , 


     ,           , 
All very simple.


     ,          , 
Well, let's talk a little bit
about this communication that


    ,          , 
must occur between these
various parts.

 
    ,          , 
Suppose, for example, I have
a very simple circuit which


    ,          , 
contains an and with wires A
and B. And that connects


    ,           , 
through a wire called C to an
inverter which has a wire


     ,          , 
output called D. What are
the comput...  here's


    ,          , 
the physical world.


    ,          , 
It's an abstraction of
the physical world.


    ,          ,  
Now I can buy these out of
little pieces that you get at


    ,           , 
Radio Shack for a few cents.


    ,          , 
And there are boxes that act
like this, which have little


    ,           , 
numbers on them like
LS  or something.

 
     ,           , 
Now supposing I were to
try to say what's the


     ,           ,  
computational model.


     ,           , 
What is the thing that
corresponds to that, that part


    ,          , 
of reality in the mind of
us and in the computer?


    ,          ,  
Well, I have to assign for every
object in the world an


    ,           , 
object in the computer, and for
every relationship in the


    ,          , 
world between them a
relationship in the computer.


    ,          , 
That's my goal.


    ,           ,  
So let's do that.


     ,           , 
Well, I have some sort of thing
called the signal, A.

 
    ,          , 
This is A. It's a signal.


    ,          ,  
It's a cloudy thing like that.


    ,           , 
And I have another one down here
which I'm going to call


    ,          , 
B. It's another signal.


    ,          ,  
Now this signal  these two
signals are somehow going to


    ,           , 
have to hook together into a
box, let's call it this, which


    ,            , 
is the and gate, action
procedure.


      ,           ,  
That's the and gate's
action procedure.


     ,            , 


     ,           , 
And it's going to produce  well,
it's going to

 
     ,          , 
interact with a signal object,
which we call C  a wire


    ,          , 
object, excuse me, we call
C. And then the  


    ,          , 
this is going to put out again,
or connect to, another


    ,          , 
action procedure which is one
associated with the inverter


    ,           ,
in the world, not.


     ,         , 


    ,          , 
And I'm going to have
another  another wire, which


    ,          , 
we'll call D.


    ,          , 
So here's my layout of stuff.


    ,          , 
Now we have to say what's inside
them and what they have

 
    ,          ,  
to know to compute.


    ,           ,  
Well, every  every one of these
wires has to know what


    ,           , 
the value of the signal that's
on that wire is.


    ,          , 
So there's going to be some
variable inside here, we'll


    ,            , 
call it signal.


      ,           , 


     ,           , 
And he owns a value.


     ,           , 
So there must be some
environment


     ,           ,
associated with this.


     ,          , 
And for each one of these, there
must be an environment

 
     ,          ,  
that binds signal.


    ,           ,  


    ,           , 
And there must be a signal
here, therefore.


    ,          ,  


    ,           , 
And presumably, signal's a value
that's either  or  ,


    ,          , 
and signal.


    ,          ,   


    ,            , 
Now, we also have to have some
list of people to inform if


    ,          , 
the signal here changes.


    ,          , 

 
    ,          ,  
We're going to have
to inform this.


    ,           , 
So I've got that list.
We'll call it the


    ,          ,  
Action Procedures, AP.


    ,           , 
And it's presumably a list.
But the first thing on the


    ,           ,  
list, in this case,
is this guy.


     ,           , 
And the action procedures of
this one happens to have some


    ,          , 
list of stuff.


    ,          , 
There might be other people
who are sharing A, who are


    ,          ,  
looking at it.


    ,            ,  
So there might be other guys
on this list, like somebody

  
     ,            , 
over there that we
don't know about.

 
     ,           ,  
It's the other guy
attached to A.

 
     ,           , 
And the action procedure here
also has to point to that, the

 
    ,          ,  
list of action procedures.

 
    ,           ,  
And of course, that means this
one, its action procedures has

 
    ,           , 
to point up to here.

 
    ,          , 
This is the things  

 
    ,          , 
the people it has to inform.

 
    ,          , 
And this guy has some too.

 
    ,          , 
But I don't know what they
are because I didn't

 
    ,          , 
draw it in my diagram.


    ,           , 
It's the things connected
to D.


     ,          , 
Now, it's also the case that
when the and action procedure


    ,          ,
is awakened, saying one of the
people who know that you've


    ,         ,  
told  one of the people you've
told to wake you up if their


    ,           , 
signal changes, you have to go
look and ask them what's their


    ,          , 
signal so you can do the
and, and produce a


    ,          , 
signal for this one.


    ,          ,  


    ,           , 
So there has to be, for example,
information here

 
    ,           ,  
saying A, my A is this guy,
and my A is this guy.


     ,            , 


     ,          , 
And not only that, when I do my
and, I'm going to have to


    ,          , 
tell this guy something.


    ,          , 
So I need an output  


    ,          , 


    ,          , 
being this guy.


    ,          ,  


    ,           , 
And similarly, this guy's going
to have a thing called


    ,          , 
the input that he interrogates
to find out what the value of

 
    ,          , 
the signal on the input is, when
the signal wakes up and


    ,          , 
says, I've changed, and sends
a message this way saying,


    ,          , 
I've changed.


    ,          ,  
This guy says, OK, what's
your value now?


    ,            , 
When he gets that value, then
he's going to have to say, OK,


     ,          , 
output changes this guy,
changes this guy.


    ,            ,  


      ,            ,
And so on.


     ,          , 
And so I have to have at least
that much connected ness.


     ,           , 
Now, let's go back and look, for
example, at the and gate.

 
     ,          , 
Here we are back
on this slide.


    ,          ,  
And we can see some
of these parts.


    ,           , 
For any particular and gate,
there is an A, there is an


    ,          ,  
A, and the output.


    ,           ,
And those are, those are an
environment that was created


    ,          , 
at the  those produce a frame
at the time and gate was


     ,          ,  
called, a frame where A, A,
and output are  have as their


    ,           , 
values, they're bound to the
wires which, they are  which


    ,          , 
were passed in.


    ,           , 
In that environment, I
constructed a procedure  

 
     ,          , 
this one right there.


    ,          , 
And action procedure was
constructed in that


    ,          , 
environment.


    ,            , 
That was the result of
evaluating a lambda


      ,           , 
expression.


     ,           , 
So it hangs onto the frame
where these were defined.


     ,          ,  
Local  part of its local
state is that.


    ,           ,   
The and action procedure,
therefore, has access to A,


    ,            , 
A, and output as we see here.


    ,          ,
A, A, and output.

 
    ,         , 


    ,          ,  
Now, we haven't looked
inside of a wire yet.


    ,           ,  
That's all that remains.


    ,            , 
Let's look at a wire.


     ,          , 


    ,          , 
Like the overhead, very good.


    ,          ,  


    ,            , 
Well, the wire, again,
is a, is a


     ,          ,  
somewhat complicated mess.


    ,           , 
Ooh, wrong one.

 
    ,          , 
It's a big complicated
mess, like that.


    ,          , 
But let's look at it in detail
and see what's going on.


    ,          , 
Well, the wire is
one of these.


    ,            , 
And it has to have two things
that are part of


      ,            ,  
it, that it's state.


      ,             , 
One of them is the signal
we see here.


      ,            , 
In other words, when we call
make wire to make a wire, then


      ,           ,  
the first thing we do is we
create some variables which


     ,            , 
are the signal and the action
procedures for this wire.


     ,           , 

 
     ,           , 
And in that context, we define
various functions  or


     ,           , 
procedures, excuse
me, procedures.


     ,           , 
One of them is called
set my signal to a new value.


     ,           , 
And what that does is takes
a new value in.


     ,            , 
If that's equal to my current
value of my signal, I'm done.


      ,           , 
Otherwise, I set the signal to
the new value and call each of


     ,           , 
the action procedures that
I've been, that I've


     ,           ,
been  what's the right word?  


     ,          ,  


     ,            , 
introduced to.

 
     ,           , 
I get introduced when the
and gate was applied to me.


     ,           , 


     ,           , 
I add action procedure
at the bottom.


     ,           , 
Also, I have to define a way
of accepting an action


     ,          , 
procedure   which is what
you see here   


    ,          , 
which increments my action
procedures using set to the


    ,          ,  
result of CONSing up a new
process  a procedure, which is


    ,           , 
passed to me, on to my actions
procedures list. And for


    ,          , 
technical reasons, I have to
call that procedure one.


    ,          , 
So I'm not going to tell you
anything about that, that has

  
    ,          , 
to do with event driven
simulations and getting them

 
    ,          , 
started, which takes a little
bit of thinking.

 
    ,          , 
And finally, I'm going to define
a thing called the

 
    ,          , 
dispatcher, which is a way of
passing a message to a wire,

 
    ,          ,  
which is going to be used to
extract from it various

 
    ,           , 
information, like what is the
current signal value?

 
    ,          , 
What is the method of
setting your signal?

 
    ,            ,  
I want to get that out of it.

 
      ,            ,  
How do I  how do I add another
action procedure?

 
     ,            , 

 
     ,           , 
And I'm going to return
that dispatch, that


     ,           , 
procedure as a value.


     ,          , 
So the wire that I've
constructed is a message


    ,          , 
accepting object which accepts
a message like, like what's


    ,          , 
your method of adding
action procedures?


    ,          , 
In fact, it'll give me a
procedure, which is the add


    ,          ,  
action procedure, which I can
then apply to an action


    ,           ,  
procedure to create another
action procedure in the wire.


    ,           , 


    ,          , 
So that's a permission.

 
    ,          , 
So it's given me permission to
change your action procedures.


    ,          , 
And in fact, you can
see that over here.


    ,          ,
Next slide.


    ,         ,
Ah.


    ,         , 


    ,          , 
This is nothing very
interesting.


    ,          ,  
The call each of the action
procedures is just a CDRing


    ,           ,  
down a list. And I'm
not going to even


    ,           , 
talk about that anymore.


    ,          , 
We're too advanced for that.

 
    ,            , 
However, if I want to
get a signal from a


      ,           , 
wire, I ask the wire  


     ,           ,  
which is, what is the wire?


     ,            , 
The wire is the dispatch
returned by creating the wire.


     ,           , 
It's a procedure.


     ,          , 
I call that dispatch on the
message get signal.


    ,          , 
And what I should expect
to get is a method


    ,          ,  
of getting a signal.


    ,           , 
Or actually, I get the signal.


    ,          ,  
If I want to set a signal, I
want to change a signal, then

 
    ,           , 
what I'm going to do is take a
wire as an argument and a new


    ,          , 
value for the signal, I'm going
to ask the wire for


    ,          , 
permission to set its signal and
use that permission, which


    ,          ,  
is a procedure, on
the new value.


    ,           ,
And if we go back to the
overhead here, thank you, if


    ,         , 
we go back to the overhead here,
we see that the method  


    ,          , 
if I ask for the method of
setting the signal, that's


    ,          , 
over here, it's set my signal,
a procedure that's defined


    ,          , 
inside the wire, which if we
look over here is the thing


    ,           , 
that says set my internal value
called the signal, my

 
     ,           , 
internal variable, which is the
signal, to the new value,


     ,          , 
which is passed to me as an
argument, and then call each


    ,          ,  
of the action procedures
waking them up.


    ,           , 


    ,          ,  
Very simple.


    ,           , 
Going back to that slide, we
also have the one last thing  


    ,          , 
which I suppose now you can
easily work out for yourself  


    ,           ,  
is the way you add an action.


     ,           , 
You take a wire  a wire and
an action procedure.


    ,           ,  
And I ask the wire for
permission to add an action.

 
     ,           , 
Getting that permission, I use
that permission to give it an


    ,          ,  
action procedure.


    ,           , 
So that's a real object.


    ,          , 
There's a few more details
about this.


    ,          , 
For example, how am I going
to control this thing?


    ,           , 
How do I do these delays?


     ,           , 
Let's look at that
for a second.


     ,           ,


     ,          , 
The next one here.


     ,           , 
Let's see.

 
     ,          , 
We know when we looked at the
and gate or the not gate that


    ,          , 
when a signal changed on the
input, there was a delay.


    ,          ,  
And then it was going to call
the procedure, which was going


    ,           , 
to change the output.


    ,          ,  


    ,           , 
Well, how are we going
to do this?


    ,           ,  
We're going to make up some
mechanism, a fairly


     ,           , 
complicated mechanism at that,
which we're going to have to


    ,          , 
be very careful about.


    ,          , 
But after a delay, we're
going to do an action.

 
    ,           , 
A delay is a number, and an
action is a procedure.


     ,          , 
What that's going to be is
they're going to have a


    ,          , 
special structure called an
agenda, which is a thing that


    ,          , 
organizes time and actions.


    ,           , 
And we're going to see
that in a while.


     ,          ,  
I don't want to get into
that right now.


    ,           ,
But the agenda has a
moment at which  at


    ,         , 
which something happens.


    ,           , 
We're setting up for later at
some moment, which is the sum


     ,           ,  
of the time, which is the delay
time plus the current

 
     ,            , 
time, which the agenda
thinks is now.


     ,          , 
We're going to set up to do this
action, and add that to


    ,          ,  
the agenda.


    ,           , 


    ,          , 
And the way this machine will
now run is very simple.


    ,           ,  
We have a thing called
propagate, which is the way


     ,           , 
things run.


    ,          , 
If the agenda is empty, we're
done  if there's nothing more


    ,          , 
to be done.


    ,          , 
Otherwise, we're going to take
the first item off the agenda,

  
    ,          ,  
and that's a procedure
of no arguments.

 
    ,           ,  
So that we're going to see
extra parentheses here.

 
    ,           , 
We call that on no arguments.

 
    ,          ,  
That takes the action.

 
    ,           ,  
Then we remove that first item
from the agenda, and we go

 
    ,           ,
around the propagation loop.

 
    ,          , 
So that's the overall structure
of this thing.

 
     ,          , 

 
    ,          , 
Now, there's a, a few other
things we can look at.

 
    ,          , 
And then we're going to
look into the agenda a

 
    ,            , 
little while from now.


      ,           ,  
Now the overhead again.


     ,            , 
Well, in order to set this thing
going, I just want to


     ,           , 
show you some behavior out
of this simulator.


     ,           , 
By the way, you may think this
simulator is very simple, and


     ,          , 
probably too simple
to be useful.


    ,          , 
The fact of the matter is that
this simulator has been used


    ,          , 
to manufacture a fairly
large computer.


    ,          , 
So this is a real
live example.


    ,          , 
Actually, not exactly this
simulator, because I'll tell

 
    ,          , 
you the difference.


    ,          , 
The difference is that there
were many more different kinds


    ,          , 
of primitives.


    ,          ,  
There's not just the word
inverter or and gate.


    ,           , 
There were things like
edge triggered, flip flops,


    ,          , 
and latches, transparent
latches, and adders, and


    ,          , 
things like that.


    ,          , 
And the difficulty with that
is that there's pages and


    ,          , 
pages of the definitions of
all these primitives with


    ,          , 
numbers like LS .

 
    ,          , 
And then there's many more
parameters for them.


    ,          , 
It's not just one delay.


    ,            ,  
There's things like set
up times and hold


      ,            , 
times and all that.


     ,           , 
But with the exception of that
part of the complexity, the


     ,           , 
structure of the simulator that
we use for building a


     ,          , 
real computer, that works
is exactly what


    ,          , 
you're seeing here.


    ,          , 
Well in any case, what we have
here is a few simple things.


    ,          , 
Like, there's inverter delays
being set up and

 
    ,          ,  
making a new agenda.


    ,           , 
And then we can make
some inputs.


    ,          , 
There's input , input ,
a sum and a


    ,          , 
carry, which are wires.


    ,          , 
I'm going to put a special kind
of object called a probe


    ,          , 
onto, onto some of the wires,
onto sum and onto carry.


    ,          , 
A probe is a, can object that
has the property that when you


    ,          , 
change a wire it's attached to,
it types out a message.


    ,          , 
It's an easy thing to do.


    ,           , 
And then once we have that, of
course, the way you put the

 
     ,          ,  
probe on, the first thing it
does, it says, the current


    ,           ,  
value of the sum at time   is
  because I just noticed it.


    ,            , 
And the value of the carry
at time  , this is


     ,           ,
the time, is  .


     ,          , 
And then we go off and we
build some structure.


     ,          , 
Like, we can build a structure
here that says you have a


    ,          , 
half adder on input , input ,
sum, and carry.


    ,           , 
And we're going to set the
signal on input  to .


     ,          , 
We do some propagation.


    ,          , 
At time , which you could see
going through this thing if

 
    ,          , 
you wanted to, the new value
of sum became .


    ,          , 
And the thing says I'm done.


    ,          , 
That wasn't very interesting.


    ,          , 
But we can send it some
more signals.


    ,          , 
Like, we set signal on
input  to be one.


    ,          , 
And at that time if we
propagate, then it carried at


    ,          , 
, the carry becomes , and
at , the sum's new


    ,          ,  
value becomes  .


    ,           ,  
And you might want to work out
that, if you like, about the


    ,           , 
digital circuitry.

 
    ,           , 
It's true, and it works.


     ,          ,
And it's not very interesting.


    ,         , 
But that's the kind
of behavior we


    ,          , 
get out of this thing.


    ,            , 


      ,            , 
So what I've shown you right now
is a large scale picture,


      ,            , 
how you, at a bigger, big
scale, you implement an


      ,           ,
event driven simulation
of some sort.


     ,          ,  
And how you might organize it
to have nice hierarchical


     ,             , 
structure allowing you to build
abstract boxes that you

 
      ,           ,
can instantiate.


     ,          , 
But I haven't told you any of
the details about how this


     ,           , 
agenda and things
like that work.


     ,           , 
That we'll do next.


     ,           ,  
And that's going to involve
change and mutation of data


     ,            , 
and things like that.


     ,           , 
Are there any questions
now, before I go on?


     ,           , 


     ,           , 
Thank you.


     ,           ,  
Let's take a break.

 
     ,           , 


    ,          ,  
Well, we've been making
a simulation.


    ,           , 
And the simulation is an
event driven simulation where


    ,          , 
the objects in the world are the
objects in the computer.


    ,          ,  
And the changes of state that
are happening in the world in


    ,           , 
time are organized to be time
in the computer, so that if


    ,          , 
something happens after
something else in the world,


    ,            , 
then we have it happen after,
after the corresponding events


      ,           , 
happen in the same order
in the computer.


     ,           ,  
That's where we have
assignments, when

  
     ,            , 
we make that alignment.

 
     ,          , 
Right now I want to show you a
way of organizing time, which

 
    ,          ,  
is an agenda or priority queue,
it's sometimes called.

 
    ,           , 
We'll do some  we'll do
a little bit of just

 
    ,          , 
understanding what are the
things we need to be able to

 
    ,          , 
do to make agendas.

 
    ,          , 

 
    ,           , 
And so we're going to have  and
so right now over

 
     ,          , 
here, I'm going to write down
a bunch of primitive

 
    ,          , 
operations for manipulating
agendas.

 
    ,          , 
I'm not going to show you the
code for them because they're


    ,          ,  
all very simple, and you've got


    ,           , 
listings of all that anyway.


    ,          , 
So what do we have?


    ,          , 
We have things like make agenda
which produces a


    ,          , 
new agenda.


    ,          , 


    ,           , 
We can ask  we get the
current time of an agenda,


     ,          ,
which gives me a
number, a time.


    ,         , 

 
    ,           , 
We can get  we can ask whether
an agenda is empty,


     ,          ,  
empty agenda.


    ,            ,  


     ,           , 
And that produces either
a true or a false.


    ,          , 


    ,          , 
We can add an object
to an agenda.


    ,          , 


    ,          , 
Actually, what we add to an
agenda is an operation  an


    ,          , 
action to be done.


    ,           , 
And that takes a time, the
action itself, and the agenda

 
     ,           , 
I want to add it to.


     ,           , 


     ,           , 
That inserts it in
the appropriate


     ,           ,
place in the agenda.


     ,         , 
I can get the first item off an
agenda, the first thing I


    ,          ,
have to do, which is going
to give me an action.


    ,         , 


    ,          , 
And I can remove the first
item from an agenda.


    ,          , 
That's what I have to be able
to do with agendas.


    ,          ,  
That is a big complicated
mess.

 
    ,           , 


    ,          , 
From an agenda.


    ,          , 


    ,          ,  
Well, let's see how we can
organize this thing as a data


    ,           ,
structure a bit.


    ,         , 
Well, an agenda is going to be
some kind of list. And it's


    ,            , 
going to be a list that
I'm going to have


      ,           , 
to be able to modify.


     ,           , 
So we have to talk about
modifying of lists, because


     ,           , 
I'm going to add things to it,
and delete things from it, and

 
     ,          ,  
things like that.


    ,           , 
It's organized by time.


    ,          , 
It's probably good to keep
it in sorted order.


    ,          , 


    ,          , 
But sometimes there are lots of
things that happen at the


    ,          , 
same time  approximate
same time.


    ,          , 
What I have to do is say, group
things by the time at


    ,          ,  
which they're supposed
to happen.


    ,           , 
So I'm going to make an agenda
as a list of segments.


    ,          , 
And so I'm going to draw you a
data structure for an agenda,

 
    ,          , 
a perfectly reasonable one.


    ,          , 
Here's an agenda.


    ,          , 
It's a thing that begins
with a name.


    ,          , 


    ,          , 
I'm going to do it right now
out of list structure.


    ,          , 


    ,          , 
It's got a header.


    ,          , 
There's a reason
for the header.


    ,          , 
We're going to see
the reason soon.


    ,            , 

 
      ,           , 
And it will have a segment.


     ,           , 
It will have  it will be
a list of segments.


     ,           , 


     ,          , 
Supposing this agenda has two
segments, they're the car's  


    ,          , 
successive car's of this
list. Each segment is


    ,           , 
going to have a time  


     ,          , 


    ,          ,  
say for example,    


    ,           ,  
that says that the things
that happen in this


    ,           , 
segment are at time  .

 
    ,          , 
And what I'm going to have in
here is another data structure


    ,          , 
which I'm not going to describe,
which is a queue of


    ,          , 
things to do at time  .


    ,          , 
It's a queue.


    ,          , 
And we'll talk about
that in a second.


    ,          , 
But abstractly, the queue is
just a list of things to do at


    ,           ,  
a particular time.


     ,           ,  
And I can add things
to a queue.


    ,           , 
This is a queue.


    ,          ,
There's a time, there's
a segment.

 
    ,          ,


     ,          , 
Now, I may have another segment
in this agenda.


     ,           , 


     ,          , 
Supposing this is stuff that
happens at time  .


    ,          ,  
It has, of course, another
queue of things that are


    ,           , 
queued up to be done
at time  .


    ,          , 
Well, there are various
things I have to be


    ,          ,  
able to do to an agenda.


    ,            , 
Supposing I want to add to an
agenda another thing to be


     ,          ,  
done at time  .

  
    ,           ,  
Well, that's not very hard.

 
    ,           , 
I'm going to walk down
here, looking for the

 
    ,          , 
segment of time  .

 
    ,          , 
It is possible that there is
no segment of time  .

 
    ,          , 
We'll cover that case
in a second.

 
    ,          , 
But if I find a segment of time
 , then if I want to add

 
    ,          ,  
another thing to be done
at time  , I just

 
    ,           , 
increase that queue  

 
    ,          , 
"just increase" isn't such
an obvious idea.

 
    ,           , 
But I increase the things
to be done at that time.

 
     ,           ,  
Now, supposing I want to
add something to be


     ,            , 
done at time  .


     ,           , 
There is no segment
for time  .


     ,          , 
I'm going to have to create
a new segment.


    ,          , 
I want my time   segment
to exist between


    ,          , 
time   and time  .


    ,           , 
Well, that takes
a little work.


     ,          ,
I'm going to have
to do a CONS.


    ,         , 


    ,          , 
I'm going to have to make a
new element of the agenda

 
    ,          , 
list  list of segments.


    ,          ,  


    ,           ,  
I'm going to have to change.


    ,           , 
Here's change.


    ,          , 
I'm going to have to change
the CDR of the CDR of the


    ,           , 
agenda to point that a new CONS
of the new segment and


     ,          ,
the CDR of the CDR of the CDR of
the agenda, the CD D D DR.


    ,          , 
And this is going to have a
new segment now of time  


     ,           , 
with its own queue, which now
has one element in it.


     ,           , 

 
     ,          ,  
If I wanted to add something at
the end, I'm going to have


    ,            , 
to replace the CDR of this, of
this list with something.


     ,          ,  
We're going to have to change
that piece of data structure.


    ,           , 
So I'm going to need new
primitives for doing this.


    ,          , 
But I'm just showing you
why I need them.


    ,          , 
And finally, if I wanted to add
a thing to be done at time


    ,          , 
, I'm going to have to change
this one, because I'm going to


    ,          , 
have to add it in over here,
which is why I planned ahead


    ,          ,  
and had a header cell,
which has a place.


    ,            , 
If I'm going to change things,
I have to have

 
     ,          , 
places for the change.


    ,          ,  
I have to have a place
to make the change.


    ,             , 
If I remove things from the
agenda, that's not so hard.


      ,            , 
Removing them from the beginning
is pretty easy,


      ,            , 
which is the only case I have.
I can go looking for the


      ,           , 
first, the first segment.


     ,           , 
I see if it has a
non empty queue.


     ,           , 
If it has a non empty queue,
well, I'm going to delete one


     ,            ,  
element from the queue,
like that.


      ,            , 
If the queue ever becomes empty,
then I have to delete

 
     ,           , 
the whole segment.


     ,           , 
And then this, this changes
to point to here.


     ,            , 
So it's quite a complicated data
structure manipulation


      ,           , 
going on, the details of which
are not really very exciting.


     ,           , 
Now, let's talk about queues.


     ,           , 
They're similar.


     ,           , 
Because each of these agendas
has a queue in it.


     ,           , 
What's a queue?


     ,           , 


     ,           , 
A queue is going to have
the following primitive

 
     ,           , 
operations.


     ,           , 
To make a queue, this gives
me a new queue.


     ,           ,


     ,         , 
I'm going to have to be
able to insert into


    ,          , 
a queue a new item.


    ,          , 


    ,          , 
I'm going to have to be able
to delete from a queue the


    ,          , 
first item in the queue.


    ,          ,


    ,         , 
And I want to be able to get the
first thing in the queue

 
    ,          , 
from some queue.


    ,          , 
I also have to be able to test
whether a queue is empty.


    ,           , 


     ,           , 
And when you invent things like
this, I want you to be


     ,          , 
very careful to use the kinds
of conventions I use for


    ,          , 
naming things.


    ,          , 
Notice that I'm careful to say
these change something and


    ,          , 
that tests it.


    ,          ,
And presumably, I did the
same thing over here.


    ,         , 
OK, and there should be an
empty test over here.

 
    ,          , 
OK, well, how would
I make a queue?


    ,          , 
A queue wants to be something
I can add to at the end of,


    ,          , 
and pick up the thing
at the beginning of.


    ,          , 
I should be able to delete
from the beginning


    ,          , 
and add to the end.


    ,          ,  
Well, I'm going to show
you a very simple


    ,           , 
structure for that.


    ,          ,  
We can make this out
of CONSes as well.


    ,           , 
Here's a queue.


    ,          , 
It has  it has a queue header,
which contains two parts  

 
    ,          , 
a front pointer and
a rear pointer.


    ,           , 


     ,           ,   
And here I have a queue
with two items in it.


     ,            , 
The first item, I don't know,
it's perhaps a .


    ,          , 
And the second item, I don't
know, let's give it a .


    ,          , 


    ,          , 
The reason why I want two
pointers in here, a front


    ,          , 
pointer and a rear pointer,
is so I can add to the end


    ,          , 
without having to chase down
from the beginning.


    ,          , 
So for example, if I wanted to
add one more item to this

  
    ,           , 
queue, if I want to add on
another item to be worried

 
     ,          ,  
about later, all I have to do is
make a CONS, which contains

 
    ,           , 
that item, say a .

 
    ,          , 
That's for inserting
 into the queue.

 
    ,            ,  
Then I have to change this
pointer here to here.

 
      ,            , 
And I have to change this one
to point to the new rear.

 
     ,           , 

 
     ,          , 
If I wish to take the first
element of the queue, the

 
    ,          , 
first item, I just go chasing
down the front pointer until I

 
    ,          , 
find the first one
and pick it up.

 
    ,          , 
If I wish to delete the first
item from the queue,


    ,          , 
delete queue, all I do
is move the front


    ,          , 
pointer along this way.


    ,          ,  
The new front of the
queue is now this.


    ,           , 
So queues are very simple too.


    ,          , 
So what you see now is that I
need a certain number of new


    ,          , 
primitive operations.


    ,          , 
And I'm going to give
them some names.


    ,          , 
And then we're going to look
into how they work, and how


    ,          , 
they're used.

 
    ,          , 
We have set the CAR of some
pair, or a thing produced by


    ,          , 
CONSing, to a new value.


    ,           , 


     ,           , 
And set the CDR of a pair
to a new value.


     ,          , 


    ,          ,  
And then we're going to look
into how they work.


    ,           , 
I needed setting CAR over
here to delete the first


    ,           , 
element of the queue.


     ,          , 
This is the CAR, and
I had to set it.


    ,          ,  
I had to be able to set the
CDR to be able to move the

 
    ,            , 
rear pointer, or to be able to
increment the queue here.


     ,          , 
All of the operations I did were
made out of those that I


    ,          ,
just showed you on the, on
the last blackboard.


    ,         , 


    ,          , 
Good.


    ,           ,
Let's pause the time, and take
a little break then.


     ,         ,


    ,         , 
When we originally introduced
pairs made out of CONS, made


    ,          , 
by CONS, we only said a few
axioms about them, which were


    ,           ,  
of the form  

 
     ,           ,  
what were they  


    ,            ,  
for all X and Y, the CAR of the
CONS of X and Y is X and


     ,           , 
the CDR of the CONS of X and Y
is Y. Now, these say nothing


    ,          , 
about whether a CONS has an
identity like a person.


    ,          , 
In fact, all they say is
something sort of abstract,


    ,          , 
that a CONS is the parts
it's made out of.


    ,          , 
And of course, two things are
made out of the same parts,


    ,          , 
they're the same, at least
from the point of view of


    ,          , 
these axioms.


    ,          , 
But by introducing
assignment  

 
    ,          , 
in fact, mutable data is a kind
of assignment, we have a


    ,          , 
set CAR and a set CDR  


    ,          ,  
by introducing those, these
axioms no longer tell the


    ,           , 
whole story.


    ,          , 
And they're still true if
written exactly like this.


    ,          ,  
But they don't tell
the whole story.


    ,            , 
Because if I'm going to set a
particular CAR in a particular


     ,           , 
CONS, the questions are, well,
is that setting all CARs and


     ,           ,  
all CONSes of the same
two things or not?


     ,           , 
If I  if we use CONSes to make
up things like rational

 
    ,          , 
numbers, or things like  over
, supposing I had two


    ,          , 
three fourths.


    ,          , 
Are they the same one  


    ,          , 
or are they different?


    ,          , 
Well, in the case of numbers,
it doesn't matter.


    ,          , 
Because there's no meaning
to changing the


    ,          ,  
denominator of a number.


    ,           , 
What you could do is make a
number which has a different


    ,          , 
denominator.


    ,          , 
But the concept of changing a
number which has to have a

 
    ,          , 
different denominator is sort
of a very weird, and sort of


    ,          , 
not supported by what you
think of as mathematics.


    ,          , 
However, when these CONSes
represent things in the


    ,           , 
physical world, then changing
something like the CAR is like


     ,          , 
removing a piece of
the fingernail.


    ,          , 
And so CONSes have
an identity.


    ,           , 
Let me show you what I mean
about identity, first of all.


     ,           , 
Let's do some little
example here.


     ,          ,  
Supposing I define A to
the CONS of  and .


    ,           ,  

 
    ,           , 
Well, what that means, first of
all, is that somewhere in


    ,          , 
some environment I've made a
symbol A to have a value which


    ,          ,  
is a pair consisting of pointers
to a  and a pointer


    ,           , 
to a , just like that.


    ,          , 
Now, supposing I also say define
B to be the CONS  


    ,          , 


    ,          , 
it doesn't matter, but I like
it better, it's prettier  


    ,            , 
of A and A.


      ,            , 
Well, first of all, I'm using
the name A twice.


      ,            ,  
At this moment, I'm
going to think of

 
      ,            ,  
CONSes as having identity.


     ,            , 
This is the same one.


     ,           ,  
And so what that means is I make
another pair, which I'm


     ,            , 
going to call B. And it contains
two pointers to A. At


     ,           , 
this point, I have three
names for this object.


     ,           , 
A is its name.


     ,           , 
The CAR of B is its name.


     ,           , 
And the CDR of B is its name.


     ,           , 
It has several aliases,
they're called.


     ,           , 

  
     ,           , 
Now, supposing I do something
like set the CAR, the CAR of

 
     ,           , 
the CAR of B to .

 
     ,          , 

 
    ,          , 
What that means is I find the
CAR of B, that's this.

 
    ,           ,
I set the CAR of that to
be , changing this.

 
     ,         , 

 
    ,          , 
I've changed A. If I were
to ask what's the

 
    ,          , 
CAR of A  of A now?

 
    ,          , 
I would get out , even though
here we see that A was the

 
    ,          , 
CONS of  and .

 
    ,          ,  
I caused A to change
by changing B.


    ,           ,  
There is sharing here.


    ,           , 
That's sometimes what we want.


    ,          ,  
Surely in the queues and things
like that, that's


    ,           , 
exactly what we defined
our  organized our data


    ,           , 
structures to facilitate  


     ,           , 
sharing.


     ,           , 
But inadvertent sharing,
unanticipated interactions


     ,          ,
between objects, is the source
of most of the bugs that occur


    ,         , 
in complicated programs. So by
introducing this possibility

 
    ,          , 
of things having identity and
sharing and having multiple


    ,          , 
names for the same thing,
we get a lot of power.


    ,          , 
But we're going to pay
for it with lots of


    ,          , 
complexity and bugs.


    ,          , 


    ,          , 
So also, for example, if I just
looked at this just to


    ,          , 
drive that home, the CADR of
B, which has nothing to do


    ,          , 
with even the CAR of
B, apparently.


    ,          , 
The CADR of B, what's that?


    ,          , 
Take that CDR of B and now
take the CAR of that.

 
    ,          , 
Oh, that's  also.


    ,           , 
So I can have non local
interactions by sharing.


     ,           , 
And I have to be very
careful of that.


     ,           , 


     ,           , 
Well, so far, of course, it
seems I've introduced several


     ,          ,  
different assignment
operators  


    ,           , 
set, set CAR, set CDR. Well,
maybe I should just get rid of


    ,          , 
set CAR and set CDR. Maybe
they're not worthwhile.


    ,          , 
Well, the answer is that once
you let the camel's nose into


    ,          , 
the tent, the rest
of him follows.

 
    ,           , 


     ,          ,  
All I have to have is set, and
I can make all of the  all of


    ,           , 
the bad things that
can happen.


    ,          , 


    ,           , 
Let's play with that
a little bit.


     ,          , 
A couple of days ago, when we
introduced compound data, you


    ,          , 
saw Hal show you a definition
of CONS in terms


    ,          , 
of a message acceptor.


    ,          , 
I'm going to show you even
a more horrible thing, a


    ,           , 
definition of CONS in terms of
nothing but air, hot air.

 
     ,           , 
What is the definition of CONS,
of the old functional


     ,          , 
kind, in terms of purely
lambdic expressions,


    ,          , 
procedures?


    ,          , 


    ,           , 
Because I'm going to then modify
this definition to get


     ,          ,  
assignment to be only one kind
of assignment, to get rid of


    ,           , 
the set CAR and set CDR
in terms of set.


    ,          ,  
So what if I define CONS of X
and Y to be a procedure of one


    ,           , 
argument called a message
M, which calls that


    ,          , 
message on X and Y?

 
    ,          , 


    ,          ,  
This [? idea ?] was invented by
Alonzo Church, who was the


    ,           , 
greatest programmer of the
 th century, although he


    ,          , 
never saw a computer.


    ,          , 
It was done in the  s.


    ,           , 
He was a logician, I suppose
at Princeton at the time.


     ,           , 


     ,          , 
Define CAR of X to be the result
of applying X to that


    ,          ,   
procedure of two arguments, A
and D, which selects A. I will


    ,            , 
define CDR of X to be that
procedure, to be the result of

 
    ,          , 
applying X to that procedure of
A and D, which selects D.


    ,           , 
Now, you may not recognize this
as CAR, CDR, and CONS.


     ,          , 
But I'm going to demonstrate to
you that it satisfies the


    ,          , 
original axioms, just once.


    ,          , 
And then we're going to do
some playing of games.


    ,           ,
Consider the problem CAR of
CONS of, say,  and .


     ,         , 
Well, what is that?


    ,          ,  
It is the result of taking car
of the result of substituting


    ,           , 
 and  for X and Y
in the body of this.


    ,           , 
Well, that's easy enough.

 
     ,          , 
That's CAR of the result of
substituting into lambda of M,


    ,          , 
M of  and .


    ,          , 
Well, what this is, is the
result of substituting this


    ,          , 
object for X in the
body of that.


    ,          , 
So that's just lambda of M  


    ,          ,  
that's substituted, because
this object is being


    ,           , 
substituted for X, which is
the beginning of a list,


    ,          , 
lambda of M  


    ,           , 
M of  and , applied to that
procedure of A and D,


     ,          , 
which gives me A. Well, that's
the reeee[MUSIC PLAYING] 

-Alright! 

-This is CS50. 

-This is CS50. 

-This is CS50. [MUSIC -- IGGY AZALEA, "FANCY"] 

-My favorite memory from CS50 was when I went to Puzzle Day. 

-Probably just the time spent working on problem sets with my friends and people who wold eventually become my blockmates. 

-My best memory from CS50 is the Hackathon. -The CS50 Hackathon. 

-Hackathon. 

-Hackathon. -Hackathon. -The Hackathon -Rob Bowden. Just everything about him. 

[MUSIC -- IGGY AZALEA, "FANCY"] 

-My favorite memory is when I was on stage and I played the prestigious role of a node [? in the Linked ?] [? List. ?] 

-When we all got free Dropbox space and David was like, look under your seats. And it was like, space for everyone! 

[MUSIC -- IGGY AZALEA, "FANCY"] 

-My advice for any incoming student would be to really work on P-sets with friends. 

-Office hours is very much your friend. 

-Make the most of your experience and meet as many people as you can. 

-Don't be afraid to ask for help. -Start the P-sets early in the week. -I think the biggest thing is to take advantage of all the resources that CS50 has. 

-Go to office hours early in the week. 

-Definitely watch the shorts. 

-Don't procrastinate on your P-sets. -Make sure you find a great group of people to work on P-sets with. You can have a lot of fun and get work done together. 

-Don't be afraid to push yourself. Go for the hacker edition sometimes. 

-Write things on paper before you ever touch your computer. 

-CS50 is really great at providing ways to get help. 

-My one piece of advice is sleep. Has anybody said that? Sleep, for sure. It's easy not to do, but you've got to do it, I think. 

-I would say really be mentally prepared because you're going to love it. [MUSIC -- IGGY AZALEA, "FANCY"] 

-This is CS50. 

-This is CS50. 

-This is CS50. [MUSIC -- IGGY AZALEA, "FANCY"] 

-This is CS50. 

[APPLAUSE] 

DAVID J. MALAN: So this is CS50 and this is the end of Week 0. And that was just some of CS50's staff who await you not only in sections and office hours, but, also, this coming weekend at CS50 Puzzle Day. Which, again, is not all about programming. Indeed, it's expected that you won't have to program anything, but rather solve problems using wits and friends alongside you. 

We will be joined by some of our friends at Facebook-- if you register here-- who for the past several years, have actually been writing these challenges with us. And so, they will be the ones ultimately running Puzzle Day. And so, you will be challenged with precisely the kinds of things and problems that folks at Facebook like to think about. So that is tomorrow. Register at cs50.harvard.edu/register. 

Now a word on a couple of staff in particular. This here is Ansel Duff, who is actually one of the co-authors of these binary bulbs that we saw on Wednesday, in addition to CS50's own Dan Bradley. Ansel Duff was also a former freshman advisee of mine 3 years ago and he actually even built this lectern. He's gone on to do engineering sciences and more. Now, his picture here is actually Ansel 3 years ago at the CS50 Hackathon when he borrowed one of our balloons, stuck it to his laptop, and, for the next 12 some odd hours, focused on his final project, taking breaks only to open bags of candy at the Hackathon. 

But he went on more recently to spend this past summer with us, since CS50 for its staff, and now students this semester, has its own 3D printer. And in a nutshell a 3D printers is a device that looks quite like this. You fill it with a plastic spool that is melted down by the device and you build things literally from nothing. Much like an inkjet printer, you start spitting out little dots of plastic that form together to form whole objects. And so Ansel for instance, earlier this summer, has an iPhone 5 and decided he really wanted to prop it up on his desk. But he didn't want to go out and buy something from the Apple store or the like, so he sat down and started drawing something. He took a few measurements as to how thick and how wide his iPhone was, he drew this image here, he decided that he wanted to have a 75 degree tilt as it was staring at him on his desk there. He then turned this, using software, into a 3D CAD model that looked a little something like this. And then he proceeded, ultimately, to actually create it. So in fact, if any of you here, perhaps in a row that I can throw to, have an-- there we have folks with iPhone 5 , and here we have two more. 

Now, not to be outdone, CS50's own Cheng Gong also set out this summer to build quite a few things and, in fact, for reasons that are still unclear, has been slowly printing an army of elephants with articulating arms and trunks. A couple of which are actually here if anyone would now like-- an elephant. All right, . but what Cheng also did for us is he very kindly set up a camera because that elephant, believe it or not, takes some two and a half hours to print. Even the iPhone stand took an hour and a half to print. And what Cheng went ahead and did was set up a nice camera in front of this 3D printer, filmed for an hour and a half as Ansel's design printed. We overlaid some sexy music to it in order to give you this to look at how 3D printing works. And even though this is actually in plastic, realize that if this is an area of interest to you academically, there are folks, among them Jennifer Lewis here at the School of Engineering, who are actually working on 3D printing of plastic objects. But even, increasingly, biological materials to solve physiological problems for humans. But here is a little something from CS50. 

[LOUD MECHANICAL NOISES] DAVID J. MALAN: It doesn't sound anything like that in reality, but it's much cooler to watch it at that speed, and with that sound. 

Now, on Wednesday, how did we first get here? We started talking about computer science and we asked what it was. And it's about a number of things, and there's so many different directions in which you can head after a course like CS50. In fact, if you picked up one of those unofficial guides to CS outside, the booklet that we've provided, whether you're thinking of taking just CS50, or maybe doing a secondary, or maybe even concentrating in CS, do flip through that. And you'll see a diagram toward the end that shows you the many different directions in CS that you can go off in. 

But for today, we'll focus, again, on really one of the fundamental views, perhaps, where you have inputs to problems, you have outputs from problems, and you have algorithms with which to create those outputs from those inputs. And one such example, was of course, this phone book here. And we used as an example to go through an algorithm that was correct. And then another one was correct, but a little faster. And then another one that was a little more dramatic, but fundamentally faster. 

Right, this phone book we claimed had about 1,000 pages. And how many times did I have to tear the phone book in half to find someone like Mike Smith, maximally, in 1,000 page book? So, 10 give or take. And so once I tore this thing in half, or simply, more maturely, divided in half, it's only 10 pages out of 1,000. And if you extrapolate, a little unrealistically for a phone book, but if this phone book had some 4 billion pages in it, so completely unwieldy physically, how many times do you divide a 4 billion page phone book in half? So it's actually 32, give or take. And so 32 times only, out of 4 billion pages, can you find someone like Mike Smith. And that's efficiency. That's a good algorithm, daresay. 

But then we moved from that to try to formalize it. And I proposed this pseudocode code. Pseudocode code is not anything formal. It's not something you memorize. It's just something you express fairly intuitively using English, or any language really, that conveys your ideas succinctly. But what's key about pseudocode code is that you try to anticipate all of the possible cases that might happen. And indeed, in this pseudocode code, there were really three cases every time I divided the phone book. Mike might be to the left. Mike might be to the right. Or he might be right on the page I'm on. Or a fourth corner case, so to speak. A bad scenario might be one which-- what is happening? Mike's just not in the phone book at all. 

And when programs crash-- when Mac and PC software that you guys run on your computers sometimes hangs or quits unexpectedly, that generally means that some programmer, some human like you soon, just screwed up and made some mistake. Maybe didn't anticipate that maybe there is no Mike Smith in the phone book. And if you don't actually write code to handle situations like that, generally unpredictable things can happen. Your machine can freeze. It can reboot. The program can quit. And so all of these stupidities that you may have encountered in your actual life just using computers, will increasingly be just explained away by this intuition and this understanding of what is actually going on underneath the hood. 

Now let's try to take a look at a more general problem. Rather than take attendance in a place like this, which would be quite slow to do one, two, three, four. Or maybe two, four, six, eight. Let's focus, instead, on how we might formalize the algorithm of the process by which we could take attendance. And along the way, let's start to apply some nomenclature that we'll use today when we actually start programming in a language. So I give you now, a four minute video that we put together with our friends from TED, the organization. Whereby we supplied a script and they brought their animators to bear, and actually created a 2D animation of what an algorithm is. If we could dim the lights. 

[MUSIC PLAYING] NARRATOR: What's an algorithm? In computer science, an algorithm is a set of instructions resolving some problem step-by-step. Typically, algorithms are executed by computers, but we humans have algorithms as well. For instance, how would you go about counting the number of people in a room? Well, if you're like me, you'd probably point at each person one at a time and count up from zero. One, two, three, four, and so forth. Well, that's an algorithm. In fact, let's try to express it a bit more formally in pseudocode code. English-like syntax that resembles a programming language. 

Let n equal 0. For each person in room, set n equal to n plus 1. How to interpret the pseudocode? Well line one declares, so to speak, a variable called n and initializes its value to 0 This just means that at the beginning of our algorithm, the thing with which we're counting has a value of 0. After all, before we start counting we haven't counted anything yet. Calling this variable n is just a convention. I could have called it most anything. Now line two demarks the start of a loop, a sequence of steps that will repeat some number of times. So in our example, the step we're taking is counting people in the room. Beneath line two is line three which describes exactly how we'll go about counting. The indentation implies that it's line three that will repeat. So with the pseudocode code is saying is that after starting at 0 for each person in the room we'll increase n by 1 Now is this algorithm correct? Well let's bang on it a bit. 

Does it work if there are two people in the room? Let's see. In line one we initialize n to 0. For each of these two people, we then increment n by 1. So in the first trip through the loop, we update n from 0 to 1. On the second trip through that same loop, we update n from 1 to 2. And so, by this algorithm's end, n is 2, which indeed matches the number of people in the room. So far, so good. 

How about a corner case though? Suppose that there are 0 people in the room-- besides me, who's doing counting. In line one, we again initialize n to 0. This time though, line three doesn't execute at all since there isn't a person in the room. And so n remains 0, which indeed matches the number of people in the room. Pretty simple, right? But counting people one at a time is pretty inefficient, too, no? Surely we can do better. Why not count two people at a time, instead of counting one, two, three, four, five, six, seven, eight, and so forth. Why not count two, four, six, eight, and so on? It even sounds faster. And it surely is. 

Let's express this optimization in pseudocode code. Let n equal 0. For each pair of people in room, set n equal to n plus 2. Pretty simple change, right? Rather than count people one at a time, we instead count them two at a time. This algorithm's, thus, twice as fast as the last. But is it correct? Let's see. Does it work if there are two people in the room? In line one, we initialize n to 0. For that one pair of people, we then increment n by 2. And so by this algorithm's end n is 2, which indeed matches the number of people in the room. 

Suppose next that there are zero people in the room. In line one we initialize n to 0. As before, line three doesn't execute it all since there aren't any pairs of people in the room, and so n remains 0. Which indeed matches the number of people in the room. But what if there are three people in the room? How does this algorithm fare? Let's see, in line one, we initialize n to 0. For a pair of those people, we then increment n by 2. But then what? There isn't another full pair of people in the room, so line two no longer applies. And so by this algorithm's end, n is still 2 which isn't correct. Indeed this algorithm's said to be buggy because it has a mistake. 

Let's redress with some new pseudocode code. Let n equal 0. For each pair of people in room, set N equal to n plus 2. If one person remains unpaired, set N equal to n plus 1. To solve this particular problem, we've introduced in line four a condition, otherwise known as a branch, that only executes if there's one person we could not pair with another. And so now, whether there's one, or three, or any odd number of people in the room, this algorithm will now count them. Can we do even better? Well, we could count in threes, or fours, or even fives and tens, but beyond that, it's going to get a little bit difficult to point. 

At the end of the day, whether executed by computers or humans, algorithms are just a set of instructions with which to solve problems. These were just three. What problem would you solve with an algorithm? 

DAVID J. MALAN: So deliberately, a very simple program, a very simple algorithm, for achieving something very simple, counting the number of people in the room. 

But let's tease apart some of the representative features here that are actually going to be useful even when implementing the most complex of software. So for instance, in this first line, we have what we call the variable, and from algebra, you're generally familiar using x and y and z sometimes, and so forth. But in programming, variables are still, at the end of the day, very similar to that. But it's perhaps simpler to think of a variable as just a container. And, in fact, it's some number of bits implemented somehow in your hard disk or in your computer's memory, but more on that in the future. It's just a container. And if you say something like let n equal 0, well that's like calling this glass bowl here n, just an arbitrary name, and putting nothing in it initially. So the value of this bowl right now is zero. And of course if you perceive in a subsequent line, to actually increment some line of code, as in this third line here, by 1, that's like saying what's the current value of n, it's 0, plus 1, put something like a ping pong ball in here. Now the value of this variable is quite simply 1. And you could very quickly extrapolate, but now it's 2, now it's 3, and so on. So that's all a variable is. It's a piece of storage to actually store some data. For now it's a ping pong ball. There it's a number. But it could be words in a dictionary, like the spell checker I alluded to on Wednesday for one of last year's problem sets. 

Now another key idea, that similarly is pretty intuitive I would claim, is that of a loop. And the loop in the process of counting everyone is, of course, doing the same thing again and again-- either one at a time or two at a time. And you can express this in English, or pseudocode code, in any number of ways, but using this preposition "for" is a very common way of doing that. For each person in the room, do this. Again and again. And the fact that it's indented, line three, just means that what you're supposed to do is the stuff that's indented below the line two itself. Just a human convention, but a common one as we'll see in actual higher level programming languages. 

Now little more interesting is when you get in a corner case. For instance, a corner case was when there were three people, or five, or seven, or any odd number of people in the room, because doing that by twos brakes eventually because your going to miss someone, either at the very beginning or the very end depending on how you do it. And so, now, I have this branch, or condition, if one person remains, then go ahead and handle that one lonesome person who didn't get paired with someone else. So that's what we would call a condition, or a branch. 

Now pseudocode code more generally can be written to solve any number of problems. And what I thought we'd do here is take a moment to invite shall we say CS50's own Rob Bowden on stage to be joined by two volunteers, who have no idea what awaits. A hand went down as soon as I said that. How about you on the end here, come on up. And how about from farther away, how about way in the back. Back row, come on up with your hands up. Alright, and what's your name? 

ANITA: Anita. 

DAVID J. MALAN: Anita. Okay, nice to meet you. Let me introduce you to Rob Bowden. This is Anita. And what is your name? 

KIERSTEN: Kiersten 

DAVID J. MALAN: Kiersten. Kiersten, come on up and meet Rob Bowden and Anita. Nice to meet you. KIERSTEN: Nice to meet you. DAVID J. MALAN: Alright, Rob. ROB BOWDEN: Nice to meet you. DAVID J. MALAN: Anita. KIERSTEN: Hi Anita. DAVID J. MALAN: And your several hundred classmates. So, now let me go ahead and pull up just a simple program here on Mac OS that'll let me actually jot some notes down. And if you guys want to each take a position at one of those schools there, let me go ahead and starts a list of pseudocode code, if you will. And what I want to do here, ultimately is type for you some instructions that our audience members are actually going to recite for us. Let me go ahead and just change this to a numbered list to match what we were doing up there. And what I'm going to do with your help, is write a program in pseudocode, with which these guys are going to implement a peanut butter and jelly sandwich. So it's perhaps apropos to show something some of you might have seen on the internet for just a brief annoying moment. 

[MUSIC BUCKEWHEAT BOYS, "PEANUT BUTTER  JELLY TIME"] DAVID J. MALAN: OK. That's enough of that. So here meanwhile, I have a pair of Google Glasses which we'll put on CS50's own Rob Bowden to see the world through his eyes. And we'll do our best in post production to actually weave the footage of what Rob is seeing now, into this actual lecture video with our two volunteers beside him. So what I'm going to do is, I'll be the typist. We have the goal here of actually writing a program with which to make, ultimately, a peanut butter and jelly sandwich, but these three are going to behave as though they are computers. And computers, at the end of the day, are actually pretty dumb devices. They're super fast, but they can only do, literally, what they are told. You can't just say make a peanut butter and jelly sandwich. You have to program them to do that. You have to tell them with precision what to do, less things go horribly and, hopefully, amusingly awry. 

So with that said, we need one call-out from the audience for what should step one be, if the goal here is to make a peanut butter and jelly sandwich. Yes? 

AUDIENCE: [INAUDIBLE] the bag of bread. DAVID J. MALAN: Open the bag of bread. So if the three contestants would like to proceed to do that literally. Open the bag of bread. 

[AUDIENCE LAUGHING] DAVID J. MALAN: So let's work on that. All right. So step two, how-- let's take this further. Yeah, in the front. 

AUDIENCE: [INAUDIBLE] the bread. 

DAVID J. MALAN: What's that? 

AUDIENCE:Remove the bread. DAVID J. MALAN: Remove the bread. Similarly succinct. Thank you. 

[APPLAUSE] DAVID J. MALAN: That's it? OK, so step two is going to be remove the bread. Alright, someone want to write us a longer sentence? Someone else? A little more [INAUDIBLE]. No, nothing now. Yes? 

AUDIENCE: Place two slices next to each other. 

DAVID J. MALAN: Place two slices next to each other. 

[AUDIENCE LAUGHING] 

DAVID J. MALAN: Place two slices next to each other. Step four. Yes? 

AUDIENCE: Take your hand and set it lightly on top of the peanut butter lid. 

[AUDIENCE LAUGHING] AUDIENCE: [INAUDIBLE] next to the peanut butter. DAVID J. MALAN: What? Say that again. 

AUDIENCE: Unscrew the lid and put it gently next to the peanut butter. 

DAVID J. MALAN: Put it gently next to the peanut butter. OK, progress. Step five. Excellent. Yes? 

Pick up knife. DAVID J. MALAN: Pick up knife. OK, step six. Yeah? 

AUDIENCE: Hold knife by the handle. DAVID J. MALAN: Hold knife by the handle. Hold knife by the handle. Step seven. Yes? 

AUDIENCE: [INAUDIBLE] knife in peanut butter and as little out [INAUDIBLE]. 

DAVID J. MALAN: Put knife in-- I heard "put knife in peanut butter and take as little out as possible." By the way, remove the paper first. All right, step nine. Step nine. Step nine. We haven't actually made a sandwich yet. Yes? AUDIENCE: Using knife in peanut butter, apply peanut butter on said bread. 

DAVID J. MALAN: Using knife in peanut butter, apply peanut butter on said bread. 

[AUDIENCE LAUGHING] DAVID J. MALAN: All right step 10. Step 10. Yes? 

AUDIENCE: Taste peanut butter to ensure quality. 

[AUDIENCE LAUGHING] DAVID J. MALAN: Step 11. Step 11. Step 11. Come on. Yeah? Right there. 

AUDIENCE: Carefully pick up jelly. 

DAVID J. MALAN: Carefully pick up jelly. OK, and then another hand was up. Right behind you. Yeah, in blue. 

AUDIENCE: All right, remove lid from [INAUDIBLE], yeah, remove lid from the jelly. 

[AUDIENCE LAUGHING] 

DAVID J. MALAN: From jelly. Ha ha. 

[AUDIENCE LAUGHING] DAVID J. MALAN: And? AUDIENCE: And barely sweep any [INAUDIBLE]. [AUDIENCE LAUGHING] AUDIENCE: Of course, before [INAUDIBLE], remove the paper from jelly. DAVID J. MALAN: Remove paper from jelly. Step 14. We're almost there. Yes? 

AUDIENCE: Invert jelly bottle before everything falls out. 

DAVID J. MALAN: Invert jelly bottle before jelly falls out. Step 15. 

AUDIENCE: Replace the cap. 

DAVID J. MALAN: Replace the cap. Step 16. Yeah? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say that again. AUDIENCE: Take cap off of your jelly. DAVID J. MALAN: Off your jelly. So really-- Oops. Come on. Replace the cap. Put cap-- You said remove cap from jelly. Feel like we're in a bit of a loop. Step 17. Yes? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say that again. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Go back to step-- AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Remove cap from peanut butter. Yes? 

AUDIENCE: Drop all the jelly on the bread. 

DAVID J. MALAN: Drop all the jelly on the bread. DAVID J. MALAN: We're almost there. Step 19. 

AUDIENCE: Remove excess jelly. 

DAVID J. MALAN: Haha, jelly. 

[APPLAUSE] DAVID J. MALAN: Why don't we-- one more step to take this home. One more step and then we'll serve sandwiches. Yes? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: While any sandwich remains-- let's indent this-- eat. 

[AUDIENCE LAUGHTER] 

DAVID J. MALAN: All right, thank you to our volunteers here. 

[APPLAUSE} 

DAVID J. MALAN: We have some nice parting gifts for each of you. Your own peanut butter, jelly, and bread to bring back home. Thank you. 

KIERSTEN: Thank you. DAVID J. MALAN: [INAUDIBLE] welcome. [APPLAUSE] DAVID J. MALAN: So, this is, of course, a ridiculous example. Right? But it does kind of reveal how we humans just take clarity for granted. And the fact I've been talking to another human, he or she just knows what you mean. 

Computers are not going to know what you mean, even when using, as we're about to do today, programming something in Scratch, a drag and drop, puzzle piece style language. Even designed for young children, you have to be so explicit and so literal with what you want your program to do. Now ultimately, we're going to be programming not in pseudocode code, English like syntax, but code or, more properly, source code. Source code is just the fancy way for describing code you actually write with a keyboard that's not in English per se. It's in C or Java or C++ or something like that, as we'll soon see. 

And in fact, just to scare a few of you, at first glance, this is a program written in a language called C. But to un-scare a few of you, you will completely understand what's going on come next Monday when it comes to something like this. Frankly, this is an older language. It's fairly arcane, but it's representative of a lot of languages these days that have lots of parentheses and curly braces and quote marks and semicolons. And a lot of this syntactic stuff that is not at all intellectually interesting. Indeed, it's an utter distraction from the very simple ideas that are staring us in the face. This program, as you might just guess, prints to someone's computer screen the words "Hello comma world." That's it. So clearly, there's a lot of stuff that's getting in the way of some obviousness there, but it's going to very quickly slip away and be completely intuitive. 

Indeed, what we're going to do today is distill this fairly complex looking program, which again you'll come to understand quickly, but to something much simpler. Let's just say what we mean. Let's draw a picture of what we mean, by way of these puzzle pieces here. 

So this is a programming language known as Scratch. It was developed by MIT's Media Lab. And what you'll see in problem set zero, which will be released later tonight, we'll have you go to this URL here scratch.mit.edu. And they have a web based interface via which you will write your first program. Or those of you with prior experience, your second programs, but in an environment that's probably a little unfamiliar and that will push you to create something using this very visual environment. 

Now, what I'm going to do here is open up the program itself. It exists not only as a web browser, but also as a downloadable program so that you can actually use it if you don't have internet access. And I'm going to do that in here, in Sanders, just in case the Wi-Fi doesn't cooperate super well. And what I'm going to do is point out a few features of this program. So, to be clear, I have just double clicked the icon on my desktop, or equivalently gone to scratch.mit.edu, and it's pulled up this window. This is a programming environment. It's a piece of software that some of our friends at MIT wrote that let's us and you write programs in a language called Scratch. 

Now this happens to be a cat who's also named Scratch and this is his world in which he lives. This is the stage, so to speak, that rectangle on the top left hand corner. And he doesn't have to look like a cat. You can make him look like anything and you can have many such sprites, or characters, in a program. Meanwhile, over here on the far right, is a big blank slate. And this is where, in a moment, we are going to start programming by dragging and dropping these graphical puzzle pieces that are right here in the middle. And there's way more of them than we'll spend time on here in class because you'll find that they're all fairly intuitive. Again, it's designed for children, but we use it to tease apart some of those fundamental ideas of variables, loops, conditions, and, soon, things like functions and events and threads and other fancy things we'll get to before long to actually create something from Scratch. Pun intended. 

Now, what I'm going to do here is click on not motion, but control. And this is just a categorization of here-- and I see a different color set of blocks. But notice a few familiar words. "If" and "else if" and "repeat." And you can probably guess that's reminiscent of the branch, or the conditions we saw, and even the looping construct. So we have similar blocks here. But the most interesting one is this one here. When this green flag is clicked, this, for those with prior programing experience, is equivalent to a main function. But for those unfamiliar, this is the puzzle piece that will kick start our entire program. It literally means when I go, in this program, and click a green flag-- which you can see up here in the top left hand corner of the UI, so see the green flag next to the red stop sign? When I click that, my program is going to run. Now, I'm going to do something super simple with Scratch. I'm going to go ahead and go to the looks panel here, where I have a bunch of purple puzzle pieces, and I'm going to go ahead and do something super simple like, say. And then-- notice this text in the white box is editable-- I'm going to say "Hello world," just like we did in that textual version a moment ago. And now if I go and click this green flag, I have now programmed. It's not a particularly interesting program, but I made the computer do something. I started a program and it did what I told it to do. Now, I can continue to drag and drop more and more of these puzzle pieces and they're going to interlock, but let's slap some terminology on here that we'll see recurring throughout the course, and really throughout computer science and programming more generally. 

This "say" block, in purple, let's just start calling a statement. It's like a statement of fact. Do this. So, it's a category of instructions that you might feed a computer as part of a program or an algorithm. And to be clear, you've probably taken for granted that you have programs on your computer. And they're kind of algorithms, but a program is really a bunch of algorithms that some humans wrote. They packaged it up and they sold it so you, or they posted on a website for you to download. So, a program is just a whole bunch of zeros and ones that, somehow, humans created. And those patterns of zeros and ones represent things, ultimately, like "say hello world" or "play this music" or "play this video" or "send an email." But we'll come back in way more detail what a program is when you, yourself, write them. 

Here's another statement-- "Wait for one second." I didn't use this yet, but if I want my program to pause for a moment to do something, I can tell it to do so. Wait one second. Now another one might be "play sound." So, this is unique to Scratch, it has the ability to play sounds. So, a statement I might use is, here, "play sound." Meanwhile, Boolean expression, so this is a fancier word named after just a guy named Mr. Bool, and this is all about a question. True or false-- is the mouse down? A Boolean expression is just some expression in English that is either true or false. Either on or off. Either one or zero. You can think of it in any number of ways, but it's either true or this false, ultimately. So "mouse down question mark," that would be a Boolean expression. And you can think of others, perhaps. For instance, "is the left number less than the right number?" That, too, would be a Boolean expression. "Less than" is a Boolean expression. 

This one, too, "touching mouse pointer." I'm not sure why they called it mouse pointer. It just means, is the cursor, is the arrow on the screen, touching the cat, for instance. Or some other aspect of the screen. And it's a question, again, and that denotes a Boolean expression. Something that you might want to use in a condition. So we'll come to that in just a moment. You can "and" things together. So, if you want to check if this is the case AND that is the case, you can use an "and" block like this. And here's that condition. Notice the shape of the little opening in the top of this yellow puzzle piece, it's reminiscent of the shape that we just saw a moment ago. Each of these Boolean expressions have these pointed edges on the left and right. And that's because MIT folks decided that by visually conveying shapes, you can kind of help people, students and children alike, to kind of fill in the blanks literally. 

Now that puzzle-- that opening is a little small, and as we'll see in the program, in Scratch, it will grow to fit. It will maintain its shape, ultimately. So a condition let's you decide "should I do something or not?" A Boolean expression is the actual question you're using to decide do I go to the left OR do I go to the right when I encounter this so-called fork in the road? You can have two branches. IF something is true, do this, else go that way, or you can just do nothing at all, as this block implied. Similarly, we can nest these things. So if you want to triple fork in the road, either do this or this or that, you can just nest these things together. And it starts to get a little ugly, eventually, for sure, but the logic is still the same. You can literally read this top to bottom and it says what it means-- if this is true, do this, else if else. 

A loop doesn't get simpler in Scratch. Forever do the following. Now you might not think you can do much because there's not much space between the top and the bottom of this puzzle piece opening. But you'll see Scratch is going to grow to fit as many puzzle pieces as you want to cram in there. Another loop might be expressed with repeats. If you know in advance, "I want to do something 10 times," you can just tell Scratch to do something 10 times. And, meanwhile, we can have variables. So here's an arbitrary one, it's orange in this case, and this is a whirlwind tour. Again, you'll find this very accessible once you start pointing and clicking. I've named my variable n, but I could have named it anything I want, and I'm setting it here, in this arbitrary example, to zero. 

Now seeing a program like hello world is not all that compelling, so let's actually open up something that a former student made. Let me go ahead and open up, for instance, this one here, for which I would love to have a volunteer. All right, how about-- let's go farther. Yes, come on up. What's your name? 

ABBY: Abby. DAVID J. MALAN: Abby, come on up. So have you ever played this game before? ABBY: No. DAVID J. MALAN: All right. David, nice to meet you. Come on over. And what is your programming background, if any. 

ABBY: I've learned some C++. DAVID J. MALAN: You've learned some C++. And what is your game playing background? 

ABBY: Not a lot. DAVID J. MALAN: OK, so we'll take that. So here's how the game is going to work. I'm going to go ahead and click the green flag, which is up here at the top right. Now your predecessor in the class has given you some instructions here. And in just a moment, it says "space to begin." So go ahead and hit the spacebar. 

COMPUTER GAME: Pikachu. DAVID J. MALAN: And the goal is to catch the food, as depicted there on the left. And to [INAUDIBLE] 

[GAME MUSIC PLAYING] 

DAVID J. MALAN: Aww, well, thank you for playing. We have here a little parting gift for you. We have CS50 stress ball, if you'd like to choose. All right, good to meet you. Thank you for coming and challenging. So we have more stress balls, so let's do one more example to motivate. A volunteer? All right, how about right here in front. What's your name? 

PHILLIP: Phillip. 

DAVID J. MALAN: Phillip. Come on up, Phillip. So, Phillip is going to be challenged with another game that one of your predecessors wrote as part of problem set zero, called Ivy's Hardest Game. And we'll see in just a moment what's meant by this. Phillip, nice to meet you. What is your background? PHILLIP: Done a lot of coding. Done a little gaming, too. 

DAVID J. MALAN: OK. Got a lot of gaming, too. And have you played this game before? 

PHILLIP: No DAVID J. MALAN: All right, so here we go. I'm going to go ahead and click the green flag. 

[GAME MUSIC] 

[MUSIC MC HAMMER, "U CAN'T TOUCH THIS"] 

PHILLIP: [INAUDIBLE] DAVID J. MALAN: [INAUDIBLE] PHILLIP: [INAUDIBLE] [LAUGHING] [MUSIC MC HAMMER, "U CAN'T TOUCH THIS"] DAVID J. MALAN: [INAUDIBLE] Plow through it. PHILLIP: [INAUDIBLE] DAVID J. MALAN: Go ahead. [MUSIC MC HAMMER, "U CAN'T TOUCH THIS"] DAVID J. MALAN: All right. Congratulations. 

[APPLAUSE] 

DAVID J. MALAN: We will post that online later so that you can procrastinate with it as well. Princeton comes up next, after that. 

So now let's actually proceed to start from scratch, so to speak, and actually build up until we can tease apart some of these ideas and get to something even more complex by the end. I'm going to go over here and I'm going to go ahead and create a new file. So again, the problem set will walk you through some of these steps. But, all I did was go to the File menu and I said "new," so much like Microsoft Word, or any program like that. 

And let's go ahead now-- and we implemented "Hello world" a moment ago, but let's do something a little cuter. I'm going to go up to events. And I'm going to do "when green flag clicked." And then I'm going to use, shall we say, a branch. So I'm going to use an "if" condition. And notice how as soon as I get close to it, it wants to snap together. So I let go and it snaps together. And now I can do something interesting. If I scroll through here, I'm going to see a whole bunch of blocks. If I go to "data"-- let me zoom in-- there is something about variables. If I go to "motion," you can apparently turn things around. If I go to "operators"-- oh, this is interesting, I can pick a random number. So let me do something with only some probability, just because. I'm going to go ahead and drag this puzzle piece, this is that less than block, so it's just "is this number less than that one?" But I don't want a hard code a number because that be pretty pointless. So I'm going to drag this piece here, and notice how it snaps in, and now let me go ahead and say "if the number that's picked randomly is less than six, do the following." Now why less than six? What probability is this effectively going to give me, just intuitively? About 50%, right? If the number that's guess randomly between 1 and 10 is less than six, clearly it's one, two, three, four, or five. And so that's going to give me a 50% probability of what happening? 

Well let's do something like this, "play sound meow." And notice, again, the puzzle piece grows to fit, so long as the shapes match. That's what's important. Let me go over to Scratch here and click "play." Nothing happens. Is that a bug? No, not necessary. It could just be that a bigger number was chosen. So let's do it again. Nothing. 

[MEOW] DAVID J. MALAN: There it is. [MEOW] DAVID J. MALAN: Again. No. 

[MEOWING] DAVID J. MALAN: So if you've ever played a game, of course, where stuff is happening randomly, like the bad guys are coming or not coming on to the screen, or things are falling or not falling, that's just because something super simple like this is happening. Pick a random number, and if it's less than some value, maybe do this or maybe do that. We can incorporate that into a condition. Let's do something different. 

Let me throw that away. You can get rid of stuff by just dragging it off to the left and letting go. Let me go ahead and do a forever block and very quickly do something annoying. Let me go ahead and say "play sound meow." But I don't want this to be too annoying, so let me grab this block, "wait one second," and notice there's no more room for it. But if you go close enough, it wants to go there. So I let go and it will grow to fill the block. So now, this is a loop. [MEOWING] DAVID J. MALAN: I'm literally doing this forever. Again and again. That is just not natural sounding. Let me go ahead and change this to not one second, to two seconds and hit Enter. And what's nice about Scratch is that you could program interactively. Make a change, maybe hit Enter or Play again, and it will just keep going. Well, now why don't we do something a little cuter? Rather than do everything from scratch, let me go ahead and open up an advance made one, that I pre-baked, called "Pet the Cat." And we'll post all of these files online, and problem set zero will tell you how to access them and open them up. And notice, this is pretty simple. But in advance, I seem to have grabbed a "forever" block, so I've got a loop. And then I've got an "if" condition. I've got a Boolean expression. 

So in English, just glancing at this, especially if you've never programmed before, just intuitively, what is this going to do, this program? 

[AUDIENCE CHATTER] 

DAVID J. MALAN: If you pet the cat, the cat is going to meow, right? Because "forever unchecking" is the mouse pointer touching the cat. So to be clear, and I didn't say this before, all of these puzzle pieces and the script that we have combined them into, so to speak, a script is synonymous with program, really, belongs to this cat. And the reason is-- because notice how this same cat here is highlighted, down here you can create a second cat or dog or really anything you want graphically. You can import something from Photoshop, or the like, and integrate something if you want to make it for a project. And what you'll find, ultimately, is that you can add scripts, add puzzle pieces, to individual characters. So these all belong to this particular cat. So now if I go ahead and play this program, nothing's happening. But it is running. The program is in this forever loop, kind of waiting for what to happen? 

[AUDIENCE CHATTER] 

DAVID J. MALAN: To pet the cat. So if I move my mouse toward him-- 

[MEOWING] 

DAVID J. MALAN: So now I'm petting the cat. Meanwhile, we can have a double branch. Let me go ahead and open up don't pet the cat. We'll post this online as well. This is a little more complex, but without saying you can guess perhaps what's going to happen. 

[MEOWING] 

DAVID J. MALAN: Cat is meowing, grand old time. But this program is of course called "Don't Pet the Cat," so clearly, I want to pet the cat. 

[ROARING] 

DAVID J. MALAN: Don't pet the cat. Now, let's take a look at another example here. This one will be called "Hi, Hi, Hi," for reasons that will be clear, because as soon as I run this thing-- 

[SEAL BARKING] DAVID J. MALAN: Very easy to write annoying Scratch programs. [SEAL BARKING] DAVID J. MALAN: Now we won't go into great detail with all of these, but notice there is a couple of new features here. There's a variable, called "muted," and then there's a bunch of conditions. And for now, let me just tease you by saying that if this guy gets too annoying, I can hit the spacebar and he stops. Because the role being played by these two scripts is as follows. One of them is doing the barking every few seconds. The other one is just waiting for me to hit the spacebar. And if I do hit the spacebar, it's going to change the state of this variable, the value of this variable, that's apparently called "muted," I didn't call it something boring like n, I called it an English word, "muted." From 1 to 0 or 0 to 1. From true to false or false to true. And so you can actually see now, that you could have two scripts, two programs running simultaneously, and both of them might be sitting in a loop doing something. Waiting for the human to do something like hitting spacebar. [SEAL BARKING] DAVID J. MALAN: And now he's on his way again. [SEAL BARKING] DAVID J. MALAN: So what else might we do with these examples? Well, let's go ahead and do an example with counting sheep. We'll continue this along the lines here of-- let's open up the sheep example. And notice, much like before, this one, thankfully, is a little less annoying. Once I hit play here-- Oh no, this is annoying. He is going to baa with some probability. Let's play this again. 

[SHEEP BLEETING] DAVID J. MALAN: The only difference is we've changed the costume, so to speak, and we're halving and say what that actual number is. Well let's go ahead and take this one step further. And let me tease you with one other feature here. Let's go ahead and open up a program called Threads. So much like you can have one sprite, having multiple scripts, you can have two sprites, a bird in a cat, each having their own script. And each of them can operate simultaneously. If you've ever heard the word "multithreading" a computer is "multithreaded" means it can do multiple things at once, and, indeed, so can Scratch. 

And now notice the bird is kind of dumb. It's just doing things randomly, bouncing off the screen. Clearly the cat has been programmed to kind of have seeking capabilities to home in on the bird because he's always pointing at him. Until finally, he catches the actual bird. So I won't dwell on the details here, but you can kind of glimpse the same shapes, some "if" conditions, some variables, maybe some loops, are ultimately doing the same thing. 

Now let me go ahead and open up something else altogether, to tease some of you, particularly those more comfortable, what you can actually do with this. I'm going to go ahead and open up Button here. And this is a super simple-seeming program, but watch what happens when I-- Watch what happens when I open this version of it, here in the browser, scratch.mit.edu. And when I click this big red button, notice what happens. So what's going on here? There's actually a lot more complexity going on underneath the hood, even though I've implemented this, or frankly, Dan Bradley has implemented this so simply. He has designed a custom Scratch puzzle piece, known as a Scratch extension, he called it Toggle. 

And what Toggle does is it sends a message over the internet. And that message itself looks a little cryptic. But this, too, you'll understand by term's end. The message he's actually sending looks a little something like this. It's just text. Cryptic. You'll understand it by the time we get the problem set seven. It's just sending a textual message over the internet to a server. And that server is, ultimately, talking to this light bulb, which has one of those fancy light bulbs in it that, itself, is talking to the Wi-Fi in the network here, where a local device down here-- and, ultimately, it's actually turning that light on and off. But we can do more interesting things still. Notice what Dan also did for us. He made multiple sprites, each of which has a script waiting for a click. And if I click red, it goes red. If I get blue, it goes blueish. Green, yellow, orange. And all of this is happening by going way out onto the internet, back down here to the light bulb, on and off. 

And if you can believe it-- and this is perhaps one of the most complex Scratch projects someone has implemented-- he did it, in fairness, in a day. And that was the challenge we threw down to Dan when we saw have binary bulbs, we have Scratch, how can we combine them? And, indeed, this is absolutely something anyone in this room could do by semester's end-- Is he reimplemented binary bulbs using the same interface that was on our iPad on Wednesday. So that now, if I actually click the plus over here, we have one, two, three. I can hit the 16 and turn that one on. 128, and so forth. 

Now if that alone has and blown your mind, you could do things far more accessible, not involving any hardware certainly. Just things on the screen itself. And, indeed, what most students end up doing is some kind of game, some piece of artistic work, or some kind of interactive animation. And I will say one of our favorites has been this one. And I thought if we could dim the lights, we'll take a glimpse at this final Scratch project in conclusion. But what you'll should keep in mind, as I can tease you with one last detail, sectioning will begin next week. Office hours will begin next week. Problem set zero will be posted CS50.harvard.edu later today. And you will be greeted in problem set zero to CS50's own Zamyla Chan, who guides most of our walkthroughs. These are embedded videos in the problem sets that will hold your hand through a lot of the initial set up and through many of the possible design decisions. So if you've ever had that emotion when picking up a homework assignment and wondering, where do I begin? She will have that answer for you. And now, a final program from one of your predecessors in answer to the question "What does the fox say?" [MUSIC YLVIS, "WHAT DOES THE FOX SAY?] 

YLVIS: (SINGING) Dog goes woof. Cat goes meow. Bird goes tweet and mouse goes squeak. Cow goes moo. Frog goes croak. And the elephant goes toot. Ducks say quack and fish go blub. And the seal goes ow ow ow, but there's one sound that no one knows, what does the fox say? And 

DAVID J. MALAN: That's it for CS50. We will see you at Puzzle Day and on Monday. 

[APPLAUSE] 

[MUSIC YLVIS, "WHAT DOES THE FOX SAY?"] 

NARRATOR: And now deep thoughts, by Daven Farnham. Today I got hit in the face with a phone book. Confusing, as I'm at home watching online. [MUSIC PLAYING] 

[APPLAUSE] 

DAVID J. MALAN: This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. Now if you are among those that every year are sitting here with a bit of nerves in your mind, such that you don't think you belong here, you think that most anyone sitting around you knows far more than you, is indeed more comfortable than you at computer science or computers more generally, realize that 78% of the students who now take CS50 have no prior experience. 

Indeed, there's 100 dots there on the display, 78 of which are solid green, which means you, if you're among that demographic, are in very good company here on out. And if you are instead among the 22% of CS50 students who do indeed have prior experience, whether in high school or some other program, realize that you, too, will be challenged in the course. 

Not only do we have different tracks for students less comfortable and more comfortable alike in sections, we also have so-called hacker editions of most problem sets that will challenge those students with that additional experience to explore similar material but from a more sophisticated perspective. 

But what is computer science? Well, ultimately, what's going to matter as you explore this field is not so much where you end up relative to your classmates, but where you yourself end up in week 12 versus where you begin here in week zero. Now computer science-- well, let's call it the science of computation-- where computation is really just a fancy way of saying, taking some input, producing some output, and doing so by running algorithms, sets of instructions for solving some problem on those inputs in order to produce some output or solution in which you are interested. 

So we recently had occasion to travel out to California to meet with an alumna. Her name is Susan Wojcicki. And she'd like to speak to you here on video to testify to just how applicable even just a taste of computer science at the introductory level can be. Even if you don't go on to pursue computer science as a field, or even engineering, or STEM more generally, you'll see, in fact, how a certain course so influenced her life. And she only just took it when she was a senior here at Harvard College. 

If we could dim the lights for Susan. SUSAN WOJCICKI: Hello, world. I'm Susan Wojcicki. I'm the CEO of YouTube. And I took CS50 when I was a senior at Harvard in 1990. I was actually a history and literature major. 

And my junior summer, I realized that maybe I wanted to learn something about computers. And so, I came back. I took CS50. It was hard, but it was the most amazing class I took. 

It changed how I think about everything. And when I graduated from Harvard in 1990, I went to Silicon Valley. And I got a job. And I've been working in tech ever since. DAVID J. MALAN: Now what Susan didn't mention in this video, that it was actually in her garage that Google itself was founded by Larry and Sergey. 

Now we also reached out to our friends at code.org, an organization that over the past year has been getting people particularly excited about computer science and programming, in particular. But it's worth noting that programming is not computer science per se. Computer science is not programming. Rather programming is just a tool-- with which all of you will be all too well familiar by semester's end-- such that you can apply not just to future courses in CS but to whatever fields from whence you're coming, in humanities, social sciences, natural science, or the like. 

Indeed, allow a few other alumni and their colleagues to speak to the applicability of the field that awaits. 

BILL GATES: I was 13 when I first got access to a computer. 

JACK DORSEY: My parents bought me a Macintosh in 1984 when I was eight-years-old. 

MARK ZUCKERBERG: I was in the sixth grade. 

SPEAKER 1: I learned to code in college. 

RUCHI SANGHVI: Freshman year, first semester, Intro to Computer Science. 

BILL GATES: I wrote a program that played tic-tac-toe. 

DREW HOUSTON: I think it was pretty humble beginnings. I think the first program I wrote asked things like, what's your favorite color? Or how old are you? ELENA SILENOK: I first learned how to make a green circle and a red square appear on the screen. GABE NEWELL: The first time I actually had something come up and say, hello, world. And I made a computer do that. It was just astonishing. 

MARK ZUCKERBERG: Learning how to program didn't start off as wanting to learn all of computer science or trying to master this discipline or anything like that. It just started off because I wanted to do this one simple thing. I wanted to make something that was fun for myself and my sisters. 

And I wrote this little program. And then basically just added a little bit to it. And then when I needed to learn something new, I looked it up, either in a book or on the internet, and then added a little bit to it. 

DREW HOUSTON: It's really not unlike playing an instrument or something or playing a sport. DAVID J. MALAN: All right. So let us now actually dive in a little deeper. What are these inputs and outputs that we're talking about here? 

So how about something simple? You probably know, even if you have no familiarity with computer science whatsoever, that computers somehow use and understands only zeros and ones. But how can that possibly be given how much today's desktops and laptops alike can do? 

The DNA of the day, the only alphabet that they understand is a zero or a one. Well, consider this. We, humans, tend to use the decimal system. "Dec" meaning 10. And that's 10 because we have 10 digits, 0 through nine. 

Now computers, by contrast, tend to use binary. "Bi" meaning two. So they tend to use only zero and one. But it turns out, that even just with zeros and ones, that is a sufficiently large alphabet with which to represent most any piece of data you want, whether it's a number, whether it's a letter, whether it's a graphic or video on the screen. 

Consider, for instance, how we humans typically interpret this number here. This is just three digits, one, two, three. But we know this number innately now as 123. But why is that? 

Well, if you think back to perhaps grade school, you probably were taught to think of these numbers as being in columns, where the one is in the hundreds place, the two is in the tens place, and the three is in the ones place. Why is that actually useful? Well, think about the super simple arithmetic that we all have been doing for years now. Effectively, if you've got a one in the hundreds place, you do the quick math 100 times 1 plus 10 times 2-- because two is in the tens place-- plus 1 times 3-- because three is in the ones place. So, of course, if we actually multiply this out, what we're really representing with this pattern-- one two three-- is 100 plus 20 plus 3, which, of course, is 123. 

Now binary, and computers really, fundamentally speak the same language that we do. They just have a smaller alphabet. So computers only have zeros and ones at their disposal. So whereas we humans have essentially powers of 10 in each of these places-- 10 to the zero, 10 to the one, ten to the two, giving you 110 and 100 respectively. 

Because computers only have two values they can understand, zero and one, they have to use different values in these columns, one, two, four. And if we kept going, eight, 16, 32, 64, and so forth. But the pattern and the mentality is exactly the same. 

So by this logic, anyone, how would I go about representing the number one in binary? If you've never even thought about this before, what's your gut say? 

AUDIENCE: One. DAVID J. MALAN: One. Exactly. We just need a one in the ones place because the zeros suffice to give us neither a four nor a two. So one times one equals one. Now things get a little interesting. If I want to represent in binary the number two-- but, again, even if you've never spoken this language before, how do we represent in binary the value we humans know as two? Zero one zero. Just put the one in the column that you want it. 

Now it's getting pretty easy probably now. So if I want to represent three-- there is no three's column. So, again, I can now add these values together by putting a one here. So 2 times 1 plus 1 times 1 is, of course, 3. 

Now things get a little fun in that the ones now become zeros. And to represent four, I get this. And if we increment slowly here-- that would be five. This would be six. This would be seven. 

But now I seem to have run into a problem. How might I go about representing eight-- would be the next value. Yeah, so we need a new bits. And, indeed, if you've heard this phrase before, bits, that's just short for binary digit, zero or one. 

And so I happen to be representing only three such bits here. But if I had a way of storing not three different bits, but four, surely I could represent eight, and then nine, and then 10, and even higher and higher. 

But that then calls into question how we can go about representing these things in the first place. It's one thing to draw them up here on a slide, but how do you represent them if you're a mechanical device? What is a computer doing to represent the inputs and outputs that fundamentally define computation at the end of the day? 

Well, what about something super simple like this? It's just a light bulb. And I can trigger this light bulb to go on by turning some electricity on and allowing electrons to flow through, which changes its state or its value, so to speak. For instance, this is an old school desk lamp here with one such light bulb inside of it. And right now it's not really doing anything useful. But as soon as I plug it into an electrical socket and then use this switch-- or we can even call it a transistor or think of it as such-- I can now represent either this value, where the light bulb's obviously off, or this value. This value or this value. This value and so forth. 

So inside of a computer, presumably, are much smaller pieces of hardware, but that at the end of the day simply have to use electricity-- perhaps capture it-- and then either keep something on or keep something off. Of course, this isn't particularly interesting to do with just a single light bulb. 

In fact, how high can I count in binary with this desk lamp here? 

AUDIENCE: One. 

DAVID J. MALAN: One, right? I need more desk lamps if I actually want to count higher. But we can do better than that. Because the light bulbs that we've put in these things are actually fancier light bulbs than yesteryear would allow. And they're actually networked light bulbs. And bunches of companies make these things these days. 

But it turns out that this one in particular comes with a feature whereby you can change its colors. So for instance, if you adorned your dorm room with a few of these light bulbs, depending on your mood, depending on who comes in, depending on the weather, depending on the time of day, you can actually change the colors of the bulbs in your room. And that's because these light bulbs and others like it have what's called an API, an application programming interface, which is a topic with which you'll be well familiar with by semester's end. 

And this is just a fancy, cryptic way of saying, you can program these light bulbs to do your bidding. You can send them messages just like you, a human, can send a message to a web server saying, give me today's news or give me my email. 

You can send more arcane messages to these light bulbs to say, turn on and turn off. But that's not all that interesting. You can say, turn on red, turn on green, turn on blue, all with the same light bulb. And you can even, with a bit more savvy, say, turn yourself to blue when it's a gloomy day outside, for instance. It can actually patch into a weather API and find out what the weather is, or the time of day, or other such triggers. 

So, in fact, two of CS50's own staff members, Dan Bradley and Ansel Duff here, kindly procured us a whole bunch of these light bulbs. And they built CS50's first ever binary bulbs, where we've represented here-- with these playful little magnets-- the various placeholders we alluded to just a bit ago. 

So way over here is the ones place, two, four. And we didn't see higher than that. But, of course, they're powers of two. Eight, 16, 32, 64, and 128. So if I now want to be a little fancier than using this old school switch, I have here on this iPad a super simple interface that Dan Bradley, a former student and now teaching fellow, programed using some HTML and JavaScript, which are markup and programming languages respectively. And you can probably see-- even in the back-- there's a big plus and a big minus, plus one button for each of these bulbs. And what this is going to allow me to do is, for instance, click the plus and now represent, of course, what number? One. And I can hit it again. Two. Three. Four. Five. Six. Seven. 

And here now we get that rollover, but we have a fourth bit this time, so now we have eight. So we could do this for quite some time. In fact, as an aside, how high could we count? Anyone? 

AUDIENCE: 255. 

DAVID J. MALAN: 255, right? Don't worry too much about the math for now, but that's a pretty decent number. But it actually does bound just how many pieces of information, like a letter, or a graphic that we could represent. 

But no matter for now. I'm going to go ahead and turn them all off. And if I could, I'd like to ask for a volunteer, our first volunteer-- oh, hello-- on stage. The catch is you have to be comfortable appearing, as you clearly are in front of all your classmates, as well as on the internet. And let me look a little beyond the-- how about here in the white shirt? And hand up. Come on up. What is your name? 

AUDIENCE: Jackie. 

DAVID J. MALAN: Jackie. Jackie, come on up. So what there is also on this iPad is a button called Game Mode. And this Game Mode is going to allow me to input in advance a particular decimal number, the numbers we humans are familiar with. And then you will be challenged here to use the buttons on the top-- one for each of these bulbs-- to actually figure out the pattern of light bulbs that represents the number in question. 

And I'm sorry, what was your name again? 

AUDIENCE: Jackie. 

DAVID J. MALAN: Jackie. All right. Good to meet you. 

So let me go ahead and program in for the world to see the number 15. We'll keep it small at first here. And I'm going to go into Game Mode. And I'm going to specify, give us the number 15. 

OK. And now with everyone watching-- if you want to maybe stand this way, because it will line up-- go ahead and toggle the eight buttons along the top to turn the bulbs on or off as you see fit. 

AUDIENCE: OK. 

DAVID J. MALAN: And no cheating by hitting plus 15 times. Oh, we are going to do that. 

AUDIENCE: Oh, wait. I'm so sorry. 

DAVID J. MALAN: You can also turn the light bulbs on individually with each of these buttons on top. AUDIENCE: Oh, OK. So it would be like-- DAVID J. MALAN: OK. So now we have eight. So let's pause for the audience to engage here. What number is Jackie currently representing? 11. So we're almost there. And excellent. So we have our first winner. Congratulations. 

And we thought we'd have some fabulous giveaways. If you'd like to be one such dorm room here on campus, you can yourself have a final project using now this API, thanks to Jackie. So now-- 

[APPLAUSE] 

--if we could, one more such around of this. Oh, now everyone wants some light bulbs. For the so-called hacker edition, we're going to ramp it up a-- oh, yeah, noncommittal. I think you're coming up now if your hand's going down. What is your name? 

AUDIENCE: Alex. DAVID J. MALAN: Alex, come on over here. So for Alex, we are going to program in a slightly larger number. Perhaps in order. The number 50. 

AUDIENCE: OK. DAVID J. MALAN: But, as I said-- and you might want to stand here so that the buttons line up as you would expect-- but I did call this the hacker edition. So-- good luck! 

[LAUGHTER] 

You will be able to turn them off if you-- OK. Excellent. Wonderful. Congratulations. 

[APPLAUSE] I suppose I should pay up. Congratulations to Alex as well. OK. 

So the ultimate takeaway here is hopefully, frankly, the simplicity-- the simplicity with which you can get some nice light bulbs, apparently in [INAUDIBLE]. But they represent, ultimately, the same ideas with which we humans are already all too familiar. So what might the next step be in the progression of trying to do something interesting with data and representing inputs that aren't just numbers but are maybe letters or more? 

Well, it turns out that the computer world, for many years, simply adopted an arbitrary but a consistent standard that maps numbers to letters of the alphabet. For instance, here is an excerpt from that mapping. It's called Ascii. A-S-C-I-I. And that is simply a table that maps uppercase letters-- in this case-- to decimal numbers. 

But what's the implication? Well, if you actually want to represent something like an email or some text on a web page, you obviously want to show the human letters of the alphabet, not numbers. So depending on the context of the program that a user is using, if it's a web browser or email client, numbers can certainly be interpreted as letters. That is to say, patterns of bits can easily be interpreted as letters. 

And so what we can have is the letter A being represented as 65, B being represented as 66. So if we have a super short word, like hi, what a computer would ultimately store in decimal but really in binary, using some sequence of bits, leveraging a bit of electricity in some way, would be the two numbers 72 and 73. 

But the pattern of bits that represents those values. So these then are how we can represent our inputs and outputs. And suffice it to say, we can do more complex representations ultimately with things like graphics, videos, music, and more as we'll see later this term. 

So that just leaves then algorithms, these sets of instructions with which we're solving actual problems. We're passing in inputs to algorithms. And those algorithms are producing outputs, hopefully correct outputs and hopefully, too, efficiently gathered outputs. In other words, it's one thing to implement something correctly. It's another thing to implement something well or efficiently. 

For instance, one demonstration that we're fond of in the course is this one. But these things are getting increasingly hard to find. But this is indeed an old school phone book, inside of which are 1,000 plus pages of names and telephone numbers. And if I wanted to look up someone in this phone book, I could simply do a very naive algorithm. I could open up to the first page, and I could start to look for, say, someone named Mike Smith. And if he's not on the first page, I progress to the second, and then to the third, and then to the fourth, and so forth, until I finally find Mike Smith. 

Now is that algorithm correct? 

AUDIENCE: Yes. 

DAVID J. MALAN: Yeah. If he's in there, I'll eventually find him. But it's arguably not very efficient, certainly not fast, because, my god, why am I wasting my time flipping through all of these pages when I could certainly do this physically faster? 

Well, a slight optimization, so to speak, might be not one page at a time, but two, four, six, eight, 10. Still correct? 

AUDIENCE: No. 

DAVID J. MALAN: So no if I for instance skip over Mike Smith. But so long as I back pedal one page, if I overshoot him, maybe we could correct what might otherwise be a gotcha. 

But is it better? Is it faster? I mean, yeah. It's literally twice as fast if I do two pages at a time. So if I originally had 1,000 pages, now I only have to flip 500 times, not fully 1,000 pages to get potentially in the worst case to the end of the phone book, where someone like Mike Smith or someone with a later name might actually be. 

But, of course, we humans certainly aren't going to be doing that, certainly not at this point in our lives. What is a reasonable human likely going to do? AUDIENCE: Go straight to the9 S's. DAVID J. MALAN: Go straight to the S's? How do I go straight to the S's? 

AUDIENCE: Rip it in half. DAVID J. MALAN: Well, there's no marking. So, yes, if there were indeed a label or a sticky tab for S, we should jump right there. But it's pretty innocuous. So the best I can do is roughly to the S section or maybe roughly into the middle. But the key takeaway now-- and the intuition that you've taken for granted for years probably-- is that what do you now know about this problem? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: Mike Smith is surely not in this half of the problem because Smith comes after the middle which is roughly the M section, it seems to be. So as you might have seen at Visitas, we can now literally tear this problem in half. AUDIENCE: Woo! DAVID J. MALAN: It's getting easier and easier. [APPLAUSE] There you go. [LAUGHTER] And now I fundamentally have the same problem, but it's literally half as big. I'm still looking for Mike Smith. And I daresay, I can still look for him in the same way, splitting the problem in half again, tearing the problem again in half, which now leaves me with a problem a quarter of the size, dramatically throw that half away, and repeat this process again and again and again, glancing down at each point to see if Mike Smith is on the page in question. 

Now if I do this right, ultimately I'll find myself with just one page on which Mike Smith is if he's indeed in the phone book. Of course, I could never call Mike again. But the point here is that if we started with 1,000 pages, my first algorithm, flip the page, maybe 1,000 times-- definitely less because it's an S name and not a Z name, but as many as 1,000 pages potentially. 

Second algorithm, better. 500 pages. Third algorithm, though, how many steps would it take to divide a 1,000 page phone book in half like that? 10, give or take. So only by flipping through that phone book, diving and conquering, so to speak, 10 times, will I make my way down to just one single page. 

And so we can capture this intuition now a little bit graphically if you just consider this super simple graph. We're on the x-axis, or horizontal axis, is the size of my problem, the number of pages in the phone book. And computer scientists generally like to call the size of a problem n, where n is just some variable that represents-- in this case-- number of pages. 

The vertical, or y-axis, here is going to be the time to solve, maybe the number of page turns, maybe the number of seconds or minutes, whatever your unit of measure is. And so this red line represents the first algorithm, because there's a one to one relationship between number of pages and amount of time it takes. 

If Verizon doubles the number of pages in the phone book next year, my running time-- the time required to execute that first algorithm-- doubles in the worst case. But the second algorithm, where I'm flipping by two, requires less time for a given size problem. So if I have this many pages here-- notice that the yellow line suggests less time to solve. And indeed, it represents, we'll say, n over two. 

But what's the shape of the third and final curve going to look like? Yeah, it's indeed going to look-- I don't know what you were going to say. But let's see what you were going to say. 

AUDIENCE: Like that. 

DAVID J. MALAN: It's going to look like this, a logarithmic slope-- exactly-- whereby you have this curious slope. It's no longer a straight line. And what's compelling about that is that even though the graph is now cut off, you can extrapolate in your mind that that green line's not going to increase in height all that much as you proceed further down that horizontal axis. 

Indeed, Verizon, for instance, could double the number of pages in the phone book between this year and next year from 1,000 to 2000 pages, but no big deal. With this third and final, there's a intuitive algorithm of dividing and conquering. It's going to take me how many more steps next year to find someone like Mike Smith? 

AUDIENCE: One. 

DAVID J. MALAN: There's just one. And they can quadruple it, it's going to take me just two more steps and so forth. And so this is testament to just how some careful design and some appreciation for what your inputs are can do even better. Now we're cheating a little bit in the sense that we're leveraging an assumption. What is my assumption about our phone book that allowed me to divide and conquer in this intuitive and still correct way? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. So it was ordered. It was alphabetized by the phone book company. If it were in random order, that would be a hell of a phone book, but it certainly wouldn't lend itself to the algorithm I used, because you would never just happen across Mike Smith if you kept dividing in half in that way by chance. 

So let's now formalize what's clearly intuitive. So something called pseudocode is where we'll begin some of our initial problems. And this is a generic way of describing an algorithm or a computer program, not using C, or C++, or Java, or any specific language, but just using English, with which any human might be familiar. 

And we might write the pseudocode for this problem as follows. Step one, pick up the phone book. Step two, open to middle of phone book. Step three, look at the names. Step four, if Smith is among names-- 

And now this is an interesting construct. It's a decision point. It's a fork in the road, if you will, a branch, so to speak. So I'm going to indent just by convention step-- not five-- which is to say, I'll call Mike. So this indentation, totally arbitrary human convention, but it's simply meant to convey semantically that if Smith is among names, then I should call Mike. 

Meanwhile in step six, notice that the indentation's gone. So else is the other fork in the road, the other road I might travel. So else if Smith is earlier in the book, what's my next step probably going to be here? AUDIENCE: You go to the left side. DAVID J. MALAN: Yeah, so go to the left half of the phone book. Throw away the right half if Smith is earlier in the book. So open to the middle of the left half of the book. 

And then step eight, go to line three. And this is a curious loop I'm inducing, a recursion so to speak. But more on that in the future. 

I'm using my same algorithm, my same pseudocode, to solve the same problem again because the only thing that's changed is the size of the problem, not my objective, and not the person I'm looking for. So I can reuse the algorithm that I've already defined. 

Else if Smith is later in book-- you might guess-- open to the middle of the right half of the book. And again, go to line three. Else-- what's the final line in this program going to be? If he's not among the names on the page I'm on, if he's not earlier in the book, and he's not later in the book, what do I know is true about Mike Smith now? AUDIENCE: He's not in the book. DAVID J. MALAN: He's not in the book. So the best I can do is just give up and stop this program. All right. So at this point, let's take a quick tour of some of what awaits. And in fact, I'm joined here by a number of CS50 staff. If these folks could all join me up here on stage. 

[APPLAUSE] 

Mind you, this is only a subset of CS50 staff, since each year we have nearly 100 staff members in roles of course assistants, teaching fellows, and more. Come on up. So they will join us here awkwardly for just a moment as we give a whirlwind tour of what you should expect here in the course. 

So first and foremost, we have SAT/UNS as the grading option in the course. This is meant deliberately to be an option whereby if you are a bit uneasy at being in the course, and you do fear failure-- even if frankly failure means hurting your GPA, getting a B and not an A-- that is precisely what, certainly for a gateway course like CS50 and other introductory courses, this grading option is meant to allow. 

I wholeheartedly encourage students-- especially if on the fence-- to start the course SAT/UNS, even remain SAT/UNS. But you can certainly switch to a letter grade by the fifth Monday in the term. 

Frankly, back when I was a freshman in 1995, I myself didn't even take CS50 because I didn't get up the nerve to actually step foot in the classroom. It seemed a domain far too unfamiliar to me and really only for those friends of mine, frankly, who had been programming since they were six- or maybe 10-years-old. And it was only because I was able to take CS50 in my day in the equivalent version of SAT/UNS-- pass/fail back in the day-- that even I took 50. And somehow or other, I'm here again with you today. 

Now meanwhile what else you should keep in mind about 50 is simultaneous enrollment. Contrary to rumors that you might have heard, you can, in fact, simultaneously enroll in CS50 and another class that meets at the same or some overlapping time as CS50's lectures right here. See the syllabus for the particulars of the implementation thereof. 

Lectures, meanwhile, contrary to what's officially in the catalog, will generally only meet for just an hour. On occasion we may run a little long. But keep in mind that the goal in CS50's lectures is to provide you with a conceptual overview, hopefully some demonstrations, maybe even some giveaways, of what awaits for the week that follows. 

And so in lectures, we'll explore those topics and examples together, bringing students up on stage, and staff up on stage as often as we can, for just a couple of hours each week. Sections, meanwhile, will be offered by these folks here-- many of them teaching fellows, some of them course assistants-- will be happening weekly. 

And what's key to keep in mind is that we do have-- not unlike First Nights, the music class-- different tracks of sections for students less comfortable, more comfortable, and somewhere in between. And frankly, you know if you're less comfortable. And you probably know if you're more comfortable. And if you're not really sure, you are by definition somewhere in between. So when it comes time to section in a week or so, per the syllabus, we'll ask you that question. And you can self-select based on your own comfort level and be with students-- be with green dots-- similar in comfort level to you. 

Meanwhile, we have problem sets, which will ultimately define your experience in this course. They're offered typically in multiple editions. A standard edition that we expect most every student in the course to tackle but also a so-called hacker edition that offers no form of extra credit outright but really the bragging rights to say that you tried and tackled the course's hacker editions that approach the similar material but from a more sophisticated angle. 

What we offer for the standard edition, for, again, a super majority of students, are not only walk-throughs, which are videos led by the course's staff that truly walk you through the course's problems and possible design implementations. And we also, after the fact, offer postmortems, whereby if you're wondering how you could have or should have solved some problem, the teaching staff will walk you through those on video as well. 

Meanwhile, what awaits too are five late days and the fact that we will drop your lowest problem set score. We certainly appreciate that in exchange for the workload that 50 expects of you, life gets in the way sometimes, if not five times. And so this will offer you a bit of flexibility, extending your deadline from, say, a Thursday at noon to a Friday at noon. See the syllabus for the implementation details thereof. 

Now what now awaits? And it's only occurring to me now just how long I'm having you guys stand here on stage. 

[LAUGHTER] 

DAVID J. MALAN: But we'll get to the climactic finish before long. So what awaits in terms of the problem sets? Well, perhaps a teaser of what we all did last year with your predecessors. In the first problem set last year, we introduced Scratch, a graphical programming language that lets you program literally by dragging and dropping puzzle pieces, like these, that are reminiscent of the constructs will see just one week hence, when we switch to a more traditional language, known as C. 

Last year we proceeded to this problem set, involving for cryptography, the scrambling of information to keep it from governmental or friends' eyes that you don't want to see it. Encoded in here is a message that soon you will be able to decrypt or de-scramble. 

Breakout was a problem set last year, wherein you use these new found programming skills to actually implement a game wherein-- as you may recall from childhood-- the goal was to bash the bricks that are atop the screen here, accumulating a score along the way, and implementing your own algorithms with which this solution ultimately lets you play the game. Meanwhile, later in the semester, we will give you a dictionary of 143,091 English words. And you will be challenged to write a program that spell checks, documents, by loading that many words into memory as efficiently as possible. Generally pitting you against your classmates if you opt into a bit of a challenge in leader board to see who can use the fewest seconds of running time, and the fewest number of megabytes of memory, and actually fine-tuning your programs to be incredibly resource efficient not just time. 

Last year, too, we looked at the end of the semester at web programming. And indeed, we'll do that again this year with multiple problem sets, introducing you to the techniques and the mindset with which you can apply these programming skills to websites, dynamic websites, websites that actually solve problems and behave differently and are not simply static sites with static information. 

The final project ultimately will define, though, the climax of the course for students, wherein you'll be challenged to implement most anything of interest to you, so long as it somehow draws upon the course's lessons. 

And as you saw in the video at the start, we will conclude the semester with the CS50 Hackathon, which if, unfamiliar, will begin at 7:00 PM one night and end at 7:00 AM the next morning. Around 9:00 PM, we'll order in first dinner. Around 1:00 AM, we'll order in second dinner. And if you're still standing at 5:00 AM, we will shuttle bus you to IHOP for breakfast. 

The CS50 Fair, meanwhile, is an event to which 2,000 plus faculty, students, and staff from across campus will come to see your accomplishments in the course and the final projects and creations that you create on your laptops, desktops, or perhaps even light bulbs. 

Meanwhile, office hours and the support structure. And now it would've been a better time to bring you all up. 

Office hours will take place four nights a week for multiple hours each night with generally 20 to 30 of the course's staff on duty at once to provide you with intimate one-on-one opportunities for support with the course's problem sets. Tutoring too will be available, particularly for students less comfortable-- or dare say least comfortable-- for whom office hours are not the most nurturing environment and are certainly not the most stress-free. Especially when deadlines are pressing, we will proactively pair you ourselves with a member of the staff to work with on some regular schedule as your needs and their schedule allows. 

And staff. Allow me to introduce Davon, Rob, and Gabriel, this year's heads. If you would each like to say-- 

[APPLAUSE] --a word. [APPLAUSE] Davon over here is the course's manager, which means in his full-time role he helps with the execution and logistics of CS50. DAVON: Yeah, hi, guys. You'll see a lot to me at office hours. I'll be teaching sections. And if you shoot emails ahead, I'll probably be responding. So I'll see lots of you all semester. And welcome to CS50. 

DAVID J. MALAN: And now Gabriel, who himself was just a freshman last year, but for the past couple of years has been operating his own version of CS50 in Brazil, whereby he downloaded all of the course's content-- which is clearly being filmed and placed online-- so that he could translate it to Portuguese and then teach more than 100 of his classmates over the course of a couple of years, teaching in his native tongue the course's curriculum. 

GABRIEL: Hello. 

[APPLAUSE] GABRIEL: Hi, I'm Gabriel. I'm the head TF of the course. And I hope you'll love CS50. This is CS50. 

DAVID J. MALAN: Now for Rob. Oh, you want introduction? 

ROB: No, I don't know. [LAUGHTER] DAVID J. MALAN: And Rob Boden. [LAUGHTER] ROB: Hi, I'm Rob. This is my fifth year involved with the course. Every year, it's just a better and better class, so you guys are clearly going to be awesome. I hope you all have fun with it. I'm going to have fun with it. So see you around. 

DAVID J. MALAN: And time won't permit us-- 

[APPLAUSE] 

Time won't permit us to introduce everyone on the stage and all of their colleagues who are shopping classes today. But allow me to introduce Belinda and CS50 Puzzle Day, which awaits this coming Saturday, which is the first of the course's large scale events. 

This one in particular meant to hammer home the point that computer science is ultimately not about programming, but rather about problem solving more generally. And Puzzle Day, as you'll see, will bring you and your classmates together-- we hope this Saturday. 

BELINDA: OK. Hi, guys. So thanks. So as our illustrious captain said, my name's Belinda. I am a sophomore at Quincy House. 

I, just like you guys, took CS50 last year, really loved it. I have a soft spot for you guys in the third row. And I'm proud to say, I'm now in a committed relationship with CS50 [INAUDIBLE]. OK. That was my lame version of a joke. 

Anyway, so moving on, just wanted to invite you guys all to the i-lab, or HBS hives. We're going to be having Puzzle Day from 12:00 to 3:00. And it's a great opportunity for you guys to meet your fellow CS friends, solve some non-CS puzzles, like Captain mentioned, and also eat some free food, earn some awesome prizes, like gift cards, $75 per person, and also-- what was it? Wii U or something? Wii U? Yes. For our raffle. Awesome. So I'll stick around after class. And if you guys have any questions, let me know. 

DAVID J. MALAN: And you'll see, beyond this there's nothing to do today. The first problem set will go out Friday. But to bring us home today, I'd like to introduce you to specifically one more member of the staff, Colton Ogden here, whose hands are now protected above you with this MIDI controller to hammer home the point further that computer science, too, has applicability far beyond engineering and STEM and computer science itself, extending even to such domains as music. 

Colton has kindly offered-- I thought one of them was going to fix the focus. Andrew, if we could summon focus over here for just a moment. 

What Colton has done in advance is program this device, this pad of buttons that you see pictured up here, as a MIDI controller, whereby each of those buttons is wired to a particular musical note or a sound, more generally a recording, such that by playing patterns of these buttons, much like patterns of bits, can represent other higher level concepts. Will he be able ultimately to take us home here today? Without further ado, if we could dim the lights, and turn on the screen behind Colton. 

AUDIENCE: Woo! 

DAVID J. MALAN: This is CS50. 

[MUSIC PLAYING] 

[APPLAUSE] 

That's it for CS50. We will see you Friday. Some cake awaits you in the Transept. 

[MUSIC PLAYING] [MUSIC PLAYING] 

[APPLAUSE] 

DAVID J. MALAN: This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. Now if you are among those that every year are sitting here with a bit of nerves in your mind, such that you don't think you belong here, you think that most anyone sitting around you knows far more than you, is indeed more comfortable than you at computer science or computers more generally, realize that 78% of the students who now take CS50 have no prior experience. 

Indeed, there's 100 dots there on the display, 78 of which are solid green, which means you, if you're among that demographic, are in very good company here on out. And if you are instead among the 22% of CS50 students who do indeed have prior experience, whether in high school or some other program, realize that you, too, will be challenged in the course. 

Not only do we have different tracks for students less comfortable and more comfortable alike in sections, we also have so-called hacker editions of most problem sets that will challenge those students with that additional experience to explore similar material but from a more sophisticated perspective. 

But what is computer science? Well, ultimately, what's going to matter as you explore this field is not so much where you end up relative to your classmates, but where you yourself end up in week 12 versus where you begin here in week zero. Now computer science-- well, let's call it the science of computation-- where computation is really just a fancy way of saying, taking some input, producing some output, and doing so by running algorithms, sets of instructions for solving some problem on those inputs in order to produce some output or solution in which you are interested. 

So we recently had occasion to travel out to California to meet with an alumna. Her name is Susan Wojcicki. And she'd like to speak to you here on video to testify to just how applicable even just a taste of computer science at the introductory level can be. Even if you don't go on to pursue computer science as a field, or even engineering, or STEM more generally, you'll see, in fact, how a certain course so influenced her life. And she only just took it when she was a senior here at Harvard College. 

If we could dim the lights for Susan. SUSAN WOJCICKI: Hello, world. I'm Susan Wojcicki. I'm the CEO of YouTube. And I took CS50 when I was a senior at Harvard in 1990. I was actually a history and literature major. 

And my junior summer, I realized that maybe I wanted to learn something about computers. And so, I came back. I took CS50. It was hard, but it was the most amazing class I took. 

It changed how I think about everything. And when I graduated from Harvard in 1990, I went to Silicon Valley. And I got a job. And I've been working in tech ever since. DAVID J. MALAN: Now what Susan didn't mention in this video, that it was actually in her garage that Google itself was founded by Larry and Sergey. 

Now we also reached out to our friends at code.org, an organization that over the past year has been getting people particularly excited about computer science and programming, in particular. But it's worth noting that programming is not computer science per se. Computer science is not programming. Rather programming is just a tool-- with which all of you will be all too well familiar by semester's end-- such that you can apply not just to future courses in CS but to whatever fields from whence you're coming, in humanities, social sciences, natural science, or the like. 

Indeed, allow a few other alumni and their colleagues to speak to the applicability of the field that awaits. 

BILL GATES: I was 13 when I first got access to a computer. 

JACK DORSEY: My parents bought me a Macintosh in 1984 when I was eight-years-old. 

MARK ZUCKERBERG: I was in the sixth grade. 

SPEAKER 1: I learned to code in college. 

RUCHI SANGHVI: Freshman year, first semester, Intro to Computer Science. 

BILL GATES: I wrote a program that played tic-tac-toe. 

DREW HOUSTON: I think it was pretty humble beginnings. I think the first program I wrote asked things like, what's your favorite color? Or how old are you? ELENA SILENOK: I first learned how to make a green circle and a red square appear on the screen. GABE NEWELL: The first time I actually had something come up and say, hello, world. And I made a computer do that. It was just astonishing. 

MARK ZUCKERBERG: Learning how to program didn't start off as wanting to learn all of computer science or trying to master this discipline or anything like that. It just started off because I wanted to do this one simple thing. I wanted to make something that was fun for myself and my sisters. 

And I wrote this little program. And then basically just added a little bit to it. And then when I needed to learn something new, I looked it up, either in a book or on the internet, and then added a little bit to it. 

DREW HOUSTON: It's really not unlike playing an instrument or something or playing a sport. DAVID J. MALAN: All right. So let us now actually dive in a little deeper. What are these inputs and outputs that we're talking about here? 

So how about something simple? You probably know, even if you have no familiarity with computer science whatsoever, that computers somehow use and understands only zeros and ones. But how can that possibly be given how much today's desktops and laptops alike can do? 

The DNA of the day, the only alphabet that they understand is a zero or a one. Well, consider this. We, humans, tend to use the decimal system. "Dec" meaning 10. And that's 10 because we have 10 digits, 0 through nine. 

Now computers, by contrast, tend to use binary. "Bi" meaning two. So they tend to use only zero and one. But it turns out, that even just with zeros and ones, that is a sufficiently large alphabet with which to represent most any piece of data you want, whether it's a number, whether it's a letter, whether it's a graphic or video on the screen. 

Consider, for instance, how we humans typically interpret this number here. This is just three digits, one, two, three. But we know this number innately now as 123. But why is that? 

Well, if you think back to perhaps grade school, you probably were taught to think of these numbers as being in columns, where the one is in the hundreds place, the two is in the tens place, and the three is in the ones place. Why is that actually useful? Well, think about the super simple arithmetic that we all have been doing for years now. Effectively, if you've got a one in the hundreds place, you do the quick math 100 times 1 plus 10 times 2-- because two is in the tens place-- plus 1 times 3-- because three is in the ones place. So, of course, if we actually multiply this out, what we're really representing with this pattern-- one two three-- is 100 plus 20 plus 3, which, of course, is 123. 

Now binary, and computers really, fundamentally speak the same language that we do. They just have a smaller alphabet. So computers only have zeros and ones at their disposal. So whereas we humans have essentially powers of 10 in each of these places-- 10 to the zero, 10 to the one, ten to the two, giving you 110 and 100 respectively. 

Because computers only have two values they can understand, zero and one, they have to use different values in these columns, one, two, four. And if we kept going, eight, 16, 32, 64, and so forth. But the pattern and the mentality is exactly the same. 

So by this logic, anyone, how would I go about representing the number one in binary? If you've never even thought about this before, what's your gut say? 

AUDIENCE: One. DAVID J. MALAN: One. Exactly. We just need a one in the ones place because the zeros suffice to give us neither a four nor a two. So one times one equals one. Now things get a little interesting. If I want to represent in binary the number two-- but, again, even if you've never spoken this language before, how do we represent in binary the value we humans know as two? Zero one zero. Just put the one in the column that you want it. 

Now it's getting pretty easy probably now. So if I want to represent three-- there is no three's column. So, again, I can now add these values together by putting a one here. So 2 times 1 plus 1 times 1 is, of course, 3. 

Now things get a little fun in that the ones now become zeros. And to represent four, I get this. And if we increment slowly here-- that would be five. This would be six. This would be seven. 

But now I seem to have run into a problem. How might I go about representing eight-- would be the next value. Yeah, so we need a new bits. And, indeed, if you've heard this phrase before, bits, that's just short for binary digit, zero or one. 

And so I happen to be representing only three such bits here. But if I had a way of storing not three different bits, but four, surely I could represent eight, and then nine, and then 10, and even higher and higher. 

But that then calls into question how we can go about representing these things in the first place. It's one thing to draw them up here on a slide, but how do you represent them if you're a mechanical device? What is a computer doing to represent the inputs and outputs that fundamentally define computation at the end of the day? 

Well, what about something super simple like this? It's just a light bulb. And I can trigger this light bulb to go on by turning some electricity on and allowing electrons to flow through, which changes its state or its value, so to speak. For instance, this is an old school desk lamp here with one such light bulb inside of it. And right now it's not really doing anything useful. But as soon as I plug it into an electrical socket and then use this switch-- or we can even call it a transistor or think of it as such-- I can now represent either this value, where the light bulb's obviously off, or this value. This value or this value. This value and so forth. 

So inside of a computer, presumably, are much smaller pieces of hardware, but that at the end of the day simply have to use electricity-- perhaps capture it-- and then either keep something on or keep something off. Of course, this isn't particularly interesting to do with just a single light bulb. 

In fact, how high can I count in binary with this desk lamp here? 

AUDIENCE: One. 

DAVID J. MALAN: One, right? I need more desk lamps if I actually want to count higher. But we can do better than that. Because the light bulbs that we've put in these things are actually fancier light bulbs than yesteryear would allow. And they're actually networked light bulbs. And bunches of companies make these things these days. 

But it turns out that this one in particular comes with a feature whereby you can change its colors. So for instance, if you adorned your dorm room with a few of these light bulbs, depending on your mood, depending on who comes in, depending on the weather, depending on the time of day, you can actually change the colors of the bulbs in your room. And that's because these light bulbs and others like it have what's called an API, an application programming interface, which is a topic with which you'll be well familiar with by semester's end. 

And this is just a fancy, cryptic way of saying, you can program these light bulbs to do your bidding. You can send them messages just like you, a human, can send a message to a web server saying, give me today's news or give me my email. 

You can send more arcane messages to these light bulbs to say, turn on and turn off. But that's not all that interesting. You can say, turn on red, turn on green, turn on blue, all with the same light bulb. And you can even, with a bit more savvy, say, turn yourself to blue when it's a gloomy day outside, for instance. It can actually patch into a weather API and find out what the weather is, or the time of day, or other such triggers. 

So, in fact, two of CS50's own staff members, Dan Bradley and Ansel Duff here, kindly procured us a whole bunch of these light bulbs. And they built CS50's first ever binary bulbs, where we've represented here-- with these playful little magnets-- the various placeholders we alluded to just a bit ago. 

So way over here is the ones place, two, four. And we didn't see higher than that. But, of course, they're powers of two. Eight, 16, 32, 64, and 128. So if I now want to be a little fancier than using this old school switch, I have here on this iPad a super simple interface that Dan Bradley, a former student and now teaching fellow, programed using some HTML and JavaScript, which are markup and programming languages respectively. And you can probably see-- even in the back-- there's a big plus and a big minus, plus one button for each of these bulbs. And what this is going to allow me to do is, for instance, click the plus and now represent, of course, what number? One. And I can hit it again. Two. Three. Four. Five. Six. Seven. 

And here now we get that rollover, but we have a fourth bit this time, so now we have eight. So we could do this for quite some time. In fact, as an aside, how high could we count? Anyone? 

AUDIENCE: 255. 

DAVID J. MALAN: 255, right? Don't worry too much about the math for now, but that's a pretty decent number. But it actually does bound just how many pieces of information, like a letter, or a graphic that we could represent. 

But no matter for now. I'm going to go ahead and turn them all off. And if I could, I'd like to ask for a volunteer, our first volunteer-- oh, hello-- on stage. The catch is you have to be comfortable appearing, as you clearly are in front of all your classmates, as well as on the internet. And let me look a little beyond the-- how about here in the white shirt? And hand up. Come on up. What is your name? 

AUDIENCE: Jackie. 

DAVID J. MALAN: Jackie. Jackie, come on up. So what there is also on this iPad is a button called Game Mode. And this Game Mode is going to allow me to input in advance a particular decimal number, the numbers we humans are familiar with. And then you will be challenged here to use the buttons on the top-- one for each of these bulbs-- to actually figure out the pattern of light bulbs that represents the number in question. 

And I'm sorry, what was your name again? 

AUDIENCE: Jackie. 

DAVID J. MALAN: Jackie. All right. Good to meet you. 

So let me go ahead and program in for the world to see the number 15. We'll keep it small at first here. And I'm going to go into Game Mode. And I'm going to specify, give us the number 15. 

OK. And now with everyone watching-- if you want to maybe stand this way, because it will line up-- go ahead and toggle the eight buttons along the top to turn the bulbs on or off as you see fit. 

AUDIENCE: OK. 

DAVID J. MALAN: And no cheating by hitting plus 15 times. Oh, we are going to do that. 

AUDIENCE: Oh, wait. I'm so sorry. 

DAVID J. MALAN: You can also turn the light bulbs on individually with each of these buttons on top. AUDIENCE: Oh, OK. So it would be like-- DAVID J. MALAN: OK. So now we have eight. So let's pause for the audience to engage here. What number is Jackie currently representing? 11. So we're almost there. And excellent. So we have our first winner. Congratulations. 

And we thought we'd have some fabulous giveaways. If you'd like to be one such dorm room here on campus, you can yourself have a final project using now this API, thanks to Jackie. So now-- 

[APPLAUSE] 

--if we could, one more such around of this. Oh, now everyone wants some light bulbs. For the so-called hacker edition, we're going to ramp it up a-- oh, yeah, noncommittal. I think you're coming up now if your hand's going down. What is your name? 

AUDIENCE: Alex. DAVID J. MALAN: Alex, come on over here. So for Alex, we are going to program in a slightly larger number. Perhaps in order. The number 50. 

AUDIENCE: OK. DAVID J. MALAN: But, as I said-- and you might want to stand here so that the buttons line up as you would expect-- but I did call this the hacker edition. So-- good luck! 

[LAUGHTER] 

You will be able to turn them off if you-- OK. Excellent. Wonderful. Congratulations. 

[APPLAUSE] I suppose I should pay up. Congratulations to Alex as well. OK. 

So the ultimate takeaway here is hopefully, frankly, the simplicity-- the simplicity with which you can get some nice light bulbs, apparently in [INAUDIBLE]. But they represent, ultimately, the same ideas with which we humans are already all too familiar. So what might the next step be in the progression of trying to do something interesting with data and representing inputs that aren't just numbers but are maybe letters or more? 

Well, it turns out that the computer world, for many years, simply adopted an arbitrary but a consistent standard that maps numbers to letters of the alphabet. For instance, here is an excerpt from that mapping. It's called Ascii. A-S-C-I-I. And that is simply a table that maps uppercase letters-- in this case-- to decimal numbers. 

But what's the implication? Well, if you actually want to represent something like an email or some text on a web page, you obviously want to show the human letters of the alphabet, not numbers. So depending on the context of the program that a user is using, if it's a web browser or email client, numbers can certainly be interpreted as letters. That is to say, patterns of bits can easily be interpreted as letters. 

And so what we can have is the letter A being represented as 65, B being represented as 66. So if we have a super short word, like hi, what a computer would ultimately store in decimal but really in binary, using some sequence of bits, leveraging a bit of electricity in some way, would be the two numbers 72 and 73. 

But the pattern of bits that represents those values. So these then are how we can represent our inputs and outputs. And suffice it to say, we can do more complex representations ultimately with things like graphics, videos, music, and more as we'll see later this term. 

So that just leaves then algorithms, these sets of instructions with which we're solving actual problems. We're passing in inputs to algorithms. And those algorithms are producing outputs, hopefully correct outputs and hopefully, too, efficiently gathered outputs. In other words, it's one thing to implement something correctly. It's another thing to implement something well or efficiently. 

For instance, one demonstration that we're fond of in the course is this one. But these things are getting increasingly hard to find. But this is indeed an old school phone book, inside of which are 1,000 plus pages of names and telephone numbers. And if I wanted to look up someone in this phone book, I could simply do a very naive algorithm. I could open up to the first page, and I could start to look for, say, someone named Mike Smith. And if he's not on the first page, I progress to the second, and then to the third, and then to the fourth, and so forth, until I finally find Mike Smith. 

Now is that algorithm correct? 

AUDIENCE: Yes. 

DAVID J. MALAN: Yeah. If he's in there, I'll eventually find him. But it's arguably not very efficient, certainly not fast, because, my god, why am I wasting my time flipping through all of these pages when I could certainly do this physically faster? 

Well, a slight optimization, so to speak, might be not one page at a time, but two, four, six, eight, 10. Still correct? 

AUDIENCE: No. 

DAVID J. MALAN: So no if I for instance skip over Mike Smith. But so long as I back pedal one page, if I overshoot him, maybe we could correct what might otherwise be a gotcha. 

But is it better? Is it faster? I mean, yeah. It's literally twice as fast if I do two pages at a time. So if I originally had 1,000 pages, now I only have to flip 500 times, not fully 1,000 pages to get potentially in the worst case to the end of the phone book, where someone like Mike Smith or someone with a later name might actually be. 

But, of course, we humans certainly aren't going to be doing that, certainly not at this point in our lives. What is a reasonable human likely going to do? AUDIENCE: Go straight to the9 S's. DAVID J. MALAN: Go straight to the S's? How do I go straight to the S's? 

AUDIENCE: Rip it in half. DAVID J. MALAN: Well, there's no marking. So, yes, if there were indeed a label or a sticky tab for S, we should jump right there. But it's pretty innocuous. So the best I can do is roughly to the S section or maybe roughly into the middle. But the key takeaway now-- and the intuition that you've taken for granted for years probably-- is that what do you now know about this problem? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: Mike Smith is surely not in this half of the problem because Smith comes after the middle which is roughly the M section, it seems to be. So as you might have seen at Visitas, we can now literally tear this problem in half. AUDIENCE: Woo! DAVID J. MALAN: It's getting easier and easier. [APPLAUSE] There you go. [LAUGHTER] And now I fundamentally have the same problem, but it's literally half as big. I'm still looking for Mike Smith. And I daresay, I can still look for him in the same way, splitting the problem in half again, tearing the problem again in half, which now leaves me with a problem a quarter of the size, dramatically throw that half away, and repeat this process again and again and again, glancing down at each point to see if Mike Smith is on the page in question. 

Now if I do this right, ultimately I'll find myself with just one page on which Mike Smith is if he's indeed in the phone book. Of course, I could never call Mike again. But the point here is that if we started with 1,000 pages, my first algorithm, flip the page, maybe 1,000 times-- definitely less because it's an S name and not a Z name, but as many as 1,000 pages potentially. 

Second algorithm, better. 500 pages. Third algorithm, though, how many steps would it take to divide a 1,000 page phone book in half like that? 10, give or take. So only by flipping through that phone book, diving and conquering, so to speak, 10 times, will I make my way down to just one single page. 

And so we can capture this intuition now a little bit graphically if you just consider this super simple graph. We're on the x-axis, or horizontal axis, is the size of my problem, the number of pages in the phone book. And computer scientists generally like to call the size of a problem n, where n is just some variable that represents-- in this case-- number of pages. 

The vertical, or y-axis, here is going to be the time to solve, maybe the number of page turns, maybe the number of seconds or minutes, whatever your unit of measure is. And so this red line represents the first algorithm, because there's a one to one relationship between number of pages and amount of time it takes. 

If Verizon doubles the number of pages in the phone book next year, my running time-- the time required to execute that first algorithm-- doubles in the worst case. But the second algorithm, where I'm flipping by two, requires less time for a given size problem. So if I have this many pages here-- notice that the yellow line suggests less time to solve. And indeed, it represents, we'll say, n over two. 

But what's the shape of the third and final curve going to look like? Yeah, it's indeed going to look-- I don't know what you were going to say. But let's see what you were going to say. 

AUDIENCE: Like that. 

DAVID J. MALAN: It's going to look like this, a logarithmic slope-- exactly-- whereby you have this curious slope. It's no longer a straight line. And what's compelling about that is that even though the graph is now cut off, you can extrapolate in your mind that that green line's not going to increase in height all that much as you proceed further down that horizontal axis. 

Indeed, Verizon, for instance, could double the number of pages in the phone book between this year and next year from 1,000 to 2000 pages, but no big deal. With this third and final, there's a intuitive algorithm of dividing and conquering. It's going to take me how many more steps next year to find someone like Mike Smith? 

AUDIENCE: One. 

DAVID J. MALAN: There's just one. And they can quadruple it, it's going to take me just two more steps and so forth. And so this is testament to just how some careful design and some appreciation for what your inputs are can do even better. Now we're cheating a little bit in the sense that we're leveraging an assumption. What is my assumption about our phone book that allowed me to divide and conquer in this intuitive and still correct way? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. So it was ordered. It was alphabetized by the phone book company. If it were in random order, that would be a hell of a phone book, but it certainly wouldn't lend itself to the algorithm I used, because you would never just happen across Mike Smith if you kept dividing in half in that way by chance. 

So let's now formalize what's clearly intuitive. So something called pseudocode is where we'll begin some of our initial problems. And this is a generic way of describing an algorithm or a computer program, not using C, or C++, or Java, or any specific language, but just using English, with which any human might be familiar. 

And we might write the pseudocode for this problem as follows. Step one, pick up the phone book. Step two, open to middle of phone book. Step three, look at the names. Step four, if Smith is among names-- 

And now this is an interesting construct. It's a decision point. It's a fork in the road, if you will, a branch, so to speak. So I'm going to indent just by convention step-- not five-- which is to say, I'll call Mike. So this indentation, totally arbitrary human convention, but it's simply meant to convey semantically that if Smith is among names, then I should call Mike. 

Meanwhile in step six, notice that the indentation's gone. So else is the other fork in the road, the other road I might travel. So else if Smith is earlier in the book, what's my next step probably going to be here? AUDIENCE: You go to the left side. DAVID J. MALAN: Yeah, so go to the left half of the phone book. Throw away the right half if Smith is earlier in the book. So open to the middle of the left half of the book. 

And then step eight, go to line three. And this is a curious loop I'm inducing, a recursion so to speak. But more on that in the future. 

I'm using my same algorithm, my same pseudocode, to solve the same problem again because the only thing that's changed is the size of the problem, not my objective, and not the person I'm looking for. So I can reuse the algorithm that I've already defined. 

Else if Smith is later in book-- you might guess-- open to the middle of the right half of the book. And again, go to line three. Else-- what's the final line in this program going to be? If he's not among the names on the page I'm on, if he's not earlier in the book, and he's not later in the book, what do I know is true about Mike Smith now? AUDIENCE: He's not in the book. DAVID J. MALAN: He's not in the book. So the best I can do is just give up and stop this program. All right. So at this point, let's take a quick tour of some of what awaits. And in fact, I'm joined here by a number of CS50 staff. If these folks could all join me up here on stage. 

[APPLAUSE] 

Mind you, this is only a subset of CS50 staff, since each year we have nearly 100 staff members in roles of course assistants, teaching fellows, and more. Come on up. So they will join us here awkwardly for just a moment as we give a whirlwind tour of what you should expect here in the course. 

So first and foremost, we have SAT/UNS as the grading option in the course. This is meant deliberately to be an option whereby if you are a bit uneasy at being in the course, and you do fear failure-- even if frankly failure means hurting your GPA, getting a B and not an A-- that is precisely what, certainly for a gateway course like CS50 and other introductory courses, this grading option is meant to allow. 

I wholeheartedly encourage students-- especially if on the fence-- to start the course SAT/UNS, even remain SAT/UNS. But you can certainly switch to a letter grade by the fifth Monday in the term. 

Frankly, back when I was a freshman in 1995, I myself didn't even take CS50 because I didn't get up the nerve to actually step foot in the classroom. It seemed a domain far too unfamiliar to me and really only for those friends of mine, frankly, who had been programming since they were six- or maybe 10-years-old. And it was only because I was able to take CS50 in my day in the equivalent version of SAT/UNS-- pass/fail back in the day-- that even I took 50. And somehow or other, I'm here again with you today. 

Now meanwhile what else you should keep in mind about 50 is simultaneous enrollment. Contrary to rumors that you might have heard, you can, in fact, simultaneously enroll in CS50 and another class that meets at the same or some overlapping time as CS50's lectures right here. See the syllabus for the particulars of the implementation thereof. 

Lectures, meanwhile, contrary to what's officially in the catalog, will generally only meet for just an hour. On occasion we may run a little long. But keep in mind that the goal in CS50's lectures is to provide you with a conceptual overview, hopefully some demonstrations, maybe even some giveaways, of what awaits for the week that follows. 

And so in lectures, we'll explore those topics and examples together, bringing students up on stage, and staff up on stage as often as we can, for just a couple of hours each week. Sections, meanwhile, will be offered by these folks here-- many of them teaching fellows, some of them course assistants-- will be happening weekly. 

And what's key to keep in mind is that we do have-- not unlike First Nights, the music class-- different tracks of sections for students less comfortable, more comfortable, and somewhere in between. And frankly, you know if you're less comfortable. And you probably know if you're more comfortable. And if you're not really sure, you are by definition somewhere in between. So when it comes time to section in a week or so, per the syllabus, we'll ask you that question. And you can self-select based on your own comfort level and be with students-- be with green dots-- similar in comfort level to you. 

Meanwhile, we have problem sets, which will ultimately define your experience in this course. They're offered typically in multiple editions. A standard edition that we expect most every student in the course to tackle but also a so-called hacker edition that offers no form of extra credit outright but really the bragging rights to say that you tried and tackled the course's hacker editions that approach the similar material but from a more sophisticated angle. 

What we offer for the standard edition, for, again, a super majority of students, are not only walk-throughs, which are videos led by the course's staff that truly walk you through the course's problems and possible design implementations. And we also, after the fact, offer postmortems, whereby if you're wondering how you could have or should have solved some problem, the teaching staff will walk you through those on video as well. 

Meanwhile, what awaits too are five late days and the fact that we will drop your lowest problem set score. We certainly appreciate that in exchange for the workload that 50 expects of you, life gets in the way sometimes, if not five times. And so this will offer you a bit of flexibility, extending your deadline from, say, a Thursday at noon to a Friday at noon. See the syllabus for the implementation details thereof. 

Now what now awaits? And it's only occurring to me now just how long I'm having you guys stand here on stage. 

[LAUGHTER] 

DAVID J. MALAN: But we'll get to the climactic finish before long. So what awaits in terms of the problem sets? Well, perhaps a teaser of what we all did last year with your predecessors. In the first problem set last year, we introduced Scratch, a graphical programming language that lets you program literally by dragging and dropping puzzle pieces, like these, that are reminiscent of the constructs will see just one week hence, when we switch to a more traditional language, known as C. 

Last year we proceeded to this problem set, involving for cryptography, the scrambling of information to keep it from governmental or friends' eyes that you don't want to see it. Encoded in here is a message that soon you will be able to decrypt or de-scramble. 

Breakout was a problem set last year, wherein you use these new found programming skills to actually implement a game wherein-- as you may recall from childhood-- the goal was to bash the bricks that are atop the screen here, accumulating a score along the way, and implementing your own algorithms with which this solution ultimately lets you play the game. Meanwhile, later in the semester, we will give you a dictionary of 143,091 English words. And you will be challenged to write a program that spell checks, documents, by loading that many words into memory as efficiently as possible. Generally pitting you against your classmates if you opt into a bit of a challenge in leader board to see who can use the fewest seconds of running time, and the fewest number of megabytes of memory, and actually fine-tuning your programs to be incredibly resource efficient not just time. 

Last year, too, we looked at the end of the semester at web programming. And indeed, we'll do that again this year with multiple problem sets, introducing you to the techniques and the mindset with which you can apply these programming skills to websites, dynamic websites, websites that actually solve problems and behave differently and are not simply static sites with static information. 

The final project ultimately will define, though, the climax of the course for students, wherein you'll be challenged to implement most anything of interest to you, so long as it somehow draws upon the course's lessons. 

And as you saw in the video at the start, we will conclude the semester with the CS50 Hackathon, which if, unfamiliar, will begin at 7:00 PM one night and end at 7:00 AM the next morning. Around 9:00 PM, we'll order in first dinner. Around 1:00 AM, we'll order in second dinner. And if you're still standing at 5:00 AM, we will shuttle bus you to IHOP for breakfast. 

The CS50 Fair, meanwhile, is an event to which 2,000 plus faculty, students, and staff from across campus will come to see your accomplishments in the course and the final projects and creations that you create on your laptops, desktops, or perhaps even light bulbs. 

Meanwhile, office hours and the support structure. And now it would've been a better time to bring you all up. 

Office hours will take place four nights a week for multiple hours each night with generally 20 to 30 of the course's staff on duty at once to provide you with intimate one-on-one opportunities for support with the course's problem sets. Tutoring too will be available, particularly for students less comfortable-- or dare say least comfortable-- for whom office hours are not the most nurturing environment and are certainly not the most stress-free. Especially when deadlines are pressing, we will proactively pair you ourselves with a member of the staff to work with on some regular schedule as your needs and their schedule allows. 

And staff. Allow me to introduce Davon, Rob, and Gabriel, this year's heads. If you would each like to say-- 

[APPLAUSE] --a word. [APPLAUSE] Davon over here is the course's manager, which means in his full-time role he helps with the execution and logistics of CS50. DAVON: Yeah, hi, guys. You'll see a lot to me at office hours. I'll be teaching sections. And if you shoot emails ahead, I'll probably be responding. So I'll see lots of you all semester. And welcome to CS50. 

DAVID J. MALAN: And now Gabriel, who himself was just a freshman last year, but for the past couple of years has been operating his own version of CS50 in Brazil, whereby he downloaded all of the course's content-- which is clearly being filmed and placed online-- so that he could translate it to Portuguese and then teach more than 100 of his classmates over the course of a couple of years, teaching in his native tongue the course's curriculum. 

GABRIEL: Hello. 

[APPLAUSE] GABRIEL: Hi, I'm Gabriel. I'm the head TF of the course. And I hope you'll love CS50. This is CS50. 

DAVID J. MALAN: Now for Rob. Oh, you want introduction? 

ROB: No, I don't know. [LAUGHTER] DAVID J. MALAN: And Rob Boden. [LAUGHTER] ROB: Hi, I'm Rob. This is my fifth year involved with the course. Every year, it's just a better and better class, so you guys are clearly going to be awesome. I hope you all have fun with it. I'm going to have fun with it. So see you around. 

DAVID J. MALAN: And time won't permit us-- 

[APPLAUSE] 

Time won't permit us to introduce everyone on the stage and all of their colleagues who are shopping classes today. But allow me to introduce Belinda and CS50 Puzzle Day, which awaits this coming Saturday, which is the first of the course's large scale events. 

This one in particular meant to hammer home the point that computer science is ultimately not about programming, but rather about problem solving more generally. And Puzzle Day, as you'll see, will bring you and your classmates together-- we hope this Saturday. 

BELINDA: OK. Hi, guys. So thanks. So as our illustrious captain said, my name's Belinda. I am a sophomore at Quincy House. 

I, just like you guys, took CS50 last year, really loved it. I have a soft spot for you guys in the third row. And I'm proud to say, I'm now in a committed relationship with CS50 [INAUDIBLE]. OK. That was my lame version of a joke. 

Anyway, so moving on, just wanted to invite you guys all to the i-lab, or HBS hives. We're going to be having Puzzle Day from 12:00 to 3:00. And it's a great opportunity for you guys to meet your fellow CS friends, solve some non-CS puzzles, like Captain mentioned, and also eat some free food, earn some awesome prizes, like gift cards, $75 per person, and also-- what was it? Wii U or something? Wii U? Yes. For our raffle. Awesome. So I'll stick around after class. And if you guys have any questions, let me know. 

DAVID J. MALAN: And you'll see, beyond this there's nothing to do today. The first problem set will go out Friday. But to bring us home today, I'd like to introduce you to specifically one more member of the staff, Colton Ogden here, whose hands are now protected above you with this MIDI controller to hammer home the point further that computer science, too, has applicability far beyond engineering and STEM and computer science itself, extending even to such domains as music. 

Colton has kindly offered-- I thought one of them was going to fix the focus. Andrew, if we could summon focus over here for just a moment. 

What Colton has done in advance is program this device, this pad of buttons that you see pictured up here, as a MIDI controller, whereby each of those buttons is wired to a particular musical note or a sound, more generally a recording, such that by playing patterns of these buttons, much like patterns of bits, can represent other higher level concepts. Will he be able ultimately to take us home here today? Without further ado, if we could dim the lights, and turn on the screen behind Colton. 

AUDIENCE: Woo! 

DAVID J. MALAN: This is CS50. 

[MUSIC PLAYING] 

[APPLAUSE] 

That's it for CS50. We will see you Friday. Some cake awaits you in the Transept. 

[MUSIC PLAYING] DAVID J. MALAN: This is CS50, and this is the start of week 10. You may recall that we've shown on the screen a 3D printer, which is this device that takes spools of plastic and then extrudes it by heating it up and melting it so that we can then form Chang's army of elephants, for instance. 

So at Leverett House, though, recently, I was chatting with one of your classmates and a friend of Chang's named Michelle, who actually interned at this other company this past year that has a different technique for actually creating three-dimensional objects, like this tiny little elephant here. In particular, the way this works is that it's an example of something called stereolithography, whereby there's this basin of resin or liquid, and then a laser strikes that liquid, and gradually, the device lifts and lifts and lifts the thing that you're printing, like an elephant, as that liquid becomes solid. And the result, actually, is something that's much more robust than some of the plastic giveaways some of you might have had. 

And what Chang kindly did for us here was did a time-lapse using photographs over the course of an hour or more, probably, to produce this guy here. Would someone who's never come up before like to come hit Start on this video? Let me go with, how about there. Come on up. All right. And you are? LUKE: My name's Luke [INAUDIBLE]. DAVID J. MALAN: Hi, Luke. Nice to meet you. 

LUKE: Nice to meet you. AUDIENCE: He's running for UC. 

DAVID J. MALAN: I know, we're trying not to promote. All right, so Luke, all you have to do here in CS50 is hit the space bar to print this elephant. [VIDEO PLAYBACK] -[MACHINE WHIRRING] -[CRASH] -[BOOM] -[CRASH] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly what it's like to 3D print. And here is your elephant. Thanks for volunteering. All right. So again, per the specification for the final project, this hardware that's available to you guys is, for some reason, your project has some intersection of software and hardware, realize that these are now resources. 

I wanted to take one moment to touch upon a Crimson article that came out late last night, which was to announce that this fellow here, David Johnson, who's been the senior preceptor for Ec 10 for quite some time, is leaving Harvard at the end of the academic year. And I just wanted to take a moment, honestly, to thank David in front of CS50. He's been a mentor of sorts to us over the years. 

And I feel like we, CS50, have rather grown up with Ec 10 in here, since they are right before us. And he and the whole team in Ec 10 has been wonderfully gracious, frankly, as we lug in all of our equipment each and every week, and years ago, provided a great deal of counsel as we were curious as to how they operate Ec 10. So our thanks and admiration to David Johnson. 

[APPLAUSE] 

Now, unrelatedly, so the end is indeed near. We are here in week 10. And we only have just a couple of formal weeks here in class left, followed by a couple of events. So to give you a sense of what's on the horizon, here we are today. 

This Wednesday, recall, we'll have a guest lecture by none other than Microsoft's own Steve Ballmer. If you've not yet gone to cs50.harvard.edu/register, do so, since space will be limited. And they will be checking IDs at the door this day. If you weren't here last week, I thought I'd tease you with a different look at Steve and the excitement that awaits us on Wednesday. 

[VIDEO PLAYBACK] 

-Passion. 

-We're going to be hardcore-- hardcore. 

-Innovator. 

-Bill said, you don't get it. We're going to put a computer on every desk and in every home, which became the motto for the company. I swear, Bill invented it that night to really give me some of the vision of why I should say yes. I've never looked back, really, after that. 

-Fresh out of college, he joined a fledgling startup and helped it grow into one of America's most successful businesses ever. The life of and business lessons learned along the way let him back to his childhood passion and love. And those experiences have prepared him for his next challenge in life. 

-Nothing gets in our way-- boom! Keep coming hardcore! Go Clippers! 

-This is Steve Ballmer, "In My Own Words." [END VIDEO PLAYBACK] DAVID J. MALAN: --this Wednesday to CS50. Head again to this URL here. As for what else is on the horizon, next week, no lecture on Monday. But we will be following that by quiz one on Wednesday. Go to CS50's homepage for details on people, places, and times for all of the various proctoring logistics and the like, as well as about review sessions that are forthcoming. And then, lastly, on Monday, the day before the week of Thanksgiving break, realize it will be our final lecture. We will serve cake and a great deal of excitement, we hope. 

Now, a couple of other updates. Keep in mind that the status report, which is really just meant to be a casual interaction with your TF to proudly state just how far along with your final project you are, or at least as a sanity check that you should be approaching that point shortly thereafter. The Hackathon then follows that. Realize the Hackathon is not an opportunity to start your final project, but is meant to be an opportunity to be in the middle of or toward the end of your final project, with the implementation due a few days later, followed by the CS50 fair. 

Now, CS50's production team, a couple years ago, put together a teaser for the CS50 fair that we thought we'd show you today, because they've been hard at work on a prequel for that, a new video that we'll conclude today with. But here's what awaits you for this year's CS50 fair. [VIDEO PLAYBACK] -[CELL PHONE RINGING] [MUSIC "THEME FROM MISSION: IMPOSSIBLE"] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly how we close final project submissions. A couple of now teasers-- if you'd like to join Nick here for lunch, as usual, this Friday, head to this URL here. Moreover, if you would like to join Nick or this Nick or this Allison or any members of CS50's team, do realize that, shortly after term's end, CS50 will already be recruiting for next year's team, for CAs, TFs, designers, producers, researchers, and other positions that here operate CS50 both in front of and behind the scenes. So if this might be of interest to you, head to this URL here. And students more comfortable, less comfortable, and somewhere in between alike are all welcome and encouraged to apply. 

So it was perfect timing that, no joke, this morning, when I woke up, I had this here spam in my inbox. It actually slipped through Gmail's spam filter somehow and ended up in my actual inbox. And it says, "Dear mailbox user, you're currently upgraded to 4 gigabytes of space. Please log into your account in order to validate E-space." 

And then there's this nice blue enticing link there to click on for faculty and staff, which then led me to a wonderfully legitimate page, which asked me to give them my name and email address and, of course, password to validate who I am and so forth. But of course, as is always the case, you arrive at this landing page, and of course, there's at least one typo, which seems to be the nail in the coffin of any of these scams. And we'll post, perhaps, some other links to these kinds of screen shots in the future. But hopefully, most people in this room have not clicked-- or even if you've clicked such links as this, you haven't gone so far as to fill out those forms and so forth. In fact, it's OK if you have. We'll try to fix that today, because, indeed, today's conversation is about security. 

And indeed, one of the goals of CS50 is not so much to teach you CE or PHP or JavaScript or SQL or any of these underlying implementation details. But it's to empower you as humans to just make smarter decisions as it relates to technology down the road so that, whether you're an engineer or humanist or scientist or any other role, you are making informed decisions about your own computing usage, or if you're in a decision-making position, in politics, in particular, you're making much, much better decisions than a lot of humans today have been. And we'll do this by way of a few examples. 

First, I was rather surprised recently to discover the following. So passwords, of course, are what most of us use to protect our data-- email, chat, and all kinds of resources like that. And just by an awkward-- not show of hands, but embarrassed looks of shame, how many of you use the same password in a lot of different websites? 

Oh, OK, so we'll do the hands. OK, so a lot of you do. Anyone who does this, just why? And what? Yeah? AUDIENCE: It's easy to remember, because you don't have to remember [INAUDIBLE]. DAVID J. MALAN: Yeah, it's easy to remember. It's a perfectly reasonable, rational behavior, even though the risk you're putting yourself at in these cases is just one or more of those websites is vulnerable to hacking or to insecure or your password's just so darn guessable, anyone can figure it out. Not only is one account compromised, but in theory, any accounts you have on the internet. So I know I might say today, don't use the same password everywhere, but that's a lot easier said than done. But there are techniques for mitigating that particular concern. 

Now, I happen, for instance, to use a program called 1Password. Another popular one is called LastPass. And a bunch of CS50 staff use one or more of these kinds of tools. And long story short, one takeaway for today should be, yes, you might have the same password everywhere, but it's very easy to no longer do that. For instance, these days, I know maybe one of my dozens or hundreds of passwords. All of my other passwords are pseudo-randomly generated by one of these programs here. And in a nutshell, and even though most of these programs tend to come with a bit of a cost, you would install a program like this, you would then store all of your usernames and passwords inside of this program on your own Mac or PC or whatnot, and then it would be encrypted on your computer with what's hopefully a particularly long password. So I have a whole bunch of passwords for individual websites, and then I have a really long password that I use to unlock all of those other passwords. And what's nice about software like this is that, when you visit a website that's asking for your username and password, these days, I don't type in my username and password, because, again, I don't even know what most of my passwords are. I instead hit a keyboard shortcut, the result of which is to trigger this software to prompt me for my master password. I then type that one big password in, and then the browser automatically fills in what my password is. So truly, if you take nothing else away from today in terms of passwords, these are software that are worth downloading or investing in so that you can at least break that particular habit. And if you're the type that's using Post-It notes or the like-- and odds are at least one of you is-- that habit, too, suffice it to say, should be broken. 

Now, I happened to discover, as a result of using the software, the following. I was ordering an Edible Arrangement, this basket of fruit, recently. And I hit my special keyboard shortcut to log in to the website. And the software triggered a pop-up that said, are you sure you want me to automatically submit this username and password? Because the connection is insecure. 

The connection's not using HTTPS, for secure, using that protocol known as SSL, Secure Sockets Layer. And indeed, if you look at the top left of this website, it's just www.ediblearrangements.com, no HTTPS, which isn't so good. 

Now, I was curious-- maybe this is just a bug in the software. Surely, some website like this that a lot of us know of is at least using encryption or HTTPS URLs to log you in. So I got a little curious this morning. And I got out my CS50 skills, I opened up Chrome Inspector. It's not even much of a skill. It's just hit the right keyboard shortcut to open this up. And here's a big window of Chrome's Inspector. 

But what was actually a little tragic and ridiculous were these two lines here. Up at the top, notice the URL to which my username and password were submitted. Let me zoom in. It was this here. And all of that is sort of uninteresting, except for the thing all the way at the left, which starts with http://. And so then, OK, maybe they're just sending my username, which is not such a big deal. Maybe my password gets sent later. That would be kind of an interesting design decision. 

But nope. If you then look at the request payload, the username and password I sent-- and I mocked these up for the slide-- were actually sent in the clear. So you go to this particular website and order an Edible Arrangement like this, and indeed, apparently, for all this time I've been ordering from them, your username and password is going across in the clear. So honestly, this is completely unacceptable. And it's so trivial to avoid things like this as the designer of a website and as the programmer of a website. 

But the takeaway here for us as users of websites is just to appreciate that all it takes is for one stupid design decision, unjustifiable design decision, so that now, if you know my password is "crimson" on this website, you've probably just got into a whole bunch of other websites that I now have. And there's not much of a defense against that other than what Chang did this morning. He went to Edible Arrangements, which is located down the street in Cambridge, and physically bought this for us. That was much more secure than using the website in this case. 

But the detail to keep an eye out for is actually what's in the browser up top there. But even that can be a little deceptive. So another interesting example and way of defending against this-- and actually, let's do that first-- the way of defending against this is a technique that security people would call two-factor authentication. 

Does anyone know what the solution to problems like this means? What is two-factor authentication? Or put another way, how many of you are using it? OK, so a couple of shy people. But yeah. I saw your hand go up. What is two-factor authentication? 

AUDIENCE: Basically, in addition to typing in your password, you also have a secondary [INAUDIBLE] sent via text message to your phone at the [INAUDIBLE]. DAVID J. MALAN: Exactly. In addition to some primary form of authentication, like a password, you're asked for a secondary factor, which is typically something you have physically on you, though it can be something else altogether. And that thing is typically a cellphone these days to which you get sent a temporary text message that says "your temporary pass code is 12345." 

So in addition to my password "crimson," I also have to type in whatever the website has texted me. Or if you have this with a bank or an investment account, you sometimes have these little dongles that actually have a pseudo-random number generator built into them, but both the device and the bank know what your initial seed is so that they know, even as the little code on your little key fob marches ahead every minute or two, changing values, so does that value change on the bank's server so that they can similarly authenticate you, not only with your password, but with that temporary code. Now, you can actually do this in Google. And frankly, this is a good habit to get into, especially if you're using Gmail all the time on a browser. If you go to this URL here, which is in the slides online for today, and then click on 2-Step Verification, same actual thing there. You'll be prompted to give them your cell phone number. And then, any time you log into Gmail, you'll be not only asked for your password, but also for a little code that gets sent to your phone temporarily. And so long as you have cookies enabled, and so long as you don't explicitly log out, you'll only have to do that once in awhile, like when you sit down at a new computer. 

And the upside here, too, is, if you sit down at some internet cafe style computer or just a friend's computer, even if that friend maliciously or unknowingly has some keyboard logger installed on his or her computer, such that everything you type is being logged, at least that second factor, that temporary code, is ephemeral. So he or she or whoever's compromised the computer can't log into you subsequently, even if everything else was vulnerable or even unencrypted altogether. Facebook has this, too, with that URL here, where you can click on Login Approvals. So here, too, if you don't want friends to poke people, you don't want to be poking on Facebook or posting status updates for you, two-factor authentication here is probably a good thing. And then there's this other technique altogether, just auditing, which is even a good thing for us humans, if two-factor proves annoying, which, admittedly, it can, or it's just not available on some website, minimally keeping an eye on if and when you're logging into sites, if they allow you, is a good technique, too. So Facebook also gives you this login notifications feature, whereby anytime Facebook realizes, hm, David has logged in from some computer or phone that we've never seen before from an IP address that looks unfamiliar, they'll at least send you an email to whatever email address you have on file, saying, does this look suspicious? If so, change your password immediately. And so there, too, just auditing behavior even after you've been compromised, can at least narrow the window during which you are vulnerable. 

All right, any questions on that stuff thus far? Today is the day to get all of your paranoia confirmed or denied. That's mostly confirmed, sadly. Yeah? 

AUDIENCE: [INAUDIBLE] phone, what if your phone breaks, and then it's always difficult to verify-- 

DAVID J. MALAN: True. 

AUDIENCE: Or if you're in a different country, and they don't let you log in because [INAUDIBLE]. DAVID J. MALAN: Absolutely. And so these are the additional costs that you incur. There's always this theme of a trade-off, after all. And then, if you lose your phone, if it breaks, if you're abroad, or you just don't have a signal, like a 3G or LTE signal, you might not actually be able to authenticate. 

So again, these two are trade-offs. And sometimes, it can create a lot of work for you as a result. But it really depends, then, on what the expected price to you is of something being compromised altogether. 

So SSL, then, is this technique that we all generally take for granted or assume is there, even though that's clearly not the case. And you can still mislead people, though, even with this. So here's an example of a bank. 

This is Bank of America. There's a whole bunch of these in Harvard Square and beyond. And notice that, at the very top of the screen, there's an, indeed, HTTPS. And it's even green and highlighted for us to indicate that this is indeed a legitimately secure website, or so we've been trained to believe. 

Now, besides that, though, notice that, if we zoom in, there's this thing here, where you're prompted to log in. What does this padlock mean right there, next to my username prompt? This is pretty common on websites, too. What does this padlock mean? You seem like you know. 

AUDIENCE: It doesn't mean anything. 

DAVID J. MALAN: It doesn't mean anything. It means that Bank of America knows how to write HTML with image tags, right? It truly means nothing, because even we, using the first day of our look at HTML, can code up a page with a red background and an image, like a GIF or whatnot, that happens to look like a padlock. And yet, this is super common in websites, because we've been trained to assume that, oh, padlock means secure, when it really just means you know HTML. 

For instance, back in the day, I could have just put this on my website, claiming it's secure, and asking, effectively, for people's usernames and passwords. So looking in the URL is at least a better clue, because that's built into Chrome or whatever browser you're using. But even then, sometimes things can go wrong. And in fact, you might not always see HTTPS, let alone in green. 

Have any of you ever seen a screen like this? You might have, actually, earlier in October, when I forgot to pay for our SSL certificate, as it's called, and we were looking like this for an hour or two. So you've probably seen things like this, with a strike-through, like a red line, through the protocol in the URL or some kind of screen that's at least admonishing you for trying to proceed further. And Google here is inviting you to go back to safety. 

Now, in this case, this just meant that the SSL certificate that we were using, the big, mathematically useful numbers that are associated with CS50's server, were no longer valid. And in fact, we can simulate this, as you can on your laptop. If I go into Chrome here, and let's go to facebook.com, and it looks like this is secure. But let me go ahead now and click on the padlock here. 

And let me go to Connection, Certificate Information. And indeed, what you'll see here is a bunch of lower-level details about who facebook.com really is. It seems that they have paid money to a company called maybe DigiCert High Assurance that has promised to tell the rest of the world that, if a browser ever sees a certificate-- you can think of it literally as a certificate that looks like that cheesy thing at top left-- then facebook.com is who they say they are, because all this time, when you visit a website, like cs50.harvard.edu or facebook.com or gmail.com that use HTTPS URLs, behind the scenes, there's this sort of transaction happening automatically for you, whereby facebook.com, in this case, is sending to your browser its so-called SSL certificate, or rather, its public key, and then your browser is using that public key to subsequently send encrypted traffic to and from it. 

But there's this whole hierarchy in the world of companies that you pay money to who will then testify, in a digital sense, that you are indeed facebook.com or your server is indeed cs50.harvard.edu. And built into browsers, like Chrome and IE and Firefox, is a list of all of those so-called certificate authorities that are authorized by Microsoft and Google and Mozilla to confirm or deny that facebook.com is who it says it is. But the catch is that these things do expire. In fact, Facebook's looks like it expires next October, in 2015. 

So we can actually simulate this if I go in my Mac to my System Preferences, and I go into Date and Time, and I go into Date and Time here, and I unlock this here-- thankfully, we didn't reveal a password this time-- and now I go down to uncheck this. And let's actually-- oops, that's not as interesting as doing this. We are literally in the future now, which means this is what 2020 is like. If I now reload the page-- let's do it in Ingognito mode-- if I reload the page, there we go. 

So now, my computer thinks it's 2020, but my browser knows that this certificate from Facebook expires, of course, in 2015. So it's giving me this red message. Now, thankfully, browsers like Chrome have actually made it pretty hard to proceed nonetheless. They indeed want me to go back to safety. 

If I click here on Advance, it's going to tell me some more details. And if I really want to proceed, they'll let me go to facebook.com, which is, again, unsafe, at which point I'll see Facebook's homepage, like this. But then other things seem to be breaking. What's probably breaking at this point? AUDIENCE: JavaScript. DAVID J. MALAN: Like the JavaScripts and/or CSS files are similarly encountering that error. So this is just a bad situation overall. But the point here is that at least Facebook does indeed have SSL enabled for their servers, as many websites, do, but not necessarily all. 

But that's not alone the takeaway here. Turns out that even SSL has been demonstrated to be insecure in some way. So I'm sort of hinting that SSL, good. Look for HTTPS URLs, and life is good, because all of your HTTP traffic and headers and content is encrypted. 

No one can intercept it in the middle, except for a so-called man in the middle. This is a general technique in the world of security known as a man-in-the-middle attack. Suppose that you're this little laptop over here on the left, and suppose you're trying to visit a server over there on the right, like facebook.com. 

But suppose that, in between you and Facebook, is a whole bunch of other servers and equipment, like switches and routers, DNS servers, DHCP servers, none of which we control. It might be controlled by Starbucks or Harvard or Comcast or the like. Well, suppose that someone maliciously, on your network, in between you and Facebook, is able to tell you that, you know what, the IP address of Facebook is not what you think it is. It's this IP instead. 

And so your browser's tricked into requesting traffic from another computer altogether. Well, suppose that computer simply looks at all of the traffic you're requesting from Facebook and all of the web pages that you're requesting from Facebook. And any time it sees in your traffic a URL that starts with HTTPS, it dynamically, on the fly, rewrites it as HTTP. And any time it sees a location header, location colon, like we use to redirect the user, those, too, can be changed by this man in the middle from HTTPS to HTTP. 

So even though you yourself might think you're at the real Facebook, it is not that hard for an adversary with physical access to your network to simply return pages to you that look like Gmail, that look like Facebook, and indeed the URL is identical, because they're pretending to have that same host name because of some exploitation of DNS or some other system like that. And the result, then, is that we humans might only realize that, OK, this looks like Gmail or at least the older version, as is this slide from an older presentation. But it looks like this-- http://www.google.com. 

So here, too, the reality is that how many of you, when you go to Facebook or Gmail or any website and you know a little something about SSL, how many of you physically type https:// and then the website name, Enter. Most of us just type, like, CS50, hit Enter, or F-A for Facebook and hit Enter, and let it auto-complete. But behind the scenes, if you watch your HTTP traffic, there's probably a whole bunch of those location headers that are sending you from Facebook to www.facebook.com to https://www.facebook.com. 

So that's one or more HTTP transactions where your information is completely sent in the clear, no encryption whatsoever. Now, that might not be such a big deal if all you're trying to do is access the homepage, you're not sending your username and password. But what is it underneath the hood, especially for PHP-based websites that's also being sent back and forth when you visit some webpage if that website uses, say, PHP and implements functionality like pset7? What was being sent back and forth in your HTTP headers that gave you access to this pretty useful super global in PHP? 

AUDIENCE: Cookies. 

DAVID J. MALAN: Cookies, specifically the PHP sess ID cookie. So recall, if we go to, say, cs50.harvard.edu again, but this time, let's open up the Network tab, and now, up here, let's literally just go to http://cs50.harvard.edu and then hit Enter. And then look at the screen down here. Notice that we indeed got back a 301 moved permanently message, which means that there's a location header here, which is now redirecting me to HTTPS. 

But the catch is that, if I already had a cookie stamped on my hand virtually, as we've discussed before, and I the human sort of unknowingly just visit the insecure version, and my browser takes it upon itself to show that hand stamp for the first request, which is via HTTP, any man in the middle, any adversary in the middle, can theoretically just see those HTTP headers, just like we're looking at them here. It's only once you're talking to an HTTPS URL does that hand stamp itself get encrypted, a la Caesar or Vigenere, but with a fancier algorithm altogether. So here, too, even if websites use HTTPS, we humans have been conditioned, thanks to auto-complete and other techniques, to not even think about the potential implications. Now, there are ways around this. For instance, many websites can be configured so that, once you have this hand stamp, you can tell the browser, this hand stamp is only for SSL connections. The browser should not present it to me unless it's over SSL. But many websites don't bother with that. And many websites apparently don't even bother with SSL at all. 

So for more on that, there's actually even more dirt in this presentation that a fellow gave at a so-called black hat conference a couple of years ago, where there's even other malicious tricks people have used. You might recall this notion of a favicon, which is like a little logo that's often in the browser's window. Well, what's been common among bad guys is to make fab icons that look like what? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Say again? AUDIENCE: The websites. DAVID J. MALAN: Not a website. So favicon, tiny little icon. What would be the most malicious, manipulative thing you could make your website's default icon look like? AUDIENCE: A green lock. DAVID J. MALAN: What's that? AUDIENCE: A little green lock. DAVID J. MALAN: Like a green lock, exactly. So you can have this aesthetic of a little green padlock, hinting to the world, oh, we're secure, when, again, all it means is that you know some HTML. So session hijacking refers to exactly that. If you have someone who's kind of sniffing the airwaves in this room here or has physical access to a network and can see your cookies, he or she can grab that PHP sess ID cookie. And then, if they're savvy enough to know how to send that cookie as their own hand stamp just by copying that value and sending the HTTP headers, someone could very easily log into any of the Facebook accounts or Gmail accounts or Twitter accounts that are here, open in the room, if you're not using SSL and if the website is not using SSL correctly. 

So let's transition to another one. So another true story. And this just broke in the news a week or two ago. Verizon has been doing a very evil thing, and as best people can tell, since at least 2012, whereby, when you access websites via a Verizon cellphone, whatever manufacturer it is, they have been presumptuously, as the story goes, injecting into all of your HTTP traffic their own HTTP header. And that header looks like this-- X-UIDH. UID is like a unique identifier or user ID. And X just means this is a custom header that's not standard. 

But what this means is that, if I pull up, for instance, any website on my phone here-- and I'm using Verizon as my carrier-- even though my browser might not be sending this HTTP header, Verizon, as soon as the signal reaches their cellphone tower somewhere, has been for some time injecting this header into all of our HTTP traffic. Why do they do this? Presumably for tracking reasons, for advertising reasons. 

But the moronic design decision here is that an HTTP header, as you guys know from pset6, is received by any web server that you're requesting traffic of. So all this time, if you've been visiting Facebook or Gmail or any website that doesn't use SSL all the time-- and actually, those two thankfully now do-- but other websites that don't use SSL all the time, Verizon has essentially been planting, forcibly, a hand stamp on all of our hands that even we don't see, but rather, the end websites do. And so it hasn't been that hard for anyone on the internet running a web server to realize, ooh, this is David, or, ooh, this is Davin, even if we're rigorous about clearing our cookies, because it's not coming from us. It's coming from the carrier. 

They do a lookup on your phone number and then say, oh, this is David. Let me inject a unique identifier so that our advertisers or whoever can keep track of this. So this is actually very, very, very bad and horrifying. And I would encourage you to take a look, for instance, at this URL, which I should disclaim I actually tried this this morning. I wrote a little script, put it at this URL, visited it with my own Verizon cellphone after turning Wi-Fi off. So you have to turn Wi-Fi off so that you're using 3G or LTE or the like. And then, if you visit this URL, all this script does for you guys, if you'd like to play, is it spits out what HTTP headers your phone is sending to our server. And I actually, in fairness, did not see this this morning, which makes me think either the local cellphone tower I was connected to or whatnot is not doing it, or they've backed off of doing this temporarily. But for more information, to head to this URL here. 

And now to this-- this comic might make sense. No? OK. All right. That died. All right. 

So let's take a look at a couple of more attacks, if only to raise awareness of and then offer a couple potential solutions so that you're all the more mindful. This one we talked about the other day, but didn't give a name to it. It's a cross-site request forgery, which is an excessively fancy way of saying you trick a user into clicking on a URL like this, which tricks them into some behavior that they didn't intend. 

In this case, this seems to be trying to trick me into selling my shares of Google. And this will succeed if I, the programmer of pset7, have not done what? Or rather, more generally, in what cases am I vulnerable to an attack if someone tricks another user into clicking a URL like this? Yeah? 

AUDIENCE: You don't distinguish between GET and POST. 

DAVID J. MALAN: Good. If we don't distinguish between GET and POST, and indeed, if we allow GET for selling things, we're inviting this kind of attack. But we could still mitigate it somewhat. And I commented, I think, last week that Amazon at least tries to mitigate this with a technique that's pretty straightforward. What would a smart thing to do be on your server, rather than just blindly selling whatever symbol the user types in? AUDIENCE: Confirmation of sorts? DAVID J. MALAN: A confirmation screen, something involving human interaction so that I am forced to make the judgment call, even if I've naively clicked a link that looks like this and led me to the cell screen, at least asked me to confirm or deny. But not an uncommon attack, especially in so-called phishing or spam-like attacks. 

Now, this one's a little more subtle. This is a cross-site scripting attack. And this happens if your website is not using the equivalent of htmlspecialchars. And it's taking user input and just blindly injecting it into a web page, as with print or echo, with-- again-- out calling something like htmlspecialchars. 

So suppose the website in question is vulnerable.com. And suppose it accepts a parameter called q. Look at what might happen if I actually, a bad guy, type in or trick a user into visiting a URL that looks like this-- q= open script tag, closed script tag. And again, I'm assuming that vulnerable.com is not going to turn dangerous characters like open brackets into HTML entities, the ampersand, L-T, semicolon thing that you might have seen before. 

But what is the script or JavaScript code I'm trying to trick a user into executing? Well, document.location refers to my browser's current address. So if I do document.location=, this allows me to redirect the user in JavaScript to another website. It's like our PHP function redirect, but done in JavaScript. 

Where am I trying to send the user? Well, apparently, badguy.com/log.php, which is some script, apparently, the bad guy wrote, that takes a parameter called cookie. 

And notice, what do I appear to be concatenating onto the end of that equal sign? Well, something that says document.cookie. We haven't talked about this. But it turns out, in JavaScript, just like in PHP, you can access all of the cookies that your browser is actually using. 

So the effect of this one line of code, if a user is tricked into clicking on this link and the website vulnerable.com does not escape it with htmlspecialchars, is that you have just effectively uploaded to log.php all of your cookies. And that's not always that problematic, except if one of those cookies is your session ID, your so-called hand stamp, which means badguy.com can make his or her own HTTP requests, sending that same hand stamp, that same cookie header, and log into whatever website you were visiting, which in this case is vulnerable.com. It's a cross-site scripting attack in the sense that you're sort of tricking one site into telling another website about some information it should not, in fact, have access to. 

All right, ready for one other worrisome detail? All right, the world is a scary place, legitimately so. Here's a simple JavaScript example that's in today's source code called geolocation 0 and 1. And there's a couple walkthroughs online for this. 

And it does the following if I open this web page in Chrome. It first does nothing. OK, we'll try this again. Oh. No, it should do something. OK, stand by. 

Let's try this once more. [INAUDIBLE] Ah, OK, not sure why the-- oh, the appliance probably lost internet access for some reason. All right, so happens to me, too. 

All right, so notice what's going on here. This cryptic-looking URL, which is just one of CS50 server, wants to use my computer's location, like physically it means. And if, indeed, I click on Allow, let's see what happens. Apparently, this is my current latitude and longitudinal coordinates down to a pretty darn good resolution. 

So how did I get at this? How does this website, like CS50 server, know physically where in the world I am, let alone with that precision. Well, turns out-- let's just look at the page's source-- that in here is a bunch of HTML at the bottom that first has this-- body onload="geolocate"-- just a function I wrote. 

And I'm saying, on loading the page, call geolocate. And then there's nothing in the body, because in the head of the page, notice what I have here. Here's my geolocate function. And this is just some error checking-- if the type of navigator.geolocation is not undefined. So JavaScript has this mechanism where you can say, what is the type of this variable? And if it's not undefined-- that means it is some value-- I'm going to call navigator.geolocation.getCurrentPosition and then callback. 

What's this? So in general, what is a callback, just to be clear? You might have encountered this already in pset8. Callback's a generic term for doing what? Feels like just me today. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly, a function that should be called only when we have data. This call to the browser, get my current position, might take one millisecond, it might take a minute. What this means is we are telling the get getCurrentPosition method, call this callback function, which I literally named callback for simplicity, which apparently is this one here. 

And the way getCurrentPosition works, simply by reading the documentation for some JavaScript code online, is that it calls that so-called callback function, passes it into it a JavaScript object, inside of which is .coords.latitude and .coords.longitude, which is exactly how, then, when I reloaded this page, I was able to see my location here. Now, at least there was a defense here. Before I visited this page, when it actually worked, what was I at least prompted for? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Yes or no-- do you want to allow or deny this? But think, too, about the habits you guys have probably adopted, both on your phones and your browsers. Many of us, myself included, are probably pretty predisposed these days-- you see a pop-up, just Enter, OK, Approve, Allow. And increasingly, you can put yourself at risk for those reasons. 

So in fact, there was this wonderful bug a few years ago-- or lack of feature-- that iTunes had a few years ago, whereby, if you had a cell phone, and it was an iPhone, and you left your home and therefore traveled around the world or the neighborhood, all this time, your phone was logging where you are via GPS. And this is actually disclosed, and people kind of expect this now. Your phone knows where you are. But the problem was that, when you were backing up your phone to iTunes-- this was before the days of iCloud, which is for better or for worse-- the data was being stored in iTunes, completely unencrypted. So if you have a family or roommates or a malicious neighbor who's curious about literally every GPS coordinate you have ever been to, he or she could just sit down at iTunes, run some software that was freely available, and produce maps like this. 

In fact, this is what I produced of my own phone. I plugged it in. And it looks like, based on the blue dots there, that's where most of the GPS coordinates were logged by iTunes that I was in the Northeast there. But I apparently traveled around a bit, even within Massachusetts. 

So that's Boston Harbor there on the right. That's kind of Cambridge and Boston, where it's darkest. And occasionally, I would run errands to a larger geography. 

But iTunes, for years, had, as best I could tell, all of this data on me. You could tell that, that year, I was actually traveling a lot between Boston and New York, going back and forth and back and forth. And indeed, this is me on Amtrak, back and forth, back and forth, quite a bit. All of that was being logged and stored encrypted on my computer for anyone who might have access to my computer. 

This was worrisome. I did not know why I was in Pennsylvania or why my phone was in Pennsylvania, apparently fairly densely. And then, finally, I looked at my Gcal, and, oh, I visited CMU, Carnegie Mellon, at the time. And phew, that kind of explained that blip. And then, if you zoom out further, you can see I visited San Francisco one or more times then, and I even had a layover in what I think is Vegas, down there. So all of this-- just a layover, at the airport. 

AUDIENCE: [LAUGHTER] 

So this is only to say that these problems, honestly, are omnipresent. And it only feels increasingly like there's more and more of this being disclosed, which is probably a good thing. I daresay, the world isn't getting worse at writing software. We're getting better, hopefully, at noticing how bad certain software is that we're using. And thankfully, some companies are beginning to be held accountable for this. 

But what kinds of defenses can you have in mind? So besides password managers, like 1Password and LastPass and others, besides just changing your passwords and coming up with random ones using software like that, you can also try as best you can to encrypt all of your traffic to at least narrow the zone of a threat. So for instance, as Harvard affiliates, you can all go to vpn.harvard.edu and log in with your Harvard ID and PIN. And this will establish a secure connection between you and Harvard. 

Now, that doesn't necessarily protect you against any threats that are between Harvard and Facebook or Harvard and Gmail. But if you're sitting in an airport or you're sitting in Starbucks or you're sitting at a friend's place, and you don't really trust them or their configuration of their home router, at least you can establish a secure connection to an entity like this place that's probably a little better secured than something like a Starbucks or the like. And what this does is it establishes, again, encryption between you and the endpoint. 

Even fancier are things like this. So some of you might already be familiar with Tor, which is this sort of anonymization network, whereby lots of people, if they run this software, route subsequently their internet traffic through each other. So the shortest point is no longer between A and B. But it might be all over the place so that you're essentially covering one's tracks and leaving less of a record as to where your HTTP traffic came from, because it's going through a whole bunch of other people's laptops or desktops, for better or for worse. 

But even this is not a surefire thing. Some of you might recall last year the bomb scare that was called in. And it was traced ultimately to a user who had used this network here. And the catch there , as I recall, is, if there aren't that many other people using a software like this or using this port and protocol, it's not that hard for a network to even figure out who, with some probability, was in fact anonymizing his or her traffic. 

And I don't know if those were the actual particulars in question. But surely, realize that none of these are surefire solutions, as well. And the goal here today is to least get you thinking about these things and coming up with techniques for defending yourself against them. Any questions on all of the threats that await you out there, and in here? Yeah? AUDIENCE: How secure do we expect the average [? website to be, ?] like the average CS50 project? 

DAVID J. MALAN: The average CS50 project? It is always proved every year that some CS50 final projects are not particularly secure. Usually, it's some roommate or hallmate that figures this out by sending requests to your project. 

Short answer-- how many websites are secure? I'm picking on today anomalies. Like it was just happenstance that I realized that this website I've been ordering these frankly delicious arrangements from-- and I'm not sure I'll stop using their website; I might just change my password more regularly-- it's not clear just how vulnerable all these various-- this is chocolate-covered actually. The short answer, I can't answer that effectively, other than to say it was not that hard for me to find some of these examples just for the sake of discussion in lecture. And just keeping an eye on Google News and other resources will bring all the more of these kinds of things to light. 

All right, let's conclude with this prequel that CS50's team has prepared for you in anticipation of the CS50 Hackathon. And on your way out in a moment, fruit will be served. [VIDEO PLAYBACK] [MUSIC FERGIE, Q TIP, AND GOONROCK, "A LITTLE PARTY NEVER KILLED NOBODY (ALL WE GOT)"] 

-[SNORING] [END VIDEO PLAYBACK] DAVID J. MALAN: That's it for CS50. We'll see you on Wednesday. [MUSIC - SKRILLEX, "IMMA' TRY IT OUT"] DAVID J. MALAN: This is CS50, and this is the start of week 10. You may recall that we've shown on the screen a 3D printer, which is this device that takes spools of plastic and then extrudes it by heating it up and melting it so that we can then form Chang's army of elephants, for instance. 

So at Leverett House, though, recently, I was chatting with one of your classmates and a friend of Chang's named Michelle, who actually interned at this other company this past year that has a different technique for actually creating three-dimensional objects, like this tiny little elephant here. In particular, the way this works is that it's an example of something called stereolithography, whereby there's this basin of resin or liquid, and then a laser strikes that liquid, and gradually, the device lifts and lifts and lifts the thing that you're printing, like an elephant, as that liquid becomes solid. And the result, actually, is something that's much more robust than some of the plastic giveaways some of you might have had. 

And what Chang kindly did for us here was did a time-lapse using photographs over the course of an hour or more, probably, to produce this guy here. Would someone who's never come up before like to come hit Start on this video? Let me go with, how about there. Come on up. All right. And you are? LUKE: My name's Luke [INAUDIBLE]. DAVID J. MALAN: Hi, Luke. Nice to meet you. 

LUKE: Nice to meet you. AUDIENCE: He's running for UC. 

DAVID J. MALAN: I know, we're trying not to promote. All right, so Luke, all you have to do here in CS50 is hit the space bar to print this elephant. [VIDEO PLAYBACK] -[MACHINE WHIRRING] -[CRASH] -[BOOM] -[CRASH] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly what it's like to 3D print. And here is your elephant. Thanks for volunteering. All right. So again, per the specification for the final project, this hardware that's available to you guys is, for some reason, your project has some intersection of software and hardware, realize that these are now resources. 

I wanted to take one moment to touch upon a Crimson article that came out late last night, which was to announce that this fellow here, David Johnson, who's been the senior preceptor for Ec 10 for quite some time, is leaving Harvard at the end of the academic year. And I just wanted to take a moment, honestly, to thank David in front of CS50. He's been a mentor of sorts to us over the years. 

And I feel like we, CS50, have rather grown up with Ec 10 in here, since they are right before us. And he and the whole team in Ec 10 has been wonderfully gracious, frankly, as we lug in all of our equipment each and every week, and years ago, provided a great deal of counsel as we were curious as to how they operate Ec 10. So our thanks and admiration to David Johnson. 

[APPLAUSE] 

Now, unrelatedly, so the end is indeed near. We are here in week 10. And we only have just a couple of formal weeks here in class left, followed by a couple of events. So to give you a sense of what's on the horizon, here we are today. 

This Wednesday, recall, we'll have a guest lecture by none other than Microsoft's own Steve Ballmer. If you've not yet gone to cs50.harvard.edu/register, do so, since space will be limited. And they will be checking IDs at the door this day. If you weren't here last week, I thought I'd tease you with a different look at Steve and the excitement that awaits us on Wednesday. 

[VIDEO PLAYBACK] 

-Passion. 

-We're going to be hardcore-- hardcore. 

-Innovator. 

-Bill said, you don't get it. We're going to put a computer on every desk and in every home, which became the motto for the company. I swear, Bill invented it that night to really give me some of the vision of why I should say yes. I've never looked back, really, after that. 

-Fresh out of college, he joined a fledgling startup and helped it grow into one of America's most successful businesses ever. The life of and business lessons learned along the way let him back to his childhood passion and love. And those experiences have prepared him for his next challenge in life. 

-Nothing gets in our way-- boom! Keep coming hardcore! Go Clippers! 

-This is Steve Ballmer, "In My Own Words." [END VIDEO PLAYBACK] DAVID J. MALAN: --this Wednesday to CS50. Head again to this URL here. As for what else is on the horizon, next week, no lecture on Monday. But we will be following that by quiz one on Wednesday. Go to CS50's homepage for details on people, places, and times for all of the various proctoring logistics and the like, as well as about review sessions that are forthcoming. And then, lastly, on Monday, the day before the week of Thanksgiving break, realize it will be our final lecture. We will serve cake and a great deal of excitement, we hope. 

Now, a couple of other updates. Keep in mind that the status report, which is really just meant to be a casual interaction with your TF to proudly state just how far along with your final project you are, or at least as a sanity check that you should be approaching that point shortly thereafter. The Hackathon then follows that. Realize the Hackathon is not an opportunity to start your final project, but is meant to be an opportunity to be in the middle of or toward the end of your final project, with the implementation due a few days later, followed by the CS50 fair. 

Now, CS50's production team, a couple years ago, put together a teaser for the CS50 fair that we thought we'd show you today, because they've been hard at work on a prequel for that, a new video that we'll conclude today with. But here's what awaits you for this year's CS50 fair. [VIDEO PLAYBACK] -[CELL PHONE RINGING] [MUSIC "THEME FROM MISSION: IMPOSSIBLE"] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly how we close final project submissions. A couple of now teasers-- if you'd like to join Nick here for lunch, as usual, this Friday, head to this URL here. Moreover, if you would like to join Nick or this Nick or this Allison or any members of CS50's team, do realize that, shortly after term's end, CS50 will already be recruiting for next year's team, for CAs, TFs, designers, producers, researchers, and other positions that here operate CS50 both in front of and behind the scenes. So if this might be of interest to you, head to this URL here. And students more comfortable, less comfortable, and somewhere in between alike are all welcome and encouraged to apply. 

So it was perfect timing that, no joke, this morning, when I woke up, I had this here spam in my inbox. It actually slipped through Gmail's spam filter somehow and ended up in my actual inbox. And it says, "Dear mailbox user, you're currently upgraded to 4 gigabytes of space. Please log into your account in order to validate E-space." 

And then there's this nice blue enticing link there to click on for faculty and staff, which then led me to a wonderfully legitimate page, which asked me to give them my name and email address and, of course, password to validate who I am and so forth. But of course, as is always the case, you arrive at this landing page, and of course, there's at least one typo, which seems to be the nail in the coffin of any of these scams. And we'll post, perhaps, some other links to these kinds of screen shots in the future. But hopefully, most people in this room have not clicked-- or even if you've clicked such links as this, you haven't gone so far as to fill out those forms and so forth. In fact, it's OK if you have. We'll try to fix that today, because, indeed, today's conversation is about security. 

And indeed, one of the goals of CS50 is not so much to teach you CE or PHP or JavaScript or SQL or any of these underlying implementation details. But it's to empower you as humans to just make smarter decisions as it relates to technology down the road so that, whether you're an engineer or humanist or scientist or any other role, you are making informed decisions about your own computing usage, or if you're in a decision-making position, in politics, in particular, you're making much, much better decisions than a lot of humans today have been. And we'll do this by way of a few examples. 

First, I was rather surprised recently to discover the following. So passwords, of course, are what most of us use to protect our data-- email, chat, and all kinds of resources like that. And just by an awkward-- not show of hands, but embarrassed looks of shame, how many of you use the same password in a lot of different websites? 

Oh, OK, so we'll do the hands. OK, so a lot of you do. Anyone who does this, just why? And what? Yeah? AUDIENCE: It's easy to remember, because you don't have to remember [INAUDIBLE]. DAVID J. MALAN: Yeah, it's easy to remember. It's a perfectly reasonable, rational behavior, even though the risk you're putting yourself at in these cases is just one or more of those websites is vulnerable to hacking or to insecure or your password's just so darn guessable, anyone can figure it out. Not only is one account compromised, but in theory, any accounts you have on the internet. So I know I might say today, don't use the same password everywhere, but that's a lot easier said than done. But there are techniques for mitigating that particular concern. 

Now, I happen, for instance, to use a program called 1Password. Another popular one is called LastPass. And a bunch of CS50 staff use one or more of these kinds of tools. And long story short, one takeaway for today should be, yes, you might have the same password everywhere, but it's very easy to no longer do that. For instance, these days, I know maybe one of my dozens or hundreds of passwords. All of my other passwords are pseudo-randomly generated by one of these programs here. And in a nutshell, and even though most of these programs tend to come with a bit of a cost, you would install a program like this, you would then store all of your usernames and passwords inside of this program on your own Mac or PC or whatnot, and then it would be encrypted on your computer with what's hopefully a particularly long password. So I have a whole bunch of passwords for individual websites, and then I have a really long password that I use to unlock all of those other passwords. And what's nice about software like this is that, when you visit a website that's asking for your username and password, these days, I don't type in my username and password, because, again, I don't even know what most of my passwords are. I instead hit a keyboard shortcut, the result of which is to trigger this software to prompt me for my master password. I then type that one big password in, and then the browser automatically fills in what my password is. So truly, if you take nothing else away from today in terms of passwords, these are software that are worth downloading or investing in so that you can at least break that particular habit. And if you're the type that's using Post-It notes or the like-- and odds are at least one of you is-- that habit, too, suffice it to say, should be broken. 

Now, I happened to discover, as a result of using the software, the following. I was ordering an Edible Arrangement, this basket of fruit, recently. And I hit my special keyboard shortcut to log in to the website. And the software triggered a pop-up that said, are you sure you want me to automatically submit this username and password? Because the connection is insecure. 

The connection's not using HTTPS, for secure, using that protocol known as SSL, Secure Sockets Layer. And indeed, if you look at the top left of this website, it's just www.ediblearrangements.com, no HTTPS, which isn't so good. 

Now, I was curious-- maybe this is just a bug in the software. Surely, some website like this that a lot of us know of is at least using encryption or HTTPS URLs to log you in. So I got a little curious this morning. And I got out my CS50 skills, I opened up Chrome Inspector. It's not even much of a skill. It's just hit the right keyboard shortcut to open this up. And here's a big window of Chrome's Inspector. 

But what was actually a little tragic and ridiculous were these two lines here. Up at the top, notice the URL to which my username and password were submitted. Let me zoom in. It was this here. And all of that is sort of uninteresting, except for the thing all the way at the left, which starts with http://. And so then, OK, maybe they're just sending my username, which is not such a big deal. Maybe my password gets sent later. That would be kind of an interesting design decision. 

But nope. If you then look at the request payload, the username and password I sent-- and I mocked these up for the slide-- were actually sent in the clear. So you go to this particular website and order an Edible Arrangement like this, and indeed, apparently, for all this time I've been ordering from them, your username and password is going across in the clear. So honestly, this is completely unacceptable. And it's so trivial to avoid things like this as the designer of a website and as the programmer of a website. 

But the takeaway here for us as users of websites is just to appreciate that all it takes is for one stupid design decision, unjustifiable design decision, so that now, if you know my password is "crimson" on this website, you've probably just got into a whole bunch of other websites that I now have. And there's not much of a defense against that other than what Chang did this morning. He went to Edible Arrangements, which is located down the street in Cambridge, and physically bought this for us. That was much more secure than using the website in this case. 

But the detail to keep an eye out for is actually what's in the browser up top there. But even that can be a little deceptive. So another interesting example and way of defending against this-- and actually, let's do that first-- the way of defending against this is a technique that security people would call two-factor authentication. 

Does anyone know what the solution to problems like this means? What is two-factor authentication? Or put another way, how many of you are using it? OK, so a couple of shy people. But yeah. I saw your hand go up. What is two-factor authentication? 

AUDIENCE: Basically, in addition to typing in your password, you also have a secondary [INAUDIBLE] sent via text message to your phone at the [INAUDIBLE]. DAVID J. MALAN: Exactly. In addition to some primary form of authentication, like a password, you're asked for a secondary factor, which is typically something you have physically on you, though it can be something else altogether. And that thing is typically a cellphone these days to which you get sent a temporary text message that says "your temporary pass code is 12345." 

So in addition to my password "crimson," I also have to type in whatever the website has texted me. Or if you have this with a bank or an investment account, you sometimes have these little dongles that actually have a pseudo-random number generator built into them, but both the device and the bank know what your initial seed is so that they know, even as the little code on your little key fob marches ahead every minute or two, changing values, so does that value change on the bank's server so that they can similarly authenticate you, not only with your password, but with that temporary code. Now, you can actually do this in Google. And frankly, this is a good habit to get into, especially if you're using Gmail all the time on a browser. If you go to this URL here, which is in the slides online for today, and then click on 2-Step Verification, same actual thing there. You'll be prompted to give them your cell phone number. And then, any time you log into Gmail, you'll be not only asked for your password, but also for a little code that gets sent to your phone temporarily. And so long as you have cookies enabled, and so long as you don't explicitly log out, you'll only have to do that once in awhile, like when you sit down at a new computer. 

And the upside here, too, is, if you sit down at some internet cafe style computer or just a friend's computer, even if that friend maliciously or unknowingly has some keyboard logger installed on his or her computer, such that everything you type is being logged, at least that second factor, that temporary code, is ephemeral. So he or she or whoever's compromised the computer can't log into you subsequently, even if everything else was vulnerable or even unencrypted altogether. Facebook has this, too, with that URL here, where you can click on Login Approvals. So here, too, if you don't want friends to poke people, you don't want to be poking on Facebook or posting status updates for you, two-factor authentication here is probably a good thing. And then there's this other technique altogether, just auditing, which is even a good thing for us humans, if two-factor proves annoying, which, admittedly, it can, or it's just not available on some website, minimally keeping an eye on if and when you're logging into sites, if they allow you, is a good technique, too. So Facebook also gives you this login notifications feature, whereby anytime Facebook realizes, hm, David has logged in from some computer or phone that we've never seen before from an IP address that looks unfamiliar, they'll at least send you an email to whatever email address you have on file, saying, does this look suspicious? If so, change your password immediately. And so there, too, just auditing behavior even after you've been compromised, can at least narrow the window during which you are vulnerable. 

All right, any questions on that stuff thus far? Today is the day to get all of your paranoia confirmed or denied. That's mostly confirmed, sadly. Yeah? 

AUDIENCE: [INAUDIBLE] phone, what if your phone breaks, and then it's always difficult to verify-- 

DAVID J. MALAN: True. 

AUDIENCE: Or if you're in a different country, and they don't let you log in because [INAUDIBLE]. DAVID J. MALAN: Absolutely. And so these are the additional costs that you incur. There's always this theme of a trade-off, after all. And then, if you lose your phone, if it breaks, if you're abroad, or you just don't have a signal, like a 3G or LTE signal, you might not actually be able to authenticate. 

So again, these two are trade-offs. And sometimes, it can create a lot of work for you as a result. But it really depends, then, on what the expected price to you is of something being compromised altogether. 

So SSL, then, is this technique that we all generally take for granted or assume is there, even though that's clearly not the case. And you can still mislead people, though, even with this. So here's an example of a bank. 

This is Bank of America. There's a whole bunch of these in Harvard Square and beyond. And notice that, at the very top of the screen, there's an, indeed, HTTPS. And it's even green and highlighted for us to indicate that this is indeed a legitimately secure website, or so we've been trained to believe. 

Now, besides that, though, notice that, if we zoom in, there's this thing here, where you're prompted to log in. What does this padlock mean right there, next to my username prompt? This is pretty common on websites, too. What does this padlock mean? You seem like you know. 

AUDIENCE: It doesn't mean anything. 

DAVID J. MALAN: It doesn't mean anything. It means that Bank of America knows how to write HTML with image tags, right? It truly means nothing, because even we, using the first day of our look at HTML, can code up a page with a red background and an image, like a GIF or whatnot, that happens to look like a padlock. And yet, this is super common in websites, because we've been trained to assume that, oh, padlock means secure, when it really just means you know HTML. 

For instance, back in the day, I could have just put this on my website, claiming it's secure, and asking, effectively, for people's usernames and passwords. So looking in the URL is at least a better clue, because that's built into Chrome or whatever browser you're using. But even then, sometimes things can go wrong. And in fact, you might not always see HTTPS, let alone in green. 

Have any of you ever seen a screen like this? You might have, actually, earlier in October, when I forgot to pay for our SSL certificate, as it's called, and we were looking like this for an hour or two. So you've probably seen things like this, with a strike-through, like a red line, through the protocol in the URL or some kind of screen that's at least admonishing you for trying to proceed further. And Google here is inviting you to go back to safety. 

Now, in this case, this just meant that the SSL certificate that we were using, the big, mathematically useful numbers that are associated with CS50's server, were no longer valid. And in fact, we can simulate this, as you can on your laptop. If I go into Chrome here, and let's go to facebook.com, and it looks like this is secure. But let me go ahead now and click on the padlock here. 

And let me go to Connection, Certificate Information. And indeed, what you'll see here is a bunch of lower-level details about who facebook.com really is. It seems that they have paid money to a company called maybe DigiCert High Assurance that has promised to tell the rest of the world that, if a browser ever sees a certificate-- you can think of it literally as a certificate that looks like that cheesy thing at top left-- then facebook.com is who they say they are, because all this time, when you visit a website, like cs50.harvard.edu or facebook.com or gmail.com that use HTTPS URLs, behind the scenes, there's this sort of transaction happening automatically for you, whereby facebook.com, in this case, is sending to your browser its so-called SSL certificate, or rather, its public key, and then your browser is using that public key to subsequently send encrypted traffic to and from it. 

But there's this whole hierarchy in the world of companies that you pay money to who will then testify, in a digital sense, that you are indeed facebook.com or your server is indeed cs50.harvard.edu. And built into browsers, like Chrome and IE and Firefox, is a list of all of those so-called certificate authorities that are authorized by Microsoft and Google and Mozilla to confirm or deny that facebook.com is who it says it is. But the catch is that these things do expire. In fact, Facebook's looks like it expires next October, in 2015. 

So we can actually simulate this if I go in my Mac to my System Preferences, and I go into Date and Time, and I go into Date and Time here, and I unlock this here-- thankfully, we didn't reveal a password this time-- and now I go down to uncheck this. And let's actually-- oops, that's not as interesting as doing this. We are literally in the future now, which means this is what 2020 is like. If I now reload the page-- let's do it in Ingognito mode-- if I reload the page, there we go. 

So now, my computer thinks it's 2020, but my browser knows that this certificate from Facebook expires, of course, in 2015. So it's giving me this red message. Now, thankfully, browsers like Chrome have actually made it pretty hard to proceed nonetheless. They indeed want me to go back to safety. 

If I click here on Advance, it's going to tell me some more details. And if I really want to proceed, they'll let me go to facebook.com, which is, again, unsafe, at which point I'll see Facebook's homepage, like this. But then other things seem to be breaking. What's probably breaking at this point? AUDIENCE: JavaScript. DAVID J. MALAN: Like the JavaScripts and/or CSS files are similarly encountering that error. So this is just a bad situation overall. But the point here is that at least Facebook does indeed have SSL enabled for their servers, as many websites, do, but not necessarily all. 

But that's not alone the takeaway here. Turns out that even SSL has been demonstrated to be insecure in some way. So I'm sort of hinting that SSL, good. Look for HTTPS URLs, and life is good, because all of your HTTP traffic and headers and content is encrypted. 

No one can intercept it in the middle, except for a so-called man in the middle. This is a general technique in the world of security known as a man-in-the-middle attack. Suppose that you're this little laptop over here on the left, and suppose you're trying to visit a server over there on the right, like facebook.com. 

But suppose that, in between you and Facebook, is a whole bunch of other servers and equipment, like switches and routers, DNS servers, DHCP servers, none of which we control. It might be controlled by Starbucks or Harvard or Comcast or the like. Well, suppose that someone maliciously, on your network, in between you and Facebook, is able to tell you that, you know what, the IP address of Facebook is not what you think it is. It's this IP instead. 

And so your browser's tricked into requesting traffic from another computer altogether. Well, suppose that computer simply looks at all of the traffic you're requesting from Facebook and all of the web pages that you're requesting from Facebook. And any time it sees in your traffic a URL that starts with HTTPS, it dynamically, on the fly, rewrites it as HTTP. And any time it sees a location header, location colon, like we use to redirect the user, those, too, can be changed by this man in the middle from HTTPS to HTTP. 

So even though you yourself might think you're at the real Facebook, it is not that hard for an adversary with physical access to your network to simply return pages to you that look like Gmail, that look like Facebook, and indeed the URL is identical, because they're pretending to have that same host name because of some exploitation of DNS or some other system like that. And the result, then, is that we humans might only realize that, OK, this looks like Gmail or at least the older version, as is this slide from an older presentation. But it looks like this-- http://www.google.com. 

So here, too, the reality is that how many of you, when you go to Facebook or Gmail or any website and you know a little something about SSL, how many of you physically type https:// and then the website name, Enter. Most of us just type, like, CS50, hit Enter, or F-A for Facebook and hit Enter, and let it auto-complete. But behind the scenes, if you watch your HTTP traffic, there's probably a whole bunch of those location headers that are sending you from Facebook to www.facebook.com to https://www.facebook.com. 

So that's one or more HTTP transactions where your information is completely sent in the clear, no encryption whatsoever. Now, that might not be such a big deal if all you're trying to do is access the homepage, you're not sending your username and password. But what is it underneath the hood, especially for PHP-based websites that's also being sent back and forth when you visit some webpage if that website uses, say, PHP and implements functionality like pset7? What was being sent back and forth in your HTTP headers that gave you access to this pretty useful super global in PHP? 

AUDIENCE: Cookies. 

DAVID J. MALAN: Cookies, specifically the PHP sess ID cookie. So recall, if we go to, say, cs50.harvard.edu again, but this time, let's open up the Network tab, and now, up here, let's literally just go to http://cs50.harvard.edu and then hit Enter. And then look at the screen down here. Notice that we indeed got back a 301 moved permanently message, which means that there's a location header here, which is now redirecting me to HTTPS. 

But the catch is that, if I already had a cookie stamped on my hand virtually, as we've discussed before, and I the human sort of unknowingly just visit the insecure version, and my browser takes it upon itself to show that hand stamp for the first request, which is via HTTP, any man in the middle, any adversary in the middle, can theoretically just see those HTTP headers, just like we're looking at them here. It's only once you're talking to an HTTPS URL does that hand stamp itself get encrypted, a la Caesar or Vigenere, but with a fancier algorithm altogether. So here, too, even if websites use HTTPS, we humans have been conditioned, thanks to auto-complete and other techniques, to not even think about the potential implications. Now, there are ways around this. For instance, many websites can be configured so that, once you have this hand stamp, you can tell the browser, this hand stamp is only for SSL connections. The browser should not present it to me unless it's over SSL. But many websites don't bother with that. And many websites apparently don't even bother with SSL at all. 

So for more on that, there's actually even more dirt in this presentation that a fellow gave at a so-called black hat conference a couple of years ago, where there's even other malicious tricks people have used. You might recall this notion of a favicon, which is like a little logo that's often in the browser's window. Well, what's been common among bad guys is to make fab icons that look like what? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Say again? AUDIENCE: The websites. DAVID J. MALAN: Not a website. So favicon, tiny little icon. What would be the most malicious, manipulative thing you could make your website's default icon look like? AUDIENCE: A green lock. DAVID J. MALAN: What's that? AUDIENCE: A little green lock. DAVID J. MALAN: Like a green lock, exactly. So you can have this aesthetic of a little green padlock, hinting to the world, oh, we're secure, when, again, all it means is that you know some HTML. So session hijacking refers to exactly that. If you have someone who's kind of sniffing the airwaves in this room here or has physical access to a network and can see your cookies, he or she can grab that PHP sess ID cookie. And then, if they're savvy enough to know how to send that cookie as their own hand stamp just by copying that value and sending the HTTP headers, someone could very easily log into any of the Facebook accounts or Gmail accounts or Twitter accounts that are here, open in the room, if you're not using SSL and if the website is not using SSL correctly. 

So let's transition to another one. So another true story. And this just broke in the news a week or two ago. Verizon has been doing a very evil thing, and as best people can tell, since at least 2012, whereby, when you access websites via a Verizon cellphone, whatever manufacturer it is, they have been presumptuously, as the story goes, injecting into all of your HTTP traffic their own HTTP header. And that header looks like this-- X-UIDH. UID is like a unique identifier or user ID. And X just means this is a custom header that's not standard. 

But what this means is that, if I pull up, for instance, any website on my phone here-- and I'm using Verizon as my carrier-- even though my browser might not be sending this HTTP header, Verizon, as soon as the signal reaches their cellphone tower somewhere, has been for some time injecting this header into all of our HTTP traffic. Why do they do this? Presumably for tracking reasons, for advertising reasons. 

But the moronic design decision here is that an HTTP header, as you guys know from pset6, is received by any web server that you're requesting traffic of. So all this time, if you've been visiting Facebook or Gmail or any website that doesn't use SSL all the time-- and actually, those two thankfully now do-- but other websites that don't use SSL all the time, Verizon has essentially been planting, forcibly, a hand stamp on all of our hands that even we don't see, but rather, the end websites do. And so it hasn't been that hard for anyone on the internet running a web server to realize, ooh, this is David, or, ooh, this is Davin, even if we're rigorous about clearing our cookies, because it's not coming from us. It's coming from the carrier. 

They do a lookup on your phone number and then say, oh, this is David. Let me inject a unique identifier so that our advertisers or whoever can keep track of this. So this is actually very, very, very bad and horrifying. And I would encourage you to take a look, for instance, at this URL, which I should disclaim I actually tried this this morning. I wrote a little script, put it at this URL, visited it with my own Verizon cellphone after turning Wi-Fi off. So you have to turn Wi-Fi off so that you're using 3G or LTE or the like. And then, if you visit this URL, all this script does for you guys, if you'd like to play, is it spits out what HTTP headers your phone is sending to our server. And I actually, in fairness, did not see this this morning, which makes me think either the local cellphone tower I was connected to or whatnot is not doing it, or they've backed off of doing this temporarily. But for more information, to head to this URL here. 

And now to this-- this comic might make sense. No? OK. All right. That died. All right. 

So let's take a look at a couple of more attacks, if only to raise awareness of and then offer a couple potential solutions so that you're all the more mindful. This one we talked about the other day, but didn't give a name to it. It's a cross-site request forgery, which is an excessively fancy way of saying you trick a user into clicking on a URL like this, which tricks them into some behavior that they didn't intend. 

In this case, this seems to be trying to trick me into selling my shares of Google. And this will succeed if I, the programmer of pset7, have not done what? Or rather, more generally, in what cases am I vulnerable to an attack if someone tricks another user into clicking a URL like this? Yeah? 

AUDIENCE: You don't distinguish between GET and POST. 

DAVID J. MALAN: Good. If we don't distinguish between GET and POST, and indeed, if we allow GET for selling things, we're inviting this kind of attack. But we could still mitigate it somewhat. And I commented, I think, last week that Amazon at least tries to mitigate this with a technique that's pretty straightforward. What would a smart thing to do be on your server, rather than just blindly selling whatever symbol the user types in? AUDIENCE: Confirmation of sorts? DAVID J. MALAN: A confirmation screen, something involving human interaction so that I am forced to make the judgment call, even if I've naively clicked a link that looks like this and led me to the cell screen, at least asked me to confirm or deny. But not an uncommon attack, especially in so-called phishing or spam-like attacks. 

Now, this one's a little more subtle. This is a cross-site scripting attack. And this happens if your website is not using the equivalent of htmlspecialchars. And it's taking user input and just blindly injecting it into a web page, as with print or echo, with-- again-- out calling something like htmlspecialchars. 

So suppose the website in question is vulnerable.com. And suppose it accepts a parameter called q. Look at what might happen if I actually, a bad guy, type in or trick a user into visiting a URL that looks like this-- q= open script tag, closed script tag. And again, I'm assuming that vulnerable.com is not going to turn dangerous characters like open brackets into HTML entities, the ampersand, L-T, semicolon thing that you might have seen before. 

But what is the script or JavaScript code I'm trying to trick a user into executing? Well, document.location refers to my browser's current address. So if I do document.location=, this allows me to redirect the user in JavaScript to another website. It's like our PHP function redirect, but done in JavaScript. 

Where am I trying to send the user? Well, apparently, badguy.com/log.php, which is some script, apparently, the bad guy wrote, that takes a parameter called cookie. 

And notice, what do I appear to be concatenating onto the end of that equal sign? Well, something that says document.cookie. We haven't talked about this. But it turns out, in JavaScript, just like in PHP, you can access all of the cookies that your browser is actually using. 

So the effect of this one line of code, if a user is tricked into clicking on this link and the website vulnerable.com does not escape it with htmlspecialchars, is that you have just effectively uploaded to log.php all of your cookies. And that's not always that problematic, except if one of those cookies is your session ID, your so-called hand stamp, which means badguy.com can make his or her own HTTP requests, sending that same hand stamp, that same cookie header, and log into whatever website you were visiting, which in this case is vulnerable.com. It's a cross-site scripting attack in the sense that you're sort of tricking one site into telling another website about some information it should not, in fact, have access to. 

All right, ready for one other worrisome detail? All right, the world is a scary place, legitimately so. Here's a simple JavaScript example that's in today's source code called geolocation 0 and 1. And there's a couple walkthroughs online for this. 

And it does the following if I open this web page in Chrome. It first does nothing. OK, we'll try this again. Oh. No, it should do something. OK, stand by. 

Let's try this once more. [INAUDIBLE] Ah, OK, not sure why the-- oh, the appliance probably lost internet access for some reason. All right, so happens to me, too. 

All right, so notice what's going on here. This cryptic-looking URL, which is just one of CS50 server, wants to use my computer's location, like physically it means. And if, indeed, I click on Allow, let's see what happens. Apparently, this is my current latitude and longitudinal coordinates down to a pretty darn good resolution. 

So how did I get at this? How does this website, like CS50 server, know physically where in the world I am, let alone with that precision. Well, turns out-- let's just look at the page's source-- that in here is a bunch of HTML at the bottom that first has this-- body onload="geolocate"-- just a function I wrote. 

And I'm saying, on loading the page, call geolocate. And then there's nothing in the body, because in the head of the page, notice what I have here. Here's my geolocate function. And this is just some error checking-- if the type of navigator.geolocation is not undefined. So JavaScript has this mechanism where you can say, what is the type of this variable? And if it's not undefined-- that means it is some value-- I'm going to call navigator.geolocation.getCurrentPosition and then callback. 

What's this? So in general, what is a callback, just to be clear? You might have encountered this already in pset8. Callback's a generic term for doing what? Feels like just me today. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly, a function that should be called only when we have data. This call to the browser, get my current position, might take one millisecond, it might take a minute. What this means is we are telling the get getCurrentPosition method, call this callback function, which I literally named callback for simplicity, which apparently is this one here. 

And the way getCurrentPosition works, simply by reading the documentation for some JavaScript code online, is that it calls that so-called callback function, passes it into it a JavaScript object, inside of which is .coords.latitude and .coords.longitude, which is exactly how, then, when I reloaded this page, I was able to see my location here. Now, at least there was a defense here. Before I visited this page, when it actually worked, what was I at least prompted for? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Yes or no-- do you want to allow or deny this? But think, too, about the habits you guys have probably adopted, both on your phones and your browsers. Many of us, myself included, are probably pretty predisposed these days-- you see a pop-up, just Enter, OK, Approve, Allow. And increasingly, you can put yourself at risk for those reasons. 

So in fact, there was this wonderful bug a few years ago-- or lack of feature-- that iTunes had a few years ago, whereby, if you had a cell phone, and it was an iPhone, and you left your home and therefore traveled around the world or the neighborhood, all this time, your phone was logging where you are via GPS. And this is actually disclosed, and people kind of expect this now. Your phone knows where you are. But the problem was that, when you were backing up your phone to iTunes-- this was before the days of iCloud, which is for better or for worse-- the data was being stored in iTunes, completely unencrypted. So if you have a family or roommates or a malicious neighbor who's curious about literally every GPS coordinate you have ever been to, he or she could just sit down at iTunes, run some software that was freely available, and produce maps like this. 

In fact, this is what I produced of my own phone. I plugged it in. And it looks like, based on the blue dots there, that's where most of the GPS coordinates were logged by iTunes that I was in the Northeast there. But I apparently traveled around a bit, even within Massachusetts. 

So that's Boston Harbor there on the right. That's kind of Cambridge and Boston, where it's darkest. And occasionally, I would run errands to a larger geography. 

But iTunes, for years, had, as best I could tell, all of this data on me. You could tell that, that year, I was actually traveling a lot between Boston and New York, going back and forth and back and forth. And indeed, this is me on Amtrak, back and forth, back and forth, quite a bit. All of that was being logged and stored encrypted on my computer for anyone who might have access to my computer. 

This was worrisome. I did not know why I was in Pennsylvania or why my phone was in Pennsylvania, apparently fairly densely. And then, finally, I looked at my Gcal, and, oh, I visited CMU, Carnegie Mellon, at the time. And phew, that kind of explained that blip. And then, if you zoom out further, you can see I visited San Francisco one or more times then, and I even had a layover in what I think is Vegas, down there. So all of this-- just a layover, at the airport. 

AUDIENCE: [LAUGHTER] 

So this is only to say that these problems, honestly, are omnipresent. And it only feels increasingly like there's more and more of this being disclosed, which is probably a good thing. I daresay, the world isn't getting worse at writing software. We're getting better, hopefully, at noticing how bad certain software is that we're using. And thankfully, some companies are beginning to be held accountable for this. 

But what kinds of defenses can you have in mind? So besides password managers, like 1Password and LastPass and others, besides just changing your passwords and coming up with random ones using software like that, you can also try as best you can to encrypt all of your traffic to at least narrow the zone of a threat. So for instance, as Harvard affiliates, you can all go to vpn.harvard.edu and log in with your Harvard ID and PIN. And this will establish a secure connection between you and Harvard. 

Now, that doesn't necessarily protect you against any threats that are between Harvard and Facebook or Harvard and Gmail. But if you're sitting in an airport or you're sitting in Starbucks or you're sitting at a friend's place, and you don't really trust them or their configuration of their home router, at least you can establish a secure connection to an entity like this place that's probably a little better secured than something like a Starbucks or the like. And what this does is it establishes, again, encryption between you and the endpoint. 

Even fancier are things like this. So some of you might already be familiar with Tor, which is this sort of anonymization network, whereby lots of people, if they run this software, route subsequently their internet traffic through each other. So the shortest point is no longer between A and B. But it might be all over the place so that you're essentially covering one's tracks and leaving less of a record as to where your HTTP traffic came from, because it's going through a whole bunch of other people's laptops or desktops, for better or for worse. 

But even this is not a surefire thing. Some of you might recall last year the bomb scare that was called in. And it was traced ultimately to a user who had used this network here. And the catch there , as I recall, is, if there aren't that many other people using a software like this or using this port and protocol, it's not that hard for a network to even figure out who, with some probability, was in fact anonymizing his or her traffic. 

And I don't know if those were the actual particulars in question. But surely, realize that none of these are surefire solutions, as well. And the goal here today is to least get you thinking about these things and coming up with techniques for defending yourself against them. Any questions on all of the threats that await you out there, and in here? Yeah? AUDIENCE: How secure do we expect the average [? website to be, ?] like the average CS50 project? 

DAVID J. MALAN: The average CS50 project? It is always proved every year that some CS50 final projects are not particularly secure. Usually, it's some roommate or hallmate that figures this out by sending requests to your project. 

Short answer-- how many websites are secure? I'm picking on today anomalies. Like it was just happenstance that I realized that this website I've been ordering these frankly delicious arrangements from-- and I'm not sure I'll stop using their website; I might just change my password more regularly-- it's not clear just how vulnerable all these various-- this is chocolate-covered actually. The short answer, I can't answer that effectively, other than to say it was not that hard for me to find some of these examples just for the sake of discussion in lecture. And just keeping an eye on Google News and other resources will bring all the more of these kinds of things to light. 

All right, let's conclude with this prequel that CS50's team has prepared for you in anticipation of the CS50 Hackathon. And on your way out in a moment, fruit will be served. [VIDEO PLAYBACK] [MUSIC FERGIE, Q TIP, AND GOONROCK, "A LITTLE PARTY NEVER KILLED NOBODY (ALL WE GOT)"] 

-[SNORING] [END VIDEO PLAYBACK] DAVID J. MALAN: That's it for CS50. We'll see you on Wednesday. [MUSIC - SKRILLEX, "IMMA' TRY IT OUT"] DAVID J. MALAN: This is CS50, and this is the start of week 10. You may recall that we've shown on the screen a 3D printer, which is this device that takes spools of plastic and then extrudes it by heating it up and melting it so that we can then form Chang's army of elephants, for instance. 

So at Leverett House, though, recently, I was chatting with one of your classmates and a friend of Chang's named Michelle, who actually interned at this other company this past year that has a different technique for actually creating three-dimensional objects, like this tiny little elephant here. In particular, the way this works is that it's an example of something called stereolithography, whereby there's this basin of resin or liquid, and then a laser strikes that liquid, and gradually, the device lifts and lifts and lifts the thing that you're printing, like an elephant, as that liquid becomes solid. And the result, actually, is something that's much more robust than some of the plastic giveaways some of you might have had. 

And what Chang kindly did for us here was did a time-lapse using photographs over the course of an hour or more, probably, to produce this guy here. Would someone who's never come up before like to come hit Start on this video? Let me go with, how about there. Come on up. All right. And you are? LUKE: My name's Luke [INAUDIBLE]. DAVID J. MALAN: Hi, Luke. Nice to meet you. 

LUKE: Nice to meet you. AUDIENCE: He's running for UC. 

DAVID J. MALAN: I know, we're trying not to promote. All right, so Luke, all you have to do here in CS50 is hit the space bar to print this elephant. [VIDEO PLAYBACK] -[MACHINE WHIRRING] -[CRASH] -[BOOM] -[CRASH] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly what it's like to 3D print. And here is your elephant. Thanks for volunteering. All right. So again, per the specification for the final project, this hardware that's available to you guys is, for some reason, your project has some intersection of software and hardware, realize that these are now resources. 

I wanted to take one moment to touch upon a Crimson article that came out late last night, which was to announce that this fellow here, David Johnson, who's been the senior preceptor for Ec 10 for quite some time, is leaving Harvard at the end of the academic year. And I just wanted to take a moment, honestly, to thank David in front of CS50. He's been a mentor of sorts to us over the years. 

And I feel like we, CS50, have rather grown up with Ec 10 in here, since they are right before us. And he and the whole team in Ec 10 has been wonderfully gracious, frankly, as we lug in all of our equipment each and every week, and years ago, provided a great deal of counsel as we were curious as to how they operate Ec 10. So our thanks and admiration to David Johnson. 

[APPLAUSE] 

Now, unrelatedly, so the end is indeed near. We are here in week 10. And we only have just a couple of formal weeks here in class left, followed by a couple of events. So to give you a sense of what's on the horizon, here we are today. 

This Wednesday, recall, we'll have a guest lecture by none other than Microsoft's own Steve Ballmer. If you've not yet gone to cs50.harvard.edu/register, do so, since space will be limited. And they will be checking IDs at the door this day. If you weren't here last week, I thought I'd tease you with a different look at Steve and the excitement that awaits us on Wednesday. 

[VIDEO PLAYBACK] 

-Passion. 

-We're going to be hardcore-- hardcore. 

-Innovator. 

-Bill said, you don't get it. We're going to put a computer on every desk and in every home, which became the motto for the company. I swear, Bill invented it that night to really give me some of the vision of why I should say yes. I've never looked back, really, after that. 

-Fresh out of college, he joined a fledgling startup and helped it grow into one of America's most successful businesses ever. The life of and business lessons learned along the way let him back to his childhood passion and love. And those experiences have prepared him for his next challenge in life. 

-Nothing gets in our way-- boom! Keep coming hardcore! Go Clippers! 

-This is Steve Ballmer, "In My Own Words." [END VIDEO PLAYBACK] DAVID J. MALAN: --this Wednesday to CS50. Head again to this URL here. As for what else is on the horizon, next week, no lecture on Monday. But we will be following that by quiz one on Wednesday. Go to CS50's homepage for details on people, places, and times for all of the various proctoring logistics and the like, as well as about review sessions that are forthcoming. And then, lastly, on Monday, the day before the week of Thanksgiving break, realize it will be our final lecture. We will serve cake and a great deal of excitement, we hope. 

Now, a couple of other updates. Keep in mind that the status report, which is really just meant to be a casual interaction with your TF to proudly state just how far along with your final project you are, or at least as a sanity check that you should be approaching that point shortly thereafter. The Hackathon then follows that. Realize the Hackathon is not an opportunity to start your final project, but is meant to be an opportunity to be in the middle of or toward the end of your final project, with the implementation due a few days later, followed by the CS50 fair. 

Now, CS50's production team, a couple years ago, put together a teaser for the CS50 fair that we thought we'd show you today, because they've been hard at work on a prequel for that, a new video that we'll conclude today with. But here's what awaits you for this year's CS50 fair. [VIDEO PLAYBACK] -[CELL PHONE RINGING] [MUSIC "THEME FROM MISSION: IMPOSSIBLE"] [END VIDEO PLAYBACK] DAVID J. MALAN: So that is exactly how we close final project submissions. A couple of now teasers-- if you'd like to join Nick here for lunch, as usual, this Friday, head to this URL here. Moreover, if you would like to join Nick or this Nick or this Allison or any members of CS50's team, do realize that, shortly after term's end, CS50 will already be recruiting for next year's team, for CAs, TFs, designers, producers, researchers, and other positions that here operate CS50 both in front of and behind the scenes. So if this might be of interest to you, head to this URL here. And students more comfortable, less comfortable, and somewhere in between alike are all welcome and encouraged to apply. 

So it was perfect timing that, no joke, this morning, when I woke up, I had this here spam in my inbox. It actually slipped through Gmail's spam filter somehow and ended up in my actual inbox. And it says, "Dear mailbox user, you're currently upgraded to 4 gigabytes of space. Please log into your account in order to validate E-space." 

And then there's this nice blue enticing link there to click on for faculty and staff, which then led me to a wonderfully legitimate page, which asked me to give them my name and email address and, of course, password to validate who I am and so forth. But of course, as is always the case, you arrive at this landing page, and of course, there's at least one typo, which seems to be the nail in the coffin of any of these scams. And we'll post, perhaps, some other links to these kinds of screen shots in the future. But hopefully, most people in this room have not clicked-- or even if you've clicked such links as this, you haven't gone so far as to fill out those forms and so forth. In fact, it's OK if you have. We'll try to fix that today, because, indeed, today's conversation is about security. 

And indeed, one of the goals of CS50 is not so much to teach you CE or PHP or JavaScript or SQL or any of these underlying implementation details. But it's to empower you as humans to just make smarter decisions as it relates to technology down the road so that, whether you're an engineer or humanist or scientist or any other role, you are making informed decisions about your own computing usage, or if you're in a decision-making position, in politics, in particular, you're making much, much better decisions than a lot of humans today have been. And we'll do this by way of a few examples. 

First, I was rather surprised recently to discover the following. So passwords, of course, are what most of us use to protect our data-- email, chat, and all kinds of resources like that. And just by an awkward-- not show of hands, but embarrassed looks of shame, how many of you use the same password in a lot of different websites? 

Oh, OK, so we'll do the hands. OK, so a lot of you do. Anyone who does this, just why? And what? Yeah? AUDIENCE: It's easy to remember, because you don't have to remember [INAUDIBLE]. DAVID J. MALAN: Yeah, it's easy to remember. It's a perfectly reasonable, rational behavior, even though the risk you're putting yourself at in these cases is just one or more of those websites is vulnerable to hacking or to insecure or your password's just so darn guessable, anyone can figure it out. Not only is one account compromised, but in theory, any accounts you have on the internet. So I know I might say today, don't use the same password everywhere, but that's a lot easier said than done. But there are techniques for mitigating that particular concern. 

Now, I happen, for instance, to use a program called 1Password. Another popular one is called LastPass. And a bunch of CS50 staff use one or more of these kinds of tools. And long story short, one takeaway for today should be, yes, you might have the same password everywhere, but it's very easy to no longer do that. For instance, these days, I know maybe one of my dozens or hundreds of passwords. All of my other passwords are pseudo-randomly generated by one of these programs here. And in a nutshell, and even though most of these programs tend to come with a bit of a cost, you would install a program like this, you would then store all of your usernames and passwords inside of this program on your own Mac or PC or whatnot, and then it would be encrypted on your computer with what's hopefully a particularly long password. So I have a whole bunch of passwords for individual websites, and then I have a really long password that I use to unlock all of those other passwords. And what's nice about software like this is that, when you visit a website that's asking for your username and password, these days, I don't type in my username and password, because, again, I don't even know what most of my passwords are. I instead hit a keyboard shortcut, the result of which is to trigger this software to prompt me for my master password. I then type that one big password in, and then the browser automatically fills in what my password is. So truly, if you take nothing else away from today in terms of passwords, these are software that are worth downloading or investing in so that you can at least break that particular habit. And if you're the type that's using Post-It notes or the like-- and odds are at least one of you is-- that habit, too, suffice it to say, should be broken. 

Now, I happened to discover, as a result of using the software, the following. I was ordering an Edible Arrangement, this basket of fruit, recently. And I hit my special keyboard shortcut to log in to the website. And the software triggered a pop-up that said, are you sure you want me to automatically submit this username and password? Because the connection is insecure. 

The connection's not using HTTPS, for secure, using that protocol known as SSL, Secure Sockets Layer. And indeed, if you look at the top left of this website, it's just www.ediblearrangements.com, no HTTPS, which isn't so good. 

Now, I was curious-- maybe this is just a bug in the software. Surely, some website like this that a lot of us know of is at least using encryption or HTTPS URLs to log you in. So I got a little curious this morning. And I got out my CS50 skills, I opened up Chrome Inspector. It's not even much of a skill. It's just hit the right keyboard shortcut to open this up. And here's a big window of Chrome's Inspector. 

But what was actually a little tragic and ridiculous were these two lines here. Up at the top, notice the URL to which my username and password were submitted. Let me zoom in. It was this here. And all of that is sort of uninteresting, except for the thing all the way at the left, which starts with http://. And so then, OK, maybe they're just sending my username, which is not such a big deal. Maybe my password gets sent later. That would be kind of an interesting design decision. 

But nope. If you then look at the request payload, the username and password I sent-- and I mocked these up for the slide-- were actually sent in the clear. So you go to this particular website and order an Edible Arrangement like this, and indeed, apparently, for all this time I've been ordering from them, your username and password is going across in the clear. So honestly, this is completely unacceptable. And it's so trivial to avoid things like this as the designer of a website and as the programmer of a website. 

But the takeaway here for us as users of websites is just to appreciate that all it takes is for one stupid design decision, unjustifiable design decision, so that now, if you know my password is "crimson" on this website, you've probably just got into a whole bunch of other websites that I now have. And there's not much of a defense against that other than what Chang did this morning. He went to Edible Arrangements, which is located down the street in Cambridge, and physically bought this for us. That was much more secure than using the website in this case. 

But the detail to keep an eye out for is actually what's in the browser up top there. But even that can be a little deceptive. So another interesting example and way of defending against this-- and actually, let's do that first-- the way of defending against this is a technique that security people would call two-factor authentication. 

Does anyone know what the solution to problems like this means? What is two-factor authentication? Or put another way, how many of you are using it? OK, so a couple of shy people. But yeah. I saw your hand go up. What is two-factor authentication? 

AUDIENCE: Basically, in addition to typing in your password, you also have a secondary [INAUDIBLE] sent via text message to your phone at the [INAUDIBLE]. DAVID J. MALAN: Exactly. In addition to some primary form of authentication, like a password, you're asked for a secondary factor, which is typically something you have physically on you, though it can be something else altogether. And that thing is typically a cellphone these days to which you get sent a temporary text message that says "your temporary pass code is 12345." 

So in addition to my password "crimson," I also have to type in whatever the website has texted me. Or if you have this with a bank or an investment account, you sometimes have these little dongles that actually have a pseudo-random number generator built into them, but both the device and the bank know what your initial seed is so that they know, even as the little code on your little key fob marches ahead every minute or two, changing values, so does that value change on the bank's server so that they can similarly authenticate you, not only with your password, but with that temporary code. Now, you can actually do this in Google. And frankly, this is a good habit to get into, especially if you're using Gmail all the time on a browser. If you go to this URL here, which is in the slides online for today, and then click on 2-Step Verification, same actual thing there. You'll be prompted to give them your cell phone number. And then, any time you log into Gmail, you'll be not only asked for your password, but also for a little code that gets sent to your phone temporarily. And so long as you have cookies enabled, and so long as you don't explicitly log out, you'll only have to do that once in awhile, like when you sit down at a new computer. 

And the upside here, too, is, if you sit down at some internet cafe style computer or just a friend's computer, even if that friend maliciously or unknowingly has some keyboard logger installed on his or her computer, such that everything you type is being logged, at least that second factor, that temporary code, is ephemeral. So he or she or whoever's compromised the computer can't log into you subsequently, even if everything else was vulnerable or even unencrypted altogether. Facebook has this, too, with that URL here, where you can click on Login Approvals. So here, too, if you don't want friends to poke people, you don't want to be poking on Facebook or posting status updates for you, two-factor authentication here is probably a good thing. And then there's this other technique altogether, just auditing, which is even a good thing for us humans, if two-factor proves annoying, which, admittedly, it can, or it's just not available on some website, minimally keeping an eye on if and when you're logging into sites, if they allow you, is a good technique, too. So Facebook also gives you this login notifications feature, whereby anytime Facebook realizes, hm, David has logged in from some computer or phone that we've never seen before from an IP address that looks unfamiliar, they'll at least send you an email to whatever email address you have on file, saying, does this look suspicious? If so, change your password immediately. And so there, too, just auditing behavior even after you've been compromised, can at least narrow the window during which you are vulnerable. 

All right, any questions on that stuff thus far? Today is the day to get all of your paranoia confirmed or denied. That's mostly confirmed, sadly. Yeah? 

AUDIENCE: [INAUDIBLE] phone, what if your phone breaks, and then it's always difficult to verify-- 

DAVID J. MALAN: True. 

AUDIENCE: Or if you're in a different country, and they don't let you log in because [INAUDIBLE]. DAVID J. MALAN: Absolutely. And so these are the additional costs that you incur. There's always this theme of a trade-off, after all. And then, if you lose your phone, if it breaks, if you're abroad, or you just don't have a signal, like a 3G or LTE signal, you might not actually be able to authenticate. 

So again, these two are trade-offs. And sometimes, it can create a lot of work for you as a result. But it really depends, then, on what the expected price to you is of something being compromised altogether. 

So SSL, then, is this technique that we all generally take for granted or assume is there, even though that's clearly not the case. And you can still mislead people, though, even with this. So here's an example of a bank. 

This is Bank of America. There's a whole bunch of these in Harvard Square and beyond. And notice that, at the very top of the screen, there's an, indeed, HTTPS. And it's even green and highlighted for us to indicate that this is indeed a legitimately secure website, or so we've been trained to believe. 

Now, besides that, though, notice that, if we zoom in, there's this thing here, where you're prompted to log in. What does this padlock mean right there, next to my username prompt? This is pretty common on websites, too. What does this padlock mean? You seem like you know. 

AUDIENCE: It doesn't mean anything. 

DAVID J. MALAN: It doesn't mean anything. It means that Bank of America knows how to write HTML with image tags, right? It truly means nothing, because even we, using the first day of our look at HTML, can code up a page with a red background and an image, like a GIF or whatnot, that happens to look like a padlock. And yet, this is super common in websites, because we've been trained to assume that, oh, padlock means secure, when it really just means you know HTML. 

For instance, back in the day, I could have just put this on my website, claiming it's secure, and asking, effectively, for people's usernames and passwords. So looking in the URL is at least a better clue, because that's built into Chrome or whatever browser you're using. But even then, sometimes things can go wrong. And in fact, you might not always see HTTPS, let alone in green. 

Have any of you ever seen a screen like this? You might have, actually, earlier in October, when I forgot to pay for our SSL certificate, as it's called, and we were looking like this for an hour or two. So you've probably seen things like this, with a strike-through, like a red line, through the protocol in the URL or some kind of screen that's at least admonishing you for trying to proceed further. And Google here is inviting you to go back to safety. 

Now, in this case, this just meant that the SSL certificate that we were using, the big, mathematically useful numbers that are associated with CS50's server, were no longer valid. And in fact, we can simulate this, as you can on your laptop. If I go into Chrome here, and let's go to facebook.com, and it looks like this is secure. But let me go ahead now and click on the padlock here. 

And let me go to Connection, Certificate Information. And indeed, what you'll see here is a bunch of lower-level details about who facebook.com really is. It seems that they have paid money to a company called maybe DigiCert High Assurance that has promised to tell the rest of the world that, if a browser ever sees a certificate-- you can think of it literally as a certificate that looks like that cheesy thing at top left-- then facebook.com is who they say they are, because all this time, when you visit a website, like cs50.harvard.edu or facebook.com or gmail.com that use HTTPS URLs, behind the scenes, there's this sort of transaction happening automatically for you, whereby facebook.com, in this case, is sending to your browser its so-called SSL certificate, or rather, its public key, and then your browser is using that public key to subsequently send encrypted traffic to and from it. 

But there's this whole hierarchy in the world of companies that you pay money to who will then testify, in a digital sense, that you are indeed facebook.com or your server is indeed cs50.harvard.edu. And built into browsers, like Chrome and IE and Firefox, is a list of all of those so-called certificate authorities that are authorized by Microsoft and Google and Mozilla to confirm or deny that facebook.com is who it says it is. But the catch is that these things do expire. In fact, Facebook's looks like it expires next October, in 2015. 

So we can actually simulate this if I go in my Mac to my System Preferences, and I go into Date and Time, and I go into Date and Time here, and I unlock this here-- thankfully, we didn't reveal a password this time-- and now I go down to uncheck this. And let's actually-- oops, that's not as interesting as doing this. We are literally in the future now, which means this is what 2020 is like. If I now reload the page-- let's do it in Ingognito mode-- if I reload the page, there we go. 

So now, my computer thinks it's 2020, but my browser knows that this certificate from Facebook expires, of course, in 2015. So it's giving me this red message. Now, thankfully, browsers like Chrome have actually made it pretty hard to proceed nonetheless. They indeed want me to go back to safety. 

If I click here on Advance, it's going to tell me some more details. And if I really want to proceed, they'll let me go to facebook.com, which is, again, unsafe, at which point I'll see Facebook's homepage, like this. But then other things seem to be breaking. What's probably breaking at this point? AUDIENCE: JavaScript. DAVID J. MALAN: Like the JavaScripts and/or CSS files are similarly encountering that error. So this is just a bad situation overall. But the point here is that at least Facebook does indeed have SSL enabled for their servers, as many websites, do, but not necessarily all. 

But that's not alone the takeaway here. Turns out that even SSL has been demonstrated to be insecure in some way. So I'm sort of hinting that SSL, good. Look for HTTPS URLs, and life is good, because all of your HTTP traffic and headers and content is encrypted. 

No one can intercept it in the middle, except for a so-called man in the middle. This is a general technique in the world of security known as a man-in-the-middle attack. Suppose that you're this little laptop over here on the left, and suppose you're trying to visit a server over there on the right, like facebook.com. 

But suppose that, in between you and Facebook, is a whole bunch of other servers and equipment, like switches and routers, DNS servers, DHCP servers, none of which we control. It might be controlled by Starbucks or Harvard or Comcast or the like. Well, suppose that someone maliciously, on your network, in between you and Facebook, is able to tell you that, you know what, the IP address of Facebook is not what you think it is. It's this IP instead. 

And so your browser's tricked into requesting traffic from another computer altogether. Well, suppose that computer simply looks at all of the traffic you're requesting from Facebook and all of the web pages that you're requesting from Facebook. And any time it sees in your traffic a URL that starts with HTTPS, it dynamically, on the fly, rewrites it as HTTP. And any time it sees a location header, location colon, like we use to redirect the user, those, too, can be changed by this man in the middle from HTTPS to HTTP. 

So even though you yourself might think you're at the real Facebook, it is not that hard for an adversary with physical access to your network to simply return pages to you that look like Gmail, that look like Facebook, and indeed the URL is identical, because they're pretending to have that same host name because of some exploitation of DNS or some other system like that. And the result, then, is that we humans might only realize that, OK, this looks like Gmail or at least the older version, as is this slide from an older presentation. But it looks like this-- http://www.google.com. 

So here, too, the reality is that how many of you, when you go to Facebook or Gmail or any website and you know a little something about SSL, how many of you physically type https:// and then the website name, Enter. Most of us just type, like, CS50, hit Enter, or F-A for Facebook and hit Enter, and let it auto-complete. But behind the scenes, if you watch your HTTP traffic, there's probably a whole bunch of those location headers that are sending you from Facebook to www.facebook.com to https://www.facebook.com. 

So that's one or more HTTP transactions where your information is completely sent in the clear, no encryption whatsoever. Now, that might not be such a big deal if all you're trying to do is access the homepage, you're not sending your username and password. But what is it underneath the hood, especially for PHP-based websites that's also being sent back and forth when you visit some webpage if that website uses, say, PHP and implements functionality like pset7? What was being sent back and forth in your HTTP headers that gave you access to this pretty useful super global in PHP? 

AUDIENCE: Cookies. 

DAVID J. MALAN: Cookies, specifically the PHP sess ID cookie. So recall, if we go to, say, cs50.harvard.edu again, but this time, let's open up the Network tab, and now, up here, let's literally just go to http://cs50.harvard.edu and then hit Enter. And then look at the screen down here. Notice that we indeed got back a 301 moved permanently message, which means that there's a location header here, which is now redirecting me to HTTPS. 

But the catch is that, if I already had a cookie stamped on my hand virtually, as we've discussed before, and I the human sort of unknowingly just visit the insecure version, and my browser takes it upon itself to show that hand stamp for the first request, which is via HTTP, any man in the middle, any adversary in the middle, can theoretically just see those HTTP headers, just like we're looking at them here. It's only once you're talking to an HTTPS URL does that hand stamp itself get encrypted, a la Caesar or Vigenere, but with a fancier algorithm altogether. So here, too, even if websites use HTTPS, we humans have been conditioned, thanks to auto-complete and other techniques, to not even think about the potential implications. Now, there are ways around this. For instance, many websites can be configured so that, once you have this hand stamp, you can tell the browser, this hand stamp is only for SSL connections. The browser should not present it to me unless it's over SSL. But many websites don't bother with that. And many websites apparently don't even bother with SSL at all. 

So for more on that, there's actually even more dirt in this presentation that a fellow gave at a so-called black hat conference a couple of years ago, where there's even other malicious tricks people have used. You might recall this notion of a favicon, which is like a little logo that's often in the browser's window. Well, what's been common among bad guys is to make fab icons that look like what? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Say again? AUDIENCE: The websites. DAVID J. MALAN: Not a website. So favicon, tiny little icon. What would be the most malicious, manipulative thing you could make your website's default icon look like? AUDIENCE: A green lock. DAVID J. MALAN: What's that? AUDIENCE: A little green lock. DAVID J. MALAN: Like a green lock, exactly. So you can have this aesthetic of a little green padlock, hinting to the world, oh, we're secure, when, again, all it means is that you know some HTML. So session hijacking refers to exactly that. If you have someone who's kind of sniffing the airwaves in this room here or has physical access to a network and can see your cookies, he or she can grab that PHP sess ID cookie. And then, if they're savvy enough to know how to send that cookie as their own hand stamp just by copying that value and sending the HTTP headers, someone could very easily log into any of the Facebook accounts or Gmail accounts or Twitter accounts that are here, open in the room, if you're not using SSL and if the website is not using SSL correctly. 

So let's transition to another one. So another true story. And this just broke in the news a week or two ago. Verizon has been doing a very evil thing, and as best people can tell, since at least 2012, whereby, when you access websites via a Verizon cellphone, whatever manufacturer it is, they have been presumptuously, as the story goes, injecting into all of your HTTP traffic their own HTTP header. And that header looks like this-- X-UIDH. UID is like a unique identifier or user ID. And X just means this is a custom header that's not standard. 

But what this means is that, if I pull up, for instance, any website on my phone here-- and I'm using Verizon as my carrier-- even though my browser might not be sending this HTTP header, Verizon, as soon as the signal reaches their cellphone tower somewhere, has been for some time injecting this header into all of our HTTP traffic. Why do they do this? Presumably for tracking reasons, for advertising reasons. 

But the moronic design decision here is that an HTTP header, as you guys know from pset6, is received by any web server that you're requesting traffic of. So all this time, if you've been visiting Facebook or Gmail or any website that doesn't use SSL all the time-- and actually, those two thankfully now do-- but other websites that don't use SSL all the time, Verizon has essentially been planting, forcibly, a hand stamp on all of our hands that even we don't see, but rather, the end websites do. And so it hasn't been that hard for anyone on the internet running a web server to realize, ooh, this is David, or, ooh, this is Davin, even if we're rigorous about clearing our cookies, because it's not coming from us. It's coming from the carrier. 

They do a lookup on your phone number and then say, oh, this is David. Let me inject a unique identifier so that our advertisers or whoever can keep track of this. So this is actually very, very, very bad and horrifying. And I would encourage you to take a look, for instance, at this URL, which I should disclaim I actually tried this this morning. I wrote a little script, put it at this URL, visited it with my own Verizon cellphone after turning Wi-Fi off. So you have to turn Wi-Fi off so that you're using 3G or LTE or the like. And then, if you visit this URL, all this script does for you guys, if you'd like to play, is it spits out what HTTP headers your phone is sending to our server. And I actually, in fairness, did not see this this morning, which makes me think either the local cellphone tower I was connected to or whatnot is not doing it, or they've backed off of doing this temporarily. But for more information, to head to this URL here. 

And now to this-- this comic might make sense. No? OK. All right. That died. All right. 

So let's take a look at a couple of more attacks, if only to raise awareness of and then offer a couple potential solutions so that you're all the more mindful. This one we talked about the other day, but didn't give a name to it. It's a cross-site request forgery, which is an excessively fancy way of saying you trick a user into clicking on a URL like this, which tricks them into some behavior that they didn't intend. 

In this case, this seems to be trying to trick me into selling my shares of Google. And this will succeed if I, the programmer of pset7, have not done what? Or rather, more generally, in what cases am I vulnerable to an attack if someone tricks another user into clicking a URL like this? Yeah? 

AUDIENCE: You don't distinguish between GET and POST. 

DAVID J. MALAN: Good. If we don't distinguish between GET and POST, and indeed, if we allow GET for selling things, we're inviting this kind of attack. But we could still mitigate it somewhat. And I commented, I think, last week that Amazon at least tries to mitigate this with a technique that's pretty straightforward. What would a smart thing to do be on your server, rather than just blindly selling whatever symbol the user types in? AUDIENCE: Confirmation of sorts? DAVID J. MALAN: A confirmation screen, something involving human interaction so that I am forced to make the judgment call, even if I've naively clicked a link that looks like this and led me to the cell screen, at least asked me to confirm or deny. But not an uncommon attack, especially in so-called phishing or spam-like attacks. 

Now, this one's a little more subtle. This is a cross-site scripting attack. And this happens if your website is not using the equivalent of htmlspecialchars. And it's taking user input and just blindly injecting it into a web page, as with print or echo, with-- again-- out calling something like htmlspecialchars. 

So suppose the website in question is vulnerable.com. And suppose it accepts a parameter called q. Look at what might happen if I actually, a bad guy, type in or trick a user into visiting a URL that looks like this-- q= open script tag, closed script tag. And again, I'm assuming that vulnerable.com is not going to turn dangerous characters like open brackets into HTML entities, the ampersand, L-T, semicolon thing that you might have seen before. 

But what is the script or JavaScript code I'm trying to trick a user into executing? Well, document.location refers to my browser's current address. So if I do document.location=, this allows me to redirect the user in JavaScript to another website. It's like our PHP function redirect, but done in JavaScript. 

Where am I trying to send the user? Well, apparently, badguy.com/log.php, which is some script, apparently, the bad guy wrote, that takes a parameter called cookie. 

And notice, what do I appear to be concatenating onto the end of that equal sign? Well, something that says document.cookie. We haven't talked about this. But it turns out, in JavaScript, just like in PHP, you can access all of the cookies that your browser is actually using. 

So the effect of this one line of code, if a user is tricked into clicking on this link and the website vulnerable.com does not escape it with htmlspecialchars, is that you have just effectively uploaded to log.php all of your cookies. And that's not always that problematic, except if one of those cookies is your session ID, your so-called hand stamp, which means badguy.com can make his or her own HTTP requests, sending that same hand stamp, that same cookie header, and log into whatever website you were visiting, which in this case is vulnerable.com. It's a cross-site scripting attack in the sense that you're sort of tricking one site into telling another website about some information it should not, in fact, have access to. 

All right, ready for one other worrisome detail? All right, the world is a scary place, legitimately so. Here's a simple JavaScript example that's in today's source code called geolocation 0 and 1. And there's a couple walkthroughs online for this. 

And it does the following if I open this web page in Chrome. It first does nothing. OK, we'll try this again. Oh. No, it should do something. OK, stand by. 

Let's try this once more. [INAUDIBLE] Ah, OK, not sure why the-- oh, the appliance probably lost internet access for some reason. All right, so happens to me, too. 

All right, so notice what's going on here. This cryptic-looking URL, which is just one of CS50 server, wants to use my computer's location, like physically it means. And if, indeed, I click on Allow, let's see what happens. Apparently, this is my current latitude and longitudinal coordinates down to a pretty darn good resolution. 

So how did I get at this? How does this website, like CS50 server, know physically where in the world I am, let alone with that precision. Well, turns out-- let's just look at the page's source-- that in here is a bunch of HTML at the bottom that first has this-- body onload="geolocate"-- just a function I wrote. 

And I'm saying, on loading the page, call geolocate. And then there's nothing in the body, because in the head of the page, notice what I have here. Here's my geolocate function. And this is just some error checking-- if the type of navigator.geolocation is not undefined. So JavaScript has this mechanism where you can say, what is the type of this variable? And if it's not undefined-- that means it is some value-- I'm going to call navigator.geolocation.getCurrentPosition and then callback. 

What's this? So in general, what is a callback, just to be clear? You might have encountered this already in pset8. Callback's a generic term for doing what? Feels like just me today. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly, a function that should be called only when we have data. This call to the browser, get my current position, might take one millisecond, it might take a minute. What this means is we are telling the get getCurrentPosition method, call this callback function, which I literally named callback for simplicity, which apparently is this one here. 

And the way getCurrentPosition works, simply by reading the documentation for some JavaScript code online, is that it calls that so-called callback function, passes it into it a JavaScript object, inside of which is .coords.latitude and .coords.longitude, which is exactly how, then, when I reloaded this page, I was able to see my location here. Now, at least there was a defense here. Before I visited this page, when it actually worked, what was I at least prompted for? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Yes or no-- do you want to allow or deny this? But think, too, about the habits you guys have probably adopted, both on your phones and your browsers. Many of us, myself included, are probably pretty predisposed these days-- you see a pop-up, just Enter, OK, Approve, Allow. And increasingly, you can put yourself at risk for those reasons. 

So in fact, there was this wonderful bug a few years ago-- or lack of feature-- that iTunes had a few years ago, whereby, if you had a cell phone, and it was an iPhone, and you left your home and therefore traveled around the world or the neighborhood, all this time, your phone was logging where you are via GPS. And this is actually disclosed, and people kind of expect this now. Your phone knows where you are. But the problem was that, when you were backing up your phone to iTunes-- this was before the days of iCloud, which is for better or for worse-- the data was being stored in iTunes, completely unencrypted. So if you have a family or roommates or a malicious neighbor who's curious about literally every GPS coordinate you have ever been to, he or she could just sit down at iTunes, run some software that was freely available, and produce maps like this. 

In fact, this is what I produced of my own phone. I plugged it in. And it looks like, based on the blue dots there, that's where most of the GPS coordinates were logged by iTunes that I was in the Northeast there. But I apparently traveled around a bit, even within Massachusetts. 

So that's Boston Harbor there on the right. That's kind of Cambridge and Boston, where it's darkest. And occasionally, I would run errands to a larger geography. 

But iTunes, for years, had, as best I could tell, all of this data on me. You could tell that, that year, I was actually traveling a lot between Boston and New York, going back and forth and back and forth. And indeed, this is me on Amtrak, back and forth, back and forth, quite a bit. All of that was being logged and stored encrypted on my computer for anyone who might have access to my computer. 

This was worrisome. I did not know why I was in Pennsylvania or why my phone was in Pennsylvania, apparently fairly densely. And then, finally, I looked at my Gcal, and, oh, I visited CMU, Carnegie Mellon, at the time. And phew, that kind of explained that blip. And then, if you zoom out further, you can see I visited San Francisco one or more times then, and I even had a layover in what I think is Vegas, down there. So all of this-- just a layover, at the airport. 

AUDIENCE: [LAUGHTER] 

So this is only to say that these problems, honestly, are omnipresent. And it only feels increasingly like there's more and more of this being disclosed, which is probably a good thing. I daresay, the world isn't getting worse at writing software. We're getting better, hopefully, at noticing how bad certain software is that we're using. And thankfully, some companies are beginning to be held accountable for this. 

But what kinds of defenses can you have in mind? So besides password managers, like 1Password and LastPass and others, besides just changing your passwords and coming up with random ones using software like that, you can also try as best you can to encrypt all of your traffic to at least narrow the zone of a threat. So for instance, as Harvard affiliates, you can all go to vpn.harvard.edu and log in with your Harvard ID and PIN. And this will establish a secure connection between you and Harvard. 

Now, that doesn't necessarily protect you against any threats that are between Harvard and Facebook or Harvard and Gmail. But if you're sitting in an airport or you're sitting in Starbucks or you're sitting at a friend's place, and you don't really trust them or their configuration of their home router, at least you can establish a secure connection to an entity like this place that's probably a little better secured than something like a Starbucks or the like. And what this does is it establishes, again, encryption between you and the endpoint. 

Even fancier are things like this. So some of you might already be familiar with Tor, which is this sort of anonymization network, whereby lots of people, if they run this software, route subsequently their internet traffic through each other. So the shortest point is no longer between A and B. But it might be all over the place so that you're essentially covering one's tracks and leaving less of a record as to where your HTTP traffic came from, because it's going through a whole bunch of other people's laptops or desktops, for better or for worse. 

But even this is not a surefire thing. Some of you might recall last year the bomb scare that was called in. And it was traced ultimately to a user who had used this network here. And the catch there , as I recall, is, if there aren't that many other people using a software like this or using this port and protocol, it's not that hard for a network to even figure out who, with some probability, was in fact anonymizing his or her traffic. 

And I don't know if those were the actual particulars in question. But surely, realize that none of these are surefire solutions, as well. And the goal here today is to least get you thinking about these things and coming up with techniques for defending yourself against them. Any questions on all of the threats that await you out there, and in here? Yeah? AUDIENCE: How secure do we expect the average [? website to be, ?] like the average CS50 project? 

DAVID J. MALAN: The average CS50 project? It is always proved every year that some CS50 final projects are not particularly secure. Usually, it's some roommate or hallmate that figures this out by sending requests to your project. 

Short answer-- how many websites are secure? I'm picking on today anomalies. Like it was just happenstance that I realized that this website I've been ordering these frankly delicious arrangements from-- and I'm not sure I'll stop using their website; I might just change my password more regularly-- it's not clear just how vulnerable all these various-- this is chocolate-covered actually. The short answer, I can't answer that effectively, other than to say it was not that hard for me to find some of these examples just for the sake of discussion in lecture. And just keeping an eye on Google News and other resources will bring all the more of these kinds of things to light. 

All right, let's conclude with this prequel that CS50's team has prepared for you in anticipation of the CS50 Hackathon. And on your way out in a moment, fruit will be served. [VIDEO PLAYBACK] [MUSIC FERGIE, Q TIP, AND GOONROCK, "A LITTLE PARTY NEVER KILLED NOBODY (ALL WE GOT)"] 

-[SNORING] [END VIDEO PLAYBACK] DAVID J. MALAN: That's it for CS50. We'll see you on Wednesday. [MUSIC - SKRILLEX, "IMMA' TRY IT OUT"] [MUSIC PLAYING] 

[AUDIENCE CHEERING AND APPLAUDING] 

DAVID J. MALAN: This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. We are so excited to have an amazing alum here with us today. He was a member of the Harvard class of 1977. He concentrated in applied math economics. And he was a resident of Currier House. 

[AUDIENCE CHEERING] 

He was manager of the Harvard football team, advertising manager of the Crimson, and publisher of the Harvard Advocate. And upon graduation, he headed off for a to Stanford's business school, but didn't stay long, as he was quickly recruited by a friend of his to a little company we all know now as Microsoft, where he served first as business manager, later as CEO, and is now the owner of the LA Clippers. 

[AUDIENCE CHEERING] 

CS50, this is Steve Ballmer. 

[CHEERING AND APPLAUSE] 

STEVE BALLMER: Well, thanks. I'm honored to have a chance to be here with you today. When I first talked to David about this, he said, I'd really like you to come on in and give an advanced lecture in machine learning and computational thinking. We didn't dwell on that idea very long. 

So I thought I'd give you a little talk-- if I can figure out which space bar I'm hitting-- what do we need to do to change? I won't touch that one. This one I won't touch. There we go. OK. 

I thought I'd give you a little-- you've got to be a competitor in business. Anyway, I thought we'd talk a little bit today, just a few thoughts, on most of what I learned I learned at Harvard University. I thought I'd try to summarize that in about nine easy steps and then four things I learned after I got out of this place, and hopefully get all through that in about 25 minutes-- just to give you a little bit of food for thought. And then we'll do Q&A. 

I am 99.999999999% sure that nothing we talk about today will matter for your grade or will appear on the final. I think you're as safe as rain on that today. But hopefully, get you thinking about a couple things as we go through. First thing that's probably important for you to register-- this is sort of academically dangerous-- of all those many important things I learned at Harvard, it wasn't in the classroom. As I listened to David do the introduction, I thought to myself, it sounds like I majored in extracurriculars when I was here. That's actually true. I attended all of one class session senior year. Junior year was a little bit better. 

With modern technology, I don't know what the possibilities are, but they would seem to be even greater today for mischief outside the classroom. But I will tell you it was really very, very formative and seminal. I arrived here in 1973. And I was hell bent and determined that I was going to get my Ph.D. in either math or physics. And about the only thing to figure out was whether it was going to be math or physics. That was it. That's all that needed to be figured out. 

Freshman year, the big decision was whether to take Physics 55-- I don't know if that course still exists-- or Math 55. I thought I'd take both, and the kindly adviser said, young Steve, big mistake. I won't allow you to do that. So I took one of them and did an independent study in the other. And thank god I did. 

First lesson, I learned very, very early. Freshman year, I took my first exam. I took my first exam. I walked out of it. I called my parents and said, I think I just flunked out of school. I was already involved with the Harvard football team doing statistics. I was supposed to go down to Penn, so it must have been about this time of year, since the schedule for football hasn't changed in 50 years. 

We were supposed to go down Penn. I didn't go, because I was crest fallen that I had flunked out of school. I got my exam back the next week, and sure enough, I had gotten a 33, which was about fifth or sixth in the class. The guy who got 75 is Ph.D. in physics, is a professor of physics, and is a genius. So it took me about two months to learn I wasn't a physicist and I wasn't a genius. And everything good started right there with my first big failure, so to speak. 

I just finished giving a class, actually, at the business school at Stanford. And I worked with a lady who had been a professor here at Harvard in economics and now is at Stanford Business School. And I took the opportunity to look back and reflect on, let me say, important lessons that I've learned over the time of my life, but particularly that mattered to me as I was running Microsoft. 

And I'm not going to try to go through the detail of each, but I summarise them in short form. And when I stopped and looked back and I said, how many of those relate to something concretely that I got out of my experience at Harvard, the answer turns out to be very high. 

Small show of hands-- how many freshman do we have in the class? Sophomores? Juniors? Seniors trying to get that last CS in before you leave? OK, good. 

I will tell you that in reflection, the amount you can get out of this place is stunning. My best friends, many of them I met to this day while I was here. The formative experiences, I got here. And everybody tells you, but it's amazing what you can get out of the place. 

Number one for me, life lesson, is ideas matter. Now, people say, of course ideas matter. What kind of stupid life lesson is it that ideas matter? The truth of the matter is this is both under and over appreciated. Most people think every idea is a good idea as long as they had it. The truth of the matter is not every idea is a good idea. Not every idea matters. And not every idea should be pursued. 

And if you're in a field like I am or was of innovation, not every idea is a good idea, even if it strikes you that way on first blush. In fact, most people are lucky to have one idea that really matters in their whole life. That's not a criticism. But earth shattering, life changing ideas are very few and far between-- research insights, investment insights, innovations. A good idea needs to be cherished and nurtured. And in some senses, you could say I learned that here at Microsoft-- here at Microsoft-- here at Harvard. 

[LAUGHTER] 

I actually know what's on the slide, though. I learned it here. Microsoft was started here by Bill Gates and Paul Allen when I was here. When I finally joined the company, it was five years after Microsoft got started. Some people would say it got started up at the Currier House, but it really got started up at the housing project up at Ringe, which is where Paul Allen was living. 

But this notion, which Microsoft started, was the idea that software represented a form of free intelligence, and that if you coupled it with this new essentially free intelligence in the form of the microprocessor, unbelievable things would happen. And that basic idea that software was a mobilizing force for this new microprocessor, which was free-- that obviously was a big idea. 

And that was the idea that Paul Allen and Bill Gates had when they started the company. And ideas do matter. And it is worth considering and not falling in love with every idea you have, whether you're trying to solve a problem set or you're trying to do something else. 

Second thing I learned is there is an advantage to being what I like to call now hardcore. Hardcore-- I don't know quite how to describe it. It's a combination of tenacious and dedicated and passionate and committed-- something like that, hardcore. 

I learned about being hardcore from math concentrators at Harvard. 

[LAUGHTER] 

I'm not going to ask whether we have any math concentrators here. But I would say that's where I got my lesson. People could just go crazy-- focused. And it wasn't just that people were genius, but working and working and working and working. I'd sit in my room working on a problem set, and after three hours-- I'm a little ADD-- I just couldn't take it. The most hardcore people could just power through anything. 

And the advantage of being that tenacious and dedicated and committed-- I claim it helped us at Microsoft. It was fundamental at Microsoft. But I learned it here at Harvard. 

Passion-- I think it's probably fair for me to say at this stage in my life that basketball is a passion. I started keeping track of rebounds and assists. $12 a game I used to get paid. I went to every Harvard basketball game, which I would have gone to anyway. But I got paid $12 to keep track of rebounds and assists. 

And I will say that finding your passion is something you get to do almost in a unique way in college. And finding the things that you are passionate about is probably the most important thing that you get to really start doing when you get to college. Before college, everything's about getting to college. It's unfortunate, but I know it's true. 

Here, take the time to explore your passion. I now this year will probably go to about 200 basketball games. I think it's fair to say it is a passion. But sitting there in the old IAB, which I think is called the Malkin Center, marking down-- there's a guy named Lou Silver who played on the Harvard basketball team in 1975. I gave him the benefit of the doubt on every rebound ever. I think I was part of his All Ivy success. And who was one of the first guys to email me when I bought the LA Clippers? Lou Silver-- passion built early in life. 

Own the results. This is actually, I think, one of the hardest things for college kids to get, especially kids at Harvard, which is at the end of the day, it's not just about whether you have a good idea and whether you're really talented and really smart. That's enough to get you into a lot of good colleges, including this one. 

But all of those things are not really measures of success. You have to do something other than make grades and get measured on them in life. That's generally how the world works. And really being accountable for outcomes makes you better at everything you do. I comped for the Crimson and had to go sell $1,000 worth of advertising. That was a lot of money. I don't know what the numbers would be these days-- but $1,000 of ad revenue, and then took on ad sales. 

And feeling the pressure, particularly at an institution that basically has no money-- at least that's where the Crimson was 35 years ago-- it's good for you. It's good for the soul. And it actually makes you better at everything you do to own outcomes. 

Time-- how many people in the room would say they are too busy? Not busy enough? That's a politically unpopular place to put your hand, but God bless you for putting your hand up over there. The truth of the matter is, thinking about time as something to be managed, whether it's how long-- for those of you who are seniors, I'm sure you'll ask the question, how long will I do my first job? How long? Will I stay in my job six months, a year, five years? 

How long before I decide whether I really like my career? How long before I really like my major? How am I really managing my time? 

I got involved in a lot of extracurriculars. The one that broke the bank for me was becoming publisher of the Advocate. I'm not even sure why I did. Really, I'm not sure why I did it. It was another resume build. I was already busy with football and the Crimson. 

But I did it. And then time management really got into my vocabulary. I really did have to manage-- and I don't even measure it. I started skipping class. I already confessed to that. But managing time even amongst the extracurriculars got to be a big, big deal. 

Today, I actually keep a spreadsheet, a bunch of them. These are all the things I'm going to do in my life. Here's how much time is budgeted to them, and allocate it. I record everything into Outlook. I have a macro that spits it out in Excel. And I do budget versus actual comparisons. 

It's a little different since I've, quote, retired, unquote. But at Microsoft, I could tell you I was going to have 12 one on ones with Harry this year. And then I would track them. How many did I have? I was going to spend 10 hours a year talking to customers over the telephone versus in person. And I just measure everything, because I think time is so important. 

Storytelling-- I think in whatever you choose to do in life, even if you're going to be the most hardcore, dedicated computer engineer, learning to tell a story, whether you do it with my-- I can't write a lick, but I'm not bad at a speech, but my speech style is very different than people standing at podiums. It's very different. 

Being able to tell a story through your work, through your speech, through your writing is so important. You want a grant application? You better tell your story. You want your start up idea funded? You better tell your story. You want to be the top engineer on the team who's compelling vision about where the product should go? You better be able to tell a story. 

And in general, I don't think people come out of school well versed in storytelling. On the other hand, as Harvard football manager, I had to get up every team meal-- listen up, everbody-- and make announcement for the coaches. And I got to tell you, being a manager is not a lofty, revered position. At least, it wasn't 40 years ago. I'm sure now it's very different, because the whole system has changed. But you'd get up there and you'd say, how do I tell this story? What am I really going to announce? What am I going to do? Even learning to give speeches-- I was very shy as a kid. And being a Harvard football manager for me was like this huge, transformative experience. 

The last lesson I learned at Harvard is-- not literally, but figuratively-- it's get in the weight room. The weight room in sports is where you get in shape. You build new muscles. You build new flexibility. You learn to do new things because you have new capabilities. 

In life, you have to stay in the weight room. You have to keep evolving, building new skills, learning new things. And that's easy to say, but a lot of people don't do it. You could say, OK, well, people who go into the tech industry all do-- not true. 

I'll just give you one big transformation that's happening in the world today. Most people who are my age learned a form of computer science where you wrote a program that took inputs and gave you outputs that were correct or incorrect. Most modern programming says, give me a bunch of inputs and I'm going to statistically guess about what might be interesting here. 

That's a very new skill. And if you find people who are, let's say, 10 or 15 years out of college, they don't think that way technologically, even to this day. And so the need-- whether it's in your career or in your life-- for me at Harvard, I taught Math A? Does Math A still exist as a course? It was pre-calculus. 

Suffice it to say, because I thought of myself as some super math guy, I had to learn to take concepts and explain them simply. I was teaching pre-calc, something I had done five years earlier. And the ability to build new skills-- I point to the experience of doing that at Harvard. 

Beyond Harvard-- yeah, there were still a few things to learn. I know this is the best institution, absolutely, in the world. I was at the Boston Globe today talking about Harvard, number one in everything. I bleed Harvard. But I actually learned a couple things after I got out of Harvard. 

The first message I would say is in life, you want to be your own quarterback. See the playing field. Many people like to get myopically tied into one thing, and they have a hard time stepping back. Being CO of Microsoft is this amazing, wonderful opportunity. It turns out, everybody in the world wants to tell you what to do. And they'll educate you. 

You want to learn about any field of technology? As long as you don't act like a know it all, somebody will educate you. And you have a unique ability to see broadly across the technology field. Right now, I'm spending a lot of my time studying government and the economy. 

It turns out the number of places you can actually read about the totality of government in the United States is almost zero. What is the total spent in government in this country, and what does it get spent on? There's no government report on that topic. 

The best site happens to come from some random blogger who I met, who I think it's great, by the way. But I found him through our Bing search engine, not surprisingly. 

[LAUGHTER] 

That's my only plug for today. I'm still a shareholder-- but seeing the field. In life, it's always good to be the first person to achieve something. It turns out the guy who wins is the guy who was doing it last. So it's always best to invent a new idea, be the first to do something. But ultimately, it's about committing to be successful and to stay at something. It's sort of a corollary of being hardcore. 

And certainly, there are fields of Microsoft's success, like selling to large enterprises, where when we started on that in the '80s, people said, you'll never do it. That's all IBM's purview. And today, that would be 70% or 83% of Microsoft profits come because we failed at something for 20 years but we kept at it. 

Corollary to ideas matter-- it's hard to have a second idea. If you really study the tech industry, most tech companies have one idea, and as long as the idea is hot, they stay hot and then they fade to black. If you look at all the companies that were important in technology when I got to Microsoft in 1980, only IBM is still around. And I might argue it's not a tech company anymore. 

And my great dream for Microsoft is that it is, so to speak, a two, three, or four trick pony. I said someplace that I thought Apple and Microsoft were amazing because they were two trick ponies, and somebody thought I was bashing Apple. No, that's my ultimate compliment. 

Anybody who can have two good-- if you have one idea, I think you're amazing. If you have two ideas, you're lionized in history for your success. It's really interesting. 

Optimim-- Colin Powell came to speak one year at our executive retreat after he had been Head of the Joint Chiefs of Staff. And he has this quote that I have come to love. "Optimism is a force multiplier." And particularly amongst technical people and really smart people, the chic, chic, cool thing to do is to be cynical and skeptical and pick things apart. 

I know that would never happen in CS50, but you see that amongst certain kind of high IQ technical people. And yet, optimism is a force multiplier. So how are you brutally realistic and be optimistic? It's very, very important. 

I figured this out after a while at Microsoft. Salespeople at Microsoft are naturally optimistic, probably everywhere. Just tell us where to go and we're gonna run! And I know we're gonna succeed! Because people want to believe. Engineers, you say, here's where we're going to go, and the first thing they say is, oh, come on. 

[LAUGHTER] 

That's not right. That's not the right way to go. But I have found-- and this might belie my fundamental optimism-- that the engineer's optimist is sometimes a little different than the salesman. While the salesman just says, where to go, charge, the engineer likes to say, the world is all screwed up, but I can fix it. That's an engineer's optimism to me. Everything's-- but I can fix it. 

Luck-- this is the one that really doesn't always play well amongst Harvard guys. It turns out that as smart as you are, as privileged as you are to be at a place like this, and as hard as you work, luck is still going to be a factor in your life. Whether you're Bill Gates, Mark Zuckerberg, or the man in the moon, luck is important. It really is. 

Why is that important to know? Because it means you better like what you're doing. You better not be doing things just because it will make you successful, because you're going to need some luck to make yourself as successful as you want to be anyway. So find something where your passion wins out, where you're really satisfied. And then understand-- I know this. 

I think I'm really talented guy. I think Bill's a genius. I think Paul Allen is amazing, insightful guy. And I say, boy, how lucky we were. Apple-- I've seen their success, and yet, how lucky they were in many dimensions. We're a company that gave them $500 million when they were almost bankrupt in '97-- confluence of factors. And then they did great things with it. But luck always factors in. 

And then last, but not least, because I think I'm about out of time, everything in the world-- and this comes from a guy with a real bias-- everything is a technology problem. Innovation and technology is the heartbeat that leads to progress in the world. 

I read this book in the last six months. It's called Inequality, Capital in the 21st Century by a French economist named Piketty. It was kind of controversial. It turns out, if you look at the Amazon statistics, hardly anybody finished the book. It sort of reads like a socialist diatribe in the end. But it's got all this great analysis in the beginning. 

But a fundamental point he makes, looking back over thousands of years of history, is GDP growth is only a function of three things. So the improvements in life are a function of population growth and innovation. That's it-- population growth and innovation. 

Today, the hot technology, the operating system of all innovation, is computer science. And as I guess David likes to say, I'm Steve Ballmer. This is CS50, the most important class you'll take at Harvard. Thank you. 

[APPLAUSE] DAVID J. MALAN: So Steve has kindly left an enormous amount of time here to take questions. We have two microphones here. We have two microphones in the balcony. So you are encouraged to meet Gabe and Davin and others here if you would like to be the first and second to ask these questions. STEVE BALLMER: Or you can shout out. I've heard that's standard protocol in this class. 

DAVID J. MALAN: All the better. 

STEVE BALLMER: That also works. 

DAVID J. MALAN: Our first question over by Gabe here. 

AUDIENCE: What was it like for you making that decision to drop out and go to Microsoft? Because obviously, there was a lot of uncertainty. 

STEVE BALLMER: OK. It's 1980. I'm at Stanford Business School finishing up my first year. Bill Gates calls as I'm trying to decide what to do for a summer job. He says, hey, look, how are things? Yeah. Yeah, oh, you're not finished yet. Yeah. Too bad you don't have a twin. We could kind of use a business person around here. That was the pitch. 

[LAUGHTER] 

I thought about it, and I said, well, shoot. I guess I could tell him. So I called him back the next day and said, well, maybe we talk. We should talk. And my instincts were actually right. The most risk-free decision you'll ever make is the decision to drop out of college. No, why? I say it for a reason. 

Colleges let you drop back in. All my friends, professors-- oh, you're not gonna do that. You're gonna go to work for McKinney or blah blah blah-- I can't remember who I had offers from-- Brownstone Consulting Group. 

[LAUGHTER] 

And I said, I might go join this friend of mine who's got this small start up. Well, what do you know about that place? And I said, it's the world leader in something called software. And I had written a couple programs, but it's not like I-- I did not take CS50. The only programs I had written was for AM115 or something like that. It was a mathematical modeling class. 

And they looked at me kind of funny. And I told my mom and dad. My dad was an immigrant. My dad did not go to college. My mom did not go to college. My dad was an immigrant from Switzerland. The only college he really grew up hearing about was Harvard. Even when I went to Stanford to Business School, he was afraid I was making a mistake, because it was some place unheard of to him. And I said, I'm going to drop out. And this company is the world leader in software for personal computers. And my dad said to me, what's software? Well, that was not an ignorant question in 1980. It would seem funny now. 

And my mom asked me an even more prescient question, which is why would a person ever need a computer? Because remember, we're in a time of room-sized computers. But I said, look. I made a deal with Bill that said if it didn't work, he could fire me or I could drop back into Stanford at the end of the summer. 

After a month, I decided I'd made a mistake going to Microsoft. I was basically the bookkeeper for a 30-person company. I told Bill we were 30 people. We needed to add 18. He said, you're gonna bankrupt this place, Steve. I didn't ask you to drop out of Stanford to bankrupt Microsoft. 

And we had a huge fight. We were good at that. 

[LAUGHTER] 

And then he said, come on. We're going out to dinner with my dad. Bill's dad's sort of a scary looking dude-- not really, but he's 6'7". 6'7" doesn't look that tall anymore either to me, but that's a Clipper thing. 

But anyway, I went through my shtick for Bill and his dad. And that's where Bill invented what I think was the theme for the company. He said, you don't get it, Steve. We're going to put a computer on every desk and in every home. 

And I settled down. I stayed. Stanford would still take me back. It turns out, to this day, I could go finish my MBA. It just isn't that risky a proposition, because these great schools let you take time off as opposed to drop out of their memory banks. It turns out, I'm still a Stanford alum, too, when it comes to alumni giving. 

[LAUGHTER] 

[APPLAUSE] 

DAVID J. MALAN: Another question from Ian at the mic here. 

AUDIENCE: So you've made a series of comments about net neutrality, particularly speaking against it, most recently in a tweet. And that's a particularly unpopular opinion amongst a lot of young people and tech people, so I was wondering if you could elaborate that in maybe more than 180 characters. 

STEVE BALLMER: Yeah. Well, first, I haven't made a lot of comments. I made one little tweet yesterday, because I was kind of annoying on the plane and had nothing to do. So I tweeted. And boy, did that tweet get more attention than I ever expected. 

But look, I can explain. What is net neutrality about? I'm not quite sure. But it's not necessarily about keeping down the price of internet access. Competition keeps down the price of internet access. Net neutrality is merely deciding who's going to pay. If the providers who are making money on the internet-- the Googles, the Netflixes-- the Clippers, for example, if we were to go over the top with the Clippers broadcast, we too would be a broadband content provider. We're looking at that at the Clippers. 

But by saying you can't differentially charge for the traffic, what it says is all consumers should pay a higher price for the people who need the services that actually cost more. So if you watch Netflix, there's two approaches. You can tell your neighbor who doesn't watch Netflix, ha, ha, ha, ha. You pay more, even though you don't watch Netflix, than I do. Or you can let the market compete in differentially priced. 

I think we're going to get better service, more pricing options, and a better overall deal by having competition between broadband providers than by regulating the price. So this, to me, is not about low prices versus high prices. It's about letting free enterprise solve the problem versus thinking a few thinkers in DC can invent complicated pricing and tariffing schemes that are superior in creating opportunity than the market. 

Ultimately, what we really want is more investment in broadband infrastructure that leads to better service at lower prices. I'm with you on that. I'm 100% in on that. I'm making a statement in terms of how I think the world will best achieve that. And I feel clear in my thinking about that. DAVID J. MALAN: Up next, our microphone by Anton. STEVE BALLMER: And I'll say that even though I know we probably will wind up-- if we go over the top with our Clippers TV broadcast, we will wind up paying more and our customers will pay more and we will make a little less profit, but everybody else will get lower prices for fundamental broadband access. AUDIENCE: Thanks for your time. What do you love most about owning the Clippers? Who's-- wave your hand so-- 

AUDIENCE: Up here. STEVE BALLMER: Oh, hi. AUDIENCE: What's up, Steve? STEVE BALLMER: It seemed like God. Go ahead. 

AUDIENCE: Voice of a deity. 

STEVE BALLMER: What do I like best about owning the Clippers? 

AUDIENCE: Yeah, exactly. 

STEVE BALLMER: I don't know. Three months in, I can find the bathrooms now in the stadium. That's my level of sophistication. There's a lot of things that have been fun. It turns out it's even more fun to think about the team dynamics and hear about those from the coach than I thought. 

Worrying about the fan experience in the arena-- I didn't-- the song you were playing before this started, I don't know the name, but I need to get the name from you. I was thinking, that's a great song. We could really use that song for pump ups coming out at time outs. 

[LAUGHTER] 

No, seriously. You could say it's my-- I still am I a "We Will Rock You" kind of guy. But we have 150 possessions in a basketball game. And let's say at least on half of them, we want to do something to keep the crowd engaged. How do you do that? How do you orchestrate that kind of busy environment? What do you want to do on the Jumbotron? 

The technology in basketball-- unbelievable. Every MBA arena now has six cameras in the ceiling that are taking pictures of the action. And there actually are start ups that have machine learning technology that looks at the video and characterizes the action so it uses computers to decide that was a pick and roll versus a pick and pop with Chris Paul and Blake Griffin. That was a blitz by Jamal Crawford. And every arena is equipped with this technology. 

And literally-- it's a company called Second Spectrum. And one of the key guys is a 6'9" hooper out of MIT who never played basketball after college, but he's doing machine learning algorithms across vision recognition on basketball stuff. That's been kind of fun. The in arena, thinking about going over the top and what do the economics look like-- it turns out there's a lot of pretty cool things. 

It's much more complicated business than it is large. Microsoft, we have 100,000 people. We got about 130 at the Clippers. And yet, the breadth of problems we get to think about is actually-- well, it's not 1,000 times less complicated. It's probably 500 times less complicated than Microsoft. 

DAVID J. MALAN: Next question from Gabe's mic here. AUDIENCE: Oh, hi. My name is Larson Ishii. I write for Clips Nation, so I was going to continue with the Clippers questions. But I was going to ask about how you're incorporating the rest of technology. I've seen that you guys have an increased proportion of statistics within games, such as showing the four factors that produce the probability of victory within the game, which I don't think any other teams are doing in the league currently, which is really awesome. 

So I just want to know how, from your math background, you're incorporating more of the technology and statistical side into the game of basketball in what is scene as more than emerging field, and if that can help solve the Clippers' small forward problem right now. STEVE BALLMER: With a little edge in the end of that question-- [LAUGHTER] What we're doing right noq-- and the tech is just not quite there-- is for every game, we produce a couple of plays that actually take some key play from last time we played an opponent, and it shows statistically what the probability was of success and the expected points, depending upon the decisions the player makes. So you see the guys on the court. Chris is with the ball. If he throws it to Blake Griffin, 30% chance. On this one, he'd have a 40% chance of making a basket with an expected two point or three shot point shot. And we're using that to demonstrate. 

What you want to do, of course, is get it so comes back real time. So we can take a play that just happened and have the visualization based upon the data that's coming out of the sensors happen in real time so fans can really track just how amazing the speed and the decision making at that speed is. 

But we're working our way up to that. The thing that we've done that actually gets a lot interest is the thing we call our Clipper Tron application. You just go to www.clippertron.com while you're sitting in the arena, and you can pick your favorite player. You can pick a kind of a play-- a pick and roll, a blitz, a this and this. And we'll go throw the highlight up on the Jumbotron. We're adding, now, Twitter and Facebook integration. So we put your name. We'll put your picture. And we'll put the plays that you picked and we can-- people love seeing themselves on the Jumbo-- kiss cam, all that kind of stuff. 

At least, now, we're letting people throw up basketball action. Eventually, I want to be able to do it in people's homes. So with your phone, you go to Clipper Tron, and we'll throw it up live in the broadcast to you on TV-- so some of the stuff we're playing with. 

DAVID J. MALAN: Another mic up by Dan Bradley. 

AUDIENCE: Steve, after his contract with the Lakers is up, would you consider signing Jeremy Lin as a backup for Chris Paul? 

STEVE BALLMER: I support Doc Rivers 100% in his decision making about our basketball team. My job is to support, ask a lot of questions, and support. How's that for not answering your question? 

[LAUGHTER] 

[APPLAUSE] 

I did go to the Laker-Clipper game in LA last week, week before last. I'm pleased to report two things. One, Jeremy Lin played well. And two, we kicked them. 

AUDIENCE: So I'm Bobby. I'm from LA, just in case you guys need interns this summer. No, I'm just kidding. [LAUGHTER] 

But seriously-- 

STEVE BALLMER: Bobby, sballmer@clippers.com, in case you need an internship this summer. 

[LAUGHTER] 

Luck, opportunity, take advantage of it. You got to feed the aggressive instinct. Go ahead, Bobby. Run with it, though, babe. 

AUDIENCE: So you mentioned your 33 on your first exam or whatever. But can you tell us more about other examples of failure in your career at Microsoft or in your life and what you've learned from it and how you responded, et cetera? STEVE BALLMER: Yeah. I'm funny. I don't actually-- it turns out, I got a B plus on the test with the 33, because it was the fifth highest grade in the class. Although I do to play golf with a guy in LA who reminds me he got 50 on the test and beat me. He remembers that to this day. 

So everything's relative. I'm a guy who's so optimistic, in a way, I never think I fail. I just haven't succeeded yet. I say be first, but commit to be last. OK. Well, that's not going well. And you can see it in Microsoft behavior. People used to say we don't get things right till version three. I don't know whether to take that as a criticism or praise. Get it right early is good, but commit to getting things right. 

So I've certainly had setbacks, whether it was at school. Certainly, when we and IBM split ways, I thought our company would probably go out of business. That was about 1990. Certainly, I've been told many times that we'd never succeed in the enterprise business. I was told that you can't do a start up video game. 

I was told no search engine will ever succeed versus Google. There's still more of an element of truth to that one than I'd like. 

[LAUGHTER] 

I was told that the mobile device market is locked up, which I don't believe. It's partly because I believe in the power of innovation and the power not only for people to change and improve themselves, but that things do change over time. And as long as you're prepared, as I said in my talk-- if you've been in the weight room and you have the capabilities and skills to do something and you stay in the game, then you're prepared to take and seize on the next idea. 

It's kind of like saying, hey, look, we don't know how to beat the-- I won't take basketball. I'll take football. People don't know how to beat the Patriots or the Seahawks. But that doesn't mean you don't stop training, working out, building skills. You keep working on your game plan, but you're always building your skills and capabilities. Then you can be optimistic that failure will lead to success the next time. DAVID J. MALAN: Why don't we take a couple more questions and leave some time for hellos at the end? Belinda? AUDIENCE: Hey, thanks so much for coming. So I really appreciated a lot of the things you said, and I think three things in specific really resonated with me. One, treasure your time. Two, see the field. And three, also explore your passions. 

So the way I see it, the problem is that time is so finite and that we have such limited time. And explore your passions seems to me more depth-based, whereas seeing the field is very breadth-based. So taken in the context of also acquiring new skills, how do you prioritize your time? And specifically for you, when you said you created a budget for your time, how did you decide what was important and what would be worth your time, basically? 

STEVE BALLMER: OK. Let Two stories-- let me start as an undergraduate at Harvard. I beg every senior I know do what I did, because I thought it really worked out. When I was a senior, I interviewed with 35 different companies on campus. 

I'm trying to get my son to do that. He's a senior. I've tried to get friends of mine whose kids went to Harvard-- people don't do that. But why was that good? And then I got a chance to sniff 35 different companies, 35 different cultures. I went back and visited. I can tell you what it felt like to run a check processing room at Mellon Bank. I can tell you what it would have felt like to go to Minot, North Dakota and trade grain for Cargill. I can tell you what it would have felt like to run a small start up insurance company in Cleveland-- Progressive Insurance, which is now, of course, a major player. I remember all these visits. And I just think if you want to see the field, you have opportunities to get what I would call rapid little experiences that are really helpful before you get down to your passions. 

What I would say as a CEO I did is I blocked two kinds of time. One was time that I would do whatever our people in a given country wanted me to do or our engineers in a given product group wanted me to do. That means they're telling me about things I'm not necessarily interested in. But I can always help the sales rep with a sale. Hey, the boss is here, blah blah blah. But I'm learning, learning, learning, learning. 

And then I also blocked explicitly about call it a total of 20% of my time where people couldn't schedule it. And then I could use it for reading, exploring. But even time to explore needs to be blocked. And time to let others educate you needs to be blocked. 

And I think that's part of how you can continue to see the field and then develop the kind of passion-- so just a few thoughts. 

DAVID J. MALAN: Last question from Davin's mic. 

AUDIENCE: Hi, I'm J. Paul Meyer. Over your years at Microsoft, what product or hire or whatever it is have you been most excited about or you most excited about? 

STEVE BALLMER: It's kind of like asking which of your kids you like the best. And it's kind of situational, timewise. You look at Windows 1.0 when it came out-- I can't write a line of code, but I was the development manager for Windows 1.0. Of course that's my favorite product, and at the end of the day, it's the backbone of Microsoft. 

On the other hand, when you say slick and interesting, I'd probably point to Excel. Life changing for me, I'd probably point to Surface Pro 3 and the pen and One Note. I finally have the thing I really want to get my work done. I really can be paperless. I really have my life in the cloud. 

For me, inking is very important, because if you're the guy somebody's presenting to, you can't sit there and type. If you want to draw and annotate, markup, you can't type. So I might say Surface Pro 3. If I was home with my family, because I have three boys of about the right age, I'd say, well, of course, it was Xbox 360 and the Halo game. My 15-year-old still believes that's the only worthwhile piece of work I did in my working career. 

[LAUGHTER] Three weeks ago, he says to me, Dad, I'm very disappointed in you leaving Microsoft. I was worried about this. Aaron. I don't know whether you can still get me the new Halos when they come out. 

[LAUGHTER] 

So beauty's a little in the eye of the beholder, but I'd probably point to the Surface Pro 3 in modern days and Windows 1.0 in historic days. DAVID J. MALAN: Well, let me wrap up with a little something we've never done before. But we, on behalf of CS50 TFs and TAs would like to make you an honorary member of CS50's staff if you'll have us. 

STEVE BALLMER: OK, absolutely. 

[CHEERING AND APPLAUSE] Nice! 

DAVID J. MALAN: And for everyone here, you are all cordially invited to a special event that President Drew Faust, Dean Cherry Murray, and Steve Ballmer will be hosting tomorrow at the I-Lab at 12:00 PM, for which there will be a puzzle hunt which is inside of this packet which you'll be handed on the way out, for which there's fabulous prizes, including several Xboxes and also a pair of Clipper tickets. 

STEVE BALLMER: Clipper/Celtic tickets for the game here on March 29, visiting owners seats. Do compete. [CHEERING] STEVE BALLMER: Thanks, everybody. DAVID J. MALAN: CS50, this was Steve Ballmer. 

STEVE BALLMER: This is CS50! [MUSIC PLAYING] 

[AUDIENCE CHEERING AND APPLAUDING] 

DAVID J. MALAN: This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. We are so excited to have an amazing alum here with us today. He was a member of the Harvard class of 1977. He concentrated in applied math economics. And he was a resident of Currier House. 

[AUDIENCE CHEERING] 

He was manager of the Harvard football team, advertising manager of the Crimson, and publisher of the Harvard Advocate. And upon graduation, he headed off for a to Stanford's business school, but didn't stay long, as he was quickly recruited by a friend of his to a little company we all know now as Microsoft, where he served first as business manager, later as CEO, and is now the owner of the LA Clippers. 

[AUDIENCE CHEERING] 

CS50, this is Steve Ballmer. 

[CHEERING AND APPLAUSE] 

STEVE BALLMER: Well, thanks. I'm honored to have a chance to be here with you today. When I first talked to David about this, he said, I'd really like you to come on in and give an advanced lecture in machine learning and computational thinking. We didn't dwell on that idea very long. 

So I thought I'd give you a little talk-- if I can figure out which space bar I'm hitting-- what do we need to do to change? I won't touch that one. This one I won't touch. There we go. OK. 

I thought I'd give you a little-- you've got to be a competitor in business. Anyway, I thought we'd talk a little bit today, just a few thoughts, on most of what I learned I learned at Harvard University. I thought I'd try to summarize that in about nine easy steps and then four things I learned after I got out of this place, and hopefully get all through that in about 25 minutes-- just to give you a little bit of food for thought. And then we'll do Q&A. 

I am 99.999999999% sure that nothing we talk about today will matter for your grade or will appear on the final. I think you're as safe as rain on that today. But hopefully, get you thinking about a couple things as we go through. First thing that's probably important for you to register-- this is sort of academically dangerous-- of all those many important things I learned at Harvard, it wasn't in the classroom. As I listened to David do the introduction, I thought to myself, it sounds like I majored in extracurriculars when I was here. That's actually true. I attended all of one class session senior year. Junior year was a little bit better. 

With modern technology, I don't know what the possibilities are, but they would seem to be even greater today for mischief outside the classroom. But I will tell you it was really very, very formative and seminal. I arrived here in 1973. And I was hell bent and determined that I was going to get my Ph.D. in either math or physics. And about the only thing to figure out was whether it was going to be math or physics. That was it. That's all that needed to be figured out. 

Freshman year, the big decision was whether to take Physics 55-- I don't know if that course still exists-- or Math 55. I thought I'd take both, and the kindly adviser said, young Steve, big mistake. I won't allow you to do that. So I took one of them and did an independent study in the other. And thank god I did. 

First lesson, I learned very, very early. Freshman year, I took my first exam. I took my first exam. I walked out of it. I called my parents and said, I think I just flunked out of school. I was already involved with the Harvard football team doing statistics. I was supposed to go down to Penn, so it must have been about this time of year, since the schedule for football hasn't changed in 50 years. 

We were supposed to go down Penn. I didn't go, because I was crest fallen that I had flunked out of school. I got my exam back the next week, and sure enough, I had gotten a 33, which was about fifth or sixth in the class. The guy who got 75 is Ph.D. in physics, is a professor of physics, and is a genius. So it took me about two months to learn I wasn't a physicist and I wasn't a genius. And everything good started right there with my first big failure, so to speak. 

I just finished giving a class, actually, at the business school at Stanford. And I worked with a lady who had been a professor here at Harvard in economics and now is at Stanford Business School. And I took the opportunity to look back and reflect on, let me say, important lessons that I've learned over the time of my life, but particularly that mattered to me as I was running Microsoft. 

And I'm not going to try to go through the detail of each, but I summarise them in short form. And when I stopped and looked back and I said, how many of those relate to something concretely that I got out of my experience at Harvard, the answer turns out to be very high. 

Small show of hands-- how many freshman do we have in the class? Sophomores? Juniors? Seniors trying to get that last CS in before you leave? OK, good. 

I will tell you that in reflection, the amount you can get out of this place is stunning. My best friends, many of them I met to this day while I was here. The formative experiences, I got here. And everybody tells you, but it's amazing what you can get out of the place. 

Number one for me, life lesson, is ideas matter. Now, people say, of course ideas matter. What kind of stupid life lesson is it that ideas matter? The truth of the matter is this is both under and over appreciated. Most people think every idea is a good idea as long as they had it. The truth of the matter is not every idea is a good idea. Not every idea matters. And not every idea should be pursued. 

And if you're in a field like I am or was of innovation, not every idea is a good idea, even if it strikes you that way on first blush. In fact, most people are lucky to have one idea that really matters in their whole life. That's not a criticism. But earth shattering, life changing ideas are very few and far between-- research insights, investment insights, innovations. A good idea needs to be cherished and nurtured. And in some senses, you could say I learned that here at Microsoft-- here at Microsoft-- here at Harvard. 

[LAUGHTER] 

I actually know what's on the slide, though. I learned it here. Microsoft was started here by Bill Gates and Paul Allen when I was here. When I finally joined the company, it was five years after Microsoft got started. Some people would say it got started up at the Currier House, but it really got started up at the housing project up at Ringe, which is where Paul Allen was living. 

But this notion, which Microsoft started, was the idea that software represented a form of free intelligence, and that if you coupled it with this new essentially free intelligence in the form of the microprocessor, unbelievable things would happen. And that basic idea that software was a mobilizing force for this new microprocessor, which was free-- that obviously was a big idea. 

And that was the idea that Paul Allen and Bill Gates had when they started the company. And ideas do matter. And it is worth considering and not falling in love with every idea you have, whether you're trying to solve a problem set or you're trying to do something else. 

Second thing I learned is there is an advantage to being what I like to call now hardcore. Hardcore-- I don't know quite how to describe it. It's a combination of tenacious and dedicated and passionate and committed-- something like that, hardcore. 

I learned about being hardcore from math concentrators at Harvard. 

[LAUGHTER] 

I'm not going to ask whether we have any math concentrators here. But I would say that's where I got my lesson. People could just go crazy-- focused. And it wasn't just that people were genius, but working and working and working and working. I'd sit in my room working on a problem set, and after three hours-- I'm a little ADD-- I just couldn't take it. The most hardcore people could just power through anything. 

And the advantage of being that tenacious and dedicated and committed-- I claim it helped us at Microsoft. It was fundamental at Microsoft. But I learned it here at Harvard. 

Passion-- I think it's probably fair for me to say at this stage in my life that basketball is a passion. I started keeping track of rebounds and assists. $12 a game I used to get paid. I went to every Harvard basketball game, which I would have gone to anyway. But I got paid $12 to keep track of rebounds and assists. 

And I will say that finding your passion is something you get to do almost in a unique way in college. And finding the things that you are passionate about is probably the most important thing that you get to really start doing when you get to college. Before college, everything's about getting to college. It's unfortunate, but I know it's true. 

Here, take the time to explore your passion. I now this year will probably go to about 200 basketball games. I think it's fair to say it is a passion. But sitting there in the old IAB, which I think is called the Malkin Center, marking down-- there's a guy named Lou Silver who played on the Harvard basketball team in 1975. I gave him the benefit of the doubt on every rebound ever. I think I was part of his All Ivy success. And who was one of the first guys to email me when I bought the LA Clippers? Lou Silver-- passion built early in life. 

Own the results. This is actually, I think, one of the hardest things for college kids to get, especially kids at Harvard, which is at the end of the day, it's not just about whether you have a good idea and whether you're really talented and really smart. That's enough to get you into a lot of good colleges, including this one. 

But all of those things are not really measures of success. You have to do something other than make grades and get measured on them in life. That's generally how the world works. And really being accountable for outcomes makes you better at everything you do. I comped for the Crimson and had to go sell $1,000 worth of advertising. That was a lot of money. I don't know what the numbers would be these days-- but $1,000 of ad revenue, and then took on ad sales. 

And feeling the pressure, particularly at an institution that basically has no money-- at least that's where the Crimson was 35 years ago-- it's good for you. It's good for the soul. And it actually makes you better at everything you do to own outcomes. 

Time-- how many people in the room would say they are too busy? Not busy enough? That's a politically unpopular place to put your hand, but God bless you for putting your hand up over there. The truth of the matter is, thinking about time as something to be managed, whether it's how long-- for those of you who are seniors, I'm sure you'll ask the question, how long will I do my first job? How long? Will I stay in my job six months, a year, five years? 

How long before I decide whether I really like my career? How long before I really like my major? How am I really managing my time? 

I got involved in a lot of extracurriculars. The one that broke the bank for me was becoming publisher of the Advocate. I'm not even sure why I did. Really, I'm not sure why I did it. It was another resume build. I was already busy with football and the Crimson. 

But I did it. And then time management really got into my vocabulary. I really did have to manage-- and I don't even measure it. I started skipping class. I already confessed to that. But managing time even amongst the extracurriculars got to be a big, big deal. 

Today, I actually keep a spreadsheet, a bunch of them. These are all the things I'm going to do in my life. Here's how much time is budgeted to them, and allocate it. I record everything into Outlook. I have a macro that spits it out in Excel. And I do budget versus actual comparisons. 

It's a little different since I've, quote, retired, unquote. But at Microsoft, I could tell you I was going to have 12 one on ones with Harry this year. And then I would track them. How many did I have? I was going to spend 10 hours a year talking to customers over the telephone versus in person. And I just measure everything, because I think time is so important. 

Storytelling-- I think in whatever you choose to do in life, even if you're going to be the most hardcore, dedicated computer engineer, learning to tell a story, whether you do it with my-- I can't write a lick, but I'm not bad at a speech, but my speech style is very different than people standing at podiums. It's very different. 

Being able to tell a story through your work, through your speech, through your writing is so important. You want a grant application? You better tell your story. You want your start up idea funded? You better tell your story. You want to be the top engineer on the team who's compelling vision about where the product should go? You better be able to tell a story. 

And in general, I don't think people come out of school well versed in storytelling. On the other hand, as Harvard football manager, I had to get up every team meal-- listen up, everbody-- and make announcement for the coaches. And I got to tell you, being a manager is not a lofty, revered position. At least, it wasn't 40 years ago. I'm sure now it's very different, because the whole system has changed. But you'd get up there and you'd say, how do I tell this story? What am I really going to announce? What am I going to do? Even learning to give speeches-- I was very shy as a kid. And being a Harvard football manager for me was like this huge, transformative experience. 

The last lesson I learned at Harvard is-- not literally, but figuratively-- it's get in the weight room. The weight room in sports is where you get in shape. You build new muscles. You build new flexibility. You learn to do new things because you have new capabilities. 

In life, you have to stay in the weight room. You have to keep evolving, building new skills, learning new things. And that's easy to say, but a lot of people don't do it. You could say, OK, well, people who go into the tech industry all do-- not true. 

I'll just give you one big transformation that's happening in the world today. Most people who are my age learned a form of computer science where you wrote a program that took inputs and gave you outputs that were correct or incorrect. Most modern programming says, give me a bunch of inputs and I'm going to statistically guess about what might be interesting here. 

That's a very new skill. And if you find people who are, let's say, 10 or 15 years out of college, they don't think that way technologically, even to this day. And so the need-- whether it's in your career or in your life-- for me at Harvard, I taught Math A? Does Math A still exist as a course? It was pre-calculus. 

Suffice it to say, because I thought of myself as some super math guy, I had to learn to take concepts and explain them simply. I was teaching pre-calc, something I had done five years earlier. And the ability to build new skills-- I point to the experience of doing that at Harvard. 

Beyond Harvard-- yeah, there were still a few things to learn. I know this is the best institution, absolutely, in the world. I was at the Boston Globe today talking about Harvard, number one in everything. I bleed Harvard. But I actually learned a couple things after I got out of Harvard. 

The first message I would say is in life, you want to be your own quarterback. See the playing field. Many people like to get myopically tied into one thing, and they have a hard time stepping back. Being CO of Microsoft is this amazing, wonderful opportunity. It turns out, everybody in the world wants to tell you what to do. And they'll educate you. 

You want to learn about any field of technology? As long as you don't act like a know it all, somebody will educate you. And you have a unique ability to see broadly across the technology field. Right now, I'm spending a lot of my time studying government and the economy. 

It turns out the number of places you can actually read about the totality of government in the United States is almost zero. What is the total spent in government in this country, and what does it get spent on? There's no government report on that topic. 

The best site happens to come from some random blogger who I met, who I think it's great, by the way. But I found him through our Bing search engine, not surprisingly. 

[LAUGHTER] 

That's my only plug for today. I'm still a shareholder-- but seeing the field. In life, it's always good to be the first person to achieve something. It turns out the guy who wins is the guy who was doing it last. So it's always best to invent a new idea, be the first to do something. But ultimately, it's about committing to be successful and to stay at something. It's sort of a corollary of being hardcore. 

And certainly, there are fields of Microsoft's success, like selling to large enterprises, where when we started on that in the '80s, people said, you'll never do it. That's all IBM's purview. And today, that would be 70% or 83% of Microsoft profits come because we failed at something for 20 years but we kept at it. 

Corollary to ideas matter-- it's hard to have a second idea. If you really study the tech industry, most tech companies have one idea, and as long as the idea is hot, they stay hot and then they fade to black. If you look at all the companies that were important in technology when I got to Microsoft in 1980, only IBM is still around. And I might argue it's not a tech company anymore. 

And my great dream for Microsoft is that it is, so to speak, a two, three, or four trick pony. I said someplace that I thought Apple and Microsoft were amazing because they were two trick ponies, and somebody thought I was bashing Apple. No, that's my ultimate compliment. 

Anybody who can have two good-- if you have one idea, I think you're amazing. If you have two ideas, you're lionized in history for your success. It's really interesting. 

Optimim-- Colin Powell came to speak one year at our executive retreat after he had been Head of the Joint Chiefs of Staff. And he has this quote that I have come to love. "Optimism is a force multiplier." And particularly amongst technical people and really smart people, the chic, chic, cool thing to do is to be cynical and skeptical and pick things apart. 

I know that would never happen in CS50, but you see that amongst certain kind of high IQ technical people. And yet, optimism is a force multiplier. So how are you brutally realistic and be optimistic? It's very, very important. 

I figured this out after a while at Microsoft. Salespeople at Microsoft are naturally optimistic, probably everywhere. Just tell us where to go and we're gonna run! And I know we're gonna succeed! Because people want to believe. Engineers, you say, here's where we're going to go, and the first thing they say is, oh, come on. 

[LAUGHTER] 

That's not right. That's not the right way to go. But I have found-- and this might belie my fundamental optimism-- that the engineer's optimist is sometimes a little different than the salesman. While the salesman just says, where to go, charge, the engineer likes to say, the world is all screwed up, but I can fix it. That's an engineer's optimism to me. Everything's-- but I can fix it. 

Luck-- this is the one that really doesn't always play well amongst Harvard guys. It turns out that as smart as you are, as privileged as you are to be at a place like this, and as hard as you work, luck is still going to be a factor in your life. Whether you're Bill Gates, Mark Zuckerberg, or the man in the moon, luck is important. It really is. 

Why is that important to know? Because it means you better like what you're doing. You better not be doing things just because it will make you successful, because you're going to need some luck to make yourself as successful as you want to be anyway. So find something where your passion wins out, where you're really satisfied. And then understand-- I know this. 

I think I'm really talented guy. I think Bill's a genius. I think Paul Allen is amazing, insightful guy. And I say, boy, how lucky we were. Apple-- I've seen their success, and yet, how lucky they were in many dimensions. We're a company that gave them $500 million when they were almost bankrupt in '97-- confluence of factors. And then they did great things with it. But luck always factors in. 

And then last, but not least, because I think I'm about out of time, everything in the world-- and this comes from a guy with a real bias-- everything is a technology problem. Innovation and technology is the heartbeat that leads to progress in the world. 

I read this book in the last six months. It's called Inequality, Capital in the 21st Century by a French economist named Piketty. It was kind of controversial. It turns out, if you look at the Amazon statistics, hardly anybody finished the book. It sort of reads like a socialist diatribe in the end. But it's got all this great analysis in the beginning. 

But a fundamental point he makes, looking back over thousands of years of history, is GDP growth is only a function of three things. So the improvements in life are a function of population growth and innovation. That's it-- population growth and innovation. 

Today, the hot technology, the operating system of all innovation, is computer science. And as I guess David likes to say, I'm Steve Ballmer. This is CS50, the most important class you'll take at Harvard. Thank you. 

[APPLAUSE] DAVID J. MALAN: So Steve has kindly left an enormous amount of time here to take questions. We have two microphones here. We have two microphones in the balcony. So you are encouraged to meet Gabe and Davin and others here if you would like to be the first and second to ask these questions. STEVE BALLMER: Or you can shout out. I've heard that's standard protocol in this class. 

DAVID J. MALAN: All the better. 

STEVE BALLMER: That also works. 

DAVID J. MALAN: Our first question over by Gabe here. 

AUDIENCE: What was it like for you making that decision to drop out and go to Microsoft? Because obviously, there was a lot of uncertainty. 

STEVE BALLMER: OK. It's 1980. I'm at Stanford Business School finishing up my first year. Bill Gates calls as I'm trying to decide what to do for a summer job. He says, hey, look, how are things? Yeah. Yeah, oh, you're not finished yet. Yeah. Too bad you don't have a twin. We could kind of use a business person around here. That was the pitch. 

[LAUGHTER] 

I thought about it, and I said, well, shoot. I guess I could tell him. So I called him back the next day and said, well, maybe we talk. We should talk. And my instincts were actually right. The most risk-free decision you'll ever make is the decision to drop out of college. No, why? I say it for a reason. 

Colleges let you drop back in. All my friends, professors-- oh, you're not gonna do that. You're gonna go to work for McKinney or blah blah blah-- I can't remember who I had offers from-- Brownstone Consulting Group. 

[LAUGHTER] 

And I said, I might go join this friend of mine who's got this small start up. Well, what do you know about that place? And I said, it's the world leader in something called software. And I had written a couple programs, but it's not like I-- I did not take CS50. The only programs I had written was for AM115 or something like that. It was a mathematical modeling class. 

And they looked at me kind of funny. And I told my mom and dad. My dad was an immigrant. My dad did not go to college. My mom did not go to college. My dad was an immigrant from Switzerland. The only college he really grew up hearing about was Harvard. Even when I went to Stanford to Business School, he was afraid I was making a mistake, because it was some place unheard of to him. And I said, I'm going to drop out. And this company is the world leader in software for personal computers. And my dad said to me, what's software? Well, that was not an ignorant question in 1980. It would seem funny now. 

And my mom asked me an even more prescient question, which is why would a person ever need a computer? Because remember, we're in a time of room-sized computers. But I said, look. I made a deal with Bill that said if it didn't work, he could fire me or I could drop back into Stanford at the end of the summer. 

After a month, I decided I'd made a mistake going to Microsoft. I was basically the bookkeeper for a 30-person company. I told Bill we were 30 people. We needed to add 18. He said, you're gonna bankrupt this place, Steve. I didn't ask you to drop out of Stanford to bankrupt Microsoft. 

And we had a huge fight. We were good at that. 

[LAUGHTER] 

And then he said, come on. We're going out to dinner with my dad. Bill's dad's sort of a scary looking dude-- not really, but he's 6'7". 6'7" doesn't look that tall anymore either to me, but that's a Clipper thing. 

But anyway, I went through my shtick for Bill and his dad. And that's where Bill invented what I think was the theme for the company. He said, you don't get it, Steve. We're going to put a computer on every desk and in every home. 

And I settled down. I stayed. Stanford would still take me back. It turns out, to this day, I could go finish my MBA. It just isn't that risky a proposition, because these great schools let you take time off as opposed to drop out of their memory banks. It turns out, I'm still a Stanford alum, too, when it comes to alumni giving. 

[LAUGHTER] 

[APPLAUSE] 

DAVID J. MALAN: Another question from Ian at the mic here. 

AUDIENCE: So you've made a series of comments about net neutrality, particularly speaking against it, most recently in a tweet. And that's a particularly unpopular opinion amongst a lot of young people and tech people, so I was wondering if you could elaborate that in maybe more than 180 characters. 

STEVE BALLMER: Yeah. Well, first, I haven't made a lot of comments. I made one little tweet yesterday, because I was kind of annoying on the plane and had nothing to do. So I tweeted. And boy, did that tweet get more attention than I ever expected. 

But look, I can explain. What is net neutrality about? I'm not quite sure. But it's not necessarily about keeping down the price of internet access. Competition keeps down the price of internet access. Net neutrality is merely deciding who's going to pay. If the providers who are making money on the internet-- the Googles, the Netflixes-- the Clippers, for example, if we were to go over the top with the Clippers broadcast, we too would be a broadband content provider. We're looking at that at the Clippers. 

But by saying you can't differentially charge for the traffic, what it says is all consumers should pay a higher price for the people who need the services that actually cost more. So if you watch Netflix, there's two approaches. You can tell your neighbor who doesn't watch Netflix, ha, ha, ha, ha. You pay more, even though you don't watch Netflix, than I do. Or you can let the market compete in differentially priced. 

I think we're going to get better service, more pricing options, and a better overall deal by having competition between broadband providers than by regulating the price. So this, to me, is not about low prices versus high prices. It's about letting free enterprise solve the problem versus thinking a few thinkers in DC can invent complicated pricing and tariffing schemes that are superior in creating opportunity than the market. 

Ultimately, what we really want is more investment in broadband infrastructure that leads to better service at lower prices. I'm with you on that. I'm 100% in on that. I'm making a statement in terms of how I think the world will best achieve that. And I feel clear in my thinking about that. DAVID J. MALAN: Up next, our microphone by Anton. STEVE BALLMER: And I'll say that even though I know we probably will wind up-- if we go over the top with our Clippers TV broadcast, we will wind up paying more and our customers will pay more and we will make a little less profit, but everybody else will get lower prices for fundamental broadband access. AUDIENCE: Thanks for your time. What do you love most about owning the Clippers? Who's-- wave your hand so-- 

AUDIENCE: Up here. STEVE BALLMER: Oh, hi. AUDIENCE: What's up, Steve? STEVE BALLMER: It seemed like God. Go ahead. 

AUDIENCE: Voice of a deity. 

STEVE BALLMER: What do I like best about owning the Clippers? 

AUDIENCE: Yeah, exactly. 

STEVE BALLMER: I don't know. Three months in, I can find the bathrooms now in the stadium. That's my level of sophistication. There's a lot of things that have been fun. It turns out it's even more fun to think about the team dynamics and hear about those from the coach than I thought. 

Worrying about the fan experience in the arena-- I didn't-- the song you were playing before this started, I don't know the name, but I need to get the name from you. I was thinking, that's a great song. We could really use that song for pump ups coming out at time outs. 

[LAUGHTER] 

No, seriously. You could say it's my-- I still am I a "We Will Rock You" kind of guy. But we have 150 possessions in a basketball game. And let's say at least on half of them, we want to do something to keep the crowd engaged. How do you do that? How do you orchestrate that kind of busy environment? What do you want to do on the Jumbotron? 

The technology in basketball-- unbelievable. Every MBA arena now has six cameras in the ceiling that are taking pictures of the action. And there actually are start ups that have machine learning technology that looks at the video and characterizes the action so it uses computers to decide that was a pick and roll versus a pick and pop with Chris Paul and Blake Griffin. That was a blitz by Jamal Crawford. And every arena is equipped with this technology. 

And literally-- it's a company called Second Spectrum. And one of the key guys is a 6'9" hooper out of MIT who never played basketball after college, but he's doing machine learning algorithms across vision recognition on basketball stuff. That's been kind of fun. The in arena, thinking about going over the top and what do the economics look like-- it turns out there's a lot of pretty cool things. 

It's much more complicated business than it is large. Microsoft, we have 100,000 people. We got about 130 at the Clippers. And yet, the breadth of problems we get to think about is actually-- well, it's not 1,000 times less complicated. It's probably 500 times less complicated than Microsoft. 

DAVID J. MALAN: Next question from Gabe's mic here. AUDIENCE: Oh, hi. My name is Larson Ishii. I write for Clips Nation, so I was going to continue with the Clippers questions. But I was going to ask about how you're incorporating the rest of technology. I've seen that you guys have an increased proportion of statistics within games, such as showing the four factors that produce the probability of victory within the game, which I don't think any other teams are doing in the league currently, which is really awesome. 

So I just want to know how, from your math background, you're incorporating more of the technology and statistical side into the game of basketball in what is scene as more than emerging field, and if that can help solve the Clippers' small forward problem right now. STEVE BALLMER: With a little edge in the end of that question-- [LAUGHTER] What we're doing right noq-- and the tech is just not quite there-- is for every game, we produce a couple of plays that actually take some key play from last time we played an opponent, and it shows statistically what the probability was of success and the expected points, depending upon the decisions the player makes. So you see the guys on the court. Chris is with the ball. If he throws it to Blake Griffin, 30% chance. On this one, he'd have a 40% chance of making a basket with an expected two point or three shot point shot. And we're using that to demonstrate. 

What you want to do, of course, is get it so comes back real time. So we can take a play that just happened and have the visualization based upon the data that's coming out of the sensors happen in real time so fans can really track just how amazing the speed and the decision making at that speed is. 

But we're working our way up to that. The thing that we've done that actually gets a lot interest is the thing we call our Clipper Tron application. You just go to www.clippertron.com while you're sitting in the arena, and you can pick your favorite player. You can pick a kind of a play-- a pick and roll, a blitz, a this and this. And we'll go throw the highlight up on the Jumbotron. We're adding, now, Twitter and Facebook integration. So we put your name. We'll put your picture. And we'll put the plays that you picked and we can-- people love seeing themselves on the Jumbo-- kiss cam, all that kind of stuff. 

At least, now, we're letting people throw up basketball action. Eventually, I want to be able to do it in people's homes. So with your phone, you go to Clipper Tron, and we'll throw it up live in the broadcast to you on TV-- so some of the stuff we're playing with. 

DAVID J. MALAN: Another mic up by Dan Bradley. 

AUDIENCE: Steve, after his contract with the Lakers is up, would you consider signing Jeremy Lin as a backup for Chris Paul? 

STEVE BALLMER: I support Doc Rivers 100% in his decision making about our basketball team. My job is to support, ask a lot of questions, and support. How's that for not answering your question? 

[LAUGHTER] 

[APPLAUSE] 

I did go to the Laker-Clipper game in LA last week, week before last. I'm pleased to report two things. One, Jeremy Lin played well. And two, we kicked them. 

AUDIENCE: So I'm Bobby. I'm from LA, just in case you guys need interns this summer. No, I'm just kidding. [LAUGHTER] 

But seriously-- 

STEVE BALLMER: Bobby, sballmer@clippers.com, in case you need an internship this summer. 

[LAUGHTER] 

Luck, opportunity, take advantage of it. You got to feed the aggressive instinct. Go ahead, Bobby. Run with it, though, babe. 

AUDIENCE: So you mentioned your 33 on your first exam or whatever. But can you tell us more about other examples of failure in your career at Microsoft or in your life and what you've learned from it and how you responded, et cetera? STEVE BALLMER: Yeah. I'm funny. I don't actually-- it turns out, I got a B plus on the test with the 33, because it was the fifth highest grade in the class. Although I do to play golf with a guy in LA who reminds me he got 50 on the test and beat me. He remembers that to this day. 

So everything's relative. I'm a guy who's so optimistic, in a way, I never think I fail. I just haven't succeeded yet. I say be first, but commit to be last. OK. Well, that's not going well. And you can see it in Microsoft behavior. People used to say we don't get things right till version three. I don't know whether to take that as a criticism or praise. Get it right early is good, but commit to getting things right. 

So I've certainly had setbacks, whether it was at school. Certainly, when we and IBM split ways, I thought our company would probably go out of business. That was about 1990. Certainly, I've been told many times that we'd never succeed in the enterprise business. I was told that you can't do a start up video game. 

I was told no search engine will ever succeed versus Google. There's still more of an element of truth to that one than I'd like. 

[LAUGHTER] 

I was told that the mobile device market is locked up, which I don't believe. It's partly because I believe in the power of innovation and the power not only for people to change and improve themselves, but that things do change over time. And as long as you're prepared, as I said in my talk-- if you've been in the weight room and you have the capabilities and skills to do something and you stay in the game, then you're prepared to take and seize on the next idea. 

It's kind of like saying, hey, look, we don't know how to beat the-- I won't take basketball. I'll take football. People don't know how to beat the Patriots or the Seahawks. But that doesn't mean you don't stop training, working out, building skills. You keep working on your game plan, but you're always building your skills and capabilities. Then you can be optimistic that failure will lead to success the next time. DAVID J. MALAN: Why don't we take a couple more questions and leave some time for hellos at the end? Belinda? AUDIENCE: Hey, thanks so much for coming. So I really appreciated a lot of the things you said, and I think three things in specific really resonated with me. One, treasure your time. Two, see the field. And three, also explore your passions. 

So the way I see it, the problem is that time is so finite and that we have such limited time. And explore your passions seems to me more depth-based, whereas seeing the field is very breadth-based. So taken in the context of also acquiring new skills, how do you prioritize your time? And specifically for you, when you said you created a budget for your time, how did you decide what was important and what would be worth your time, basically? 

STEVE BALLMER: OK. Let Two stories-- let me start as an undergraduate at Harvard. I beg every senior I know do what I did, because I thought it really worked out. When I was a senior, I interviewed with 35 different companies on campus. 

I'm trying to get my son to do that. He's a senior. I've tried to get friends of mine whose kids went to Harvard-- people don't do that. But why was that good? And then I got a chance to sniff 35 different companies, 35 different cultures. I went back and visited. I can tell you what it felt like to run a check processing room at Mellon Bank. I can tell you what it would have felt like to go to Minot, North Dakota and trade grain for Cargill. I can tell you what it would have felt like to run a small start up insurance company in Cleveland-- Progressive Insurance, which is now, of course, a major player. I remember all these visits. And I just think if you want to see the field, you have opportunities to get what I would call rapid little experiences that are really helpful before you get down to your passions. 

What I would say as a CEO I did is I blocked two kinds of time. One was time that I would do whatever our people in a given country wanted me to do or our engineers in a given product group wanted me to do. That means they're telling me about things I'm not necessarily interested in. But I can always help the sales rep with a sale. Hey, the boss is here, blah blah blah. But I'm learning, learning, learning, learning. 

And then I also blocked explicitly about call it a total of 20% of my time where people couldn't schedule it. And then I could use it for reading, exploring. But even time to explore needs to be blocked. And time to let others educate you needs to be blocked. 

And I think that's part of how you can continue to see the field and then develop the kind of passion-- so just a few thoughts. 

DAVID J. MALAN: Last question from Davin's mic. 

AUDIENCE: Hi, I'm J. Paul Meyer. Over your years at Microsoft, what product or hire or whatever it is have you been most excited about or you most excited about? 

STEVE BALLMER: It's kind of like asking which of your kids you like the best. And it's kind of situational, timewise. You look at Windows 1.0 when it came out-- I can't write a line of code, but I was the development manager for Windows 1.0. Of course that's my favorite product, and at the end of the day, it's the backbone of Microsoft. 

On the other hand, when you say slick and interesting, I'd probably point to Excel. Life changing for me, I'd probably point to Surface Pro 3 and the pen and One Note. I finally have the thing I really want to get my work done. I really can be paperless. I really have my life in the cloud. 

For me, inking is very important, because if you're the guy somebody's presenting to, you can't sit there and type. If you want to draw and annotate, markup, you can't type. So I might say Surface Pro 3. If I was home with my family, because I have three boys of about the right age, I'd say, well, of course, it was Xbox 360 and the Halo game. My 15-year-old still believes that's the only worthwhile piece of work I did in my working career. 

[LAUGHTER] Three weeks ago, he says to me, Dad, I'm very disappointed in you leaving Microsoft. I was worried about this. Aaron. I don't know whether you can still get me the new Halos when they come out. 

[LAUGHTER] 

So beauty's a little in the eye of the beholder, but I'd probably point to the Surface Pro 3 in modern days and Windows 1.0 in historic days. DAVID J. MALAN: Well, let me wrap up with a little something we've never done before. But we, on behalf of CS50 TFs and TAs would like to make you an honorary member of CS50's staff if you'll have us. 

STEVE BALLMER: OK, absolutely. 

[CHEERING AND APPLAUSE] Nice! 

DAVID J. MALAN: And for everyone here, you are all cordially invited to a special event that President Drew Faust, Dean Cherry Murray, and Steve Ballmer will be hosting tomorrow at the I-Lab at 12:00 PM, for which there will be a puzzle hunt which is inside of this packet which you'll be handed on the way out, for which there's fabulous prizes, including several Xboxes and also a pair of Clipper tickets. 

STEVE BALLMER: Clipper/Celtic tickets for the game here on March 29, visiting owners seats. Do compete. [CHEERING] STEVE BALLMER: Thanks, everybody. DAVID J. MALAN: CS50, this was Steve Ballmer. 

STEVE BALLMER: This is CS50! [MUSIC PLAYING] 

[AUDIENCE CHEERING AND APPLAUDING] 

DAVID J. MALAN: This is CS50, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. We are so excited to have an amazing alum here with us today. He was a member of the Harvard class of 1977. He concentrated in applied math economics. And he was a resident of Currier House. 

[AUDIENCE CHEERING] 

He was manager of the Harvard football team, advertising manager of the Crimson, and publisher of the Harvard Advocate. And upon graduation, he headed off for a to Stanford's business school, but didn't stay long, as he was quickly recruited by a friend of his to a little company we all know now as Microsoft, where he served first as business manager, later as CEO, and is now the owner of the LA Clippers. 

[AUDIENCE CHEERING] 

CS50, this is Steve Ballmer. 

[CHEERING AND APPLAUSE] 

STEVE BALLMER: Well, thanks. I'm honored to have a chance to be here with you today. When I first talked to David about this, he said, I'd really like you to come on in and give an advanced lecture in machine learning and computational thinking. We didn't dwell on that idea very long. 

So I thought I'd give you a little talk-- if I can figure out which space bar I'm hitting-- what do we need to do to change? I won't touch that one. This one I won't touch. There we go. OK. 

I thought I'd give you a little-- you've got to be a competitor in business. Anyway, I thought we'd talk a little bit today, just a few thoughts, on most of what I learned I learned at Harvard University. I thought I'd try to summarize that in about nine easy steps and then four things I learned after I got out of this place, and hopefully get all through that in about 25 minutes-- just to give you a little bit of food for thought. And then we'll do Q&A. 

I am 99.999999999% sure that nothing we talk about today will matter for your grade or will appear on the final. I think you're as safe as rain on that today. But hopefully, get you thinking about a couple things as we go through. First thing that's probably important for you to register-- this is sort of academically dangerous-- of all those many important things I learned at Harvard, it wasn't in the classroom. As I listened to David do the introduction, I thought to myself, it sounds like I majored in extracurriculars when I was here. That's actually true. I attended all of one class session senior year. Junior year was a little bit better. 

With modern technology, I don't know what the possibilities are, but they would seem to be even greater today for mischief outside the classroom. But I will tell you it was really very, very formative and seminal. I arrived here in 1973. And I was hell bent and determined that I was going to get my Ph.D. in either math or physics. And about the only thing to figure out was whether it was going to be math or physics. That was it. That's all that needed to be figured out. 

Freshman year, the big decision was whether to take Physics 55-- I don't know if that course still exists-- or Math 55. I thought I'd take both, and the kindly adviser said, young Steve, big mistake. I won't allow you to do that. So I took one of them and did an independent study in the other. And thank god I did. 

First lesson, I learned very, very early. Freshman year, I took my first exam. I took my first exam. I walked out of it. I called my parents and said, I think I just flunked out of school. I was already involved with the Harvard football team doing statistics. I was supposed to go down to Penn, so it must have been about this time of year, since the schedule for football hasn't changed in 50 years. 

We were supposed to go down Penn. I didn't go, because I was crest fallen that I had flunked out of school. I got my exam back the next week, and sure enough, I had gotten a 33, which was about fifth or sixth in the class. The guy who got 75 is Ph.D. in physics, is a professor of physics, and is a genius. So it took me about two months to learn I wasn't a physicist and I wasn't a genius. And everything good started right there with my first big failure, so to speak. 

I just finished giving a class, actually, at the business school at Stanford. And I worked with a lady who had been a professor here at Harvard in economics and now is at Stanford Business School. And I took the opportunity to look back and reflect on, let me say, important lessons that I've learned over the time of my life, but particularly that mattered to me as I was running Microsoft. 

And I'm not going to try to go through the detail of each, but I summarise them in short form. And when I stopped and looked back and I said, how many of those relate to something concretely that I got out of my experience at Harvard, the answer turns out to be very high. 

Small show of hands-- how many freshman do we have in the class? Sophomores? Juniors? Seniors trying to get that last CS in before you leave? OK, good. 

I will tell you that in reflection, the amount you can get out of this place is stunning. My best friends, many of them I met to this day while I was here. The formative experiences, I got here. And everybody tells you, but it's amazing what you can get out of the place. 

Number one for me, life lesson, is ideas matter. Now, people say, of course ideas matter. What kind of stupid life lesson is it that ideas matter? The truth of the matter is this is both under and over appreciated. Most people think every idea is a good idea as long as they had it. The truth of the matter is not every idea is a good idea. Not every idea matters. And not every idea should be pursued. 

And if you're in a field like I am or was of innovation, not every idea is a good idea, even if it strikes you that way on first blush. In fact, most people are lucky to have one idea that really matters in their whole life. That's not a criticism. But earth shattering, life changing ideas are very few and far between-- research insights, investment insights, innovations. A good idea needs to be cherished and nurtured. And in some senses, you could say I learned that here at Microsoft-- here at Microsoft-- here at Harvard. 

[LAUGHTER] 

I actually know what's on the slide, though. I learned it here. Microsoft was started here by Bill Gates and Paul Allen when I was here. When I finally joined the company, it was five years after Microsoft got started. Some people would say it got started up at the Currier House, but it really got started up at the housing project up at Ringe, which is where Paul Allen was living. 

But this notion, which Microsoft started, was the idea that software represented a form of free intelligence, and that if you coupled it with this new essentially free intelligence in the form of the microprocessor, unbelievable things would happen. And that basic idea that software was a mobilizing force for this new microprocessor, which was free-- that obviously was a big idea. 

And that was the idea that Paul Allen and Bill Gates had when they started the company. And ideas do matter. And it is worth considering and not falling in love with every idea you have, whether you're trying to solve a problem set or you're trying to do something else. 

Second thing I learned is there is an advantage to being what I like to call now hardcore. Hardcore-- I don't know quite how to describe it. It's a combination of tenacious and dedicated and passionate and committed-- something like that, hardcore. 

I learned about being hardcore from math concentrators at Harvard. 

[LAUGHTER] 

I'm not going to ask whether we have any math concentrators here. But I would say that's where I got my lesson. People could just go crazy-- focused. And it wasn't just that people were genius, but working and working and working and working. I'd sit in my room working on a problem set, and after three hours-- I'm a little ADD-- I just couldn't take it. The most hardcore people could just power through anything. 

And the advantage of being that tenacious and dedicated and committed-- I claim it helped us at Microsoft. It was fundamental at Microsoft. But I learned it here at Harvard. 

Passion-- I think it's probably fair for me to say at this stage in my life that basketball is a passion. I started keeping track of rebounds and assists. $12 a game I used to get paid. I went to every Harvard basketball game, which I would have gone to anyway. But I got paid $12 to keep track of rebounds and assists. 

And I will say that finding your passion is something you get to do almost in a unique way in college. And finding the things that you are passionate about is probably the most important thing that you get to really start doing when you get to college. Before college, everything's about getting to college. It's unfortunate, but I know it's true. 

Here, take the time to explore your passion. I now this year will probably go to about 200 basketball games. I think it's fair to say it is a passion. But sitting there in the old IAB, which I think is called the Malkin Center, marking down-- there's a guy named Lou Silver who played on the Harvard basketball team in 1975. I gave him the benefit of the doubt on every rebound ever. I think I was part of his All Ivy success. And who was one of the first guys to email me when I bought the LA Clippers? Lou Silver-- passion built early in life. 

Own the results. This is actually, I think, one of the hardest things for college kids to get, especially kids at Harvard, which is at the end of the day, it's not just about whether you have a good idea and whether you're really talented and really smart. That's enough to get you into a lot of good colleges, including this one. 

But all of those things are not really measures of success. You have to do something other than make grades and get measured on them in life. That's generally how the world works. And really being accountable for outcomes makes you better at everything you do. I comped for the Crimson and had to go sell $1,000 worth of advertising. That was a lot of money. I don't know what the numbers would be these days-- but $1,000 of ad revenue, and then took on ad sales. 

And feeling the pressure, particularly at an institution that basically has no money-- at least that's where the Crimson was 35 years ago-- it's good for you. It's good for the soul. And it actually makes you better at everything you do to own outcomes. 

Time-- how many people in the room would say they are too busy? Not busy enough? That's a politically unpopular place to put your hand, but God bless you for putting your hand up over there. The truth of the matter is, thinking about time as something to be managed, whether it's how long-- for those of you who are seniors, I'm sure you'll ask the question, how long will I do my first job? How long? Will I stay in my job six months, a year, five years? 

How long before I decide whether I really like my career? How long before I really like my major? How am I really managing my time? 

I got involved in a lot of extracurriculars. The one that broke the bank for me was becoming publisher of the Advocate. I'm not even sure why I did. Really, I'm not sure why I did it. It was another resume build. I was already busy with football and the Crimson. 

But I did it. And then time management really got into my vocabulary. I really did have to manage-- and I don't even measure it. I started skipping class. I already confessed to that. But managing time even amongst the extracurriculars got to be a big, big deal. 

Today, I actually keep a spreadsheet, a bunch of them. These are all the things I'm going to do in my life. Here's how much time is budgeted to them, and allocate it. I record everything into Outlook. I have a macro that spits it out in Excel. And I do budget versus actual comparisons. 

It's a little different since I've, quote, retired, unquote. But at Microsoft, I could tell you I was going to have 12 one on ones with Harry this year. And then I would track them. How many did I have? I was going to spend 10 hours a year talking to customers over the telephone versus in person. And I just measure everything, because I think time is so important. 

Storytelling-- I think in whatever you choose to do in life, even if you're going to be the most hardcore, dedicated computer engineer, learning to tell a story, whether you do it with my-- I can't write a lick, but I'm not bad at a speech, but my speech style is very different than people standing at podiums. It's very different. 

Being able to tell a story through your work, through your speech, through your writing is so important. You want a grant application? You better tell your story. You want your start up idea funded? You better tell your story. You want to be the top engineer on the team who's compelling vision about where the product should go? You better be able to tell a story. 

And in general, I don't think people come out of school well versed in storytelling. On the other hand, as Harvard football manager, I had to get up every team meal-- listen up, everbody-- and make announcement for the coaches. And I got to tell you, being a manager is not a lofty, revered position. At least, it wasn't 40 years ago. I'm sure now it's very different, because the whole system has changed. But you'd get up there and you'd say, how do I tell this story? What am I really going to announce? What am I going to do? Even learning to give speeches-- I was very shy as a kid. And being a Harvard football manager for me was like this huge, transformative experience. 

The last lesson I learned at Harvard is-- not literally, but figuratively-- it's get in the weight room. The weight room in sports is where you get in shape. You build new muscles. You build new flexibility. You learn to do new things because you have new capabilities. 

In life, you have to stay in the weight room. You have to keep evolving, building new skills, learning new things. And that's easy to say, but a lot of people don't do it. You could say, OK, well, people who go into the tech industry all do-- not true. 

I'll just give you one big transformation that's happening in the world today. Most people who are my age learned a form of computer science where you wrote a program that took inputs and gave you outputs that were correct or incorrect. Most modern programming says, give me a bunch of inputs and I'm going to statistically guess about what might be interesting here. 

That's a very new skill. And if you find people who are, let's say, 10 or 15 years out of college, they don't think that way technologically, even to this day. And so the need-- whether it's in your career or in your life-- for me at Harvard, I taught Math A? Does Math A still exist as a course? It was pre-calculus. 

Suffice it to say, because I thought of myself as some super math guy, I had to learn to take concepts and explain them simply. I was teaching pre-calc, something I had done five years earlier. And the ability to build new skills-- I point to the experience of doing that at Harvard. 

Beyond Harvard-- yeah, there were still a few things to learn. I know this is the best institution, absolutely, in the world. I was at the Boston Globe today talking about Harvard, number one in everything. I bleed Harvard. But I actually learned a couple things after I got out of Harvard. 

The first message I would say is in life, you want to be your own quarterback. See the playing field. Many people like to get myopically tied into one thing, and they have a hard time stepping back. Being CO of Microsoft is this amazing, wonderful opportunity. It turns out, everybody in the world wants to tell you what to do. And they'll educate you. 

You want to learn about any field of technology? As long as you don't act like a know it all, somebody will educate you. And you have a unique ability to see broadly across the technology field. Right now, I'm spending a lot of my time studying government and the economy. 

It turns out the number of places you can actually read about the totality of government in the United States is almost zero. What is the total spent in government in this country, and what does it get spent on? There's no government report on that topic. 

The best site happens to come from some random blogger who I met, who I think it's great, by the way. But I found him through our Bing search engine, not surprisingly. 

[LAUGHTER] 

That's my only plug for today. I'm still a shareholder-- but seeing the field. In life, it's always good to be the first person to achieve something. It turns out the guy who wins is the guy who was doing it last. So it's always best to invent a new idea, be the first to do something. But ultimately, it's about committing to be successful and to stay at something. It's sort of a corollary of being hardcore. 

And certainly, there are fields of Microsoft's success, like selling to large enterprises, where when we started on that in the '80s, people said, you'll never do it. That's all IBM's purview. And today, that would be 70% or 83% of Microsoft profits come because we failed at something for 20 years but we kept at it. 

Corollary to ideas matter-- it's hard to have a second idea. If you really study the tech industry, most tech companies have one idea, and as long as the idea is hot, they stay hot and then they fade to black. If you look at all the companies that were important in technology when I got to Microsoft in 1980, only IBM is still around. And I might argue it's not a tech company anymore. 

And my great dream for Microsoft is that it is, so to speak, a two, three, or four trick pony. I said someplace that I thought Apple and Microsoft were amazing because they were two trick ponies, and somebody thought I was bashing Apple. No, that's my ultimate compliment. 

Anybody who can have two good-- if you have one idea, I think you're amazing. If you have two ideas, you're lionized in history for your success. It's really interesting. 

Optimim-- Colin Powell came to speak one year at our executive retreat after he had been Head of the Joint Chiefs of Staff. And he has this quote that I have come to love. "Optimism is a force multiplier." And particularly amongst technical people and really smart people, the chic, chic, cool thing to do is to be cynical and skeptical and pick things apart. 

I know that would never happen in CS50, but you see that amongst certain kind of high IQ technical people. And yet, optimism is a force multiplier. So how are you brutally realistic and be optimistic? It's very, very important. 

I figured this out after a while at Microsoft. Salespeople at Microsoft are naturally optimistic, probably everywhere. Just tell us where to go and we're gonna run! And I know we're gonna succeed! Because people want to believe. Engineers, you say, here's where we're going to go, and the first thing they say is, oh, come on. 

[LAUGHTER] 

That's not right. That's not the right way to go. But I have found-- and this might belie my fundamental optimism-- that the engineer's optimist is sometimes a little different than the salesman. While the salesman just says, where to go, charge, the engineer likes to say, the world is all screwed up, but I can fix it. That's an engineer's optimism to me. Everything's-- but I can fix it. 

Luck-- this is the one that really doesn't always play well amongst Harvard guys. It turns out that as smart as you are, as privileged as you are to be at a place like this, and as hard as you work, luck is still going to be a factor in your life. Whether you're Bill Gates, Mark Zuckerberg, or the man in the moon, luck is important. It really is. 

Why is that important to know? Because it means you better like what you're doing. You better not be doing things just because it will make you successful, because you're going to need some luck to make yourself as successful as you want to be anyway. So find something where your passion wins out, where you're really satisfied. And then understand-- I know this. 

I think I'm really talented guy. I think Bill's a genius. I think Paul Allen is amazing, insightful guy. And I say, boy, how lucky we were. Apple-- I've seen their success, and yet, how lucky they were in many dimensions. We're a company that gave them $500 million when they were almost bankrupt in '97-- confluence of factors. And then they did great things with it. But luck always factors in. 

And then last, but not least, because I think I'm about out of time, everything in the world-- and this comes from a guy with a real bias-- everything is a technology problem. Innovation and technology is the heartbeat that leads to progress in the world. 

I read this book in the last six months. It's called Inequality, Capital in the 21st Century by a French economist named Piketty. It was kind of controversial. It turns out, if you look at the Amazon statistics, hardly anybody finished the book. It sort of reads like a socialist diatribe in the end. But it's got all this great analysis in the beginning. 

But a fundamental point he makes, looking back over thousands of years of history, is GDP growth is only a function of three things. So the improvements in life are a function of population growth and innovation. That's it-- population growth and innovation. 

Today, the hot technology, the operating system of all innovation, is computer science. And as I guess David likes to say, I'm Steve Ballmer. This is CS50, the most important class you'll take at Harvard. Thank you. 

[APPLAUSE] DAVID J. MALAN: So Steve has kindly left an enormous amount of time here to take questions. We have two microphones here. We have two microphones in the balcony. So you are encouraged to meet Gabe and Davin and others here if you would like to be the first and second to ask these questions. STEVE BALLMER: Or you can shout out. I've heard that's standard protocol in this class. 

DAVID J. MALAN: All the better. 

STEVE BALLMER: That also works. 

DAVID J. MALAN: Our first question over by Gabe here. 

AUDIENCE: What was it like for you making that decision to drop out and go to Microsoft? Because obviously, there was a lot of uncertainty. 

STEVE BALLMER: OK. It's 1980. I'm at Stanford Business School finishing up my first year. Bill Gates calls as I'm trying to decide what to do for a summer job. He says, hey, look, how are things? Yeah. Yeah, oh, you're not finished yet. Yeah. Too bad you don't have a twin. We could kind of use a business person around here. That was the pitch. 

[LAUGHTER] 

I thought about it, and I said, well, shoot. I guess I could tell him. So I called him back the next day and said, well, maybe we talk. We should talk. And my instincts were actually right. The most risk-free decision you'll ever make is the decision to drop out of college. No, why? I say it for a reason. 

Colleges let you drop back in. All my friends, professors-- oh, you're not gonna do that. You're gonna go to work for McKinney or blah blah blah-- I can't remember who I had offers from-- Brownstone Consulting Group. 

[LAUGHTER] 

And I said, I might go join this friend of mine who's got this small start up. Well, what do you know about that place? And I said, it's the world leader in something called software. And I had written a couple programs, but it's not like I-- I did not take CS50. The only programs I had written was for AM115 or something like that. It was a mathematical modeling class. 

And they looked at me kind of funny. And I told my mom and dad. My dad was an immigrant. My dad did not go to college. My mom did not go to college. My dad was an immigrant from Switzerland. The only college he really grew up hearing about was Harvard. Even when I went to Stanford to Business School, he was afraid I was making a mistake, because it was some place unheard of to him. And I said, I'm going to drop out. And this company is the world leader in software for personal computers. And my dad said to me, what's software? Well, that was not an ignorant question in 1980. It would seem funny now. 

And my mom asked me an even more prescient question, which is why would a person ever need a computer? Because remember, we're in a time of room-sized computers. But I said, look. I made a deal with Bill that said if it didn't work, he could fire me or I could drop back into Stanford at the end of the summer. 

After a month, I decided I'd made a mistake going to Microsoft. I was basically the bookkeeper for a 30-person company. I told Bill we were 30 people. We needed to add 18. He said, you're gonna bankrupt this place, Steve. I didn't ask you to drop out of Stanford to bankrupt Microsoft. 

And we had a huge fight. We were good at that. 

[LAUGHTER] 

And then he said, come on. We're going out to dinner with my dad. Bill's dad's sort of a scary looking dude-- not really, but he's 6'7". 6'7" doesn't look that tall anymore either to me, but that's a Clipper thing. 

But anyway, I went through my shtick for Bill and his dad. And that's where Bill invented what I think was the theme for the company. He said, you don't get it, Steve. We're going to put a computer on every desk and in every home. 

And I settled down. I stayed. Stanford would still take me back. It turns out, to this day, I could go finish my MBA. It just isn't that risky a proposition, because these great schools let you take time off as opposed to drop out of their memory banks. It turns out, I'm still a Stanford alum, too, when it comes to alumni giving. 

[LAUGHTER] 

[APPLAUSE] 

DAVID J. MALAN: Another question from Ian at the mic here. 

AUDIENCE: So you've made a series of comments about net neutrality, particularly speaking against it, most recently in a tweet. And that's a particularly unpopular opinion amongst a lot of young people and tech people, so I was wondering if you could elaborate that in maybe more than 180 characters. 

STEVE BALLMER: Yeah. Well, first, I haven't made a lot of comments. I made one little tweet yesterday, because I was kind of annoying on the plane and had nothing to do. So I tweeted. And boy, did that tweet get more attention than I ever expected. 

But look, I can explain. What is net neutrality about? I'm not quite sure. But it's not necessarily about keeping down the price of internet access. Competition keeps down the price of internet access. Net neutrality is merely deciding who's going to pay. If the providers who are making money on the internet-- the Googles, the Netflixes-- the Clippers, for example, if we were to go over the top with the Clippers broadcast, we too would be a broadband content provider. We're looking at that at the Clippers. 

But by saying you can't differentially charge for the traffic, what it says is all consumers should pay a higher price for the people who need the services that actually cost more. So if you watch Netflix, there's two approaches. You can tell your neighbor who doesn't watch Netflix, ha, ha, ha, ha. You pay more, even though you don't watch Netflix, than I do. Or you can let the market compete in differentially priced. 

I think we're going to get better service, more pricing options, and a better overall deal by having competition between broadband providers than by regulating the price. So this, to me, is not about low prices versus high prices. It's about letting free enterprise solve the problem versus thinking a few thinkers in DC can invent complicated pricing and tariffing schemes that are superior in creating opportunity than the market. 

Ultimately, what we really want is more investment in broadband infrastructure that leads to better service at lower prices. I'm with you on that. I'm 100% in on that. I'm making a statement in terms of how I think the world will best achieve that. And I feel clear in my thinking about that. DAVID J. MALAN: Up next, our microphone by Anton. STEVE BALLMER: And I'll say that even though I know we probably will wind up-- if we go over the top with our Clippers TV broadcast, we will wind up paying more and our customers will pay more and we will make a little less profit, but everybody else will get lower prices for fundamental broadband access. AUDIENCE: Thanks for your time. What do you love most about owning the Clippers? Who's-- wave your hand so-- 

AUDIENCE: Up here. STEVE BALLMER: Oh, hi. AUDIENCE: What's up, Steve? STEVE BALLMER: It seemed like God. Go ahead. 

AUDIENCE: Voice of a deity. 

STEVE BALLMER: What do I like best about owning the Clippers? 

AUDIENCE: Yeah, exactly. 

STEVE BALLMER: I don't know. Three months in, I can find the bathrooms now in the stadium. That's my level of sophistication. There's a lot of things that have been fun. It turns out it's even more fun to think about the team dynamics and hear about those from the coach than I thought. 

Worrying about the fan experience in the arena-- I didn't-- the song you were playing before this started, I don't know the name, but I need to get the name from you. I was thinking, that's a great song. We could really use that song for pump ups coming out at time outs. 

[LAUGHTER] 

No, seriously. You could say it's my-- I still am I a "We Will Rock You" kind of guy. But we have 150 possessions in a basketball game. And let's say at least on half of them, we want to do something to keep the crowd engaged. How do you do that? How do you orchestrate that kind of busy environment? What do you want to do on the Jumbotron? 

The technology in basketball-- unbelievable. Every MBA arena now has six cameras in the ceiling that are taking pictures of the action. And there actually are start ups that have machine learning technology that looks at the video and characterizes the action so it uses computers to decide that was a pick and roll versus a pick and pop with Chris Paul and Blake Griffin. That was a blitz by Jamal Crawford. And every arena is equipped with this technology. 

And literally-- it's a company called Second Spectrum. And one of the key guys is a 6'9" hooper out of MIT who never played basketball after college, but he's doing machine learning algorithms across vision recognition on basketball stuff. That's been kind of fun. The in arena, thinking about going over the top and what do the economics look like-- it turns out there's a lot of pretty cool things. 

It's much more complicated business than it is large. Microsoft, we have 100,000 people. We got about 130 at the Clippers. And yet, the breadth of problems we get to think about is actually-- well, it's not 1,000 times less complicated. It's probably 500 times less complicated than Microsoft. 

DAVID J. MALAN: Next question from Gabe's mic here. AUDIENCE: Oh, hi. My name is Larson Ishii. I write for Clips Nation, so I was going to continue with the Clippers questions. But I was going to ask about how you're incorporating the rest of technology. I've seen that you guys have an increased proportion of statistics within games, such as showing the four factors that produce the probability of victory within the game, which I don't think any other teams are doing in the league currently, which is really awesome. 

So I just want to know how, from your math background, you're incorporating more of the technology and statistical side into the game of basketball in what is scene as more than emerging field, and if that can help solve the Clippers' small forward problem right now. STEVE BALLMER: With a little edge in the end of that question-- [LAUGHTER] What we're doing right noq-- and the tech is just not quite there-- is for every game, we produce a couple of plays that actually take some key play from last time we played an opponent, and it shows statistically what the probability was of success and the expected points, depending upon the decisions the player makes. So you see the guys on the court. Chris is with the ball. If he throws it to Blake Griffin, 30% chance. On this one, he'd have a 40% chance of making a basket with an expected two point or three shot point shot. And we're using that to demonstrate. 

What you want to do, of course, is get it so comes back real time. So we can take a play that just happened and have the visualization based upon the data that's coming out of the sensors happen in real time so fans can really track just how amazing the speed and the decision making at that speed is. 

But we're working our way up to that. The thing that we've done that actually gets a lot interest is the thing we call our Clipper Tron application. You just go to www.clippertron.com while you're sitting in the arena, and you can pick your favorite player. You can pick a kind of a play-- a pick and roll, a blitz, a this and this. And we'll go throw the highlight up on the Jumbotron. We're adding, now, Twitter and Facebook integration. So we put your name. We'll put your picture. And we'll put the plays that you picked and we can-- people love seeing themselves on the Jumbo-- kiss cam, all that kind of stuff. 

At least, now, we're letting people throw up basketball action. Eventually, I want to be able to do it in people's homes. So with your phone, you go to Clipper Tron, and we'll throw it up live in the broadcast to you on TV-- so some of the stuff we're playing with. 

DAVID J. MALAN: Another mic up by Dan Bradley. 

AUDIENCE: Steve, after his contract with the Lakers is up, would you consider signing Jeremy Lin as a backup for Chris Paul? 

STEVE BALLMER: I support Doc Rivers 100% in his decision making about our basketball team. My job is to support, ask a lot of questions, and support. How's that for not answering your question? 

[LAUGHTER] 

[APPLAUSE] 

I did go to the Laker-Clipper game in LA last week, week before last. I'm pleased to report two things. One, Jeremy Lin played well. And two, we kicked them. 

AUDIENCE: So I'm Bobby. I'm from LA, just in case you guys need interns this summer. No, I'm just kidding. [LAUGHTER] 

But seriously-- 

STEVE BALLMER: Bobby, sballmer@clippers.com, in case you need an internship this summer. 

[LAUGHTER] 

Luck, opportunity, take advantage of it. You got to feed the aggressive instinct. Go ahead, Bobby. Run with it, though, babe. 

AUDIENCE: So you mentioned your 33 on your first exam or whatever. But can you tell us more about other examples of failure in your career at Microsoft or in your life and what you've learned from it and how you responded, et cetera? STEVE BALLMER: Yeah. I'm funny. I don't actually-- it turns out, I got a B plus on the test with the 33, because it was the fifth highest grade in the class. Although I do to play golf with a guy in LA who reminds me he got 50 on the test and beat me. He remembers that to this day. 

So everything's relative. I'm a guy who's so optimistic, in a way, I never think I fail. I just haven't succeeded yet. I say be first, but commit to be last. OK. Well, that's not going well. And you can see it in Microsoft behavior. People used to say we don't get things right till version three. I don't know whether to take that as a criticism or praise. Get it right early is good, but commit to getting things right. 

So I've certainly had setbacks, whether it was at school. Certainly, when we and IBM split ways, I thought our company would probably go out of business. That was about 1990. Certainly, I've been told many times that we'd never succeed in the enterprise business. I was told that you can't do a start up video game. 

I was told no search engine will ever succeed versus Google. There's still more of an element of truth to that one than I'd like. 

[LAUGHTER] 

I was told that the mobile device market is locked up, which I don't believe. It's partly because I believe in the power of innovation and the power not only for people to change and improve themselves, but that things do change over time. And as long as you're prepared, as I said in my talk-- if you've been in the weight room and you have the capabilities and skills to do something and you stay in the game, then you're prepared to take and seize on the next idea. 

It's kind of like saying, hey, look, we don't know how to beat the-- I won't take basketball. I'll take football. People don't know how to beat the Patriots or the Seahawks. But that doesn't mean you don't stop training, working out, building skills. You keep working on your game plan, but you're always building your skills and capabilities. Then you can be optimistic that failure will lead to success the next time. DAVID J. MALAN: Why don't we take a couple more questions and leave some time for hellos at the end? Belinda? AUDIENCE: Hey, thanks so much for coming. So I really appreciated a lot of the things you said, and I think three things in specific really resonated with me. One, treasure your time. Two, see the field. And three, also explore your passions. 

So the way I see it, the problem is that time is so finite and that we have such limited time. And explore your passions seems to me more depth-based, whereas seeing the field is very breadth-based. So taken in the context of also acquiring new skills, how do you prioritize your time? And specifically for you, when you said you created a budget for your time, how did you decide what was important and what would be worth your time, basically? 

STEVE BALLMER: OK. Let Two stories-- let me start as an undergraduate at Harvard. I beg every senior I know do what I did, because I thought it really worked out. When I was a senior, I interviewed with 35 different companies on campus. 

I'm trying to get my son to do that. He's a senior. I've tried to get friends of mine whose kids went to Harvard-- people don't do that. But why was that good? And then I got a chance to sniff 35 different companies, 35 different cultures. I went back and visited. I can tell you what it felt like to run a check processing room at Mellon Bank. I can tell you what it would have felt like to go to Minot, North Dakota and trade grain for Cargill. I can tell you what it would have felt like to run a small start up insurance company in Cleveland-- Progressive Insurance, which is now, of course, a major player. I remember all these visits. And I just think if you want to see the field, you have opportunities to get what I would call rapid little experiences that are really helpful before you get down to your passions. 

What I would say as a CEO I did is I blocked two kinds of time. One was time that I would do whatever our people in a given country wanted me to do or our engineers in a given product group wanted me to do. That means they're telling me about things I'm not necessarily interested in. But I can always help the sales rep with a sale. Hey, the boss is here, blah blah blah. But I'm learning, learning, learning, learning. 

And then I also blocked explicitly about call it a total of 20% of my time where people couldn't schedule it. And then I could use it for reading, exploring. But even time to explore needs to be blocked. And time to let others educate you needs to be blocked. 

And I think that's part of how you can continue to see the field and then develop the kind of passion-- so just a few thoughts. 

DAVID J. MALAN: Last question from Davin's mic. 

AUDIENCE: Hi, I'm J. Paul Meyer. Over your years at Microsoft, what product or hire or whatever it is have you been most excited about or you most excited about? 

STEVE BALLMER: It's kind of like asking which of your kids you like the best. And it's kind of situational, timewise. You look at Windows 1.0 when it came out-- I can't write a line of code, but I was the development manager for Windows 1.0. Of course that's my favorite product, and at the end of the day, it's the backbone of Microsoft. 

On the other hand, when you say slick and interesting, I'd probably point to Excel. Life changing for me, I'd probably point to Surface Pro 3 and the pen and One Note. I finally have the thing I really want to get my work done. I really can be paperless. I really have my life in the cloud. 

For me, inking is very important, because if you're the guy somebody's presenting to, you can't sit there and type. If you want to draw and annotate, markup, you can't type. So I might say Surface Pro 3. If I was home with my family, because I have three boys of about the right age, I'd say, well, of course, it was Xbox 360 and the Halo game. My 15-year-old still believes that's the only worthwhile piece of work I did in my working career. 

[LAUGHTER] Three weeks ago, he says to me, Dad, I'm very disappointed in you leaving Microsoft. I was worried about this. Aaron. I don't know whether you can still get me the new Halos when they come out. 

[LAUGHTER] 

So beauty's a little in the eye of the beholder, but I'd probably point to the Surface Pro 3 in modern days and Windows 1.0 in historic days. DAVID J. MALAN: Well, let me wrap up with a little something we've never done before. But we, on behalf of CS50 TFs and TAs would like to make you an honorary member of CS50's staff if you'll have us. 

STEVE BALLMER: OK, absolutely. 

[CHEERING AND APPLAUSE] Nice! 

DAVID J. MALAN: And for everyone here, you are all cordially invited to a special event that President Drew Faust, Dean Cherry Murray, and Steve Ballmer will be hosting tomorrow at the I-Lab at 12:00 PM, for which there will be a puzzle hunt which is inside of this packet which you'll be handed on the way out, for which there's fabulous prizes, including several Xboxes and also a pair of Clipper tickets. 

STEVE BALLMER: Clipper/Celtic tickets for the game here on March 29, visiting owners seats. Do compete. [CHEERING] STEVE BALLMER: Thanks, everybody. DAVID J. MALAN: CS50, this was Steve Ballmer. 

STEVE BALLMER: This is CS50! [MUSIC PLAYING] [MUSIC ARMIN VAN BUUREN, "THIS IS WHAT  IT FEELS LIKE"] 

[MUSIC - M4SONIC, "WEAPON 2.0"] 

[CLAPPING] 

STEVE BALLMER: Woo! This is CS50. 

[APPLAUSE] 

DAVID MALAN: This is CS50. And this is the start, and end, of Week 12 for the very last time. You'll recall from Week 0 that we promised this, that what ultimately matters in this course is not so much where you end up relative to your classmates, but where you, in Week 12, end up relative to yourself in Week 0. 

Well, we are here now in Week 12, and you might look back fondly, or remarkadly, at just how far you've come when this was the worst of your problems, some weeks ago. But consider how far you've come since then. Particularly, if among those with no prior experience, just weeks later, were you implementing a fairly sophisticated data structure like this hash table here, or even this TRI here. 

Just a few weeks later, and just a week ago, were you implementing this, a mash-up of multiple APIs uisng asynchronus JavaScript calls and HTTP requests behind the scene. Ultimately, creating an entire web app from something that began with just a few hash marks. Now, indeed you might recall that 78% of you had no prior experience, and we proposed that you might be feeling a little lonely at the beginning, but realize that you are now very much among friends and supporters here. 

Now, it's a tradition in CS50 to not only start the semester, but also end the semester with a bit of cake. Indeed the team has been downstairs cutting it up, and sampling the cake, but that awaits in just a little bit of time. But I thought I'd pick up where we left off and get some closure today. 

You may recall this here website, I thought the only good thing I could do is write these kind folks upon having endorsed them so in class just a couple of weeks ago. And I will say to their credit, I got back this reply from ediblearrangments.com. Good morning, Mr. Malan. We have inquired with our IT department regarding your concern. They advise that as of next week, there will be a website patch applied. We appreciate the feedback. And indeed-- 

[APPLAUSE] DAVID MALAN: And indeed if you go to editablearrangments.com now, click login, you are indeed sent to the HTTPS version of the site. 

[APPLAUSE] 

So there you have it, CS50 here making a difference, one website at a time. So now, the final project is, of course, all that awaits now. And realize that there's any number of ingredients that you can weave into this project of yours. 

Indeed what many students do, if tackling a web based final project, will take p set 7's distribution code, CS50 Finance, and then will rip out parts of it that are of interest, or germane to their final project, like the look up function, which is surely very specific to Yahoo Finance. And they'll add in their own code, and build atop the login mechanism that we provide you with. And so that is absolutely a great place to get started. 

Especially if over break, and shortly thereafter, you're just not really sure where to begin to create something that hasn't already been handed to you at least in part. p set 8.2, if you want to do something with AJAX, or you want to write a script that imports a really big data set into a database, use p set 8 as a model in which you can build your own code, ultimately. But realize, too, that there's even fancier ways to get started. 

A very popular framework, that we're fans of, is called Laravel. This is a PHP framework that essentially adds to PHP a number of features that are already commonplace in the world of Ruby and Python, other programming languages that have built into them, or on top of them, additional frameworks. And so Laravel will take p set 7's framework, essentially, and give you a whole lot more tools for your tool kit. So if curious, and if you'd like to not only apply lessons learned, but tackle some new lessons for your final project, check out this and similar types of frameworks online. 

How about hosting your website? You can certainly put your final project, if doing something web based, on your CS50 appliance, and most students do. But if you'd like to actually take the worldwide web out for a spin and put your code out there, realize that it's pretty straightforward these days to buy a domain name for a few dollars, to set up your domain name's DNS settings for the IP address stuff. And then actually push your code to some remote server so that someone can visit you at something.com, or whatever domain name you happen to buy. 

Stay tuned to CS50's home page in the days to come, where we'll post some instructions for doing exactly that. If you'd like to follow some guidance, or if you'd like to venture out on your own, there's so many popular frameworks and systems out there. Many of which are free, or super cheap, or at least free for students. AWS, or Amazon Web Services, is one. In fact, that's where CS50 runs most of its own servers in the so-called cloud, using virtual machines, servers that aren't really physical. 

They're the illusion of physical servers, but that we, and you, could have complete control over. And we just had a seminar, in fact, a couple weeks ago on that. Parse.com is a super popular back-end tool that you can use to actually host a database. If you don't want to figure out, or stand up your own MySQL database, there's this and other related services that let you focus on the part of your app that you really like, the front-end or the user interface, or the features, and then outsource to someone else, often for free. Certainly for student scale prototypes, any back-end services like email or databases that you might need. 

Now, for authentication, a super common FAQ in CS50 is, how do you authenticate users? Not with their own user names and passwords, but with like Harvard IDs and PINS. Well, realize CS50 has a service called CS50 ID, via which you can do exactly that. And then those of you tackling, say, mobile projects, where you're kind of conflicted if you want to do an iPhone app, a Windows Phone app, an Android app, or any number of other devices out there, realize that there are actually tools that allow you to write your app, in typically JavaScript, or some similar language. And then deploy it to multiple platforms like iOS and Android and the like, phonegap being one, Titanium another. 

So if you're sort of conflicted, and realize that there's a bit of a learning curve to learning just one of these languages, realize you can take your own new found familiarity with JavaScript out for a spin, and apply it there. And there's so much more that you can find on your own, or by consulting your TFs. Now, what about life after CS50? Just so that this is said, at least once, you're not going to be handed problem set specifications and distribution code in perpetuity, but realize that you don't need the CS50 appliance to continue coding on Mac OS. 

It's a wonderful, useful environment in that it's pre-configured to be representative of a nice Linux system. But you can certainly use any number of freely available tools these days to write code on your own Mac without the overhead of an appliance, or on your own Windows computer, or if you're running Linux, a number of tools exist there as well. So that's just a whirlwind tour that you might want to curl up with at some point. But for now, let's take a look ahead and what remains. 

In particular among the course's historical events is the CS50 hackathon. An epic all nighter, at which you'll arrive around 7:00 PM, set up shop with your laptop, and project, and friends. And dive into final projects in an environment that looks a little like this upon arrival. You'll check in here, you'll then get down to work, you'll help out a classmate. 

You'll indulge in first dinner around 9:00 PM, second dinner around 1:00 AM. And then for those still standing at the end of the night, we'll take you to IHOP. But along the way there will be a photo booth, not like this, and indeed actual CS50 shuttles on our way to IHOP. 

Now, the CS50 fair, for students in the class, this is your opportunity to exhibit proudly your final projects. Not only to others, but typically 2,000 plus attendees from across campus, students, faculty, folks who see the balloons along Oxford Street and come on in. So realize that what awaits there are glimpses of maybe each other's projects here, where you'll bring your laptop. We'll set up tall tables on which you put your laptop, hop on the Wi-Fi, and demo your projects to passers by. 

Meanwhile, there will be music, and popcorn, and candy, and more. So that you'll have ample opportunities to mingle. We'll have friends of ours from industry, recruiters from any number of these companies here there just to chat up students about life after college, or internships during college, and the like. You'll see, too, that there's a raffle to incentivize not only you to strike up these chats with friends, but also to invite your own friends, or convince your own friends to come see your project. 

You can sweeten the deal by these little cards that will be handed out. Each of them will have placeholders for little Smiley face stickers. You guys as the students will be given Smiley face stickers. And for anyone who ventures up to you and says, hey, what did you do? Or asks you for a demo of your project, you hand them a sticker. They put it on their card. And that qualifies them for any number of fabulous prizes, including those pictured here, which are then raffled off at the end of the event. That's it for CS50. And along the way, there will be ample popcorn, and stress balls, and candy, and even last year the Harvard band, who was not expected, but was in attendance. 

There will be a photo booth there as well, and massive numbers of balloons like these ones here. So many so, that invariably the staff try to pull this trick at the end of the night, never quite works. But for you, if you'd like to invite your friends to this event-- 

SAM CLARK: Now, as we come over to the next stop on the tour. You'll notice a distinct-- 

[LAUGHTER] 

File on in. You'll notice a distinct departure from the Gothic architecture that we saw on the rest of the tour of Yale's campus. Now, here we are at Sanders Theater. Sanders Theater is really a cultural and academic hub here at Harvard. Commencement was held here until 1922. It's modeled after the Sheldonian Theater in Oxford, England, as a matter of fact. And it serves as a location for many cultural events, and big academic events here. 

Many A cappella groups perform in Sanders, the Crocodillos perform here frequently, they're sort of like the Wippenpoofs 2.0, almost. As well as the largest class actually at Harvard, CS50, is taught here. Who on the tour is interested in computer science? Anyone interested? Terrific. Well, if you happen to matriculate at Yale, you'll really, really want to be taking CS50. 

[LAUGHTER] 

[APPLAUSE] 

You won't actually be able to take it physically within Sanders Theater, however, CS50 will be live streamed over to you in New Haven. As well as you'll have an entire support staff, support network of staff there to take CS50, to learn all about computer science. So this is Sanders Theater. It's not Gothic, but it's great. Does anyone have any questions before we move on to the next stop? Yeah. 

AUDIENCE: Is that David Malan? 

[LAUGHTER] 

SAM CLARK: Oh, my God it is! Let's take a selfie. Selfie! Take a selfie! Right here, right here. Here, someone hold it up. Someone hold it up. How are you, David? 

DAVID MALAN: Hello, DA 

SAM CLARK: I'm doing well. I got to flip it around. And duck face, David. 

[LAUGHTER] 

Yeah, he likes that. Terrific. Terrific. Well, we'll move on to the next stop. Our next stop is the Harvard stadium, where we've had great luck in the last 13 years. 

[LAUGHTER] 

[APPLAUSE] 

DAVID MALAN: So the rumors are indeed true. For the first time in history, students at Harvard and Yale alike will be able to take a course called CS50 this coming Fall in 2015. We will put asie the rivalry for nearly 100 years, and ultimately, in Fall 2015, actual Yale students will be able to take CS50 for the first time. The lectures will indeed be streamed from here, your successors in this audience, to New Haven, where students will be able to engage in person, or as some of you have so optimized, online live, or on demand after. 

But we will be standing up a local support structure, complete with teaching fellows, course assistants will be leading sections, and office hours. CS50 Puzzle Day will be held in Cambridge, and we will invite our Yale friends to Cambridge for CS50 Puzzle Day, as well as the CS50 hackathon. And then at semester's end, there will be an epic display in both Cambridge and in New Haven of CS50 students from Harvard, and Yale alike on display in those respective towns. 

And indeed if you have any friends who go to Yale, we do need some TFs and CSs so do send them to this URL here. But we will in the meantime, be sending one of CS50's own best teaching fellows, Jason Hirschhorn, who's about to graduate, having just finished his thesis on the intersection of computer science and education. Jason will be working full time at Yale, and will be on the ground there helping us to stand this up and bring these two universities together via CS50. 

[APPLAUSE] 

Now, along with CS50's production team, I had an opportunity to hop in the car with this guy and take a look at what awaits us in New Haven. 

[VIDEO PLAYBACK] 

[MUSIC - "MOVIN' RIGHT ALONG"] 

-Movin' right along in search of good times and good news with good friends who can't lose. 

-This could become a habit. 

-Opportunity knocks once let's reach out and grab it. 

-Yeah! 

-Together we'll nab it. 

-We'll hitchhike, bus, or yellow cab it. 

-Cab it? 

-Movin' right along, footloose and fancy free. 

-Getting there is half the fun come share it with me. 

-Movin' right along. 

-We'll learn to share the load. 

-We don't need a map to keep this show on the road. 

-Hey, Fozzy, I want you to turn left if you come to a fork in the road. 

-Yes, Sir. Turn left at the fork in the road. Kermit? 

-I don't believe that. Movin' right along, we've found a life on the highway. 

-And your way is my way. 

-So trust my navigation. 

-Movie stars with flashy cars, and life with the top down. 

-We're storming the big town. -Yeah. Storm is right. Should it be snowing? 

-No, I don't think so. 

-Movin' right along. 

-Footloose and fancy free. 

-Be ready for the big time 

-Is it ready for me? 

-Movin' right along. Movin' right along. Movin' right along. Movin' right along. -Maybe you better pull over. -Yes, Sir. Oh, look at that. 

[END PLAYBACK] 

DAVID MALAN: We'll see Yale in 2015. 

[APPLAUSE] 

So now some thank yous. Suffice it to say there's an entire family, both in front of and behind the camera, in this class that makes everything work ultimately. And I'd like to acknowledge a few, and then the entire staff by way first of Colton, whose EDM has permeated the start of lectures for some number of weeks now. As well as the entire production team, who's been making everything look so beautiful this year. Dan in Chile, and Andrew, and Cheng, and Colton, and Ramon, and Barry in back, and Kenny and everyone who's been involved behind these cameras, making everything possible. To Gabriel, as well, our head teaching fellow. 

[APPLAUSE] 

If you didn't already know, Gabriel actually found CS50 by way of the production team's videos. Indeed growing up in Brazil a few years back, he discovered that all of CS50's material was online, and he dropped me a kind note asking if he might be able to translate it to Portuguese for his classmates. And indeed he did, ultimately, lecturing to some 50 students, his classmates, in high school. Followed by 150 students the next year, and wonderfully his dad was in fact filming the whole thing so you can find Gabe's lectures of CS50 in Brazil online as well. 

And now Davon here, Davon here has been running the course, and has been making everything run so smoothly, and without him we could not manage the team that we now have. And then of course, Rob Bowden. 

[APPLAUSE] 

Rob's now been with the course some five years, having approached me sophomore year with an interest in getting involved in the class. And then became assistant head TF, and then Head TF, and then Preceptor. And now, believe it or not, the very distinguished role of Member of Technical Staff, which in the computer world actually carries with it some weight. And so that understatement is actually meant to be of the highest regard to Rob. 

Allison, of course, who's been leading our official sections on camera once a week, and making sure there's a resource available online for students who are unable to tune-in in person. And then, of course, a TF, who I think has been at every single office hours this year, including these here, these here, those here as well. And indeed [? Zamila, ?] who has walked everyone through the course's problem sets, and without whom, we could not expect, I dare say, so much. 

And then lastly, Cheng here, who is known for much more than these elephants, which have been appearing at most every lecture. Indeed Cheng recently got together with CS50's production team to put together this thank you for the entire team, by way of a little segment we call, Cheng On The Street. 

[VIDEO PLAYBACK] 

[MUSIC PLAYING] 

-This is Cheng with Cheng on the Street. And today, I'm here at CS50's Quiz One Grading Party, where the staff members of CS50 have gathered to grade quiz one. I wouldn't really consider it a party, but you get the idea. I'll be asking them some questions about their experiences this semester, and maybe a few technical questions, then we'll solve them. 

-I don't think I'm ready for this. 

-It's OK. 

-OK. -How many bits are in a byte? 

-4, 8. 

-What does PHP stand for? 

-PHP? Hypertext protocol. 

-Is it a protocol, though? -I don't know. Is it? 

-Eh, eh. Buzzer. 

-I know that P stands for PHP. 

-So where does it stop? 

-It never stops. 

-It has to stop at somewhere. -No, it doesn't. -Acronyms simplify to a word. -No, mm-mm. [? Recouragin? ?] -This is a serious question. [LAUGHTER] What comes next in this sequence of numbers? 2, 4, 8, 16, 32, 955. 

-I thought you were going to say 64, but OK. -What's the next number in the sequence? -CS50. -That's not even a number. -I have no clue. -None of you are right. Please, go back to grading. What's 2 to the power of 64? -Oh, jeez. I should know this. 

-I don't know. -OK. 

[LAUGHTER] 

-How many stress balls does it take to fill Sanders Theater? 

-Too many. 

-You can never have too many stress balls. 

-Am I right? What's the correct answer? -There is no correct answer. -I'm sure there is. -It depends on the size of the stress ball. Do you know who Rob Bowden is? 

-Yes. He has better hair this year than he did previous years. So it was a little difficult recognizing him, but I managed it. 

-Is he the buff guy? 

-Yeah. -OK. Yeah, I like him. 

-Now that you mention that, I have a question for you. 

-All right. 

-What's Rob Bowden's bench press? 

-IT max. 

-What is his max bench press? -You. 

-Thank you so much to CS50's TFs, CAs, producers, designers, researchers, and everyone else who's been involved both in front of and behind the camera here in CS50. We surely could not do this without you, and we cannot wait to welcome new members to the staff. -Everyone at this table, can we get a hug? 

-Thank you. 

-Thank you very much, staff. Thank you for becoming staff. This concludes our interview. Thank you for being on staff this year. 

-Thank you so much. 

-Thank you. 

-No, no, thank you. 

-Did I do a good job or what? 

-You did wonderfully. This was Cheng, with Cheng on the Street, and this was CS50 2014. 

-What did we talk about? We just had this conversation. This is not a toy. 

[MUSIC PLAYING] 

[END PLAYBACK] 

[APPLAUSE] 

DAVID MALAN: So CS50 is indeed now recruiting for TFs, course assistants, producers, designers, and any number of other roles that enable this to go on behind the scenes. And now, for something a little special. As you know, Colton has introduced his EDM to the class, but today he got the band together and CS50, before we bring some students up on stage, I give you Colton, Gabe, and Taylor. 

[MUSIC PLAYING] 

COLTON: Feel my way through the darkness. Guided by a beating heart. I can't tell where the journey will end. But I know where to start. 

Try to tell me I'm too young to understand. Say I'm caught up in a dream. Life will pass me by if I don't open up my eyes. That's fine by me. 

So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. 

I tried carrying the weight of the world. But I only got two hands. Hope I get the chance to travel the world. I don't have any plans. Wish that I could stay forever this young. Not afraid to close my eyes. Life's a game made for everyone and love is a prize. 

So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. Everybody! So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. Didn't know I was lost. Didn't know I was lost. 

[APPLAUSE] 

DAVID MALAN: Coming this year to the CS50 Fair, live music as well. So now, our last opportunity for a bit of audience participation. For this we need six students and three staff. Let's see here, OK, you're practically jumping out of your chair. Come on up. 

OK. How about you two together over here, come on up. And how about you two and you one, come on up. Let's grow the teams a bit. OK. Right there. Come on. Yeah. You, come on down. That's going to be hard. 

OK. OK. Fine, come on down. See you in a few minutes. All right, so come on over here. We're going to get two more chairs and let's do Nick, and Alison, and this Yale student over here, and Rob Bowden, come on up. Meanwhile, if Cheng could join me on stage. 

If you guys would like to form two student teams, and one staff team. And Cheng, if you could distribute these chairs here, I'll get the board ready. This is incredibly awkward. OK. Make your way to a chair there. 

Come on over. Come on down. And I think the Yale student will be playing for the staff team. Excellent. We should have enough chairs, hopefully. If not, we'll grab another. Where do we need it? Over here, come on over. All right. 

CHENG GONG: Do we need more staff? 

DAVID MALAN: No, no. It's going to be two student teams and one Harvard/Yale staff team. All right, so we do have this tradition of playing Jeopardy, or really, our own version of Jeopardy where we just ask questions and expect answers. But the questions we're going to ask were not written by us, they were written by you. You may recall a rather long form for Problem Set A. 

[LAUGHTER] 

I have to admit, most of them didn't make it into quiz one. We got maybe 500 questions asking, what is HTML? What is HTTP? What is CSS? So they weren't exactly the most challenging of questions, but we went through hundreds and hundreds of questions to sample the following. 

So Cheng here has kindly offered to run the board. We'll go ahead here and call this Team One, Team Two, and Team Three. And let's say that Team Three has won the toss, so you guys are going to glance to your left or above you, pick a week, and pick a dollar amount. 

We will then ask the question, and Cheng will award you, or deduct from you the requisite points. Team Three, what would you like? I'm hearing a lot of Week 0 here. 

[LAUGHTER] STUDENT 1: Can we pick any? DAVID MALAN: Any category, any amount. STUDENT 2: Week 0, 500. DAVID MALAN: You're putting more thought into choosing the question than I wrote into selecting them All right, so what did you say? OK. And then the first hand that goes up will be considered the one who has buzzed in. What is the difference between global and local variables? I saw Team Two. STUDENT 3: Global-- do we just speak into the microphone? Global is for the entire scope of the program, whereas local is just defined within an isolated part. DAVID MALAN: Let's take a look. We're going to hold you to the answer that your classmates gave. If you click on the text, SCOPE in all caps. 

[LAUGHTER] DAVID MALAN: I think we're going to have to take this literally. So we're not going to give those points. We're going to expect exactly what your classmates gave. So unfortunately, we're at minus 500, but you're still in control. But you're still in control-- now you're in control-- well, no. You're still in control. 

STUDENT 2: OK. DAVID MALAN: You're still in control. Yeah, let's go for 500 again. OK. Week 1, 500, Cheng. What are the data types and their sizes? 

[LAUGHTER] 

DAVID MALAN: Oh, I saw a hand over here first. Rob Bowden. 

ROB BOWDEN: A char is 1 byte, a short is two bytes, an int is 4 bytes, a long is 4 bytes, a long long is 8 bytes, a char star is 4 bytes, an int star is 4 bytes, a long long star is 4 bytes. DAVID MALAN: Cheng, what is the correct answer? ROB BOWDEN: Oh, float and double. DAVID MALAN: You left out the part of the reference sheet, but I think we should give it to him for 500. ROB BOWDEN: Yeah. STUDENT: This is biased! ROB BOWDEN: What are you talking about? 

DAVID MALAN: It's OK the points went-- that's right, Team One. I am not a good judge, apparently. All right, we're going to move on. You guys have control. Yale student. We'll do Week 4 for 500 points. I think I saw Team Three. STUDENT 1: You free the memory. DAVID MALAN: You free the memory? Free it. We'll give it to you. All right, Team's One and Three are tied, Team Three has control. What category would you like? 

STUDENT 2: Week Two, 500. 

[DAILY DOUBLE ALARM] 

DAVID MALAN: Amazing. STUDENT 2: Everything? DAVID MALAN: You get to choose your amount. STUDENT 1: Why not? STUDENT 3: Yes. STUDENT 4: All in. STUDENT 2: 500. DAVID MALAN: 500? STUDENT 2: Yes. DAVID MALAN: 500, Daily Double. STUDENT 3: No, you can't. DAVID MALAN: Cheng? No! 

[CHEERING] 

DAVID MALAN: 500 and control of the board. We have-- 

ROB BOWDEN: So a double was a yes or no question? 

[LAUGHTER] 

DAVID MALAN: We have time for one or two more questions in Single Jeopardy. OK. Team Three. Week 0, for 100. What team are you on? STUDENT 5: I'm Two. DAVID MALAN: OK. Team Two. 

STUDENT 5: You use the Say block in MIT Scratch to say, hello, world. 

[LAUGHTER] 

DAVID MALAN: Minus 100. All right, one more question in Single Jeopardy. You guys are still in control. 

STUDENT 2: Week 3, 100. 

DAVID MALAN: Week Three, 100. What is the-- ROB BOWDEN: Team Three. DAVID MALAN: Team Three? OK. We're going with Team Three. STUDENT 3: The best case scenario, or run time? Because the best case scenario is it's in order. 

DAVID MALAN: Let's see what the correct answer is. 

[LAUGHTER] 

DAVID MALAN: All right. Let's move on to Double Jeopardy. 

ALEX TREBEK (RECORDING): This is Jeopardy. 

DAVID MALAN: Double Jeopardy, in this Double Jeopardy we have the categories of Week 5, 6, 7, 8, and 9. 

STUDENT 3: Where did our points go? Where did our points go? 

DAVID MALAN: We are going to manually adjust. There we go. Team Two had 2,000? OK. All right, so now we tossed the coin again and we're giving control to Team Two. Go ahead and choose your category and amount. 

STUDENT 2: We'll go Week 6, 1,000. 

DAVID MALAN: Week 6, 1,000. How does the stack grow? Team Two. 

STUDENT 5: You add a new function into Scope. 

DAVID MALAN: Add a new function to Scope. It grows up. 

[LAUGHTER] 

DAVID MALAN: All right, but you're still in control. 

STUDENT 5: All right, someone else pick. 

STUDENT 6: I'll pick. DAVID MALAN: It is all relative. Even though we tend to draw the stack as growing up, you'll recall that the addresses actually grow in a different direction. But just needed to make Rob happy there. All right, Team Two. 

STUDENT 4: Week 8, 1,000. 

DAVID MALAN: Week 8 for 1,000. True or false, is HTML a programming language? Is there another judge who can decide? 

ROB BOWDEN: It was all me. 

DAVID MALAN: All right, Rob has called. 

ROB BOWDEN: It is not, so false. DAVID MALAN: Rob says false, and the answer is no. [LAUGHTER] CHENG GONG: Wait, wait, wait. Wait, wait, wait. 

DAVID MALAN: All right, Yale student? STUDENT 2: It was a poorly written question, it said true or false, and then it was a question. I object. DAVID MALAN: Noted. We have time for one more Double Jeopardy question. Team Two. 

STUDENT 6: Week 9, 1,000. 

DAVID MALAN: Week 9 for 1,000. What's the difference between ID and class? Team Three? Team Three. 

STUDENT 3: You can apply ID to only one type of thing in HTML, but you can apply class too many different things. 

[APPLAUSE] DAVID MALAN: OK. We'll give it to you. So if we proceed to Final Jeopardy, I think, Team Three just wins, right? So let's do one more question. One more question, Double Jeopardy. 

So at least we can pull-- that's not going to help. It might help Team One. All right, who's in control? Not me, apparently. OK. You guys. Yes, you just got it right. 

STUDENT 2: Week 9, 200. 

DAVID MALAN: Well played, Week 9, 200. What symbol do all PHP-- 

STUDENT 2: Rob. 

DAVID MALAN: Rob? ROB BOWDEN: Cash tag. [LAUGHTER] DAVID MALAN: All right, let's proceed. Let's proceed to Final Jeopardy. Let's have everyone come up with an answer, and we'll have you write it on this slip of paper as we play some music. And then we'll pretend like this was going according to plan. 

All right, so Final Jeopardy category is Week 12. You all have to decide-- I didn't bring pens, no. Pens, please. Thank you. All right, OK. No more pens, please. OK. So Team One is at 0, Team Two is at 0, and Team Three is at 2. You can wager up to $2,000. So let's go ahead and make your wager. Wagers down. And now Cheng is going to reveal the question, then play some music until we adjourn. 

[JEOPARDY THEME PLAYING] 

DAVID MALAN: All right, let us begin here with Team Three. You wagered $1,000 and answered? 

STUDENT 1: 955. 

DAVID MALAN: 955. Team Two here wagered. STUDENT 7: $2,000. DAVID MALAN: $2,000 and your answer was? STUDENT 6: 955. DAVID MALAN: Team Three wagered $2,000, and your answer was? ROB BOWDEN: 955. DAVID MALAN: 955, which is correct. Which means our winner today, I think, is still just Team Three, right? Team Three takes the game! 

[APPLAUSE] 

DAVID MALAN: That then, is it for CS50. Thank you so much for CS50's team. Thank you so much! Thank you so much to our friends on Harvard time. This was CS50. 

[APPLAUSE] 

[MUSIC PLAYING] 

DAVEN FARNHAM: And now Deep Thoughts, by Daven Farnham. How am I supposed to figure out MySQL, if I can't even figure out my present? 

[CHUCKLING] [MUSIC PLAYING] [MUSIC ARMIN VAN BUUREN, "THIS IS WHAT  IT FEELS LIKE"] 

[MUSIC - M4SONIC, "WEAPON 2.0"] 

[CLAPPING] 

STEVE BALLMER: Woo! This is CS50. 

[APPLAUSE] 

DAVID MALAN: This is CS50. And this is the start, and end, of Week 12 for the very last time. You'll recall from Week 0 that we promised this, that what ultimately matters in this course is not so much where you end up relative to your classmates, but where you, in Week 12, end up relative to yourself in Week 0. 

Well, we are here now in Week 12, and you might look back fondly, or remarkadly, at just how far you've come when this was the worst of your problems, some weeks ago. But consider how far you've come since then. Particularly, if among those with no prior experience, just weeks later, were you implementing a fairly sophisticated data structure like this hash table here, or even this TRI here. 

Just a few weeks later, and just a week ago, were you implementing this, a mash-up of multiple APIs uisng asynchronus JavaScript calls and HTTP requests behind the scene. Ultimately, creating an entire web app from something that began with just a few hash marks. Now, indeed you might recall that 78% of you had no prior experience, and we proposed that you might be feeling a little lonely at the beginning, but realize that you are now very much among friends and supporters here. 

Now, it's a tradition in CS50 to not only start the semester, but also end the semester with a bit of cake. Indeed the team has been downstairs cutting it up, and sampling the cake, but that awaits in just a little bit of time. But I thought I'd pick up where we left off and get some closure today. 

You may recall this here website, I thought the only good thing I could do is write these kind folks upon having endorsed them so in class just a couple of weeks ago. And I will say to their credit, I got back this reply from ediblearrangments.com. Good morning, Mr. Malan. We have inquired with our IT department regarding your concern. They advise that as of next week, there will be a website patch applied. We appreciate the feedback. And indeed-- 

[APPLAUSE] DAVID MALAN: And indeed if you go to editablearrangments.com now, click login, you are indeed sent to the HTTPS version of the site. 

[APPLAUSE] 

So there you have it, CS50 here making a difference, one website at a time. So now, the final project is, of course, all that awaits now. And realize that there's any number of ingredients that you can weave into this project of yours. 

Indeed what many students do, if tackling a web based final project, will take p set 7's distribution code, CS50 Finance, and then will rip out parts of it that are of interest, or germane to their final project, like the look up function, which is surely very specific to Yahoo Finance. And they'll add in their own code, and build atop the login mechanism that we provide you with. And so that is absolutely a great place to get started. 

Especially if over break, and shortly thereafter, you're just not really sure where to begin to create something that hasn't already been handed to you at least in part. p set 8.2, if you want to do something with AJAX, or you want to write a script that imports a really big data set into a database, use p set 8 as a model in which you can build your own code, ultimately. But realize, too, that there's even fancier ways to get started. 

A very popular framework, that we're fans of, is called Laravel. This is a PHP framework that essentially adds to PHP a number of features that are already commonplace in the world of Ruby and Python, other programming languages that have built into them, or on top of them, additional frameworks. And so Laravel will take p set 7's framework, essentially, and give you a whole lot more tools for your tool kit. So if curious, and if you'd like to not only apply lessons learned, but tackle some new lessons for your final project, check out this and similar types of frameworks online. 

How about hosting your website? You can certainly put your final project, if doing something web based, on your CS50 appliance, and most students do. But if you'd like to actually take the worldwide web out for a spin and put your code out there, realize that it's pretty straightforward these days to buy a domain name for a few dollars, to set up your domain name's DNS settings for the IP address stuff. And then actually push your code to some remote server so that someone can visit you at something.com, or whatever domain name you happen to buy. 

Stay tuned to CS50's home page in the days to come, where we'll post some instructions for doing exactly that. If you'd like to follow some guidance, or if you'd like to venture out on your own, there's so many popular frameworks and systems out there. Many of which are free, or super cheap, or at least free for students. AWS, or Amazon Web Services, is one. In fact, that's where CS50 runs most of its own servers in the so-called cloud, using virtual machines, servers that aren't really physical. 

They're the illusion of physical servers, but that we, and you, could have complete control over. And we just had a seminar, in fact, a couple weeks ago on that. Parse.com is a super popular back-end tool that you can use to actually host a database. If you don't want to figure out, or stand up your own MySQL database, there's this and other related services that let you focus on the part of your app that you really like, the front-end or the user interface, or the features, and then outsource to someone else, often for free. Certainly for student scale prototypes, any back-end services like email or databases that you might need. 

Now, for authentication, a super common FAQ in CS50 is, how do you authenticate users? Not with their own user names and passwords, but with like Harvard IDs and PINS. Well, realize CS50 has a service called CS50 ID, via which you can do exactly that. And then those of you tackling, say, mobile projects, where you're kind of conflicted if you want to do an iPhone app, a Windows Phone app, an Android app, or any number of other devices out there, realize that there are actually tools that allow you to write your app, in typically JavaScript, or some similar language. And then deploy it to multiple platforms like iOS and Android and the like, phonegap being one, Titanium another. 

So if you're sort of conflicted, and realize that there's a bit of a learning curve to learning just one of these languages, realize you can take your own new found familiarity with JavaScript out for a spin, and apply it there. And there's so much more that you can find on your own, or by consulting your TFs. Now, what about life after CS50? Just so that this is said, at least once, you're not going to be handed problem set specifications and distribution code in perpetuity, but realize that you don't need the CS50 appliance to continue coding on Mac OS. 

It's a wonderful, useful environment in that it's pre-configured to be representative of a nice Linux system. But you can certainly use any number of freely available tools these days to write code on your own Mac without the overhead of an appliance, or on your own Windows computer, or if you're running Linux, a number of tools exist there as well. So that's just a whirlwind tour that you might want to curl up with at some point. But for now, let's take a look ahead and what remains. 

In particular among the course's historical events is the CS50 hackathon. An epic all nighter, at which you'll arrive around 7:00 PM, set up shop with your laptop, and project, and friends. And dive into final projects in an environment that looks a little like this upon arrival. You'll check in here, you'll then get down to work, you'll help out a classmate. 

You'll indulge in first dinner around 9:00 PM, second dinner around 1:00 AM. And then for those still standing at the end of the night, we'll take you to IHOP. But along the way there will be a photo booth, not like this, and indeed actual CS50 shuttles on our way to IHOP. 

Now, the CS50 fair, for students in the class, this is your opportunity to exhibit proudly your final projects. Not only to others, but typically 2,000 plus attendees from across campus, students, faculty, folks who see the balloons along Oxford Street and come on in. So realize that what awaits there are glimpses of maybe each other's projects here, where you'll bring your laptop. We'll set up tall tables on which you put your laptop, hop on the Wi-Fi, and demo your projects to passers by. 

Meanwhile, there will be music, and popcorn, and candy, and more. So that you'll have ample opportunities to mingle. We'll have friends of ours from industry, recruiters from any number of these companies here there just to chat up students about life after college, or internships during college, and the like. You'll see, too, that there's a raffle to incentivize not only you to strike up these chats with friends, but also to invite your own friends, or convince your own friends to come see your project. 

You can sweeten the deal by these little cards that will be handed out. Each of them will have placeholders for little Smiley face stickers. You guys as the students will be given Smiley face stickers. And for anyone who ventures up to you and says, hey, what did you do? Or asks you for a demo of your project, you hand them a sticker. They put it on their card. And that qualifies them for any number of fabulous prizes, including those pictured here, which are then raffled off at the end of the event. That's it for CS50. And along the way, there will be ample popcorn, and stress balls, and candy, and even last year the Harvard band, who was not expected, but was in attendance. 

There will be a photo booth there as well, and massive numbers of balloons like these ones here. So many so, that invariably the staff try to pull this trick at the end of the night, never quite works. But for you, if you'd like to invite your friends to this event-- 

SAM CLARK: Now, as we come over to the next stop on the tour. You'll notice a distinct-- 

[LAUGHTER] 

File on in. You'll notice a distinct departure from the Gothic architecture that we saw on the rest of the tour of Yale's campus. Now, here we are at Sanders Theater. Sanders Theater is really a cultural and academic hub here at Harvard. Commencement was held here until 1922. It's modeled after the Sheldonian Theater in Oxford, England, as a matter of fact. And it serves as a location for many cultural events, and big academic events here. 

Many A cappella groups perform in Sanders, the Crocodillos perform here frequently, they're sort of like the Wippenpoofs 2.0, almost. As well as the largest class actually at Harvard, CS50, is taught here. Who on the tour is interested in computer science? Anyone interested? Terrific. Well, if you happen to matriculate at Yale, you'll really, really want to be taking CS50. 

[LAUGHTER] 

[APPLAUSE] 

You won't actually be able to take it physically within Sanders Theater, however, CS50 will be live streamed over to you in New Haven. As well as you'll have an entire support staff, support network of staff there to take CS50, to learn all about computer science. So this is Sanders Theater. It's not Gothic, but it's great. Does anyone have any questions before we move on to the next stop? Yeah. 

AUDIENCE: Is that David Malan? 

[LAUGHTER] 

SAM CLARK: Oh, my God it is! Let's take a selfie. Selfie! Take a selfie! Right here, right here. Here, someone hold it up. Someone hold it up. How are you, David? 

DAVID MALAN: Hello, DA 

SAM CLARK: I'm doing well. I got to flip it around. And duck face, David. 

[LAUGHTER] 

Yeah, he likes that. Terrific. Terrific. Well, we'll move on to the next stop. Our next stop is the Harvard stadium, where we've had great luck in the last 13 years. 

[LAUGHTER] 

[APPLAUSE] 

DAVID MALAN: So the rumors are indeed true. For the first time in history, students at Harvard and Yale alike will be able to take a course called CS50 this coming Fall in 2015. We will put asie the rivalry for nearly 100 years, and ultimately, in Fall 2015, actual Yale students will be able to take CS50 for the first time. The lectures will indeed be streamed from here, your successors in this audience, to New Haven, where students will be able to engage in person, or as some of you have so optimized, online live, or on demand after. 

But we will be standing up a local support structure, complete with teaching fellows, course assistants will be leading sections, and office hours. CS50 Puzzle Day will be held in Cambridge, and we will invite our Yale friends to Cambridge for CS50 Puzzle Day, as well as the CS50 hackathon. And then at semester's end, there will be an epic display in both Cambridge and in New Haven of CS50 students from Harvard, and Yale alike on display in those respective towns. 

And indeed if you have any friends who go to Yale, we do need some TFs and CSs so do send them to this URL here. But we will in the meantime, be sending one of CS50's own best teaching fellows, Jason Hirschhorn, who's about to graduate, having just finished his thesis on the intersection of computer science and education. Jason will be working full time at Yale, and will be on the ground there helping us to stand this up and bring these two universities together via CS50. 

[APPLAUSE] 

Now, along with CS50's production team, I had an opportunity to hop in the car with this guy and take a look at what awaits us in New Haven. 

[VIDEO PLAYBACK] 

[MUSIC - "MOVIN' RIGHT ALONG"] 

-Movin' right along in search of good times and good news with good friends who can't lose. 

-This could become a habit. 

-Opportunity knocks once let's reach out and grab it. 

-Yeah! 

-Together we'll nab it. 

-We'll hitchhike, bus, or yellow cab it. 

-Cab it? 

-Movin' right along, footloose and fancy free. 

-Getting there is half the fun come share it with me. 

-Movin' right along. 

-We'll learn to share the load. 

-We don't need a map to keep this show on the road. 

-Hey, Fozzy, I want you to turn left if you come to a fork in the road. 

-Yes, Sir. Turn left at the fork in the road. Kermit? 

-I don't believe that. Movin' right along, we've found a life on the highway. 

-And your way is my way. 

-So trust my navigation. 

-Movie stars with flashy cars, and life with the top down. 

-We're storming the big town. -Yeah. Storm is right. Should it be snowing? 

-No, I don't think so. 

-Movin' right along. 

-Footloose and fancy free. 

-Be ready for the big time 

-Is it ready for me? 

-Movin' right along. Movin' right along. Movin' right along. Movin' right along. -Maybe you better pull over. -Yes, Sir. Oh, look at that. 

[END PLAYBACK] 

DAVID MALAN: We'll see Yale in 2015. 

[APPLAUSE] 

So now some thank yous. Suffice it to say there's an entire family, both in front of and behind the camera, in this class that makes everything work ultimately. And I'd like to acknowledge a few, and then the entire staff by way first of Colton, whose EDM has permeated the start of lectures for some number of weeks now. As well as the entire production team, who's been making everything look so beautiful this year. Dan in Chile, and Andrew, and Cheng, and Colton, and Ramon, and Barry in back, and Kenny and everyone who's been involved behind these cameras, making everything possible. To Gabriel, as well, our head teaching fellow. 

[APPLAUSE] 

If you didn't already know, Gabriel actually found CS50 by way of the production team's videos. Indeed growing up in Brazil a few years back, he discovered that all of CS50's material was online, and he dropped me a kind note asking if he might be able to translate it to Portuguese for his classmates. And indeed he did, ultimately, lecturing to some 50 students, his classmates, in high school. Followed by 150 students the next year, and wonderfully his dad was in fact filming the whole thing so you can find Gabe's lectures of CS50 in Brazil online as well. 

And now Davon here, Davon here has been running the course, and has been making everything run so smoothly, and without him we could not manage the team that we now have. And then of course, Rob Bowden. 

[APPLAUSE] 

Rob's now been with the course some five years, having approached me sophomore year with an interest in getting involved in the class. And then became assistant head TF, and then Head TF, and then Preceptor. And now, believe it or not, the very distinguished role of Member of Technical Staff, which in the computer world actually carries with it some weight. And so that understatement is actually meant to be of the highest regard to Rob. 

Allison, of course, who's been leading our official sections on camera once a week, and making sure there's a resource available online for students who are unable to tune-in in person. And then, of course, a TF, who I think has been at every single office hours this year, including these here, these here, those here as well. And indeed [? Zamila, ?] who has walked everyone through the course's problem sets, and without whom, we could not expect, I dare say, so much. 

And then lastly, Cheng here, who is known for much more than these elephants, which have been appearing at most every lecture. Indeed Cheng recently got together with CS50's production team to put together this thank you for the entire team, by way of a little segment we call, Cheng On The Street. 

[VIDEO PLAYBACK] 

[MUSIC PLAYING] 

-This is Cheng with Cheng on the Street. And today, I'm here at CS50's Quiz One Grading Party, where the staff members of CS50 have gathered to grade quiz one. I wouldn't really consider it a party, but you get the idea. I'll be asking them some questions about their experiences this semester, and maybe a few technical questions, then we'll solve them. 

-I don't think I'm ready for this. 

-It's OK. 

-OK. -How many bits are in a byte? 

-4, 8. 

-What does PHP stand for? 

-PHP? Hypertext protocol. 

-Is it a protocol, though? -I don't know. Is it? 

-Eh, eh. Buzzer. 

-I know that P stands for PHP. 

-So where does it stop? 

-It never stops. 

-It has to stop at somewhere. -No, it doesn't. -Acronyms simplify to a word. -No, mm-mm. [? Recouragin? ?] -This is a serious question. [LAUGHTER] What comes next in this sequence of numbers? 2, 4, 8, 16, 32, 955. 

-I thought you were going to say 64, but OK. -What's the next number in the sequence? -CS50. -That's not even a number. -I have no clue. -None of you are right. Please, go back to grading. What's 2 to the power of 64? -Oh, jeez. I should know this. 

-I don't know. -OK. 

[LAUGHTER] 

-How many stress balls does it take to fill Sanders Theater? 

-Too many. 

-You can never have too many stress balls. 

-Am I right? What's the correct answer? -There is no correct answer. -I'm sure there is. -It depends on the size of the stress ball. Do you know who Rob Bowden is? 

-Yes. He has better hair this year than he did previous years. So it was a little difficult recognizing him, but I managed it. 

-Is he the buff guy? 

-Yeah. -OK. Yeah, I like him. 

-Now that you mention that, I have a question for you. 

-All right. 

-What's Rob Bowden's bench press? 

-IT max. 

-What is his max bench press? -You. 

-Thank you so much to CS50's TFs, CAs, producers, designers, researchers, and everyone else who's been involved both in front of and behind the camera here in CS50. We surely could not do this without you, and we cannot wait to welcome new members to the staff. -Everyone at this table, can we get a hug? 

-Thank you. 

-Thank you very much, staff. Thank you for becoming staff. This concludes our interview. Thank you for being on staff this year. 

-Thank you so much. 

-Thank you. 

-No, no, thank you. 

-Did I do a good job or what? 

-You did wonderfully. This was Cheng, with Cheng on the Street, and this was CS50 2014. 

-What did we talk about? We just had this conversation. This is not a toy. 

[MUSIC PLAYING] 

[END PLAYBACK] 

[APPLAUSE] 

DAVID MALAN: So CS50 is indeed now recruiting for TFs, course assistants, producers, designers, and any number of other roles that enable this to go on behind the scenes. And now, for something a little special. As you know, Colton has introduced his EDM to the class, but today he got the band together and CS50, before we bring some students up on stage, I give you Colton, Gabe, and Taylor. 

[MUSIC PLAYING] 

COLTON: Feel my way through the darkness. Guided by a beating heart. I can't tell where the journey will end. But I know where to start. 

Try to tell me I'm too young to understand. Say I'm caught up in a dream. Life will pass me by if I don't open up my eyes. That's fine by me. 

So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. 

I tried carrying the weight of the world. But I only got two hands. Hope I get the chance to travel the world. I don't have any plans. Wish that I could stay forever this young. Not afraid to close my eyes. Life's a game made for everyone and love is a prize. 

So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. Everybody! So wake me up when it's all over. When I'm wiser and I'm older. All this time I was finding myself and I didn't know I was lost. Didn't know I was lost. Didn't know I was lost. 

[APPLAUSE] 

DAVID MALAN: Coming this year to the CS50 Fair, live music as well. So now, our last opportunity for a bit of audience participation. For this we need six students and three staff. Let's see here, OK, you're practically jumping out of your chair. Come on up. 

OK. How about you two together over here, come on up. And how about you two and you one, come on up. Let's grow the teams a bit. OK. Right there. Come on. Yeah. You, come on down. That's going to be hard. 

OK. OK. Fine, come on down. See you in a few minutes. All right, so come on over here. We're going to get two more chairs and let's do Nick, and Alison, and this Yale student over here, and Rob Bowden, come on up. Meanwhile, if Cheng could join me on stage. 

If you guys would like to form two student teams, and one staff team. And Cheng, if you could distribute these chairs here, I'll get the board ready. This is incredibly awkward. OK. Make your way to a chair there. 

Come on over. Come on down. And I think the Yale student will be playing for the staff team. Excellent. We should have enough chairs, hopefully. If not, we'll grab another. Where do we need it? Over here, come on over. All right. 

CHENG GONG: Do we need more staff? 

DAVID MALAN: No, no. It's going to be two student teams and one Harvard/Yale staff team. All right, so we do have this tradition of playing Jeopardy, or really, our own version of Jeopardy where we just ask questions and expect answers. But the questions we're going to ask were not written by us, they were written by you. You may recall a rather long form for Problem Set A. 

[LAUGHTER] 

I have to admit, most of them didn't make it into quiz one. We got maybe 500 questions asking, what is HTML? What is HTTP? What is CSS? So they weren't exactly the most challenging of questions, but we went through hundreds and hundreds of questions to sample the following. 

So Cheng here has kindly offered to run the board. We'll go ahead here and call this Team One, Team Two, and Team Three. And let's say that Team Three has won the toss, so you guys are going to glance to your left or above you, pick a week, and pick a dollar amount. 

We will then ask the question, and Cheng will award you, or deduct from you the requisite points. Team Three, what would you like? I'm hearing a lot of Week 0 here. 

[LAUGHTER] STUDENT 1: Can we pick any? DAVID MALAN: Any category, any amount. STUDENT 2: Week 0, 500. DAVID MALAN: You're putting more thought into choosing the question than I wrote into selecting them All right, so what did you say? OK. And then the first hand that goes up will be considered the one who has buzzed in. What is the difference between global and local variables? I saw Team Two. STUDENT 3: Global-- do we just speak into the microphone? Global is for the entire scope of the program, whereas local is just defined within an isolated part. DAVID MALAN: Let's take a look. We're going to hold you to the answer that your classmates gave. If you click on the text, SCOPE in all caps. 

[LAUGHTER] DAVID MALAN: I think we're going to have to take this literally. So we're not going to give those points. We're going to expect exactly what your classmates gave. So unfortunately, we're at minus 500, but you're still in control. But you're still in control-- now you're in control-- well, no. You're still in control. 

STUDENT 2: OK. DAVID MALAN: You're still in control. Yeah, let's go for 500 again. OK. Week 1, 500, Cheng. What are the data types and their sizes? 

[LAUGHTER] 

DAVID MALAN: Oh, I saw a hand over here first. Rob Bowden. 

ROB BOWDEN: A char is 1 byte, a short is two bytes, an int is 4 bytes, a long is 4 bytes, a long long is 8 bytes, a char star is 4 bytes, an int star is 4 bytes, a long long star is 4 bytes. DAVID MALAN: Cheng, what is the correct answer? ROB BOWDEN: Oh, float and double. DAVID MALAN: You left out the part of the reference sheet, but I think we should give it to him for 500. ROB BOWDEN: Yeah. STUDENT: This is biased! ROB BOWDEN: What are you talking about? 

DAVID MALAN: It's OK the points went-- that's right, Team One. I am not a good judge, apparently. All right, we're going to move on. You guys have control. Yale student. We'll do Week 4 for 500 points. I think I saw Team Three. STUDENT 1: You free the memory. DAVID MALAN: You free the memory? Free it. We'll give it to you. All right, Team's One and Three are tied, Team Three has control. What category would you like? 

STUDENT 2: Week Two, 500. 

[DAILY DOUBLE ALARM] 

DAVID MALAN: Amazing. STUDENT 2: Everything? DAVID MALAN: You get to choose your amount. STUDENT 1: Why not? STUDENT 3: Yes. STUDENT 4: All in. STUDENT 2: 500. DAVID MALAN: 500? STUDENT 2: Yes. DAVID MALAN: 500, Daily Double. STUDENT 3: No, you can't. DAVID MALAN: Cheng? No! 

[CHEERING] 

DAVID MALAN: 500 and control of the board. We have-- 

ROB BOWDEN: So a double was a yes or no question? 

[LAUGHTER] 

DAVID MALAN: We have time for one or two more questions in Single Jeopardy. OK. Team Three. Week 0, for 100. What team are you on? STUDENT 5: I'm Two. DAVID MALAN: OK. Team Two. 

STUDENT 5: You use the Say block in MIT Scratch to say, hello, world. 

[LAUGHTER] 

DAVID MALAN: Minus 100. All right, one more question in Single Jeopardy. You guys are still in control. 

STUDENT 2: Week 3, 100. 

DAVID MALAN: Week Three, 100. What is the-- ROB BOWDEN: Team Three. DAVID MALAN: Team Three? OK. We're going with Team Three. STUDENT 3: The best case scenario, or run time? Because the best case scenario is it's in order. 

DAVID MALAN: Let's see what the correct answer is. 

[LAUGHTER] 

DAVID MALAN: All right. Let's move on to Double Jeopardy. 

ALEX TREBEK (RECORDING): This is Jeopardy. 

DAVID MALAN: Double Jeopardy, in this Double Jeopardy we have the categories of Week 5, 6, 7, 8, and 9. 

STUDENT 3: Where did our points go? Where did our points go? 

DAVID MALAN: We are going to manually adjust. There we go. Team Two had 2,000? OK. All right, so now we tossed the coin again and we're giving control to Team Two. Go ahead and choose your category and amount. 

STUDENT 2: We'll go Week 6, 1,000. 

DAVID MALAN: Week 6, 1,000. How does the stack grow? Team Two. 

STUDENT 5: You add a new function into Scope. 

DAVID MALAN: Add a new function to Scope. It grows up. 

[LAUGHTER] 

DAVID MALAN: All right, but you're still in control. 

STUDENT 5: All right, someone else pick. 

STUDENT 6: I'll pick. DAVID MALAN: It is all relative. Even though we tend to draw the stack as growing up, you'll recall that the addresses actually grow in a different direction. But just needed to make Rob happy there. All right, Team Two. 

STUDENT 4: Week 8, 1,000. 

DAVID MALAN: Week 8 for 1,000. True or false, is HTML a programming language? Is there another judge who can decide? 

ROB BOWDEN: It was all me. 

DAVID MALAN: All right, Rob has called. 

ROB BOWDEN: It is not, so false. DAVID MALAN: Rob says false, and the answer is no. [LAUGHTER] CHENG GONG: Wait, wait, wait. Wait, wait, wait. 

DAVID MALAN: All right, Yale student? STUDENT 2: It was a poorly written question, it said true or false, and then it was a question. I object. DAVID MALAN: Noted. We have time for one more Double Jeopardy question. Team Two. 

STUDENT 6: Week 9, 1,000. 

DAVID MALAN: Week 9 for 1,000. What's the difference between ID and class? Team Three? Team Three. 

STUDENT 3: You can apply ID to only one type of thing in HTML, but you can apply class too many different things. 

[APPLAUSE] DAVID MALAN: OK. We'll give it to you. So if we proceed to Final Jeopardy, I think, Team Three just wins, right? So let's do one more question. One more question, Double Jeopardy. 

So at least we can pull-- that's not going to help. It might help Team One. All right, who's in control? Not me, apparently. OK. You guys. Yes, you just got it right. 

STUDENT 2: Week 9, 200. 

DAVID MALAN: Well played, Week 9, 200. What symbol do all PHP-- 

STUDENT 2: Rob. 

DAVID MALAN: Rob? ROB BOWDEN: Cash tag. [LAUGHTER] DAVID MALAN: All right, let's proceed. Let's proceed to Final Jeopardy. Let's have everyone come up with an answer, and we'll have you write it on this slip of paper as we play some music. And then we'll pretend like this was going according to plan. 

All right, so Final Jeopardy category is Week 12. You all have to decide-- I didn't bring pens, no. Pens, please. Thank you. All right, OK. No more pens, please. OK. So Team One is at 0, Team Two is at 0, and Team Three is at 2. You can wager up to $2,000. So let's go ahead and make your wager. Wagers down. And now Cheng is going to reveal the question, then play some music until we adjourn. 

[JEOPARDY THEME PLAYING] 

DAVID MALAN: All right, let us begin here with Team Three. You wagered $1,000 and answered? 

STUDENT 1: 955. 

DAVID MALAN: 955. Team Two here wagered. STUDENT 7: $2,000. DAVID MALAN: $2,000 and your answer was? STUDENT 6: 955. DAVID MALAN: Team Three wagered $2,000, and your answer was? ROB BOWDEN: 955. DAVID MALAN: 955, which is correct. Which means our winner today, I think, is still just Team Three, right? Team Three takes the game! 

[APPLAUSE] 

DAVID MALAN: That then, is it for CS50. Thank you so much for CS50's team. Thank you so much! Thank you so much to our friends on Harvard time. This was CS50. 

[APPLAUSE] 

[MUSIC PLAYING] 

DAVEN FARNHAM: And now Deep Thoughts, by Daven Farnham. How am I supposed to figure out MySQL, if I can't even figure out my present? 

[CHUCKLING] DAVID J. MALAN: So this is CS50. And this was CS50's own Colton Ogden, for more of who's music you can download at soundcloud.com/cs50. 

So today we focus all the more on the art of programming. And we take where we left off last week, focusing on Scratch, which was this graphical programming language. And take things down to a lower level, using a more traditional programming language known as C. But along the way, realizing that the same ideas we talked about last Friday will recur not only in this language C, but in most every other that we look at this semester. 

So we called this thing here what last time? This is representative of a statement. So we called this a statement. And it does something. It's an instruction that a computer or Scratch might execute. And henceforth, let's also start calling something like this a function, for reasons we shall soon see. 

Meanwhile, we saw things like this. And these are generally known as what construct? 

AUDIENCE: Loop. 

DAVID J. MALAN: So a loop. So pretty straightforward. It literally does what it says. And in Scratch, if you want to cram more puzzle pieces in there, the piece will grow to fit it. And we'll see in C that we can do the same thing. 

Another type of loop, though, in Scratch might be forever, or there's any number of other approaches. But let's take a more generalist look, with a face that's likely quite familiar, at loops more generally. MARK ZUCKERBERG: One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored, and be able to carry that out really well. 

So for example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are and why they're valuable and something that computers can do very well. 

DAVID J. MALAN: So if you've been the recipient of some of CS50's and Dropbox's space of late, that's actually precisely what we do, using code quite like that. We essentially have a big spreadsheet into which folks have been inputting their names and email addresses. And we wrote a tiny bit of code that can iterate over those addresses and spit out unique addresses in case anyone submitted multiple times. And thereafter, we send an automated email from CS50's bot, including the coupon code. 

Now we also looked at this construct last time. And this is a particular example of what? So, yeah, a Boolean expression. And the shape is meant to capture that as well. All such questions of the form true or false in Scratch will look a little something like this. And we call this a Boolean expression. That's indeed true or false, yes or no. It's a way of answering a question. 

And Meanwhile you can use these Boolean expressions inside of constructs like these, which of course are conditions or branches, proverbial forks in the road. And they can look not only like this, but they can also have elses associated with them. And you can actually have a three way fork in the road or a four way fork in the road, simply by nesting these things, as you'll see in Scratch if you haven't already. And as you can do in C as well. 

Let's take another generalist look at an alumnist, as well, who might present a different approach to these things called conditions. 

BILL GATES: People make decisions every day. For example, before you go outside you kind of have an if statement that says, if it's raining then I need to get my jacket. And computers are amazing once you decide those kinds of statements, that they can reliably execute those things at unbelievable speed. And so a computer program really is a little bit of math and some if statements where the decision gets made. 

DAVID J. MALAN: So as you may know, it was folks like Bill Gates, Paul Allen, and others that truly kicked off the so-called personal computer revolution some years ago. I thought, before we dive into some administrivia, we'd relate a tale from the Albuquerque, New Mexico museum of Natural History and science where some of Bill Gates' and Paul Allen's earliest stories are recounted how we have now today's PCs and Macs and more. For this, though, we need two volunteers who have very good narration voices to read a script aloud. 

All right, how about in back there. Come on up. And how about in front here. Come on down. Take your places here. As you guys come up, a couple of administrative announcements. sectioning, the process of choosing a section, will start this Wednesday through Friday. More on that this coming Wednesday in lecture. 

Super sections, meanwhile, are something that we offer next week whereby the entire class is invited to participate in fairly large scale sections, one more comfy, one less comfortable. And we will announce the particulars of that, as well, later this week. 

Meanwhile sections, themselves, will start in week three of the course, zero index, which means those are a couple of weeks out. So not to worry. You have not yet missed anything along those lines. Meanwhile in the meantime, if you have any questions administratively, email myself and Devon and Gabe and Rob at this address here. 

Lastly, problem set 0 is, of course, out. You may have noticed it on the course's website. It should provide you with all answers to questions you might have along the way for getting started with the problem set. But if you find yourself in need of a helping hand, by all means attend office hours, Monday, Tuesday, Wednesday, Thursday of this week in the evening in four dining halls. See that URL there for the particulars of where office hours shall be. 

Now Let's meet our two guests here today. What's your name? 

JAY PAUL: Jay Paul. 

DAVID J. MALAN: Jay Paul, nice to meet you. 

HIKARI: Hikari. 

DAVID J. MALAN: Hikari? 

HIKARI: Hikari. 

DAVID J. MALAN: Hikari. Nice to meet you as well. Jay Paul and Hikari have in front of them on these music stands two scripts that I printed out this morning from the New Mexico museum of Natural History and Science. And what I thought I'd do on the overhead is accompany your recitation of the script and this history with some visual images, no surprises. 

And what I've done in advance is prehighlight on your script what you should read, and what you should read. And we'll essentially just alternate paragraphs. So it's much like you might have done in English class. That's really compel the audience to believe in your tale here. Shall we? So the story here is, we have a BASIC, and it begins in Cambridge. 

JAY PAUL: It was winter, 1974, in Cambridge, Massachusetts where winters can be cold. A bearded, long haired college dropout named Paul Allen was drudging across Harvard Square, absorbed in his thoughts. His main preoccupation in those days was how to get his friend, Bill Gates, to quit school and go into business with him. HIKARI: The two had already gone through a number of business ventures together, beginning at Lakeside school in Seattle where they were paid in free computer time to test a PDP-10 computer at a local time sharing company. The most recent plan had been to quit school and form a software company. Allen had left Washington State University. But at the last minute, Gates decided to stick with Harvard. 

JAY PAUL: That day, crossing Harvard Square, Allen spotted the January, 1975 issue of Popular Electronics with the earth stopping headline, World's First Minicomputer Kit to Rival Commercial Models. Beneath the headline was a picture of a small box adorned with lights and switches. It was called the MITS Altair 8800. And Allen knew this was what he had been looking for. 

HIKARI: Days of discussion followed. Allen and Gates understood the significance of the Altair. They had talked often about microprocessors and were waiting to see what would be done with them. Now there was a minicomputer kit on the cover of Popular Electronics. It apparently had no software yet. They imagined a nation of programmers descending on MITS. And so they called Ed Roberts, the head of the company, claiming to have a version of the BASIC programming language almost ready for the Altair. They didn't. And Roberts must have known they didn't. He was getting 10 calls a day from people who had a BASIC almost ready. And his stock response was, "The first person who shows up with a working BASIC gets the contract." 

JAY PAUL: Gates and Allen had never seen an Altair. They had never even seen the Intel 8080 microprocessor at the heart of the Altair. But a couple of years earlier Allen had written a program on a mainframe computer that emulated the operation of a previous Intel microprocessor. And this time around they would do the same thing. 

HIKARI: With an Intel 8080 manual at his side, Allen sat down at a Harvard PDP-10 computer and wrote the emulator and software tools necessary to do the programming. Meanwhile Gates stopped going to classes and devoted himself to designing the BASIC, using every trick he knew to get the size down below 4 kilobytes. 

JAY PAUL: Out in Albuquerque, Ed Roberts got a call from Gates asking for details about how the Altair handled specific routines. No one had ever asked that before. And Roberts began to get interested. 

HIKARI: With the development tools and the design ready, Gates and Allen wrote the code on the PDP-10, enlisting another Harvard student, Monte Davidoff, to write math routines. After a final night of programming, Allen got on a plane to deliver their BASIC to MITS. He spent the plane ride out worrying. And back in Cambridge Gates was worrying. They had tested their BASIC and it had worked on the emulator. But what if the emulator was wrong? JAY PAUL: As the plane approached Albuquerque, Allen realized that their BASIC, now neatly contained on a small roll of punched paper tape, would be useless without a separate program, called a loader, that would tell the Altair how to read the paper tape being fed into the teletype machine. He took out his notebook and quickly scribbled down a loader program in Assembly language, then manually translated that into the 1s and 0s the Altair would understand. 

HIKARI: Allen was expecting a clean, little, high tech company run by men in business suits. So he was surprised when Roberts met him at the airport looking like a ranch hand. Roberts was also surprised. When he dropped the Harvard programmer at an expensive hotel, Allen had to confess that he couldn't afford the room. 

JAY PAUL: MITS, itself, was located in a dusty strip mall. Inside on a cluttered workbench was an Altair loaded up with 5 kilobytes of memory and connected by a cable to a teletype machine. Roberts and Chief Engineer, Bill Yates, waited expectantly as Allen toggled his loader program into the Altair. The teletype began chugging as it pulled the paper tape through the tape reader. It took perhaps 15 minutes to load the program. Then the teletype abruptly printed a memory prompt, then a ready prompt, and Allen began typing a few test commands. To everyone's amazement, the software worked. There were bugs, of course. But the main thing was it worked. 

HIKARI: Later, on their way to a $3.00 lunch at Pancho's, a wasp flew in the window of the pickup truck and stung Allen on the arm. But at that point nothing could spoil the mood. The Altair now had its BASIC, the first commercial software for a home computer, made by Paul Allen and Bill Gates, doing business as Microsoft. 

DAVID J. MALAN: Many thanks to our two readers. 

[APPLAUSE] 

DAVID J. MALAN: Now you have your choice, before you leave, of a sparkly or a glow in the dark-- oh, wait one sec, wait-- sparkly and a glow in the dark elephant from CS50's own Cheng Gong. HIKARI: Aw, thank you. DAVID J. MALAN: All right, thank you so much. [APPLAUSE] DAVID J. MALAN: So true story. This is to say that all of these machines and the ease with which we use them now and take for granted, really started here, just a few paces from this actual theater. And now today, if you've not been, this is Maxwell Dworkin, the computer sciences building, also around the corner. And on the second floor of this building does hang three pages from the original source code that Bill Gates and Paul Allen wrote. In fact, if use you zoom in you can see not only their names in the original type, but also their signatures that they adorned a few years back when they last visited. 

But what was particularly compelling about this is what they set out to do was to write a program that would enable other people to write their own programs. At the time all there was with this Altair machine made by MITS. And all they needed was some way of making it easy for hobbyists and people like us in this room to actually program that without necessarily understanding Assembly code, or machine code, or God forbid, 0s and 1s. We programmers, like those in this room, we want to be able to express ourselves much more like pseudo code even if it's a bit more nit picky than we talked last week. We don't want to write code like this, which Paul Allen and Bill Gates did. We, instead, want to write code that looks a little more user friendly. 

Now this is a language known as BASIC. And the line numbers there are what you use to simply number the lines of code that you're writing. We don't even have to do that these days. But you can see here how PRINT "hello, world" would indeed presumably print just that. And so what Bill and Paul did was empower people to write code like this instead of-- if you take a look at the computer science wall-- code like this. 

In fact, CS50 recently had an opportunity to sit down with Professor Harry Lewis in the Computer Science department, who actually taught Bill Gates some years ago, and is standing here before those three pages of excerpts. Let's take a look. 

HARRY LEWIS: What you have here is a listing of an early piece of software written by Bill Gates and Paul Allen, the founders of Microsoft. So the code is interesting for two reasons. First of all, it became Microsoft's first product, which was an interpreter for the BASIC programming language. And secondly, this was one of the first attempts to create an interpreter so ordinary people could use personal computers. 

So Bill Gates was an undergraduate at Harvard. I started teaching at Harvard in 1974. This was done in 1975. So it was early in his career and early in my career. I actually taught Bill in a course around this time. Paul Allen was not a Harvard student, but he had been a high school classmate of Bill Gates. If you come and look at the listing, you'll actually find a third name, Monte Davidoff, who was Gates's classmate here at Harvard. 

OK, so here's an interesting comment up here. It says "In 4K can delete square root but for loops should still work." OK, so what that means is that there were two ways to compile this program. One was to run on a version of this Altair computer that only had 4K words of memory, 4,096 words of memory. But the big version had 8K. And so what this says is that in the 4K version you had to delete some code to make it fit. And one of the things that would be deleted would be the square root routine. But apparently the for loops should still work even when you're compiling down for just the 4K version of the computer. DAVID J. MALAN: So one of the themes, as we'll see in computer science, is this notion of layering and abstraction, and really standing on the shoulders of folks who have come before us, not unlike some of the Bill Gates and Paul Allen narrative here. And what this means is that today we can take for granted that things are actually easier for us to write code. Indeed code, as we said on Friday, is more technically known as source code. And it's this English like syntax that's more proper and more well defined than something like pseudo code, for which there is no formal definition. 

And today what we're going to focus on is source code that looks like this, which admittedly at first glance looks completely cryptic. And frankly, it's way more aesthetically complex than the underlying program is. All this program does, recall, is what did we say? It just prints "hello world." And yet look at all of the stuff we need to wrap around that very simple phrase. But before long all of these lines and more will make much better sense to you. 

And the flow is as follows. What we need at our disposal is to take code, like source code that we just saw. And we need a new program to run it through. We need algorithms that can convert source code, like this, into object code, 0s and 1s. In other words, what we're going to learn today is how to do this, write source code up top, pass it as input to a special program known as a compiler, and we're going to produce object code. Which is just a fancy way of saying we will take something that looks like this, pass it into a program called a compiler, producing object code that looks like this. 

So these are literally the patterns of 0s and 1s that are understood by an Intel computer these days, that if interpreted by the CPU, the brains inside of a computer, will literally print out, quite simply, "hello world." Now there's way more 0s and 1s than you would hope might be necessary for that. But that's because we're building on a good deal of complexity that we can henceforth take for granted. In other words, a lot of smart people have given us a lot of cool tools and powerful software with which we can now make projects of our own. 

So let's get started. Whereas last Friday, and for Problem Set 0 this week, you'll be playing in a world that looks like this. Starting today and for Problem Set 1 next week, the code is going to look a little more cryptic, but functionally is going to be the same. So notice, top is Scratch, bottom is C. Frankly Scratch is a lot more user friendly and accessible. But if you now compare visually top to bottom, there's kind of a one to one correspondence between the puzzle pieces and the language we're about to play with. In particular, say, the blue puzzle piece up top, is apparently equivalent to what keyword or special phrase in this language called C? AUDIENCE: Printf. DAVID J. MALAN: Printf. That means formatted printing. And that's just a fancy way of saying printf in C is going to be a statement or a function that prints something to the screen. What does it print to the screen? Whatever you tell it to inside of quotes, inside of parentheses. So again, admittedly, there's a lot of stuff that you have to keep in mind, parentheses, quotes, semicolons, and all of this. But all of that is sort of beside the point. The interesting takeaway for now is that the say block in Scratch is pretty much equivalent to the printf statement in C. 

Meanwhile, the yellow puzzle piece up top, when green flag clicked, is probably equivalent to what keyword here? AUDIENCE: Main. DAVID J. MALAN: So main. Maybe int, maybe void. But main kind of sounds like it's important, and indeed it is. So when green flag clicked is, again, the puzzle piece that kicks off an entire Scratch program. But we are going to now start calling that main, this function known as main. 

Now meanwhile we'll generalize this as follows. We might call say a function. And it might look specifically like this. Well, what about loops? If we want to start converting or translating more in Scratch to C, this thing here apparently just says "hello world" forever. So if you associate these scripts with a cat in Scratch, it's just going to keep saying in some kind of cartoon bubble, "hello world, hello world, hello world," ad nauseum, forever. If we want to do something similar in C, it's going to look a little cryptic. But we can achieve the same results, as we'll eventually find out, with syntax like this. I'm going to use printf again, because at the end of the day I want to print "hello world." And I'm apparently using a keyword that isn't forever. It's instead the word while. But just semantically in English, while kind of suggests some kind of loop or cycle. 

So that happens to be the keyword that C uses. And while true, why does while true effectively mean forever? Well, while, as we'll soon appreciate all the more, has this parenthetical next to it where you can put a Boolean expression. And so long as that expression is true, this code, as denoted between these two curly braces as we'll call them, will just keep running again and again. 

So true is true. So while true means just do this forever. It's almost a stupid construct to express yourself. But there was no forever keyword in C. There was while. And there was a very simple Boolean expression like true. And so this, we'll see, achieves the same result. 

How else might you implement a loop? Well, in Scratch you might hard code a specific number of iterations in the loop here. And so that's exactly what we might do in this version of C, whereby we have a so-called for loop. And the for loop here is going to iterate, somewhat cryptically, from the value 0 on up to but less than 10. 

Now variables in Scratch. You might not have had occasion to use these. But what's the point, in general, of a variable did we say last week? What's that? 

AUDIENCE: Points. 

DAVID J. MALAN: To point? Oh, points. OK, keeping track of points, for instance, in a game. Or more generally doing what with the variable? What's the utility of them? 

AUDIENCE: Memory. 

DAVID J. MALAN: Yeah, so memory. It's for storing something. And the sort of silly visual I used last time was like this glass bowl. And if we wanted to store something inside of a variable, for instance right now the value is six because there are six ping pong balls in here. It's just some kind of storage container that underneath the hood is implemented with bits, 0s and 1s, however a computer happens to do that. 

So in Scratch, if we want to have a variable, we can use an orange block like this. We'll call that counter in this particular case. I initialized it to 0. And what it I then do? Forever, say counter, which if you play with that in Scratch, you'll just see Scratch. The cat or whatever costume you put on him will speak the number in question. 

Change counter by 1 is like incrementing by 1. And so this is going to count from what so what? From 0 til infinity, or until Scratch breaks, or until you sort of lose interest in watching how high he can actually count. 

So how might we convert this to C? It's going to look a little cryptic. But again, if you look at each of these lines individually they kind of lineup generally. So apparently int is going to have some special meaning in C. We'll see that again. As an aside it means integer. So it just means number. So that's the type of glass bowl I want, one that can store numbers, not ping pong balls. And I'm going to use the equal sign there to assign it a value of 0. So that's quite like set counter to 0, but in C. 

Meanwhile, while true, that was equivalent, of course, to forever, even though it's a little cryptic, and then inside of the curly braces. And you can think of these curly braces, which you can type on your keyboard, as really being like the curvature in these yellow loop blocks in Scratch. It embraces multiple lines of code. 

Printf is getting a little scary now because I see not only quotes in parentheses. But what else is new syntactically in this example? There's a percent d. And then backslash n is there. We did see that before, even though I didn't mention it. Then there's a comma. And then there's a counter. 

But we'll see in just a moment that this is just a standard way of saying print a "decimal number," quote, unquote, some decimal number. But I'm going to tell you later what that decimal number is. So the fact that there's a comma in this line saying printf, means go ahead and print some decimal number. Oh, and by the way, the number is whatever the value of this variable is. And so to make this more clear, we'll see an example before long involving exactly printf in the context of real C programs. 

Now just to wrap up some of these constructs. Boolean expressions, you might not have occasion to use these in your program but you might very well, especially if using conditions. And so these two examples from Scratch mean if x is less than y, or if x is less than y and y is less than z, how might we translate that? 

Well, in C it's just going to look like this. A little cryptic, more parentheses, some weird ampersands, but fundamentally the ideas are as simple as they are in the puzzle piece world. We're simply checking if something is less than something else. 

How about conditions? In a nutshell in English, what does this chunk of Scratch code do would you say? 

AUDIENCE: Compares two numbers. 

DAVID J. MALAN: Compares two numbers, and if x is less than y it says as much. If x is greater than y it says as much, else if x is equal to y it says as much. Now where did x and y come from? Who knows. This chunk of Scratch code is out of context. But what we want to do now is translate this for just a moment to see. 

So as you get comfortable this week in Problem Set 0 playing in this world on the left, realize that the ideas aren't changing this week or next or beyond. We're simply going to start writing things in a different way with our keyboard instead of our mouse. 

So if x is less than y, and there's some parentheses there, then there's some curly braces again to kind of encapsulate it just like the yellow puzzle pieces do. And I'm going to printf x is less than y and so forth. 

What is nice about C, as you can see here, is that you don't get this nesting, nesting, nesting that's necessarily going to push your code to the right. You can instead have everything lineup neatly like this. But that's just an aesthetic detail we'll see again before long. 

All right. So that brings us back to this cryptic looking program. Let's actually write some code. Now how do you go about writing code? All these years that you've owned a Mac or PC, desktop or laptop, you've actually had the capability to start writing programming code. But you're probably missing a special type of program. You can certainly write code. But you can't necessarily, out of the box, convert that source code into object code, 0s and 1s without what on your computer? AUDIENCE: Compiler. DAVID J. MALAN: So a compiler, right. Now most of you probably don't own a compiler, have never downloaded a compiler. But you'll see you can download it like most any other piece of software. In the world of Mac OS, you might download or have downloaded already something called Xcode or GCC or Clang. If you come from the Windows world you might have downloaded Visual Studio, Visual Basic, environments like that. There's dozens of compilers these days that you might use. But the short of it here is that it would be a pain and, frankly, a technological nightmare for hundreds of people with different computer configurations to all configure their machines in exactly the same way so that we can all be on the same page. 

So what we, instead, do in CS50 is we give you a standard environment, a Linux environment that's going to look a little something like this. You'll see more of this in the Problem Set 1 specification which will go online this Friday night. 

And what this means is that you henceforth are going to be able to download and install a program called the CS50 Appliance. And you're going to download and install another program called a hypervisor, which is just a fancy way of achieving this. Whether you own a Mac or PC or a Linux computer or a Solaris computer, or whatever crazy operating system you're running, you're going to download a program called the hypervisor that's going to run the CS50 Appliance on your computer no matter what your operating system is. A hypervisor in other words converts our stuff to whatever language, whatever instructions your own computer understands. 

So this is a layering. And again, this is kind of thematic in computer science, the building on top of things. You might have Windows. You might have Mac OS. But starting next week you're going to have downloaded a free piece of software called the hypervisor. You're going to have downloaded a piece of software called the CS50 Appliance. 

That's going to run in the hypervisor, which is going to run on your computer. And the end result is that all of us will have a simple window like this on your Mac or PC that gives us the illusion of all running the same operating system, without any other impact on your computer. And you can full screen it and essentially behave as though you are running an operating system called Linux, which is what the CS50 Appliance is based on. 

So let's actually use this now to write a program. You can write a program using Microsoft Word. You can write a program using TextEdit, or Notepad, or WordPad, or pretty much any word processing program you've ever used. But the reality is you shouldn't use really any of those programs. You certainly shouldn't use something like Microsoft Word, which has bold facing and italics, and bigger fonts and smaller fonts, because the computer doesn't care about any of that. All the computer is going to care about is English like instructions written in C. 

So what we'll do inside of the CS50 Appliance is use a program freely available, and it's pre-installed in this appliance, called Gedit. And Gedit is just a super simple text editor like Mac OS's TextEdit, like Windows Notepad that's going to look a little something like this. 

So let's actually not look at slides of this. But let's actually go into the environment itself. I'm going to go ahead and log in, in this other window, to my CS50 Appliance, which I've pre-installed on my laptop here. 

Notice that, like Windows and Mac OS, it's got some menus. Like Windows it puts it down there instead of Mac OS, which puts it down there. But the reality is it's all kind of the same. And in here is a whole bunch of software. There's Dropbox. There's a whole bunch of accessories, graphical programs that we'll use later in the term for problem sets. There's a web browser built in so that this is a full fledged computer inside of a computer. 

But I'm going to click this leftmost white icon here, which is the icon for Gedit. And it's going to open a window that has three panels to it, a left one, a top one, and a bottom one. 

Now it's in this top right one that I'm going to actually write some code. So let's do this,. I'm going to go to File, Save. And you might not ever have seen this particular window before. But this is like Mac OS or Windows. It's just a window with all of the folders that I have inside of this computer. 

And I'm going to save the file as hello.c. And I'm going to go ahead and click Save. And now notice I have a tab at top left called hello.c. So probably pretty familiar even if you've not used this particular program before. 

And now I'm going to type in those fairly cryptic sequence of commands that we saw a moment ago. Include, standard I/O.h. More on that soon. Int main void, open curly brace, closed curly brace. And then inside of there I think is where we had "hello world," semicolon. And now save. 

So this is a program written in C, written, therefore, in source code. But I can't just run this program. I kind of want to double click on an icon somewhere, but no icon exists other than the source code file. What, again, is the process now that I need to run this file through? AUDIENCE: Compiler. DAVID J. MALAN: So a compiler. So in different computers you do this in different ways. But what we've done here in the CS50 Appliance that's representative of how you might do this on many different systems, is I'm simply going to run a command called make. And make is literally going to do that. Make me a program. 

So make is going to run a compiler for me. And the name of the program I want to make is hello. Now make is a program. And make is smart enough to realize that if I say make hello, it's going to look automatically for a file called hello.c just because that's the way it's configured. 

So when I now hit Enter here, this crazy cryptic line just got executed. And trust me, before long, within just days, you'll understand what all of that nonsense means. But for now, just know that make triggered execution of a compiler. In other words, it found a compiler on my computer that's pre-installed on the CS50 Appliance that we'll hand to you in Problem Set 1. And it then took hello.c as input, and produced apparently 0s and 1s as output. 

And by default what it does is it saves those 0s and 1s in a file called hello. And though this syntax too might be new to you, simply by saying dot slash hello is going to be the means by which I run this program. 

For now and for at least a couple of weeks, almost all of the programs we write are going to be in black and white text windows. No mice, no clicking, no windows, no icons. We're going to keep it simple and focus on the underlying ideas initially before we get to something higher level, for instance, like the break out game that we talked about in the first lecture last week. 

So when I hit Enter here, it's equivalent in a text only environment to double clicking an icon called hello. What do you expect will happen when I hit Enter then? 

AUDIENCE: It'll print "hello world." 

DAVID J. MALAN: Hopefully it will print "hello world." And indeed it did. Now there's been some cryptic syntax here. Let's rewind for just a moment and see if we can't start inferring just by tinkering, trying and failing, as to what's going on here. What if I get rid of the backslash n? Now some of you who've programmed before probably know instantly what that means. But for those of you who've never programmed before, at least think to yourself what is going to change when I rerun this program? So I'm going to go back down to my little black and white window, which is the window in which I can compile this. I'm going to recompile hello. We're going to see the same cryptic sequence of commands. And I'm going to do dot slash hello. And now someone, if you would, who's never programmed before, what might be different this time? Yeah. 

AUDIENCE: It won't stop printing "hello world." 

DAVID J. MALAN: It's going to-- sorry? 

AUDIENCE: It won't stop printing it? 

DAVID J. MALAN: It won't stop printing "hello world." So not a bad idea. Other ideas? Yeah. 

AUDIENCE: Error message? 

DAVID J. MALAN: Error message, OK, could be. What else? AUDIENCE: It might print the bracket with the semicolon as well? DAVID J. MALAN: Might print the bracket with the semicolon as well. So maybe that backslash then is some kind of terminous that's important. Any other thoughts? 

So all good ideas. And in fact, it's going to be an error message. That's probably most likely to be the answer in general for the next few weeks as we learn to code here. 

But for now remember that computers only do what you tell them to do. Much like the ridiculous peanut butter and jelly example. Our human computers were only supposed to do what you told them to do. So in this case, if you don't tell the computer to move that blinking cursor to the next line, it's not going to do it. So when I run this program now, notice the difference. 

Looks like a bug. It's an aesthetic bug, perhaps. But what is different about this output versus the last one obviously? Yeah. 

AUDIENCE: It didn't do a new line. 

DAVID J. MALAN: It didn't do a new line. Now those of you who have maybe made web pages before, you might know of the BR tag or the paragraph tag, very similar in spirit. A web browser will ignore you until you tell it exactly what to do. Similarly, is a language like C only going to do what you tell it to do. 

So the reason that all of these examples, thus far, have kind of casually had this backslash in there, that's the means by which you express yourself as a new line character, so to speak. And you can kind of appreciate, perhaps, that this would look kind of stupid if nothing else. If I wanted a new line, just hitting Enter and then kind of butchering the code like that shouldn't really rub you the right way. And even if you don't really care at this point, you will realize that this is not a particularly good looking piece of code. 

And so what the world decided years ago is that when you want to put the cursor onto a new line explicitly, you must explicitly say new line, backslash n. And there's some other symbols like that. But for now we'll just focus on backslash n. 

Now let's make the program a little more interesting. I'm going to go ahead and this time open up a new file. I'm going to save this as hello-1.c. And just for kicks, I'm going to go put it into my Dropbox folder. 

As you'll see in the CS50 documentation for the appliance, later this week for Problem Set 1, we'll encourage you to use Dropbox or some equivalent service, because then all of your code's going to be backed up automatically. And so that's why I've gone into this folder here. 

And now I'm going to write a slightly different program. Include, standard I/O.h, int main void. And then in here printf, hello world, which is exactly the same as before. 

But now I want to print something that's a little different. I want to print out, say, "Hello, David." All right, so obviously, it should hopefully be the case that if I recompile this program, rerun it, it's going to say "hello, David." 

But what if I want to introduce this sort of variable, the notion of a container that's going to store D-a-v-i-d and not hard code it into my program. Well what if I start doing something like this? 

String s, so this is a variable. If you want a string, a.k.a. a word or a phrase. A sequence of characters is what we in programming call a string. We're just going to generically call it s, because it's a nice simple name. But I could call it anything. 

I'm going to say string s equals quote unquote, "David," semicolon. And now I want to insert D-a-v-i-d into what I'm printing. And before we saw a teaser on the screen of some special syntax that allowed us to substitute in a value. What was the special symbol a few slides ago? 

So percent. At the time it was percent d for decimal number. That doesn't really seem relevant here. Turns out there's another percent symbol, which is percent s, which stands for a placeholder for a string. 

So now, very simply, I'm going to go make hello-1, because this file's called hello-1.c, and hit Enter. And I screwed up. What's going on? Well, here's where we have to begin to appreciate that we're in this command line environment, this text only environment. There's no clicking on icons like folders right now. And think back a moment ago. In what folder did I say I was saving my code? So the Dropbox folder. Could have been called anything. But it happens to be called Dropbox. So I somehow need to double click on that Dropbox folder in order to get into it and get at my code called hello-1.c. In fact, let me go ahead and minimize this window for just a moment. Just like Windows and Mac OS, there are folders in Linux. There are folders in the CS50 Appliance. It's just right now we're confining ourselves to this text environment. 

But if I double click on Dropbox, notice there is the file that I want to compile. But I need this black and white terminal window, so to speak. But I need, therefore, to move into that folder or directory. So slightly arcane, but you'll get used to this too. 

In the world of Linux, which again is the operating system we're running inside of the CS50 Appliance, there's a command called CD. Which means I can do CD, space, Dropbox. CD, change directory. Right. Back in the day when people were inventing computers and operating systems like this, they wanted to type the fewest keystrokes possible. So the easiest way to say change directory was CD. 

So if I hit CD, space Dropbox, notice what has changed here. Inside of parentheses the appliance is kind of humoring me and reminding me where I am. So the open folder is Dropbox. If I now type ls for list, again succinct, because people didn't want to type back in the day l-i-s-t. So they instead made it ls. 

Enter. Notice I see two things, hello-1.c, and then this cryptic thing, source 1m. That's just my way of saying source code for week 1 Monday. That's a folder I downloaded from CS50's website that I made earlier today and just put it into the appliance in advance. 

But for now the only thing we care about is making this program. So when I type make hello-1, Enter. Damn it. Something went wrong. So let's tease this apart. And unfortunately this is where things get a little stressful at first, at least if you've never programmed before. 

My god. I wrote a two line program and I have four lines of errors. So what's going on here. First and foremost always scroll back up and find the first error message, because oftentimes compilers just get confused by what you and I do. Compilers are pretty dumb. They'll only do what you tell them to do. And if you confuse them, they're just going to kind of throw up their hands and maybe throw more error messages than are actually relevant. 

So let's look at the first. Super cryptic at first. But notice, here's the name of the file in which I screwed up apparently. Colon 5, colon 5 just means on line 5 at the fifth character. So fifth column of characters, if you will, error. Use of undeclared identifier string. Did you mean standard n? 

No, I meant string. And then it's kind of copying and pasting what I typed to really draw my attention to where I screwed up. So for some reason C, or at least the compiler does not understand the word string. And that's because we made it up. So string does not exist in C. What CS50 does, for the first few weeks only of the class, is we provide some training wheels, so to speak. And we put these training wheels inside of a special file called CS50.h. 

So this is the second of two file names that apparently end in dot h. Let's rewind. Printf is a statement or function that apparently prints something to the screen. But you didn't see me implement printf, right. Someone years ago implemented printf. In what file would you wager he or she put the implementation for printf, the code for printf? 

In a file called standard I/O.h. In fact, it's probably in two files, standard I/O.h, which stands for header file, and standard I/O.c, which stands for C source code. So he or she some years ago plopped the code that they wrote into that file so that people like us years later can include it, so to speak, in our own programs. 

And indeed, that's what the pound sign followed by the word include does. It looks on the local hard drive, finds the file called standard I/O.h, and then effectively copies and pastes it inside of my own file. So now my program knows how to print to the screen. 

So by that logic, where is string defined? 

AUDIENCE: CS50.h. 

DAVID J. MALAN: CS50.h. And indeed, that's what we, the core staff, have done. We've invented a few data types, so to speak, like a string, in addition to ones you get for free, like an int. And we'll see others like a char for a character and a few more. Inside of CS50.h apparently is at least some mention of string. 

So now let me go ahead and rerun make hello-1. I'll zoom in again and cross my fingers. Now by having made one change I fixed most things. But damn it. More percents than data arguments. What did I do wrong this time? 

So it's still pretty cryptic. But this error is on line 7 and character 21. So let's go look up here. It's a little subtle. But if you think about what the fundamental ideas here are, perhaps we can tease this apart. 

So printf is the name of the function. Parentheses, thus far, is just like what we put around the stuff we're passing as inputs to a function. All right, just an arbitrary human convention. Use parentheses. Inside of those parentheses we've been putting double quotes, and then a string like "hello world." 

But in that earlier example very briefly did we look at with Scratch. And we had the percent d, what else was inside of those parentheses that I called out verbally? Yeah. 

AUDIENCE: So it's what you're taking [INAUDIBLE] from within [INAUDIBLE] what these [INAUDIBLE]? DAVID J. MALAN: Exactly. So we had the percent d. But then we had close quote, comma, counter. Right. We specified what we want to do as the placeholder. So what I'm going to do here is comma, what do you want me to put? AUDIENCE: S. DAVID J. MALAN: S, because s in this case is the name of the storage container. It's the name of that glass bowl. Whereas before it was counter in that simple Scratch example we looked at. So now having made two changes, let me zoom in and try once more to compile this program. 

Now I see that cryptic line. But that's actually the name of the compiler. Clang is the name of the compiler. Make is just saving me the headache of ever typing that long crazy command out. So now if I do dot slash hello-1, I should see "hello, David." 

Pretty underwhelming, though, right? We could have done this a lot more simply without talking about variables and CS50.h and all of that. So let's make it a little more interesting. 

In addition to CS50.h, having things like string declared, the CS50 library also has a few functions. So just like years ago, someone wrote printf and put it in standard I/O.h and some other file. 

We, the CS50 staff, wrote a function called GetChar, GetDouble, GetFloat, GetInt, GetLongLong, GetString, and we put those inside a file called CS50.h and CS50.c. And we put them inside of the CS50 Appliance. And people can also download them online if they want to put them on their own computers as well. Which is to say that we have created functions that get input from the user. I don't know what all of these data types are. GetInt is kind of straightforward, like get an integer somehow from the user. And GetString is probably like get a word or a sentence from the user. 

So let's focus on that. And I'm going to go back into the appliance and I'm going to go ahead and save this file as, let's call it hello-2.c as my second version. And let's make a couple of changes. 

This time instead of hard coding David, which makes an incredibly consistent but underwhelming program, what if I instead do GetString? Now notice GetString has an open parenthesis, closed parenthesis, because it doesn't need any input. It's just going to go get a string from the user. 

And now a word on other syntax. Semicolons just end a line of code. You don't need them everywhere. But that just means I'm done with this line of code. Let me move onto another statement or function. String declares a variable. String is like saying give me a bowl, please. And let me put a string in it. 

And now the equal sign. What is the equal sign essentially equivalent to? 

AUDIENCE: Assign. 

DAVID J. MALAN: Yeah, assigning a value. So if I, for instance, call this function GetString, and we'll see in a moment that's going to prompt the user for a string. This is like letting me then write D-a-v-i-d on a piece of paper. And when I say string s equals GetString, equal doesn't really mean equal in C programming. It means assign from the right hand side to the left hand side. 

So I've gotten a string. And the equal sign means put it in the storage container called s. And Then pass this off to printf to actually do its thing. 

So the end result then is going to look a little different. Let's do make hello-2. Either could work. You're following along. Make hello-2 worked. Dot slash hello-2, Enter. 

I seem to have an infinite loop or something. Nothing's happening. Why? 

AUDIENCE: It's making an infinite loop. DAVID J. MALAN: It is an infinite loop. It's kind of waiting for me to actually provide it with some input. So let me go ahead and type in David, and hit Enter. And now it says "hello, David." If I run it again. Let's type in Rob, "hello, Rob." 

Now this is the worst user interface ever. The user's apparently supposed to know what to do. But no matter. Using these same building blocks just like in Scratch, we can solve that problem and say something like your name please, colon, space, closed quote, close parenthesis, semicolon. So a lot of again silliness with the syntax. 

But notice I've just added a puzzle piece above this one and above this one. So now if I rerun this, hello-2, Enter. Wait a minute. What's wrong? It's not behaving any differently. Yeah. 

AUDIENCE: You didn't run make again. 

DAVID J. MALAN: I didn't run make again, right. So I've changed my source code. But again, there's that flow. Source code through the compiler gives you new object code, or 0s and 1s. So I need to actually rerun make hello-2 Enter. OK, something seems to have happened. Dot slash hello-2. Your name please. And to be clear now, why is the cursor on the same line? Exactly. I didn't put the backslash n up here in my code. So now I can write something like Daven, Enter. I can run it again and type something like Gabe, Enter, and we get a different program again and again and again. 

Now ultimately we're going to need to use a few different capabilities. We need to introduce ultimately some conditions to do things conditionally. Maybe loops so we can do things again and again. 

Maybe it would be nice if we could implement our own functions, like we could implement our own printf or our own version of GetString and GetFlow, because ultimately even using this command line environment can we do even the most visually interesting of things. 

Indeed in conclusion let me do this. I'm going to go ahead and close these windows and open this icon here, which is just a bigger version of that embedded terminal window. So Gedit has not only the place for my code, but also a built in terminal window, the black and white window where I can run commands. 

I just happened to open a bigger version of this. And now I'm going to go into the folder that I've already put in advance on the course's website. And I'm going to go ahead and open a file called thadgavin.c, which was written by someone else. 

And if we look at this, this is not the kind of code we'll be writing since the goal of this code was to write the prettiest looking code that he or she could, irrespective of whether or not another human being could ever understand this code. 

Indeed, every year there's what's called an obfuscated C contest, which is for real geeks who write code that no one else can read, but that does something either really simple or really amazing. And we thought we'd conclude with this look at something that's pretty amazing you might have seen once before. But we'll end on this note, dot slash, thadgavin. This then is what awaits. 

That's it for CS50. We will see you on Wednesday. 

[MUSIC PLAYING] [MUSIC PLAYING] 

DAVID MALAN: All right this is CS50 and this is the end of week one. So I'd like to introduce my former advisee, Andel Duff, who not only makes iPhone 5 stands, as well as this lectern, he also makes cars. ANSEL DUFF: How's it going, everybody? I just want to tell you a little bit about Formula SAE, of which I am the captain. It's an MIT team. I just want to tell you guys a little bit about it and hopefully generate some interest. 

So let me just run through a couple things about our team. So we're completely student run, wherein all of the members design, simulate, test, and manufacturer a subsystem of the car. We have our own machine shop and garages, and N52-- or sorry, N51-- which is the same building as the MIT Science Museum. And we are the people that drive the car. There's a national competition in the beginning of the summer, and then there are smaller shootout competitions throughout the year. And then we do driver training days to get new members acquainted. 

Our build days are on Saturdays from 11 AM to 8 PM. Lunch and dinner are taking care of, from Bertucci's and Beantown respectively. We have a weekly meeting and seminar, which is for course credit. Which is new as of this semester, and it will also be for next semester, so you can cross-reg for that. And then we have designing, shop, and CAD days during the week, whereas members will independently CAD parts, order stock et cetera. 

So for electrical engineering at the team we have our tractive, high voltage system, which runs at a nominal 300 volts, which includes motors, motor controllers, and battery packs. Then we have a low voltage system, which runs at 12 volts, which includes controls, CAN nodes, the brain box, and the dashboard. As far CS goes, we do have website maintenance that we need done for events, membership changes, new pictures, and PR material. And then we have code that controls the car for our traction control, launch control, dash control, torque vectoring, and regenerative braking systems, which run typically in MATLAB, Simulink, and LabView. 

Tell you a little bit about the car. So it's about 500 pounds. It's rules limited to 85 kilowatts. It has 2 EMRAX 207 motors in the back, one for each rear wheel. It has custom-built battery packs from Prismatic A123 pouch cells, totaling 300 volts and 5.6 kilowatt hours. And it's direct drive with a 2.64 to 1 drive ratio. Here are some pictures we took of it at competition. Here's the back, nose cone, and here are the motors, those big black disks underneath the et mens manus. Here's a slide that I pulled out of our competition scheme. And this is just comparing our car to a couple of commercially available cars, like the KTM XBOW, Ariel Atom, and Caterha M 7-280. If you're familiar with price, power pull weight, dollars per horsepower, dollars per torque, and our car blows them all out of the water. If you have any questions, jot down this email address. Shoot us an email at fsae@mit.edu. 

We're happy to talk about anything you'd like. Harvard students are kind of the minority on the team. If you have any questions about that please do shoot us an email, happy to talk, and I'm going to head back over to David. Thanks. I appreciate it, guys. [APPLAUSE] 

DAVID MALAN: Ansel spent the summer working with us here on campus in CS50 this summer. And in addition to working on things like the binary bulbs, he actually really opened our eyes-- and mine in particular-- to what really the intersection of not of hardware and software can be. In fact a lot of the things he just toured you through are ultimately created first in software, and then ultimately fabricated in the real world in hardware. So if you're interested in exploring that intersection, perhaps take up that group. 

Now meanwhile, those of you who are fans of technology, and Apple products in particular know that there were a couple of announcements yesterday. But we thought we'd show you one that came out a few days prior that you might not have seen. 

JORGEN EGHAMMER: You know, once in awhile something comes along that changes the way we live. A device so simple and intuitive using it feels almost familiar. Introducing 2015 IKEA catalogue. It's not a digital book or an e-book, it's a book-book. 

The first thing to note is no cables, not even a power cable. The 2015 IKEA catalogue comes fully charged, and the battery life is eternal. The interface is 7.5 by 8 inches, but can expand to 15 by 8 inches. The navigation is based on tactile touch technology that you can actually feel. 

Content comes pre-installed via 328 high-definition pages of inspiring home furnishing ideas. To start browsing, simply touch and drag. Right to left to move forward, left to right to move backwards. 

Notice something else? That's right. No lag. Each crystal clear page loads instantaneously, no matter how fast you scroll. If you want to get a quick overview, just hold it in the palm of your hand, and using just your thumb, speed browse the content. 

If you find something you want to save for later, you can simply bookmark it. And even if you close the application, you can easily find the bookmark again. Amazing. 

[LAUGHTER] [APPLAUSE] So that brings us to the end of week one. A few announcements now. So sectioning is now in progress. Go to this URL here sometime between now and Friday at noon to actually specify whether you are among those less comfortable, more comfortable, or somewhere in between. 

This is typically one of those things that you just kind of know. And in fact those of you who are less comfortable probably know as much, those of you who are more comfortable know as much, and again if you aren't quite sure which of those buckets you fall into you're probably somewhere in between. But rest assured you can swap after a couple of weeks if need be. 

Meanwhile, for the coming week we don't start sections per se, but super sections, which are open to all students. This coming Sunday at a location to be announced on the course website we will have one for those less comfortable, as well as one for those more comfortable. And those somewhere in between can choose which of those two, or both if you'd like, to sit-in on. And the focus of those will be ultimately on C, which we'll continue our conversation of today. 

Problem set 0 meanwhile is hopefully in your hands. Officially due tomorrow, Thursday, at noon. Unless you cash in one of your 5 late days, which would bring it until Friday at noon. Problem set 1 meanwhile will be posted on the course's website. And this will be our first foray as a class into C. And that problem set spec will walk you through a lot of the mechanics of what we started talking about on Monday, and we'll continue talking about today. C, Linux, the CS50 appliance, all of that will await you in the specification. 

Office hours meanwhile are in progress, in the undergraduate dining hall. Head to this URL here to see the schedule for tonight and tomorrow, if you would like to partake. Questions meanwhile, so that you have opportunities to ask questions asynchronously, 24/7, realize you're not limited to sections and office hours, but rather this tool here, CS50 Discuss at that URL will be the course's online bulletin board software, via which you can ask questions of classmates and also staff. So keep in mind that resource as well. Meanwhile a tradition starts this Friday. As you may have glimpsed from last Wednesday's teaser video, we have a tradition most every Friday during term of taking some 50 students and staff to a local restaurant called Fire and Ice, at which we're typically joined by some alumni or friends from industry to generally aspire to make a large class feel smaller. So it's a completely casual lunch. A bunch of us, the staff especially, will play musical chairs and chat with students about 50, life outside of 50, life in the future, the real world, I'm talking about job opportunities with friends in industry. 

So if you would like to join us this Friday, head to this URL here. Space is limited, but we'll do this recurringly throughout the term. Head there to cs50.harvard.edu/rsvp. And if you don't get in this time, not to worry. We will do it again in the coming weeks as well. 

So this is the picture we painted last week, and you've probably been dabbling in thus far. But let's try to connect this now to what we're going to do today and onward. Could I have one volunteer? All right, or several. How about here on the end, in the blue shirt. Come on up, what's your name? ALANA: Alana. DAVID MALAN: Alana. So Alana, for just a moment-- nice to meet you-- is going to play the role of this function here. The purple block we've called thus far a function. So what I'm going to go ahead here and offer Alana is a little name tag, to make clear what role you're playing. 

So you shall be the say block. If you want to go ahead and put that on. And we're going to keep this super simple. If the goal at hand is simply now to implement with Alana, this so-called say block, here's how it's going to work. I have-- let's call it an argument or parameter, it's really just a blank sheet of paper. And it's white to kind of be reminiscent of the white box into which you can write words. 

Meanwhile I'm going to go here. I'm going to go ahead and write H-E-L-L-O comma world. And now I, as say the programmer, don't actually know how to say something. I can come up with the words, but I don't necessarily know how to express myself verbally or on the screen. And so what I'm going to do is take this piece of functionality, whose input-- or argument, as we'll call it, I've written on this piece of paper-- and I'm going to outsource it. 

And indeed that's the role that functions in a programming language can play. Something like the say block can be outsourced to someone who really knows what she or he is talking about. So if you'll step over here for just a moment, I am going to pass this input to Alana, and ask that you say this input. 

ALANA: Hello, world. DAVID MALAN: That's it. So that there is a function. Now we can take it a little more, we can take a step forward here. Because that was clearly underwhelming. So let's now convert this to something a little more sophisticated. 

So this of course is our C version. So now if you want to take that one off, that name tag off, and let's have you put on a new name. But fundamentally you're playing the same role, it just so happens to be called printf now. 

The story is, of course, going to be-- probably just as underwhelming-- is going to be the following. You are now the function printf. I am the caller, or the programmer, who wants to stand on the shoulders of people in the past like you, who've already figured out how to actually write something down. And so this time, rather than say it let's actually use our screen over here. So if you'd like to step over here, I'm going to pass again this as input to my printf friend. If you could go ahead and print that on the screen, simply by drawing with your finger on the black screen. Excellent. All right, so lots of suspense for how that was going to play out. 

So now let's take things up one final notch, if we could, as follows. So this is a C program as we said last time. And this just does what you did, it prints out to the screen, hello, world. Even though there's clearly a lot of distracting stuff up there. But let's take things up a notch and introduce this version, which recall was the third version that we ended up with last time. 

And now there's clearly two uses of printf. There's 2 calls to Alana in this case for printf, but there's also a call to another function. What's that function clearly? Getstring. 

Can we get one more volunteer? OK, come on up. What's your name? 

JAVIER: Javier. 

DAVID MALAN: Javier, come on up. So Javier's role is on this piece of paper. Which I'm going to call generically s. Now this is a variable, it's of type string, as implied by that second line in the middle there. And I'd like you to go get me a string. Specifically head down to the orchestra section and get me the name of someone, and come back with a variable containing that value. It can be anyone you want. 

Here we go. All right, Javier is writing down the name. All right. We can all probably guess how this is going to play out. We're perhaps belaboring the point of what a function is doing, but nonetheless thank you very much. 

So Javier has returned this string here, which, can't quite see, Jonathan is the string that we've gotten. So now what I'm actually going to provide to Alana though is something a little different. Because in this version of the program, first there's state your name. So the very first argument I need to provide Alana with is going to be literally state your name. All right, so simple as that I would hand this to you. And as I write up the next argument, if you want to go ahead and write this on the board, let's go ahead and do the final example here to make clear what's ultimately got to happen. So state your name, write it toward the top if you don't mind, just so that we have room for one second line. Because the last thing I'm going to now provide you with is not one, but two pieces of paper. 

All right. H-E-L-L-O comma and then a blank line. So what I'm about to hand Alana now is something a little different. Not only is she getting this, where fill in the blank represents that percent-- what was the placeholder we've been using? Yeah, so percent s. Meanwhile I'm going to pass her in a second argument, which is precisely what Javier retrieved from Jonathan. 

So let me give you these two. If you'd like to, go ahead and print that effect. What's ultimately happening now is, Alana again is playing the role of printf. Javier was playing the role of GetString. So that will be your souvenir. And ultimately what's happening, despite this hello-- yep go ahead and comma. ALANA: Did I receive this yet or no? DAVID MALAN: Yep, you received them both at once. So the idea is that you can now flip the page to handle the second of those two inputs. So this is only to hammer home the point that whereas Alana executed this green line here, and then Javier did this one for us and return to me something we'll call s, but it was really just that piece of paper of his own. And now Alana has done this third line. 

And even though all of this looks so incredibly cryptic perhaps at first glance, it really is as simple as that. Passing inputs around, getting outputs, either being physically handed back something, or seeing a side effect like this. Something visually written on the screen. So let's go ahead and thank Alana and Javier, who was down here, for joining us up here. 

[APPLAUSE] 

So now let's take for granted just how straightforward all of that might be. And let's proceed to actually do something in actual code. So up on the screen here is a screenshot of the so-called CS50 appliance. And if you had to at, as a 2:00 PM on Wednesday afternoon, explain to some friend what the CS50 appliance is, how would you define it in a sentence? Any one sentence? Yeah? STUDENT: It's like a program that makes everyone's computer run with the same system. DAVID MALAN: Good! It's a program that enables everyone's computer to run with the same system. It's sort of your own copy of an operating system that happens to be called Ubuntu Linux. And it runs effectively inside of a window on your own Mac or PC, so that this way right out of the gate in week 1, everyone here in the class has access to the same tools, the same configuration, and there's no learning curve specific to a Mac or a PC in particular. 

Now we opened up, inside of the CS50 appliance on Monday, this program here. It happens to be called gedit. But that's really just a graphical editor. It's something like Notepad or Text Edit on Windows or Mac OS respectively. And I proposed that there were really three important parts to this screen. The top side is where you would write your code. And that's where we spent much of our three examples in Monday's lecture. The bottom we called what, this black window, yeah? 

STUDENT: Compiler? 

DAVID MALAN: Compiler we accessed by way of that window. But more generally. Yeah, it was just a terminal window. This is an age old term that just describes essentially a blinking prompt, that years ago used to be on one of those big CRT style monitors. But nowadays it's sort of virtual in software. And the terminal windows let's us type commands. It sort of the simplified version of the user interface or UI. It's not a graphical user interface or GUI, it's a text-based interface or a command line interface. 

And indeed that's where ultimately I was able to write some code. Once I had written some code though, recall that I used this command. And as it the name kind of suggests, this allows me to make a program called Hello. But what was it really doing? Well make was taking my input, my source code, and converting it to what, ultimately? 

Object code. And object code is just a fancy way of saying zeros and ones. And then once I wanted to run that object code, once I wanted to pass as input those zeros and ones into my computer's brain, the so-called CPU or central processing unit, I had to run the program. But it wasn't quite a simple on Monday as just double clicking some icon. What instead did I have to do in order to run a program? 

What was that second command? I'm hearing a little slashes? Yes, yeah? 

STUDENT: Dot slash and the program's name. DAVID MALAN: Exactly. Dot slash and the program's name. Now what did this mean? Well dot is just an arcane way of saying current directory. Whatever folder you are in is referenced as, is represented as dot. The slash is just what you've seen in Mac OS and Windows for years, it's a separator between a directory or folder and the rest of some name. In Windows it happens to go backwards, in Linux and Mac OS it happens to go forwards. But it's just the separator, so it's just an uninteresting syntactic detail. 

The juicy part of course is the name of the program, Hello. And that's what make created for us. It outputted that file for us. But how did we get to that point? Let's now ask the question, what was really going on here, at least with regard to some of this syntax? 

So in an sentence or so, how did we explain away this first line that's highlighted in green? What was that first line doing, with respect to my program? Yeah? 

STUDENT: [INAUDIBLE]. DAVID MALAN: Say it again? STUDENT: Including and downloading past functions [INAUDIBLE]. DAVID MALAN: Good. Including, I won't say downloading, but let's say including functions that people have written in the past. And those functions are implemented somewhere in my computer. Someone wrote a file years ago, and that file is somewhere inside of the CS50 appliance, or on my hard drive more generally. And so this line is essentially saying, go find that file, standard I/O dot h, and copy and paste its contents right here on the top of my file so that I don't have to do that manually myself. 

And among the juiciest pieces inside of that file we claimed was what function? What function did we say was declared or mentioned in standard I/O dot h most likely? Printf, right? We did not write printf on Monday, it just existed. Much like Alana just came up on stage and she just existed and knew how to draw something on the screen, so does printf exist for many years. And so this is how we access it. Now if we move on here, main was analogous we said to the puzzle piece called when green flag clicked in the world of Scratch. It's just sort of the default name that humans decided would represent the default entry point to a program. The chunk of programming code that gets executed first. 

Meanwhile these curly braces are kind of like the curved shape of a lot of those yellow scratch pieces. They kind of encapsulate a whole bunch of instructions together. So it just kind of binds together some related functionality. printf of course is a function that prints the screen, as we just did. 

What about these parentheses? How would you define-- even if you've never programmed before, but just based now on an increasing hopefully intuition, what are the parentheses doing for us here? Or what are they surrounding? Yeah? 

STUDENT: They're saying what you're going to print with printf. 

DAVID MALAN: Yeah, they're saying what you're going to print with printf. Or more generally, they are surrounding the inputs to the function. So you can almost think of those parentheses as being like the metal clip on this clipboard. It's what's holding, it's what's going to be used to provide arguments into the function, which in this case is called printf. 

So in general almost any time we call a function, we are going to see a pair parentheses. Maybe with something in it, like now, maybe nothing in it. But that's where you would put the inputs or so-called arguments to a function. 

Here's one such argument. I've highlighted everything between the quotes, because it turns out in this language called C, when you want to represent a string-- that is a word or a phrase or even a paragraph-- you have to surround it with double quotes. Not single quotes, double quotes. And that's exactly what I've done here. 

Meanwhile there's a funky symbol toward the end there. The backslash n. What did we say that represented? Yeah? 

STUDENT: A new line. 

DAVID MALAN: New line. Right, you don't generally hit Enter when you want the program to spit out a new line. Rather you tell it explicitly with this admittedly arcane piece of syntax, backslash n, that you want a new line to go there. Finally the semicolon. We didn't really talk too much about this, and by far this will be the bane of some of your existence for the first problem set, when you just failed to realize you've forgotten something as stupid as a semicolon. And generally putting it there will fix that problem. But what's it doing for us, would you say? 

STUDENT: [INAUDIBLE]. 

DAVID MALAN: Sorry? 

STUDENT: [INAUDIBLE]. DAVID MALAN: Finishing a statement. It's sort of like the period at the end of an English sentence, whereas in this language C it's ending a statement. An instruction of programming code that you just want to say, I'm done with this. Now notice that's the only one here. So you don't want to get in a habit of putting semicolons after every closed parenthesis. For instance there's none next to void, and we'll come back in the future to what void means. But in this case your printf is a function, or a statement being used, and so we want to have that terminus at the very end of it. 

And I'm intentionally picking on C. And frankly a lot of languages like C, C++, Java, JavaScript, and any number of other languages have a lot of these sort of syntactic details. That certainly if you're new to programming can genuinely trip you up. And you will, mark my words, some of you will have this experience in office hours or late at night working on some p-set, where your damn program just doesn't compile, it doesn't run, you have no idea what's wrong, it seems completely logically correct to you. And it's because you forgot something like hitting a semicolon at the end of some line. 

But these are the kinds of things you're going to immediately learn to see. And indeed these are the things that the CA's and TF's have been sort of trained to see much more quickly than you. And so this is only to say, as you dive into problem set 1 especially, don't get frustrated by this stuff. Once you sort of acclimate to the world, you begin to see things that you might not see at first glance this first week. 

So source code is something like that. We want to pass it into the so-called compiler. And that compiler as we said provides output known as object code, the so-called zeros and ones. But from there, what does that give us? Well it gives us these patterns. And again your computer, your Intel inside, understands these patterns of zeros and ones. And sometimes the pattern represents an actual decimal number as we saw last week, sometimes it represents a letter like we saw last week, sometimes it represents an instruction, like printing something to the screen. 

So printf for instance-- but rather, let me rewind. We've been taking for granted that those zeros and ones are produced by this command make. But make is not a compiler. Make is not the thing in the middle that's producing the zeros and ones. Rather make is just a very conveniently named program whose purpose in life is essentially to figure out how to compile your program. And we use it in these first weeks because it just saves us a lot of trouble. 

But what make is really doing when you compile hello, is, as we said last time, it's looking on your hard drive or in the current folder, for file called what, apparently? Hello.c, right? That's just kind of a convention. It's arbitrary, but that's the way things are. Make, if you just specify the name of a program that doesn't yet exist, it's going to look for the source code in a file, by default means hello.c. And if it finds it, great. It's going to convert that source code into object code for you. 

But every time I've hit Enter after running make hello, do you recall seeing last time a fairly long and cryptic sequence of other white letters and characters on the screen? Well that was the actual command, the actual compiler, that was running. So the actual compiler we'll use most of the semester is something called clang. Some of you might have used Visual Studio before, or GCC, or any number of other compilers. We'll use clang. 

And clang allows us to actually convert that source code to object code. What does this actually mean in practice? Well let me go into one of my folders from last time. Inside of the CS50 appliance. And let me go ahead and create this same file, include standard I/O dot h. Int main void. And we'll come back in the future as to what int means and what void means. But for now let's do hello world backslash n, just like we did on the board. 

Let me save this file called hello.c. And now if I want to compile this I could-- let me zoom in-- run make hello enter. And this again was that very cryptic line. But now at least one word probably jumps out at you. Clang is that line we saw before. Now there's a lot of other stuff frankly that we'll wave our hands at for today. But there's a few subsets, a few characters in here that are of interest. But I'm going to go ahead and do this. I'm going to first run hello, just to prove that this is working as it was Monday. But now I'm going to delete the program. And much like we had these short names last time, the command for removing something is rm, remove, enter. You're going to get some fairly cryptic questions. Hard to believe that you can make even this question hard to understand. But remove regular file hello just means do you want to delete hello. 

And I can go ahead and type y for yes, Enter, and now it's gone. What this means now, if I clear my screen, is that instead of doing make hello-- you know what, I'm getting good at this. I'm going to run the compiler myself. I don't need some program to figure out what my file is called. I wrote hello.c, I know what it's called, I'm clearly capable of typing that. So I'm going to go ahead and do clang hello.c Enter. 

Seems to work. And there's no additional output, because clang is the compiler. It's what's converting the source code to zeros and ones. So if I now do dot slash hello Enter, hm. New error message today. So bash is just the name of the blinking prompt that we're using. That's a gross oversimplification, but for now that's all that is, it's the blinking prompt. And that's why it's yelling at us. 

No such file or directory is a little more straightforward. But surely I made that object code. But the catch is, that if I type the command to list the contents of this directory, which is what? ls for list. There's a bunch of stuff in here, some of which came with the appliance, like my Desktop folder, Downloads folder, Dropbox folder, and all that stuff. But what is interesting is hello.c, which I created a moment ago with gedit. And what's the weirdest looking name in here, perhaps that we didn't see last time at all? 

a.out, right? So back in the day, it was just decided that when you compile a program for the first time, and you don't specify the name of a file, let's call it a. And a.out just means this was the output of the compiler. So it's a horrible name for a program. But by that logic, dot slash for current directory, slash a.out, should mean there's in fact my hello world program. Now a little warm up exercise, too. If I want to rename this file, turns out that you move a file from one name to another. So mv a.out, and then I can call it hello Enter. So this is a Linux command. DOS had this years ago, Windows has a terminal window of some sort that looks like this, Linux and Mac computers have this blinking prompt. Even though most of us probably rarely, if ever, use it. 

But what I've done is run a program, whose name is mv, and I've provided it with two arguments, so to speak. Two inputs. a.out is the original name. Hello is the new name. So if I now do dot slash hello, Enter, that exists. And if I do dot slash a.out, what do you expect I should see? 

Bash, no such file or directory. Because I just renamed it. So this takes a bit of getting used to. But the problem set 1 specification will truly hold your hand through some of this minutae. Because this is a complete intellectual distraction from the more interesting ideas at hand, which is actually creating something out of code. But let's do one modification now to this program. 

Recall that last time I did something like this, printf state your name. And indeed we just did this on the big screen over there. And then I did string s gets GetString open paren, close paren. And paren just shorthand notation for parenthesis. So does GetString take any arguments? No inputs no, but it needs the parentheses, because that's what demarcates the calling of a function. 

So I'm going to go ahead and try to run the compiler on this program now. Clang hello.c, because I didn't change its name for now. And I got a bunch of errors. Let's zoom out here. If I scroll up again, like I said last time, to the first, same error that I got last time. On line 6 of hello.c I had an undeclared identifier string, did I mean standard in? I didn't. Because what mistake have I made in this program, if you recall from last time? Yeah, we need the so-called training wheels that we'll just use for a few weeks. But I need to specify that also, somewhere inside of the appliance, is a file that we wrote just a few years ago. Inside of which are functions like apparently GetString. So now if I go back down here, zoom in, and re-run clang hello.c. Damn, another error. But we haven't seen this one before. 

This one's a little more esoteric to figure out. But this is deliberately on the screen, because we wanted to tell this story. When you compile hello.c, just as the picture from before suggested, you're only converting that source code to zeros and ones. Now CS50 staff a few years ago wrote CS50.h, and a corresponding file, CS50.c. And we, a few years ago, compiled those files into a file that happens to be called CS50.o. 

Or it can be renamed a few different things. But that's a simple way of thinking about it. So we compiled CS50's library into zeros and ones. But nowhere have I specified that I want to combine my zeroes and ones for my hello world program with the zeros and ones that CS50 staff created a few years ago into one complete program. All I've specified by writing clang hello.c is compile hello.c. 

I've not told clang to link in the zeros and ones that CS50 staff created for you some time ago. So it's an easy fix, dash l for link, CS50. And we'll again see this before long again and again. But notice now there was no complaints. So now if I run dot slash hello, now it's working. Although that's a bit misleading since I just recreated what file? a.out. 

So let me rewind for just a moment. The program we just compiled has the three lines of code. When I ran hello world, hello a moment ago, I didn't see state your name. And that's because I ran the old version of the program. But if I do indeed run dot slash a.out Enter, state your name, Rob, hello, world. Hm. That's kind of a bug. Probably meant to say Rob, right? So what's the fix here in code. STUDENT: [INAUDIBLE]. DAVID MALAN: Exactly. So I just need to make that final tweak so that I'm passing in a placeholder, like a fill in the blank, like we did a moment ago. But percent s is now that fill in the blank. So lastly let's reveal one last detail so that there's no magic. I'm going to go ahead and get rid of hellow. I'm going to go ahead and get rid of a.out. So now I have no programs, just my source code. And I'm going to run a slightly longer command, clang dash o hello hello.c dash LCS50. 

Now this is starting to sort of go in one ear and out the other perhaps. But just tease apart what this is doing. Clang is the compiler, dash LCS50 deliberately at the very end does what in a sentence? Links to the CS50 library. Grabs the zeros and ones that the staff made and crams them into my own program. So the last question at hand is, what is dash o hello probably doing, even if you've never seen this syntax before? 

Outputting a program that's not named the default a.out. Rather it's named hello. So now there is no a.out. No such file or directory, because I explicitly said call this program hello, so that I can now type in a name like that and have it behave. 

Now frankly, boy is that uninteresting to have to remember all of that little minutia, right? So let's go ahead and get rid of hello again. And let's now return to a world in which it suffices to say make hello. But that's the magic that make is doing for you, that's the tedium that it's doing for you. And as our programs and problems get more complex, make will truly be your friend. Because not too long from now we're going to have programs that are written not with one file, but several files, and make will automate the process of compiling all of that for us together. 

So now print. printf is inside of this file, standard I/O dot h, that we've seen before, but there's more to printf than that. There's backslash n, but there's also a bunch of other escape sequences. And escape sequence is just a fancy way of saying something that starts with a backslash, not a forward slash, a backslash, and does some special thing. And we won't dwell on most of these, but why is there backslash double quote, do you think? Why is there this weird sequence of characters, backslash double quote, why might that be useful? STUDENT: [INAUDIBLE]. DAVID MALAN: Exactly, right? Think back to our hello world program that we've seen quite a few times now, every time we've seen that hello world program we've had double quotes inside of which is hello comma world backslash n. But think to yourself, what if you actually wanted to print out a quotation mark? Your first instinct might be, I don't know why I might want to do-- here, we can be a little passive aggressive, hello friend. We might want to do something like that. 

But why is this now problematic? Ignoring the curly quotes aside that keynote made for us automatically. Why is this problematic? 

Exactly. Because we have like 4 quotation marks. Well the first one probably goes with the second one, and maybe the fourth one goes with the third one, or, I mean I'm not even sure, nor is the computer going to be. Computers again, compilers again, are fairly dumb. They'll only do what you tell them to do. And if you're not unambiguous they are probably going to throw an error. 

If you're not unambiguous as to how to make a peanut butter and jelly sandwich strange things might arrive. It's the same idea. Now suffice it to say there's some other escape sequences, but we'll come to those before long. Essentially these escape sequences represent something that you might not be able too easily at the keyboard, without confusing the computer. 

Now meanwhile we have placeholders in printf. Percent d, which can also be written in almost all cases as percent i, is a placeholder for what type of data? What type of value? A decimal number. So actually we'll start using percent i because it's a little simpler, like an integer. Percent i. An integer that happens to be decimal. 

Percent s we already said was a placeholder for a string. Which is just a word, a phrase, a paragraph, an essay, whatever. It's a sequence of characters of some length. And we'll see before long some of these others. But percent c is for a single character. Percent f is for a floating point number, like a real number that has a decimal point in it, which is of course not an integer. And there's a whole bunch of others as well. 

Meanwhile in C, and in a lot of languages, we have different data types. Different types of glass bowls if you will. The bowl I used last time was for ping pong balls, but we can also store different values like chars and strings and integers in a container, like a variable, and C has these. Char is the type of data, the type of variable, in which you can store a character. Float is a type of variable in which you can store a real number. 

Int is of course for an int. And rather ridiculously named a long long is where you can store essentially a really long number, with even more digits then a typical int might store. But we'll come back to that before long. 

In CS50 dot h meanwhile the other header file that we've seen a couple times in use, there's two other data types that don't exist in C typically. One is string, and we'll see in a few weeks what strings really are underneath the hood. And one is bool. And a bool is a variable that can only take on certain values. And just based on last week's explanation of Scratch, and more recently C, what would you guess are the two possible values for some container that is of type bool? 

Yes and no. One and zero. True or false. And indeed it's the last that tends to be conventional in a programming language, saying something like true or false. 

Meanwhile the CS50 library comes with a bunch of functionality that the staff wrote for you, besides just getting a string. We wrote in advance functions that can get an integer from the user, get a single character, get a float, that is just a number with the decimal point. Get a long long, a really big value from the user. So we've only seen this in action in the form of GetString. But via these functions will soon be able to write programs that get input from the user. 

Meanwhile consider this program, and consider how we might now start to add to it with new constructs. A quick whirlwind tour and then we'll look at some writing some programs manually ourselves. Henceforth if we want to implement a condition, it's not going to look like a nice little pretty puzzle piece. It's going to look a little more arcane. But this is the canonical structure of a condition in C. 

The word if, two parentheses, inside of which is going to be some kind of Boolean expression. Now the slash slash in the middle, this is at the moment sort of like pseudocode code placeholder. But more properly, any line of code in C that starts with slash slash is a comment. 

It's like a sticky note that you might put on an essay, printed on paper. It's a note to yourself. It has no functional impact on the program. It's sort of a reminder, it's your own documentation as to what's going on. So do this at the moment is sort of a placeholder for whatever's inside of those curly braces eventually is going to do something. 

Meanwhile you have two forks in the road, an if else construct like this. You can if, elseif, else. Now it's worth noting, especially if you've been Googling around online for resources out of curiosity, or if you pick up one of the course's recommended books on C, you will see that humans have lots of different preferences for how to express themselves in code. Some people like to put the curly braces as I've done here. Some people like to put the curly braces for instance up here. 

Some people like to put the elses up here and then this over here. There's any number of ways to write code, and none of them are right per se. Although there's a few that are pretty wrong. But there are no-- if this is ultimately a very religious debate. In fact, one of the most annoying things about computer science is how opinionated computer scientists can be. And you will find over time that even you develop personal preferences as to how your code should look. 

Not just behave, not just create output, but how it should look aesthetically. So what we will do is guide you along the way toward, for now at least, a standard CS50 style that at least keeps things uniform and easy to read. But more on those distinctions before long. 

A Boolean expression in C, if you wanted to say if this condition is true and this other condition is true, you don't write the word and, as you would in English. You instead use ampersand ampersand, for reasons we'll come back to. If you want to say or you use two vertical bars, which on a US keyboard is generally above the Enter key next to the backslash. And this just means if this condition or this other condition is true do this. 

Meanwhile there's this crazy thing, which you'll have occasion to use once in awhile. But it's just an alternative way to express yourself. This, for now, let's stipulate, it's just another funky way of expressing if, elseif, elseif, elseif, elseif. It's just formatted in terms of cases, where you literally enumerate the values that you might want to check for. 

Meanwhile loops. We saw a comparison of Scratch with a loop. And I'm going to wave my hand at what each of these things means. But notice that a loop will very often start with the keyword for. Or it will start with the keyword while. Or it will start with the keyword do, and end with the keyword while. 

But what we're about to see is things more like this. Here is, in general in C, how you might declare a variable and give it a value. In C it doesn't suffice, like in Scratch, you just say give me a variable called something. You have to tell C, and tell your compiler, more specifically, what type of value do you want to put in the glass bowl. 

Is it an integer? If so, you have to literally say int and then the name of the variable, then a semicolon. If you instead wanted string and called it s like I did my code here today, you would say string s semicolon. Once you want to give it a value you can then use the equal sign, otherwise known as the assignment operator. And notice how each of these lines of code has the semicolon at the end of it. 

But frankly this just looks a little ugly. Why can't I say to the computer, give me a variable and initialize it to zero. That is, give me an empty glass bowl. While you can. And so one of the judgment calls you'll have to make stylistically over time is, do you write your code like this, or do you kind of clean it up and impress people by writing two lines as just one. And this would be considered generally a more elegant way of writing your code stylistically. 

Functions we're of course seen. They're going to take this format. The name of a function, some parentheses, and then maybe some stuff inside. Or you might see uses of multiple functions side by side, like something like this. Now as a tangent, does this joke now make sense? 

[LAUGHTER] It doesn't mean it's funny, but it does perhaps make a little more sense. So now let's go into the CS50 appliance for a moment. And let me open up one teaser here. 

And indeed one of the reasons for introducing IKEA catalog and flashing the picture of the iPhone a bit ago was to actually tie in together the fact that just a few years ago, in 2007, this piece of code was released, which was one of the very first implementation of a piece of software that does what's called jailbreaking. For those unfamiliar, jailbreaking something like a phone or an iPhone means essentially figuring out how to do things with it that the company who made it didn't intend. Like you want to install certain software that's not in the app store, jailbreaking your phone which you do things like that and more. But what was fun in 2007-- and there's been dozens of different versions of these things since then, in all sorts of languages-- is that this program here, called iUnlock, was actually written in C. And so I pulled up the source code for this, just to kind of show you some of the similarities with the constructs we've been discussing thus far. Now there's way more complexity here than we've seen already in class. Let me scroll up just a little bit here. 

But notice these-- well we notice a few things-- but notice these lines here, including standard I/O dot h. And all-- line 24, please-- notice standard I/O dot h and a whole bunch of other files that apparently other people have written. And if we scroll down through this, little arbitrarily, notice I don't know how to write all of this myself necessarily yet, but there's if. So apparently this has a branch. 

And if I scroll down a little further there's another if. If I scroll up, I think around line 100 I saw for. So I'm not quite sure how this works yet, but this is a for loop that's going to let me iterate some number of times. And if I scroll all the way to the bottom I see that there's a function down here called main, and some additional credits for your reading pleasure. 

So this is only to say-- and we'll put this online among the course's source code today-- that even some of these devices that we take for granted, at the end of the day you're still using these basic constructs that we've been introducing already thus far. That's enough of that one. All right, so now let's actually build something. 

Let's go beyond something like hello.c, and open up this, let's write this program here. I'm going to go ahead and write a program called adder.c, whose purpose in life is going to be like my first super simple calculator that just adds a couple of numbers. Not because that's a hard problem, but because it allows me to now tie together a few things. So I'm going to go ahead and include standard I/O dot h and CS50 dot h. I'm going to say int main void. And again in the future we'll come back to it into in this context and void means. 

And now I'm going to say something like printf, give me an integer. And now on my second line, how do I express myself such that I want to declare a variable that's going to store an int? Literally what do I type if I want to create a variable that stores an int would you say? int a equals getint. Sure, so that works. And just for consistency with the code you'll see online, let me change this to x, just because x is a common variable name to use, at least in algebra. Now let me go ahead and do printf again. Give me another integer. And now I'm going to kind of learn from that pattern, I'm going to say int y gets to GetInt. 

And we've not used GetInt before, but just like GetString goes and gets a string, like Javier did from the audience, similarly does GetInt start blinking the prompt. And effectively waiting for the user to give it an integer, by typing it in and hitting Enter. Now lastly I'm going to do this, printf the sum of-- and let me get fancy now-- percent i and percent i is present i exclamation point backslash n. And what do you think I'm going to put in now as the additional inputs to printf? 

I don't want to say literally quote unquote x. I want to class in x and then, and now let's get fancy and let's just assume we can do what we want. What you want to say next? x plus y. And indeed that will work. It's minimally programming languages do understand basic arithmetic, and so this should in fact work. 

So let me go ahead and do make adder in my black and white window down here, Enter. Cryptic line but no error message, so that's good. Dot slash adder, give me an integer, 1. Give me another integer, 2. The sum of 1 and 2 is 3. 

All right, so a pretty trivial program, but what's it done? It's allowed me to use a function call here, call another function here, two calls to GetInt, a third call to printf, and then using these placeholders. So it's a little more sophisticated than last time. But what if I want to get a little fancier? 

Let me go ahead and now do this. Let me go ahead and create a new file called conditions zero. And I'm going to save some time for classes sake and just paste in that code as a starting point. And now I'm just going to put something new here in the middle. So printf I'd like an integer please. And all this code is available on the course's website, you needn't type it all out in class if you'd rather not. int, and now I'm going to use, instead of x and y, I'm going to use n, which is probably the most common name for an integer in a computer program. And now I want to do a little judgment here. I'm going to see if n is greater than 0, then I'm going to say printf-- whoops, printf-- you picked a positive number, exclamation point backslash n. Close that. Else I'm going to print out printf you picked a negative number. 

Now before you yell at me, let's run this program. Let me go down here. And how do I compile a program called conditions dash 0? Make conditions dash 0. Kind of a stupid name, but-- dammit. OK, good teaching moment. Why did that break? 

What did I accidentally call this file? You can kind of infer from the tab up here. So it's not bad that I did this, because this will happen perhaps to some of you. So I accidentally named my source code condition 0. But my source code by convention should be in a file called condition 0 dash c, or whatever dot c. 

So let me fix this. Just like Microsoft Word I can go up to Save As and do condition 0 dot c. Now just to be tidy I'm going to go ahead and remove condition 0, which was my old version. And now let's do make condition 0, Enter. OK, seems good. 

Condition 0, Enter. I'd like an integer please, 50, you picked a positive number. Now how about negative 50? You picked a negative number. How about now, 0. Pretty sure 0's not negative. 

So this is kind of a logical bug. How do I fix this? Else if n is less than 0, do this, else we can have a three way branch here, printf you picked 0. So now if I rerun this program, after compiling it again with make, and now rerun condition 0, what I'll see here is 0 gives me that output. So where are we going with this? 

Well it's very easy to lose sight of the forest for the trees. And so allow us to conclude with this 2 and 1/2 minute video that ultimately is a bit of an ad from Google, but that really is testament to what even using these basic building blocks we can ultimately do once we have a bit of programming savvy under our belts. 

[MUSIC PLAYING] 

SAROO BRIERLEY (VOICEOVER): It was 26 years ago, and I was just about to turn 5. We got to the train station and we boarded our train together. My brother just said I'll stay here, and I'll come back. And I just thought, well you know, I might as well just go to sleep and he'll just wake me up. And when I woke up the next day, the whole carriage was empty on a runaway train, a ghost train taking me I don't know where. 

I was adopted out to Australia, to an Australian family. And mom had decorated my room with the map of India, which she put next to my bedside. I woke up every morning seeing that map, and hence it sort of kept the memories alive. People would say, you're trying to find a needle in a haystack, Saroo you'll never find it. 

I'd have flashed of the places that I used to go, the flashes of my family faces. There was the image of my mother, sitting down with her legs crossed, just watching her cry. Life is just so hard. That was my treasure. And I was looking at Google Map and realized there's Google Earth as well. In a world where you could zoom into, I started to have all of these thoughts and what possibilities that this could do for me. I said to myself, you know, you've got all those photographic memories and landmarks where you're from, and you know what the town looks like. This could be an application that you can use to find your way back. 

I thought, well I'll put a dot on Calcutta train station, and a radius line, you know, that you should be searching around this area. I sort of came across these train tracks. And I started following it, and I came to a train station which reflected the same image that was in my memories. Everything matched. I just thought yep, I know where I'm going. I'm just going to let the map that I have in my head lead me and take me back to my hometown. 

I came to the doorstep of the house that I was born. And walked around about 15 meters around the corner, there was three ladies standing outside, adjacent to each other. And the middle one stepped forward, and I just thought, this is your mother. She came forward, she hugged me, and we were there for about five minutes. 

She grabbed my hand and she took me to the house and got on the phone, where she rang my sister and my brother to say that, you know, your brother has just all of sudden appeared like a ghost. And then the family was reunited again. Everything's all good, I helped my mother out, she doesn't have to be slaving away. She can live the rest of her life in peace. 

It was a needle in a haystack, but the needle was there. Everything's there. Everything we have in the world is at the tap of a button. But you've got to have the will and the determination to wanting it. 

[MUSIC PLAYING] DAVID MALAN: Wonderfully sweet testimonial to just what you can now do with technology. We will see you next week. [MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50, and this is the start of week two. So let us begin today with a bug. A bug, of course, is a mistake in a program, and you'll get very familiar with this concept if you've never programmed before. pset0 and now pset1. But let's consider something a little simple at first. This program here that I threw together in advance, and I claim that this should print 10 stars on the screen using printf, but it's apparently buggy in some way. 

Given that specification that it should print 10 stars, but it doesn't apparently, what would you claim is the bug? Yeah? So it's an off by one error, and what do you mean by that? OK. Excellent. So we've specified a start value of zero for i, and we've specified an n value of 10, but we've used less than or equal to. And the reason that this is two characters and not just one symbol, like in a math book, is that you don't have a way of expressing the one character equivalent. 

So that means less than, but if you start counting at zero, but you count all the way up through and equal to 10, you're of course going to count 11 things in total. And so you're going to print 11 stars. So what might be a fix for this? Yeah? 

So just adjust the less than or equal to just be less than, and there's, I claim, perhaps another solution, too. What might else you do? Yeah? 

So start equaling it to 1, and leave the less than or equal to. And frankly I would claim that, for a typical human, this is probably more straightforward. Start counting at 1 and count up through 10. Essentially do what you mean. 

But the reality is in programming, as we've seen, computer scientists and programmers generally do start counting at zero. And so that's fine once you get used to it. Your condition will generally be something like less than. So simply a logical error that we could now fix and ultimately recompile this and get just 10. 

Well how about this bug here? Here, again, I claim that I have a goal of printing 10 stars-- one per line this time, but it doesn't. Before we propose what the fix is, what does this print visually if I were to compile and run this program do you think? Yeah? 

Star. So all the stars on the same line is what I heard, and then the new line character. So let's try that. So make buggy-1, enter, and I see the clang command that we talked about last time. ./buggy-1, and indeed I see all 10 stars on the same line even though I claim in my specification just a comment atop the code that I intended to do one per line. But this looks right. 

Now line 15 it looks like I'm printing a star, and then line 16 it looks like I'm printing a new line character, and they're both indented so I'm inside of the loop clearly. So shouldn't I be doing star, new line, star, new line, star, new line? Yes? 

Yeah, unlike a language like Python, if you're familiar, indentation doesn't matter to the computer. It only matters to the human. So whereas here I've invented lines 15 and 16-- that looks beautiful, but the computer doesn't care. The computer cares about actually having curly braces around these lines of code. 

So that it's clear-- just like in Scratch-- that those two lines of code should be executed. Like one of those yellow Scratch puzzle pieces again and again and again. 

So now if I re-run this program-- ./buggy-2-- Hm. I have an error now. What did I forget to do? Yeah, so I didn't compile it. So make buggy-2. No such file because I didn't actually compile the second version. So now interesting undeclared variable-- not 2. We're doing 1. Make buggy-1-- ./buggy-1-- and now each of them is on the same line. 

Now there is an exception to this supposed claim of mine that you need these curly braces. When is it actually OK-- if you've noticed in section or textbooks-- to omit the curly braces? Yeah? 

Exactly. When there's only one line of code that you want to be associated with the loop as in our first example. It is perfectly legitimate to omit the curly braces just as sort of a convenience from the compiler to you. Yeah? Good question. Would it be considered a style error? We would promote-- as in CS50 style guide, the URL for which is in pset1-- that always use the curly braces. Certainly if you're new to programming. The reality is we're not going to prohibit you from doing these conveniences. But if you're just getting into the swing of things, absolutely just always use the curly braces until you get the hang of it. Good question. 

All right. So that then was a bug. At least in something fairly simple. And yet you might think this is fairly rudimentary, right? This is sort of the first week of looking at the language like, see your bugs therein. But the reality these are actually representative of some pretty frightening problems that can arise in the real world. 

So some of you might recall if you follow tech news, or maybe even caught wind of this in February of this past year that Apple had made a bit of a mistake in both iOS, the operating system on their phones, and also Mac OS, the operating system on their desktops and laptops. And you saw such headlines as this. And thereafter, Apple promised to fix this bug, and very quickly did fix it in iOS, but then ultimately fixed it in Mac OS as well. 

Now none of these headlines alone really reveal what the underlying problem was, but the bug was ultimately reduced to a bug in SSL, secure sockets layer. And long story short, this is the software that our browsers and other software used to do what? 

If I said that SSL is involved, whenever you visit a URL that starts with HTTPS, what then might SSL be related to? Encryption. So we'll talk about this in the coming days. Encryption, the art of scrambling information. 

But long story short, Apple sometime ago had made a mistake in their implementation of SSL, the software that ultimately implements URLs like HTTPS or max connections there too. The result of which is that your connections could potentially be intercepted. And your connections were not necessarily encrypted if you had some bad guy in between you and the destination website who knew how to take advantage of this. 

Now Apple ultimately posted a fix for this finally, and the description of their fix was this. Secure transport failed to validate the authenticity of the connection. The issue was addressed by restoring missing validation steps. 

So this is a very hand wavy explanation for simply saying that we screwed up. There is literally one line of code that was buggy in their implementation of SSL, and if you go online and search for this you can actually find the original source code. For instance, this is a screen shot of just a portion of a fairly large file, but this is a function apparently called SSL verify sign server key exchange. And it takes a bunch of arguments and inputs. And we're not going to focus too much on the minutia there, but if you focus on the code inside of that topmost function-- let's zoom in on that. You might already suspect what the error might be even if you have no idea ultimately what you're looking at. There's kind of an anomaly here, which is what? 

Yeah, I don't really like the look of two goto fails. Frankly, I don't really know what goto fail means, but having two of them back to back. That just kind of rubs me intellectually the wrong way, and indeed if we zoom in on just those lines, this is C. 

So a lot of Apple's code is itself written in C, and this apparently is really equivalent-- not to that pretty indentation version, but if you recognize the fact that there's no curly braces, what Apple really wrote was code that looks like this. So I've zoomed out and I just fixed the indentation in the sense that if there's no curly braces, that second goto fail that's in yellow is going to execute no matter what. It's not associated with the if condition above it. 

So even again, if you don't quite understand what this could possibly be doing, know that each of these conditions-- each of these lines is a very important step in the process of checking if your data is in fact encrypted. So skipping one of these steps, not the best idea. 

But because we have this second goto fail in yellow, and because once we sort of aesthetically move it to the left where it logically is at the moment, what does this mean for the line of code below that second goto fail would you think? It's always going to be skipped. So gotos are generally frowned upon for reasons we won't really go into, and indeed in CS50 we tend not to teach this statement goto, but you can think of goto fail as meaning go jump to some other part of the code. 

In other words jump over this last line altogether, and so the result of this stupid simple mistake that was just a result of probably someone copying and pasting one too many times was that the entire security of iOS and Mac OS was vulnerable to interception by bad guys for quite some time. Until Apple finally fixed this. 

Now if some of you are actually running old versions of iOS or Mac OS, you can go to gotofail.com which is a website that someone set up to essentially determine programmatically if your computer is still vulnerable. And frankly, if it is, it's probably a good idea to update your phone or your Mac at this point. But there, just testament to just how an appreciation of these lower level details and fairly simple ideas can really translate into decisions and problems that affected-- in this case-- millions of people. 

Now a word on administration. Section will start this coming Sunday. You will receive an email by the weekend about section, at which point the resectioning process will begin if you've realized you now have some new conflicts. So this happens every year, and we will accommodate in the days to come. 

Office hours-- do keep an eye on this schedule here. Changes a little bit this week, particularly the start time and the location, so do consult that before heading to office hours any of the next four nights. And now a word on assessment, particularly as you dive into problem sets one and beyond. 

So per the specification, these are generally the axes along which we evaluate your work. Scope refers to what extent your code implements the features required by our specification. In other words, how much of a piece set did you bite off. Did you do a third of it, a half of it, 100% of it. Even if it's not correct, how much did you attempt? So that captures the level of effort and the amount to which you bit off the problem set's problems. 

Correctness-- this one, to what extent, is your code consistent with our specifications and free of bugs. So does it work correctly? If we give it some input, does it give us the output that we expect? Design-- now this is the first of the particularly qualitative ones, or the ones that require human judgment. And indeed, this is why we have a staff of so many teaching fellows and course assistants. To what extent is your code written well? 

And again this is a very qualitative assessment that will work with you on bi-directionally in the weeks to come. So that when you get not only numeric scores, but also a written scores, or typed feedback, or written feedback in English words. That's what we'll use to drive you toward actually writing better code. And in lecture and section, we'll try to point out-- as often as we can-- what makes a program not only correct and functionally good, but also well designed. The most efficient it could be, or even the most beautiful it can be. 

Which leads us to style. Style ultimately is an aesthetic judgment. Did you choose good names for your variables? Have you indented your code properly? Does it look good, and therefore, is it easy for another human being to read your respective of its correctness. 

Now generally per the syllabus, we score these things on a five point scale. And let me hammer home the point that a three is indeed good. Very quickly do folks start doing arithmetic. When they get a three out of five on correctness for some pset and they think damn, I going to 60% which is essentially a D or an E. 

That's not the way we think of these numbers. A three is indeed good, and what we generally expect at the beginning of the term is that if you're getting a bunch of three's-- maybe a couple of fairs, a couple of fours-- or a couple twos, a couple of fours-- that's a good place to start. And so long as we see an upward trajectory over time, you're in a particularly good place. 

The formula we use to weight things is essentially this per the syllabus, which just means that we give more weight to correctness. Because it's very often correctness that takes the most time. Trust me now. You will find-- at least in one pset-- that you spend 90% of your time working on 10% of the problem. 

And everything sort of works except for one or two bugs, and those are the bugs that keep you up late at night. Those are the ones that sort of escape you. But after sleeping on it, or attending office hours or asking questions online, is when you get to that 100% goal, and that's why we weight correctness the most. Design a little less, and style a little less than that. But keep in mind-- style is perhaps the easiest of these to bite off as per the style guide. 

And now, a more serious note on academic honesty. CS50 has the unfortunate distinction of being the largest producer of Ad Board cases almost every year historically. This is not because students cheat in CS50 any more so than any other class, but because by nature of the work, the fact that it's electronic, the fact that we look for it, and the fact we are computer scientists, I can say we are unfortunately very good at detecting it. 

So what does this mean in real terms? So it, per the syllabus, the course's philosophy really does boil down to be reasonable. There is this line between doing one's work on your own and getting a little bit of reasonable help from a friend, and outright doing that work for your friend, or sending him or her your code so that he or she can simply take or borrow it out right. And that crosses the line that we drawn in the class. 

See, the syllabus ultimately for the lines that we draw as being reasonable and unreasonable behavior, but it really does boil down to the essence of your work needing to be your own in the end. Now with that said, there is a heuristic. Because as you might imagine-- from office hours and the visuals and the videos we've shown thus far-- CS50 is indeed meant to be as collaborative and as cooperative and as social as possible. As collaborative as it is rigorous. 

But with this said, the heuristic, as you'll see in the syllabus, is that when you're having some problem. You have some bug in your code that you can't solve, it is reasonable for you to show your code to someone else. A friend even in the class, a friend sitting next to you at office hours, or a member of the staff. But they may not show their code to you. 

In other words, an answer to your question-- I need help-- is not oh, here's my code. Take a look at this and deduce from it what you will. Now, of course, there's a way clearly to game this system whereby I'll show you my code before having a question. You show me my your code before having a question. But see the syllabus again for the finer details of where this line is. 

Just to now paint the picture and share as transparently as possible where we are at in recent years, this is the number of Ad Board cases that CS50 has had over the past seven years. With 14 cases this most recent fall. In terms of the students involved, it was 20 some odd students this past fall. There was a peak of 33 students some years ago. Many of whom are unfortunately no longer here on campus. 

Students involved as a percentage of the class has historically ranged from 0% to 5.3%, which is only to say this is annually a challenge. And toward that end, what we want to do is convey one that we dd-- just FYI-- compare at a fairness to those students who are following the line accordingly. We do compare all current submissions against all past missions from the past many years. 

We know too how to Google around and find code repositories online, discussion forums online, job sites online. If a student can find it, we can surely find it as much as we regretfully do. So what you'll see in the syllabus though is this regret clause. I can certainly appreciate, and we all has staff having done the course like this, or this one itself over time, certainly know what it's like when life gets in the way when you have some late night deadline-- not only in this class, but another-- when you're completely exhausted, stressed out, have an inordinate number of other things to do. You will make at some point in life certainly a bad, perhaps late night decision. 

So per the syllabus, there is this clause, such that if within 72 hours of making some poor decision, you own up to it and reach out to me and one of the course's heads and we will have a conversation. We will handle things internally in hopes of it becoming more of a teaching moment or life lesson, and not something with particularly drastic ramifications as you might see on these charts here. 

So that's a very serious tone. Let us pause for just a few seconds to break the tension. 

[MUSIC PLAYING] 

DAVID J. MALAN: All right, so how was that for a segue? To today's primary topics. The first of which is abstraction. Another of which is going to be the representation of data, which frankly is a really dry way of saying how can we go about solving problems and thinking about solving problems? So you've seen in Scratch, and you've seen perhaps already in pset1 with C that you not only can use functions, like printf, that other people in years past wrote for you. You can also write your own functions. 

And even though you might not have done this in C, and frankly in pset1 you don't really need to write your own function because the problem-- while perhaps daunting at first glance-- you'll see can ultimately be solved with not all that many lines of code. But with that said, in terms of writing your own function, realize that C does give you this capability. 

I'm going to go in today's source code, which is available already online, and I'm going to go ahead and open up a program called function 0.C, and in function zero we'll see a few things. In first lines 18 through 23 is my main function. And now that we're beginning to read code that we're not writing on the fly, but instead I've written in advance or that you in a problem set might receive having been written in advance. A good way to start reading someone else's code is look for the main function. Figure out where that entry point is to running the program, and then follow it logically from there. 

So this program apparently prints your name followed by a colon. We then use GetString from the CS50 library to get a string, or a word or phrase from the user at the keyboard. And then there's this thing here-- PrintName. 

Now PrintName is not a function that comes with C. It's not in standard io.h. It's not in CS50.h. It's rather in the same file. Notice if I scroll down a bit-- lines 25 to 27-- it's just a pretty way of commenting your code using the stars and slashes. This is a multi-line comment, and this is just my description in blue of what this function does. 

Because in lines 28 through 31, I've written a super simple function whose name is PrintName. It takes how many arguments would you say? So one argument-- because there's one argument listed inside the parentheses. The type of which is String. Which is to say PrintName is like this black box or function that takes as input a string. 

And the name of that String conveniently will be Name. Not S, not N, but Name. So what does PrintName do? It's nice simple. Just as one line of code for the printf, but apparently it prints out "Hello," so and so. Where the so and so comes from the argument. 

Now this is not a huge innovation here. Really, I've taken a program that could have been written with one line of code by putting this up here, and changed it to something that involves some six or seven or so lines of code all the way down here. 

But it's the practicing of a principle known as abstraction. Kind of encapsulating inside of a new function that has a name, and better yet that name literally says what it does. I mean printf-- that's not particularly descriptive. If I want to create a puzzle piece, or if I want to create a function that prints someone's name, the beauty of doing this is that I can actually give that function a name that describes what it does. 

Now it takes in an input that I've arbitrarily called name, but that too is wonderfully descriptive instead of being a little more generic like S. And void, for now, just means that this function doesn't hand me back anything. It's not like GetString that literally hands me back a string like we did with the pieces of paper with your classmates last week, but rather it just has a side effect. It prints something to the screen. 

So at the end of the day, if I do make function-0, ./function-0, we'll see that it asks for my name. I type David, and it types out my name. If I do it again with Rob, it's going to say "Hello, Rob." So a simple idea, but perhaps extrapolate from this mentally that as your programs get a little more complicated, and you want to write a chunk of code and call that code-- invoke that code-- by some descriptive name like PrintName, C does afford us this capability. 

Here's another simple example. For instance, if I open up a file from today called return.c, notice what I've done here. Most of this main function is printf. I first arbitrarily initialize a variable called x to the number 2. I then print out "x is now %i" passing in the value of x. So I'm just saying what it is. 

Now I'm just boldly claiming with printf. I am cubing that value x, and I'm doing so by calling a function called cube passing in x as the argument, and then saving the output in the variable itself, x. So I'm clobbering the value of x. I'm overriding the value of x with whatever the result of calling this cube function is. And then I just print out some fluffy stuff here saying what I did. 

So what then is cube? Notice what's fundamentally different here. I've given the function a name as before. I've specified a name for an argument. This time it's called n instead of name, but I could call it anything I want. But this is different. This thing on the left. Previously it was what keyword? Boys. Now it's obviously int. 

So what's perhaps the take away? Whereas void signifies sort of nothingness, and that was the case. PrintName returned nothing. It did something, but it didn't hand me back something that I could put on the left hand side of an equal sign like I've done here on line 22. 

So if I say into on line 30, what's that probably implying about what cube does for me? Yeah? It returns an integer. So it hands me back, for instance, a piece of paper on which it has written the answer. 2 cubed, or 3 cubed, or 4 cubed-- whatever I passed in, and how did I implement this? Well, just n times n times n is how I might cube a value. So again, super simple idea, but demonstrative now how we can write functions that actually had us back values that might be of interest. 

Let's look at one last example here called function one. In this example, it starts to get more compelling. So in function one, this program-- notice ultimately calls a function called GetPositiveInt. GetPositiveInt is not a function in the CS50 library, but we decided we would like it to exist. 

So if we scroll down later in the file, notice how I went about implementing get positive int, and I say it's more compelling because this is a decent number of lines of code. It's not just a silly little toy program. It's actually got some error checking and doing something more useful. 

So if you've not seen the walkthrough videos that we have embedded in pset1, know that this is a type of loop in C, similar in spirit to the kinds of things Scratch can do. And do says do this. Print this out. Then go ahead and get n-- get an int and store it in n, and keep doing this again and again and again so long as n is less than one. 

So n is going to be less than one only if the human's not cooperating. If he or she is typing in 0 or -1 or -50, this loop is going to keep executing again and again. And ultimately notice, I simply return the value. So now we have a function that would've been nice if CS50 would implement in CS50.h and CS50.c for you, but here we can now implement this ourselves. 

But two comments on some key details. One-- why did I declare int n, do you think, on line 29 instead of just doing this here, which is more consistent with what we did last week? Yeah? A good thought. So if we were to put it here, it's as though we keep declaring it again and again. That in and of itself is not problematic, per se, because we only need the value once and then we're going to get a new one anyway. But a good thought. Yeah? 

Close. So because I've declared n on line 29 outside of the loop, it's accessible throughout this entire function. Not the other functions because n is still inside of these curly braces here. So-- sure. 

Exactly. So this is even more to the point. If we instead declared n right here on line 32, it's problematic because guess where else I need to access it? On line 34, and the simple rule of thumb is that you can only use a variable inside of the most recent curly braces in which you declared it. 

Unfortunately, line 34 is one line too late, because I've already closed the curly brace on line 33 that corresponds to the curly brace on line 30. And so this is a way of saying that this variable int is scoped, so to speak, to only inside of those curly braces. It just doesn't exist outside of them. 

So indeed, if I do this wrong, let me save the code as it is-- incorrectly written. Let me go ahead and do make function-1, and notice-- error. Use of undeclared identifier n on line 35, which is right here. And if we scroll up further, another one. Use of undeclared identifier n on line 34. 

So the compiler, Clang, is noticing that it just doesn't exist even though clearly it's there visually. So a simple fix is declaring it there. 

Now let me scroll to the top of the file. What jumps out at you as being a little different from the stuff we looked at last week? Not only do I have name, not only do I have some sharp includes up top, I have something I'm calling a prototype. Now that looks awfully similar to what we just saw a moment ago on line 27. 

So let's infer from a different error message why I've done this. Let me go ahead and delete these lines there. And so we know nothing about prototype. Remake this file. Make function one. And now, damn, four errors. Let's scroll up to the first one. 

Implicit declaration of function get positive int is invalid in C99. C99 just means the 1999 version of the language C, which is what we're indeed using. So what does this mean? Well C-- and more specifically C compilers-- are pretty dumb programs. They only know what you've told them, and that's actually thematic from last week. 

The problem is that if I go about implementing name up here, and I call a function called GetPositiveInt here on line 20, that function technically doesn't exist until the compiler sees line 27. Unfortunately, the compiler is doing things top, down, left, right, so because it has not seen the implementation of GetPositiveInt, but it sees you trying to use it up here, it's just going to bail-- yell at you with an error message-- perhaps cryptic, and not actually compile the file. 

So a so-called prototype up here is admittedly redundant. Literally, I went down here and I copied and pasted this, and I put it up here. Void would be more proper, so we'll literally copy and paste it this time. I literally copied and pasted it. Really just as like a bread crumb. 

A little clue to the compiler. I don't know what this does yet, but I'm promising to you that it will exist eventually. And that's why this line-- in line 16-- ends with a semicolon. It is redundant by design. Yes? 

If you didn't link your library to the-- oh, good question. Sharp includes header file inclusions. Need to be-- should almost always be at the very top of the file for a similar-- for exactly the same reason, yes. Because in standard io.h is literally a line like this, but with the word printf, and with its arguments and its return type. And so by doing sharp include up here, what you're literally doing is copying and pasting the contents of someone else wrote up top. Thereby cluing your code in to the fact that those functions do exist. Yeah? 

Absolutely. So a very clever and correct solution would be, you know what? I don't know what a prototype is, but I know if I understand that C is just dumb and rethinks top to bottom. Well let's give it what it wants. Let's cut that code, paste it up top, and now push main down below. This too would solve the problem. 

But you could very easily come up with a scenario in which A need to call B, and maybe B calls back to A. This is something called recursion, and we'll come back to that. And it may or may not be a good thing, but you can definitely break this solution. 

And moreover, I would claim stylistically, especially when your programs become this long and this long, it's just super convenient to put main at the top because it's the thing most programmers are going to care about. And so it's a little cleaner, arguably, to do it the way I originally did it with a prototype even though it looks a little redundant at first glance. Yeah? Sorry, can you say it louder? 

If you switch the locations of the implementation and the prototype? So that's a good question. If you re-declare this down here, let's see what happens. So if I put this down here, you're saying. Oh, sorry. Louder? Even louder. Oh, good question. Would it invalidate the function? You know, after all these years, I have never put a prototype afterwards. So let's do make function-1 after doing that. 

[MUTTERING] DAVID J. MALAN: Oh, wait. We still have to put everything up top. So let's do this up here, if I'm understanding your question correctly. I'm putting everything, including the prototype above main, but I'm putting the prototype below the implementation. 

So if I make one, I'm getting back an error-- unused variable n. Oh, there. Thank you. Let's see, we get rid of this. That's a different bug, so let's ignore that. Let's really quickly remake this. 

OK, so data argument not used by format String n-- oh, that's because I changed to these here. All right, we know what the answer is going to-- all right, here we go. Ah, thanks for the positive. All right, I will fix this code after-- ignore this particular bug since this was-- it works is the answer. 

So it doesn't overwrite what you've just done. I suspect the compiler is written in such a way that it is ignoring your prototype because the body, so to speak, of the function has already been implemented higher up. I would have to actually consult the manual of the compiler to understand if there's any other implication, but at first glance just by trying and experimenting, there seems to be no impact. Good question. 

So let's forge ahead now, moving away from side effects which are functions that do something like visually on the screen with printf, but don't return a value. And functions that have return values like we just saw a few of. We already saw this notion of scope, and we'll see this again and again. But for now, again, use the rule of thumb that a variable can only be used inside of the most recently opened and closed curly braces as we saw in that particular example. 

And as you pointed out, there is an ability-- you could solve some of these problems by putting a variable globally at the very top of a file. But in almost all cases we would frown upon that, and indeed not even go into that solution for now. So for now, the takeaway is that variables have this notion of scope. 

But now let's look at another dry way of actually looking at some pretty interesting implementation details. How we might represent information. And we already looked at this in the first week of the class. Looking at binaries, and reminding ourselves of decimal. 

But recall from last week that C has different data types and bunches more, but the most useful ones for now might be these. A char, or character, which happens to be one byte, or eight bits total. And that's to say that the size of a char is just one byte. A byte is eight bits, so this means that we can represent how many characters. How many letters or symbols on the keyboard if we have one byte or eight bits. Think back to week zero. If you have eight bits, how many total values can you represent with patterns of zeros and ones? One-- more than that. So 256 total if you start counting from zero. So if you have eight bits-- so if we had our binary bulbs up here again, we could turn those light bulbs on and off in any of 256 unique patterns. 

Now this is a bit problematic. Not so much for English and romance languages, but certainly when you introduce, for instance, Asian languages, which have far more symbols than like 26 letters of the alphabet. We actually might need more than one byte. And thankfully in recent years has society adopted other standards that use more than one byte per charge. 

But for now in C, the default is just one byte or eight bits. An integer, meanwhile, is four bytes, otherwise known as 32 bits. Which means what's the largest possible number we can represent with an int apparently? With a billion. So it's four billion give or take. 2 to the 32th power, if we assume no negative numbers and just use all positive numbers, it's four billion give or take possibilities. A float, meanwhile, is a different type of data type in C. It's still a number, but it's a real number. Something with a decimal point. And it turns out that C also uses four bytes to represent floating point values. 

Unfortunately how many floating point values are there in the world? How many real numbers are there? There's an infinite number, and for that matter there's an infinite number of integers. So we're already kind of digging ourselves a hole here. Whereby apparently in computers-- at least programs written in C on them-- can only count as high as four billion give or take, and floating point values can only apparently have some finite amount of precision. Only so many digits after their decimal point. 

Because, of course, if you only have 32 bits, I don't know how we're going to go about representing real numbers-- probably with different types of patterns. But there's surely a finite number of such patterns, so here, too, this is problematic. 

Now we can avoid the problem slightly. If you don't use a float, you could use a double in C, which gives you eight bytes, which is way more possible patterns of zeros and ones. But it's still finite, which is going to be problematic if you write software for graphics or for fancy mathematical formulas. So you might actually want to count up bigger than that. A long long-- stupidly named-- is also eight bytes, or 64 bits, and this is twice as long as an int, and it's for a long integer value. 

Fun fact-- if an int is four bytes, how long is a long in C typically? Also four bytes, but a long long is eight bytes, and this is for historical reasons. 

But the takeaway now is just that data has to be represented in a computer-- that's a physical device with electricity, it's generally driving those zeros and ones-- with finite amounts of precision. So what's the problem then? 

Well there's a problem of integer overflow. Not just in C, but in computers in general. For instance, if this is a byte worth a bit-- so if this is eight bit-- all of which are the number one. What number is this representing if we assume it's all positive values in binary? 

255, and it's not 256, because zero is the lowest number. So 255 is the highest one, but the problem is suppose that I wanted to increment this variable that is using eight bits total if I want to increment it. 

Well as soon as I add a one to all of these ones, you can perhaps imagine visually-- just like carrying the one using decimals-- something's going to flow to the left. And indeed, if I add the number one to this, what happens in binary is that it overflows back to zero. 

So if you only use-- not an int, but a single byte to count integers in a program, by default-- as soon as you get to 250, 251, 252, 253, 254, 255-- 0 comes after 255, which is probably not what a user is going to expect. 

Now meanwhile in floating point world, you also have a similar problem. Not so much with the largest number-- although that's still an issue. But with the amount of precision that you can represent. So let's take a look at this example here also from today's source code-- float-0.c. 

And notice it's a super simple program that should apparently print out what value? What do you wager this is going to print even though there's a bit of new syntax here? So hopefully 0.1. So the equivalent of one-tenth because I'm doing 1 divided by 10. I'm storing the answer in a variable called f. That variable is of type float, which is a keyword I just proposed existed. 

We've not seen this before, but this is kind of a neat way in printf to specify how many digits you want to see after a decimal point. So this notation just means that here's a placeholder. It's for a floating point value, and oh, by the way, show it with the decimal point with one number after the decimal point. So that's the number of significant digits, so to speak, that you might want. 

So let me go ahead and do make float-0, ./float-0, and apparently 1 divided by 10 is 0.0. Now why is this? 

Well again, the computer is taking me literally, and I have written 1 and I written 10, and take a guess what is the assumed data type for those two values? An int, it's technically something a little different. It's typically a long, but it's ultimately an integral value. Not a floating point value. 

Which is to say that if this is an int and this is an int, the problem is that the computer doesn't have the ability to even store that decimal point. So when you do 1 divided by 10 using integers for both the numerator and the denominator, the answer should be 0.1. But the computer-- because those are integers-- doesn't know what to do with the 0.1. 

So what is it clearly doing? It's just throwing it away, and what I'm seeing ultimately is 0.0 only because I insisted that printf show me one decimal point. But the problem is that if you divide an integer by an integer, you will get-- by definition of C-- an integer. And it's not going to do something nice and conveniently like round it up to the nearest one up or down. It's going to truncate everything after the decimal. 

So just intuitively, what's probably a fix? What's the simplest fix here? Yeah? Exactly. Why don't we just treat these as floating point values effectively turning them into floats or doubles. And now if I do make floats-0, or if I compile floats-1, which is identical to what was just proposed. And now I do floats-0, now I get my 0.1. 

Now this is amazing. But now I'm going to do something a little different. I'm curious to see what's really going on underneath the hood, and I'm going to print this out to 28 decimal places. I want to really see 0.1000-- an infinite-- [INAUDIBLE] 27 zeros after that 0.1. 

Well let's see if that's what I indeed get. Make floats-0 same file. ./floats-0. Let's zoom in on the dramatic answer. All this time, you've been thinking 1 divided by 10 is 10%, or 0.1. It's not. At least so far as the computer's concerned. 

Now why-- OK, that's complete lie 1 divided by 10 is 0.1. But why-- that is not the takeaway today. So why does the computer think, unlike all of us in the room, that 1 divided by 10 is actually that crazy value? What's the computer doing apparently? What's that? 

It's not overflow, per se. Overflow is typically when you wrap around a value. It's this issue of imprecision in a floating point value where you only have 32 or maybe even 64 bit. But if there's an infinite number of real numbers-- numbers with decimal points and numbers thereafter-- surely you can't represent all of them. So the computer has given us the closest match to the value it can represent using that many bits to the value I actually want, which is 0.1. 

Unfortunately, if you start doing math, or you start involving these kinds of floating point values in important programs-- financial software, military software-- anything where perception is probably pretty important. And you start adding numbers like this, and start running that software with really large inputs or for lots of hours or lots of days or lots of years, these tiny little mistakes surely can add up over time. 

Now as an aside, if you've ever seen Superman 3 or Office Space and you might recall how those guys stole a lot of money from their computer by using floating point values and adding up the little remainders, hopefully that movie now makes more sense. This is what they were alluding to in that movie. The fact that most companies wouldn't look after a certain number of decimal places, but those are fractions of cents. So you start adding them up, you start to make a lot of money in your bank account. So that's Office Space explained. 

Now unfortunately beyond Office Space, there are some legitimately troubling and significant impacts of these kinds of underlying design decisions, and indeed one of the reasons we use C in the course is so that you really have this ground up understanding of how computers work, how software works, and don't take anything for granted. 

And indeed unfortunately, even with that fundamental understanding, we humans make mistakes. And what I thought I'd share is this eight minute video here taken from a Modern Marvels episode, which is an educational show on how things work that paints two pictures of when an improper use and understanding of floating point values led to some significant unfortunate results. Let's take a look. [VIDEO PLAYBACK] -We now return to "Engineering Disasters" on Modern Marvels. Computers. We've all come to accept the often frustrating problems that got with them-- bugs, viruses, and software glitches-- for small prices to pay for the convenience. But in high tech and high speed military and space program applications, the smallest problem can be magnified into disaster. 

On June 4, 1996, scientists prepared to launch an unmanned Ariane 5 rocket. It was carrying scientific satellites designed to establish precisely how the Earth's magnetic field interacts with solar winds. The rocket was built for the European Space Agency, and lifted off from its facility on the coast of French Guiana. 

-At about 37 seconds into the flight, they first noticed something was going wrong. That the nozzles were swiveling in a way they really shouldn't. Around 40 seconds into the flight, clearly the vehicle was in trouble, and that's when they made the decision to destroy it. The range safety officer, with tremendous guts, pressed the button and blew up the rocket before it could become a hazard to public safety. 

-This was the maiden voyage of the Ariane 5, and its destruction took place because of the flaw embedded in the rocket's software. -The problem on the Ariane was that there was a number that required 64 bits to express, and they wanted to convert it to a 16-bit number. They assumed that the number was never going to be very big. That most of those digits in the 64-bit number were zeros. They were wrong. 

-The inability of one software program to accept the kind of number generated by another was at the root of the failure. Software development had become a very costly part of new technology. The Ariane 4 rocket had been very successful. So much of the software created for it was also used in the Ariane 5. 

-The basic problem was that the Ariane 5. Was faster-- accelerated faster, and the software hadn't accounted for that. 

-The destruction of the rocket was a huge financial disaster. All due to a minute software error. But this wasn't the first time data conversion problems had plagued modern rocket technology. 

-In 1991 with the start of the first Gulf War, the Patriot missile experienced a similar kind of a number conversion problem. And as a result 28 people-- 28 American soldiers-- were killed, and about a hundred others wounded. When the Patriot, which was supposed to protect against incoming Scuds, failed to fire a missile. 

-When Iraq invaded Kuwait, and America launched Desert Storm in early 1991, Patriot missile batteries were deployed to protect Saudi Arabia and Israel from Iraqi Scud missile attacks. The Patriot is a US medium-range surface-to-air system manufactured by the Raytheon company. 

-The size of the Patriot interceptor itself-- it's about roughly 20 feet long, and it weighs about 2,000 pounds. And it carries a warhead of about, I think it's roughly 150 pounds. And the warhead itself is a high explosive, which has fragments around him. So the casing of the warhead is designed to act like a buckshot. 

-The missiles are carried four per container, and are transported by a semi trailer. 

-The Patriot anti-missile system goes back at least 20 years now. It was originally designed as an air defense missile to shoot down enemy airplanes. In the first Gulf War when that war came on, the Army wanted to use it to shoot down Scuds, not airplanes. The Iraqi Air Force was not so much of a problem, but the Army was worried about Scuds. And so they tried to upgrade the Patriot. 

-Intercepting an enemy missile traveling at Mach 5 was going to be challenging enough. But when the Patriot was rushed into service, the Army was not aware of an Iraqi modification that made their scuds nearly impossible to it. 

-What happened is the Scuds that were coming in were unstable. They were wobbly. The reason for this was the Iraqis-- in order to get 600 kilometers out of a 300-kilometer range missile-- took weight out of the front warhead, and made the warhead lighter. So now the Patriot's trying to come at the Scud, and most of the time-- the overwhelming majority of the time-- it would just fly by the Scud. 

-Once the Patriot system operators realized the Patriot missed its target, they detonated the Patriot's warhead to avoid possible casualties if it was allowed to fall to the ground. 

-That was what most people saw as big fireballs in the sky, and misunderstood as intercepts of Scud warheads. 

-Although in the night skies, Patriots appeared to be successfully destroying Scuds, at Dhahran there could be no mistake about its performance. There the Patriot's radar system lost track of an incoming Scud and never launched due to a software flaw. 

It was the Israelis who first discovered that the longer the system was on, the greater the time discrepancy became. Due to a clock embedded in the system's computer. 

-About two weeks before the tragedy in Dhahran, the Israelis reported to the Defense Department that the system was losing time. After about eight hours of running, they noticed that the system's becoming noticeably less accurate. The Defense Department responded by telling all of the Patriot batteries to not leave the systems on for a long time. They never said what a long time was. 8 hours, 10 hours, a thousand hours. Nobody knew. 

-The Patriot battery stationed at the barracks at Dhahran and its flawed internal clock had been on for over 100 hours on the night of February 25. 

-It tracked time to an accuracy of about a tenth of a second. Now a tenth of a second is an interesting number because it can't be expressed in binary exactly, which means it can't be expressed exactly in any modern digital computer. It's hard to believe, but use this as an example. 

Let's take the number one third. One third cannot be expressed in decimal exactly. One third is 0.333 going on for infinity. There's no way to do that with absolute accuracy in a decimal. That's exactly the kind of problem that happened in the Patriot. The longer the system ran, the worse the time error became. 

-After 100 hours of operation, the error in time was only about one third of a second. But in terms of targeting a missile traveling at Mach 5, it resulted in a tracking error of over 600 meters. It would be a fatal error for the soldiers at Dhahran. 

-What happened is a Scud launch was detected by early warning satellites, and they knew a Scud was coming in their general direction. They didn't know where it was coming. It was now up to the radar component of the Patriot system defending Dhahran to locate and keep track of the incoming enemy missile. 

-The radar was very smart. It would actually track the position of the Scud and then predict where it probably would be the next time the radar sent a pulse out. That was called the range gate. 

-Then once the Patriot decides enough time has passed to go back and check the next location for this detected object it goes back. So when it went back to the wrong place, it then sees no object. And it decides that there was no object. That there was a false detection and it drops the track. 

-The incoming Scud disappeared from the radar screen, and seconds later, it slammed into the barracks. The Scud killed 28. It was the last one fired during the first Gulf War. Tragically, the updated software arrived at dawn on the following day. The software flaw had been fixed, closing one chapter in the troubled history of the Patriot missile. 

[END VIDEO PLAYBACK] 

DAVID J. MALAN: That's it for CS50. We will see you on Wednesday. 

[MUSIC PLAYING] [MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50, and this is the end of Week 2. So today, we're going to continue our look at how we represent things underneath the hood-- moving away from numbers like integers and floating point values and focusing on strings and ultimately more interesting programs. But we'll also take a look at a couple of domain-specific problems-- the first of which will be involving cryptography, the art of scrambling information, in which you see above here is a picture of Radio Orphan Annie's secret decoder ring from yesteryear. 

This is actually very primitive form and child-friendly form of cryptopgraphy whereby this ring has two disks-- one inside and one outside. And by rotating one of those, you can essentially line up letters like A through Z with other letters like B through A. In other words, you can literally rotate the alphabet, thereby coming up with a mapping from letters to letters so that, if you wanted to send a secret message to someone like Annie, you could write down your message and then rotate the letters, whereby, if you mean to say "A," you instead say "B," you mean to say "B," you instead say "C"-- or something a little more clever than that-- and then, ultimately, so long as Annie has this decoder ring, she can decode the message. Now, you may recall, in fact, that this was used in a very famous film that plays ad nauseum during the Christmas season. Let's take a look here. RALPHIE PARKER: "Be it known to all in summary that Ralph Parker is hereby appointed a member of Little Orphan Annie Secret Circle and is entitled to all the honors and benefits occurring thereto." 

RALPHIE PARKER (NARRATING): Signed Little Orphan Annie. Countersigned, Pierre Andre! In ink. Honors and benefits, already at the age of nine. 

[MUSIC PLAYING] 

[RADIO CHATTER] RALPHIE PARKER: Come on. Let's get on with it. I don't need all that jazz about smugglers and pirates. RADIO ANNOUNCER: Listen tomorrow night for the concluding adventure of The Black Pirate Ship. Now, it's time for Annie's Secret Message for you members of the Secret Circle. Remember kids, only members of Annie's Secret Circle can decode Annie's secret message. 

Remember, Annie is depending on you. Set your pins to B-2. Here is the message-- 12, 11, 2-- RALPHIE PARKER (NARRATING): I am in my first secret meeting. RADIO ANNOUNCER: --25, 14, 11, 18, 16-- RALPHIE PARKER (NARRATING): Oh, Pierre was in great voice tonight. I could tell that tonight's message was really important. 

RADIO ANNOUNCER: --3, 25. That's a message from Annie herself. Remember, don't tell anyone. 

[PANTING] RALPHIE PARKER (NARRATING): Ninety seconds later, I'm in the only room in the house where a boy of nine could sit in privacy and decode. Ah. "B." 

[CHUCKLES] 

RALPHIE PARKER (NARRATING): I went to the next. "E." The first word is "be." Yes! It was coming easier now. "U." 

[CHUCKLES] 

RANDY PARKER: Aw, come on, Ralphie. I gotta go! 

RALPHIE PARKER: I'll be right down, Ma. Gee whiz. "T." "O." "Be sure to." "Be sure to" what? What was Little Orphan Annie trying to say? "Be sure to" what? MOTHER: Ralphie, Randy has got to go. Will you please come out? 

RALPHIE PARKER: All right, Mom! I'll be right out! RALPHIE PARKER (NARRATING): I was getting closer now. The tension was terrible. What was it? The fate of the planet may hang in the balance. 

MOTHER: Ralphie, Randy's got to go! 

RALPHIE PARKER: I'll be right out, for crying out loud! RALPHIE PARKER (NARRATING): Almost there! My fingers flew! My mind was a steel trap. Every pore vibrated. It was almost clear! Yes! Yes! Yes! Yes! 

RALPHIE PARKER: "Be sure to drink your Ovaltine." Ovaltine? A crummy commercial? 

[MUSIC PLAYING] 

RALPHIE PARKER: Son of a bitch. 

[LAUGHING] 

DAVID J. MALAN: So that then is a glimpse at what cryptography can be for this-- a drink from yesteryear. So a quick announcement. If you are free this Friday at 1:15 PM and would like to join us for CS50 lunch, head to this URL here. First come, first serve as usual. But over time, we'll make sure that most anyone who'd like to participate may schedule-wise. 

So strings. We have Zamyla-- whom you've now met most likely in Problem Set 1-- whose name is spelled thus. And suppose you typed her name into a computer program that's using something like getString. In order to retrieve those keystrokes, how do we go about representing a string, a word, a paragraph, or multiple letters like these here? 

We talked last time about integers and problems that arise with integer overflow and floating point values and problems that arise within precision. With strings, we at least have a bit more flexibility because strings-- just in the real world-- can be a pretty arbitrary length. Pretty short, pretty long. But even then, we're going to find that computers can sometimes run out of memory and not even store a big enough string. 

But for now, let's start to visualize a string as something in these boxes here. So six such boxes, each of which represents a character or "char." So recall that "char"-- c-h-a-r-- is one of the built-in data types in C. And what's nice is that you can use that sort of as a building block, a puzzle piece, if you will, to form a larger type of data that we'll continue to call a "string." 

Now, what's useful about thinking about things like strings in this way? Well, it turns out that we can actually leverage this structure to actually access individual characters in a pretty straightforward way. I'm going to go ahead and create a file called "stringzero.c," but you can call it whatever you'd like. And on the course's website is already this example in advance, so you don't need to type everything out. 

And I'm going to go ahead and first do int main void. And within a few days, we'll start to tease apart what void is here, why it's int next to main, and so forth. But for now, let's continue to copy paste that. 

I'm going to declare a string called s. And I'm going to return from GetString whatever the user types in. This is going to be a simple program, no instructions, I'm just going to blindly expect that the user knows what to do to keep it simple. 

And now I'm going to have a for loop. And inside of my for loop I'm going to have int i gets zero. And i is, again, just a convention, an index variable for counting, but I could call this whatever I want. I'm going to do i is less than-- well Zamyla's name is six letters long. So I'm going to hard code that there for now. 

And then i++. And now inside of these curly braces I'm going to do printf, and I want to print one character at a time. So I'm going to use %c for perhaps the first time. And then I want to print each character on its own line. So I'm going to put a little backslash n there. Close quote. 

And now I want to do something here. I want to print out the specific letter in the string, s, as I'm iterating from zero on up to six. In other words, I want to print the i'th character of s. Now how can I do this? 

Well much like the boxes in this representation here, kind of, conjure up the notion of boxing letters in, you can similarly do that syntactically in C by simply specifying, I want to print out s's i'th character. Using the square brackets on your computer's keyboard that on a US keyboard are generally above your return key. 

So this isn't quite right yet, as you may have noticed. But I'm going to kind of blindly forge ahead here. And I'm going to do make string 0. But before I do this, let's see if we can't anticipate some common mistakes. Is this going to compile? No, I'm missing a whole bunch of things. Libraries I heard. 

So which header files might I want to add here? Yeah. 

AUDIENCE: You need standard I/O [INAUDIBLE] 

DAVID J. MALAN: Excellent. So I need standard I/O. For what purpose do I want standard I/O? For printf. So include stdio.h. And you also propose that I include the CS50 library for what reason? To have strings. So we'll see what CS50's library is doing to create this notion of a string. But for now, you can just think of it as an actual data type. 

So that seems to be a little cleaned up. And now I'm going to go ahead and indeed do make string 0. Compiled. So that's good. So ./string0 let me zoom in so we can see more closely what's happening. Enter. Z-A-M-Y-L-A enter. And we've printed out to Zamyla's name. 

So that's pretty good. So now let's go ahead and run this program again, and type out Daven's full name. Surprise, surprise. Enter. Hmm. We have not printed Daven's full first name correctly. Now this should be obvious in retrospect because of what, sort of, stupid design decision? 

Yeah, I hard coded the six inside of my for loop. Now I did that only because I knew Zamyla's name was going to be six letters. But surely this isn't a general solution. So it turns out we can dynamically figure out the length of a string by calling a function called strlen. 

Again, deliberately succinctly named just to make it more convenient to type. But that's synonymous with getting the length of a string. I'm going to go back into my terminal window and re-run the compiler. But it's yelling at me. Implicitly declaring library function strlen with type unsigned int const-- I'm lost. Completely. 

So, especially as your eyes start to glaze over with error messages like this, focus honestly on the first few words. We know the problem is in line 8, as indicated here. And it's in string-0.c. Implicitly declaring library function strlen. So that is generally going to be a pattern of error messages. Implicitly declaring something. 

So in short, what have I seemed to have done with respect to line 8, here. What might be the solution be even if you've never used strlen yourself? 

AUDIENCE: Part of a different library? DAVID J. MALAN: Part of a different library. So it is declared, so to speak. It is mentioned in some file other than stdio.h and CS50.h. Now where is it defined? To be honest, you either have to just know this off the top of your head, or you Google this and find out. Or know this, I've opened up in the CS50 appliance the terminal program, which is just the big, full screen version of what's in the bottom of gedit's window. 

And it turns out that there's a similarly succinct command, called man for manual, where if you type in the name of a function and hit Enter, you'll get back fairly arcane documentation. It's just text that generally looks a little something like this. It's a little overwhelming at first glance. But frankly I'm going to let my eyes glaze over and only focus on the part I care about for the moment. 

Which is this. Which looks structurally like something I'm familiar with. Indeed the man page, so to speak, will tell you in what header file a function like strlen is defined. So I'm going to go back now to gedit. And I'm going to go ahead and add in here #include  and save the file. 

I'm going to clear the screen with Control L If you've been wondering. And I'm going to re-run make string.0, compiles this time. ./string.0 Zamyla. That seemed to work Let me go ahead and rerun it with Davenport. Enter. And that, too, seemed to work. 

So we can do a little better than this, though, we can start to tidy things up just a little bit. And I'm going to actually introduce one other thing now. I'm going to go ahead and save this in a different file. And I'm going to call this file string1.c just to be consistent with the code you'll be able to find online. 

And let's focus in on exactly the same code. It turns out that I've been kind of taking for granted the fact that my laptop, and in turn, the CS50 appliance has a lot of memory, a lot of RAM, a lot of bytes of space in which I can store strings. 

But the reality if I typed long enough, and enough keystrokes, I could in theory type in more characters than my computer physically has memory for. And this is problematic. Much like an int can only count so high, in theory, you can only cram so many characters into your computer's RAM or Random Access Memory. 

So I had better anticipate this problem, even though it might be a rare corner case, so to speak. Doesn't happen that often, could happen. And if it happens and I don't anticipate and program for it, my program could do who knows what. Freeze, hang, reboot, whatever. Something anticipated might happen. 

So what I'm going to do now, henceforth really, is before I ever blindly use a variable like s that has been assigned the return value of some other function like getstring, I'm going to make sure that its value is valid. So I know only from having read CS50's documentation for getstring, which ultimately we'll point you at, that getstring returns a special symbol called NULL, N-U-L-L in all caps, if something goes wrong. 

So normally, it returns a string. But otherwise if it returns N-U-L-L-- we'll eventually see what that really means-- that just means something bad happened. Now this means, much like in Scratch, I can check a condition here in C, if s does not equal NULL. So if you've not seen this before, this just means does not equal. 

So it's the opposite of equal equals, which, recall, is different from single equals, which is assignment. So if s does not equal NULL, only then do I want to execute these lines of code. So in other words, before I dive in blindly and start iterating over s, and treating it as though it is a sequence of characters, I'm going to first check, wait a minute, is s definitely not equal to this special value, NULL? 

Because if it is, bad things can happen. And for now, assume that bad things happening means your program crashes, and you can't necessarily recover. So frankly, it looks uglier. it's kind of confusing now to glance at. But this will become more familiar before long. 

But I'm going to propose now one other improvement. That's an improvement to correctness. My program is now more correct, because in the rare case that not enough memory exists, I will handle it, and I'll just do nothing. I at least won't crash. 

But let's do a final version here. And a file called string2.c. I'm going to paste that same code for just a moment, and I'm going to highlight this line, 11, here, for just a moment. Now the reality is that smart compilers like Clang could fix this for us behind the scenes without our ever knowing. But let's think about this fundamentally as a problematic design. 

This line of code is, of course, saying, initialize some variable i to 0. That's pretty straightforward. And what again is this statement, here, i++, doing? We've seen it before, but we didn't really talk about it. 

AUDIENCE: Incrementing i. 

DAVID J. MALAN: Incrementing i. So on every iteration through this loop, every cycle, you're incrementing i by one. So it gets bigger, and bigger, and bigger until the loop terminates. How does it terminate? Well there's this middle condition which we've used before. You've seen and in walkthroughs in the P set. 

But what is this saying? Do the following loop so long as i is less than what? AUDIENCE: The length of the string. DAVID J. MALAN: The length of the string. So it translates pretty cleanly to English in that sense. Now the problem is that every time I iterate through this loop in theory, I'm asking this question. Is i less than the string length of s? Is i less than the string length of s? 

Now is i changing on each iteration? It is. Because of the ++. So every iteration i is getting bigger. But is s getting bigger, or smaller, or changing at all? No. So in terms of design, one of the axes along which we try to evaluate code in the class, this feels kind of stupid. 

Like you are literally, on every iteration of this loop asking the same damn question again, and again, and again, and literally it is never going to change. At least if I'm not touching s and trying to change the contents of s. So I can do a little better than this. 

And what I'm going to do is not declare just one variable i, but a second variable I'll arbitrarily, but conventionally, call it n. Assign n equal to the string length of s. And then over here, I'm going to do a clever little optimization, so to speak, that at the end of the day is no more correct or no less correct than before. But it's a better design. In the fact that I'm using less time, fewer CPU cycles, so to speak, to answer the same question, but just once. 

Any questions on that general principle of improving, say, a program's efficiency? Yeah? AUDIENCE: Why do you use the [INAUDIBLE]? DAVID J. MALAN: Good question. So why do we put the ++ on the end of i instead of the beginning of the i? In this case, it has no functional impact. And in general, I tend to use the postfix operator so that it's a little more clear as to when the operation is happening. 

For those unfamiliar, there is another statements whereby you could do ++i. These are functionally equivalent in this case because there's nothing else around that incrementation. But you can come up with cases and lines of code in which that makes a difference. So generally, we don't even talk about this one. Because frankly, it makes your code sexier, and sort of slicker, and fewer characters. But the reality is it's a lot harder, I think, even for me to wrap my mind around it sometimes, the order of operations. So as an aside, if you really don't like this, even though this is kind of sexy looking, you can also do i+=1, which is the uglier version of the same idea for postfix incrementation. 

I say this and you should make fun of it, but you will come to see code as something beautiful before long. 

[LAUGHTER] 

DAVID J. MALAN: Right? Yeah. Question in the middle. 

AUDIENCE: Do you need to say int n? DAVID J. MALAN: You do not need to say int n. So because we have already said int, you do not need to say it again. The catch is that n has to be the same data type as i. So that's just a convenience here. Yeah. 

AUDIENCE: Can you go over the print character s bracket i again? DAVID J. MALAN: Absolutely. So %c, recall from last time, is just a placeholder. It means put a char here. backslash n, of course, just means put a line break here. So that just leaves, now, this piece of new syntax. And this is literally saying, grab the string called s and go get its i'th character, so to speak. 

And I keep saying i'th character because on each iteration of this loop it's as though we are printing out, first s bracket 0, as a programmer might say. Then s bracket 1, then s bracket 2, then 3, then 4. But of course it's a variable, so I just express it with i. 

Key, though, is to realize, especially if you've not been acclimating to this world of programming, where we all seem to count from zero, gotta start counting from zero now. Because strings, first character, the z in Zamyla is for better or for worse going to live at location number zero. 

All right, so let me bring us back here to Zamyla and see what's really going on underneath the hood. So there's this notion of type casting. You might have actually played with this already, maybe for the hacker edition of P set one. But type casting just refers to the ability in C and some other languages to convert one data type to another. 

Now how might we see this pretty straightforwardly? So this, recall, is the beginning of the English alphabet. And the context, recall, from like a week ago is ASCII. The American Standard Code for Information Interchange. Which is just a really long way of saying a mapping from letters to numbers, and from numbers to letters. 

So A through M here, dot dot dot, lines up with, recall, the decimal number 65 on up. And we didn't talk about this explicitly, but surely there's similar numbers for lowercase letters. And indeed, there are. The world decided some years ago that little a, lowercase a, is going to be 97. And little b is going to be 98, and so forth. 

And for any other key on your keyboard, there's going to be a similar pattern of bits. Or equivalently, a decimal number. So the question at hand, then, is how can we actually see this underneath the hood? So I'm going to go over to gedit again. And rather than type this one from scratch, I'm going to go ahead and just open up something from today's code called ASCII zero. 

And ASCII zero looks like this. So let's wrap our minds around this. So first, I've commented the code, which is nice. Because it's literally telling me what to expect, display a mapping for uppercase letters. Now I don't quite know what I mean by that, so let's infer. 

In English, maybe somewhat techie English, what does line 18 appear to be doing for us? Just line 18. What's it inducing? What's it going to kick off here? 

AUDIENCE: A loop. 

DAVID J. MALAN: A loop. And how many times is that going to iterate? AUDIENCE: [INTERPOSING VOICES] six times. DAVID J. MALAN: Not six times. AUDIENCE: 26 times. DAVID J. MALAN: 26 times. Yeah, sorry. 26 times. Why? Well, it's a little weird, but I've started counting from 65. Which is weird, but not wrong. It's not bad per say. And I'm doing that only because, for this example, I'm kind of anticipating that capital A was 65. Now this is not the most elegant way to do this, to kind of hard code esoteric values that no one is ever expected to remember. 

But for now, notice that I'm doing this up through 65 plus 26. Because apparently I don't even want to do the arithmetic in my head. So I'll let the compiler do it. But then on each loop, each iteration of the loop, I'm incrementing i. 

So now this looks a little cryptic. But we should have the basic building blocks with which to understand this. %c is just a placeholder for a char. %i is a placeholder for an int. And it turns out that by using this new syntax, this parenthetical, so to speak, so a data type inside a parentheses, I can force the compiler to treat i not is an integer, but as a char. 

Thereby showing me the character equivalent of that number. Now down here, this code is pretty much identical. I just wanted to make super explicit the fact that I'm starting at 97, which is lowercase a. On up through 26 more letters. And I'm doing-- again, casting i, so to speak. Or type casting i, so to speak. 

From an int to a char. So the end result is going to be, frankly, information we already know. I'm going to make ascii-0 dot-- not dot c. Notice, you probably made that mistake as I just did accidentally. Make ascii-0. Now I'm going to do ./ascii-0. I'll zoom in, and unfortunately it's going to scroll off the screen. But we see an entire chart where a maps to 97, b maps to 98, and if we scroll up further A, of course, maps to 65. So this is only to say that what we've been preaching, there is this equivalence, is in fact the case in reality. So a quick modification of this. Let me open up ascii-1.c. And notice this clever, sort of, clarification of this. This is ascii-1.c, and notice this crazy thing. 

And this really gets to the heart of what computers are doing. Even though we humans would not count in terms of letters-- I don't start thinking, all right a then b, and use those to count physical objects. You can certainly say that I want to initialize some variable called c-- but I could have called this anything-- so c is initialized to capital A. 

Because at end of the day, the computer doesn't care what you're storing, it only cares how you want to present that information. How do you want the computer to interpret that pattern of bits? So this is not something I would generally recommend doing. It's really just an example to convey that you can absolutely initialize an integer to a char. Because underneath the hood of a char, of course, is just a number from 0 to 255. 

So you can certainly put it inside of an int. And what this also demonstrates is that we can convert from one type to another, here, ultimately printing the same thing. And in fact, this I will fix online-- was meant to say this, again, here. Let me clean this up online, and we'll see in an online walkthrough as needed, what was intended there. 

OK. So last example now involving a's and b's and then we'll take things up a notch. So with a's and b's and c's in the capitalization and the equivalence thereof, let's take a look at this example, here. Another code example. We'll open one that's already made, so we don't have to type it all out from scratch. 

And notice in anticipation we're using multiple header files, among which is our new friend, string.h. Now this looks, at first glance, a little cryptic. But let's see if we can't reason through what's going on here. First I get a string from the user, and I put that string in a variable called s. Copy paste from before. In line 22, I'm apparently doing exactly what I did a moment ago, I'm iterating over the characters in s. 

And the new tricks here are using string length, the minor optimization of storing the string length in n, rather than calling strlen again, and again, and again. And just checking that i is less than n. Now here, things get a little interesting. But it's just an application of this same new idea. What in English does s bracket i represent? 

AUDIENCE: Counting each character [INAUDIBLE]. 

DAVID J. MALAN: Counting each character. And even more succinctly, s bracket i represent what? Would you say. Not to put you on the spot here. 

AUDIENCE: Well-- DAVID J. MALAN: So if the word is-- if the string is Zamyla, which starts-- AUDIENCE: --you deal with the characters separately-- DAVID J. MALAN: Good. Exactly. The square bracket notation allows you to access each character individually, so s bracket 0 is going to be the first character in the string. s bracket 1 is going to be the second, and so forth. So the question I'm asking, here, in this condition is what? Is the i'th character of s greater than or equal to lowercase a? And what does this mean, here, with the double ampersands? AUDIENCE (TOGETHER): And. DAVID J. MALAN: And. It's just equivalent to this. And is not a keyword in C, you have to use, annoyingly, ampersand ampersand. And this, conversely, is asking is s's i'th character less than or equal to lowercase z? And again, here's where understanding the underlying implementation of a computer makes sense. Notice that, even though I have the dot dot dot over there, looks like a through z in lowercase are all contiguous values up from 97 on up. 

And same for uppercase starting at 65. So the takeaway, then, is that in English, how would you describe what line 24 is doing? Yeah? 

AUDIENCE: On 24 it's checking to see whether each character is a lowercase. DAVID J. MALAN: It's checking whether each character is a lowercase letter. So even more succinctly, is the i'th character of s lowercase? That's all we're expressing here logically, a little cryptically, but ultimately pretty straightforwardly. Is s's i'th character lowercase? 

If so, and here's where things get a little mind bending for just a moment, if so, go ahead and print out a character. So this is just a placeholder, but what character? Why am I doing s bracket i minus this expression here? 

Well notice the pattern here. The actual numbers don't matter so much. But notice that 97 is how far away from 65? 

AUDIENCE: 32. 

DAVID J. MALAN: 32. How far away is 98 from 66? 

AUDIENCE: 32. 

DAVID J. MALAN: Little c from big C? 32. So there's 32 hops from one letter to another. So frankly I, could simplify this to that. But then I'm kind of hard coding this low level understanding that no reader is ever going to understand. So I'm going to generalize it as, I know the lowercase letters are bigger. I know the capital letters are smaller values, ironically. 

But this is effectively equivalent to saying subtract 32 from s bracket i. So in the context of these letters, if the letter happens to be a, lowercase a, and I subtract 32, what effect does that have, mathematically, on lowercase a? AUDIENCE: Capitalizes-- DAVID J. MALAN: Capitalizes it. And indeed, this is why our program is called capitalize zero. This program either capitalizes a letter, after checking if it is indeed a lowercase letter. Otherwise, in line 30, what do I do if it's not a lowercase letter that I'm looking at at a particular iteration in the loop. Just print it out. 

So don't change stuff that's not even lowercase. Restrict yourself to little a through little z. Now this is fairly arcane. But at the end of the day, this is how we, once upon a time, had to implement things. If I instead open capitalize one, oh thank god. There's a function called to upper that can do everything we just did at a fairly low level. 

Now to upper is interesting because it is declared in a file, and you would only know this by checking the documentation, or being told, say, in class, where it exists, in a file called ctype.h. So this is another new friend of ours. And to upper does exactly what its name suggests. 

You can pass in, as an argument, between these parentheses, some character. I'm going to pass in the i'th character of s using our fancy new notation involving square brackets. And take a guess, what is the return value of to upper apparently going to be? A capital letter. A capital letter. 

So if I pass in lowercase a, hopefully, by definition of to upper, it's going to return an uppercase A. Otherwise, if it's not a lowercase letter in the first place, I just print it out. And indeed, notice the second friend here. Not just to upper exists, but is lower, which actually answers that question for me. 

Now whoever wrote these things, 10s of years ago, you know what? Implemented to upper and is lower using code like this. But again, consistent with this idea of abstracting away, sort of, lower level implementation details. And standing on the shoulders of people who came before us, using functions like to upper and is lower, which wonderfully enough are nicely named to say what they do, is a wonderful paradigm to adopt. 

Now, it turns out that if I read the man page for, say, to upper, I learn something else. So man toUpper. It's a little overwhelming. But notice, here's that mention of the header file that I should use. As an aside, because this is misleading, the function uses ints instead of chars for reasons of error checking. But we'll perhaps come back to that in the future. 

But notice, here, to upper converts the letter c to uppercase if possible. So that's pretty straightforward. And now let's be a little more specific. Let's look at the part of the man page under return value. The value returned is that of the converted letter. Or c, if the conversion was not possible, where c is the original input. Which I know from here, from the argument to to upper. 

So what is the takeaway of this? The value returned is that of the converted letter, or c, the original letter, if the conversion was not possible. What improvement can I therefore make to my code's design? Yeah? 

AUDIENCE: You can remove the else. DAVID J. MALAN: I can remove the else statement, and not just the else statement. 

AUDIENCE: You can remove [INAUDIBLE]. 

DAVID J. MALAN: I can remove the whole fork in the road, the if else altogether. So indeed, let me open the final version of this, capitalize-2 and notice just how, if you will, sexy, the code is now getting, in that I've reduced from some seven or so lines to just four, the functionality that I intended by simply calling to upper, passing in s bracket i, and printing out, with the placeholder %c, that particular character. 

Now arguably, there is a bug, or at least the risk of a bug, in this program. So just to come back to an earlier takeaway, what should I probably also do in this program to make it more robust, so that there's no way it can crash, even in rare cases? AUDIENCE: Make sure it's not NULL. DAVID J. MALAN: Make sure it's not NULL. So really, to make this super proper, I should do something like, if s is not NULL, then go ahead and execute these lines of code, which I can then indent like that, and then put in my close brace. So good tying together of the two ideas. Yeah? AUDIENCE: Could you use a do while loop, instead? DAVID J. MALAN: Could I do a do while loop? AUDIENCE: --you want to make sure that you actually [INAUDIBLE]. DAVID J. MALAN: Could you use a do while? Short answer, no. Because you're about to introduce another corner case. If the string is of zero length. If for instance, I just hit Enter, without ever typing Zamyla. I'm going to hand you back an actual string, as we'll eventually see, that has zero characters. It's still a string, it's just super short. But if you use a do while, you're going to blindly try to do something with respect to that string, and nothing's going to be there. 

AUDIENCE: Well, if you did do [INAUDIBLE] while s-- DAVID J. MALAN: Oh I see, keep getting a string from the user. So short answer, you could, and keep pestering them to give you a string that's short enough to fit in memory. Absolutely. I just chose not to. If they don't give me the string I want, I'm quitting, I'm giving up. But absolutely, for that purpose, you could absolutely do that. 

So the library's header files that we're now familiar with are these, here. Standard I/O, CS50.h, string.h, ctype.h, and there are, indeed, others. Some of you have discovered the math library in math.h. But let me introduce you, now, to this resource that CS50 staff, Davin, and Rob, and Gabe particular have put together. That will soon link on the course's website. It's called CS50 reference. 

Which just to give you a quick taste of it, works as follows. Let me go to reference.cs50.net. You'll see on the left hand side an overwhelming list of functions that come with c. But if I care, for the moment, about something like strlen, I can type it there. It filters down the list to just what I care about. I'm going to click it. And now on the left, you'll see what we hope is a more straightforward, human friendly explanation of how this function works. 

Returns the length of a string. Here's a synopsis, here's how you use it in terms of the header file, and in terms of what the function looks like in terms of its arguments. And then here, returns the length of a string. But for those of you more comfortable, you can actually click more comfy, and the contents of this page, now, will change to be the default values of what you get by using the man page. 

In other words, CS50 reference is a simplification of man pages by the staff, for students. Particularly, those less comfortable and in between, so that you don't have to try to wrap your mind around, frankly, some fairly cryptic syntax and documentation sometime. 

So keep that in mind in the days to come. So here, again, is a Zamyla. Let's now ask a question that's a little more human accessible. Thanks to Chang, who's been printing more elephants nonstop for the past few days. We have an opportunity to give at least one of them away. If we could get just one volunteer to come on up to draw on the screen. How about here? 

Come on up. What is your name? ALEX: Alex. DAVID J. MALAN: Alex. All right. Alex, come on up. We're about to see your handwriting on the screen here. All right, nice to meet you. 

ALEX: Nice you meet you. 

DAVID J. MALAN: All right. So, super simple exercise. Bar is not high to get an elephant today. You are playing the role of getstring. And I'm going to just tell you the string that you've gotten. And suppose that you, getstring, have been called. And the human, like me, has typed in Zamyla, Z-A-M-Y-L-A. Just go ahead and write Zamyla on the screen as though you have gotten it and stored it somewhere in memory. 

Leaving room for what will be several other words-- that's OK, keep going. 

[LAUGHTER] 

So Zamyla, Excellent. So now suppose that you, getstring, are called again. And therefore, I provide you, at the keyboard, with another name, Belinda. All right. And now the next time getstring is called, I type in something like Gabe, G-A-B-E. You're really taking to heart random access memory. Which is drawing everything completely randomly. OK. 

[LAUGHTER] ALEX: Sorry my handwriting is bad. DAVID J. MALAN: No, that's OK. And how about Rob, R-O-B. OK. Good. So I didn't anticipate you would kind of lay things out in this way. But we can make this work. So how did you go about laying out these chars in memory? In other words, if we think of this rectangular black screen as representing a computer's RAM, or memory. 

And recall that RAM is just a whole bunch of bytes, and bytes are a whole bunch of bits. And bits are somehow implemented, generally with some form of electricity in hardware. So that's sort of the layering we've talked about and can now take for granted. How did you go about deciding where to write Rob versus Gabe versus Belinda versus Zamyla? 

ALEX: I just did it in the order that you told me. 

DAVID J. MALAN: And that is true. But what governed where you put Belinda's name and Gabe's name? 

ALEX: Nothing? DAVID J. MALAN: [LAUGHS] So that works, that's fine. So computers are little more orderly than that. And so when we implement-- stay there for just a moment-- when we actually implement something like getstring in a computer, Zamyla might be laid out pretty much like you did on the screen, there. 

And what is key to notice here, what Alex did, is there is kind of a demarcation among each of these words, right? You didn't write Z-A-M-Y-L-A-B-E-L-I-N-D-A-G-A-B-- in other words, there's some kind of demarcation which seems to be, sort of, random spacing between these various words. But that's good, because we humans can now visualize that these are four different strings. It's not just one sequence of lots of characters. So a computer, then, meanwhile, might take a string like Zamyla, put each of those letters inside of a byte of memory. But that number is much bigger, of course, than six characters. 

There's a whole bunch of RAM. And so henceforth, this grid of boxes is going to represent what Alex just did here on the screen. And now, Alex, we can offer you a blue or an orange elephant from Chang. ALEX: I'll take a blue elephant. DAVID J. MALAN: A blue elephant. So a big round of applause, if we could, for Alex here. 

[APPLAUSE] 

ALEX: Thank you. DAVID J. MALAN: Thank you. So the takeaway is that, even though the pattern kind of changed over time, here on the board, there was this demarcation among the various strings that Alex got for us. Now computers, frankly, could do the same thing. They could kind of plop strings anywhere in RAM. Up here, over here, down here, down here. 

They could do exactly that. But, of course, that's probably not the best planning. Right? If I kept asking Alex to get names, probably he'd put some more down here, maybe up here, over here, over here, eventually over here. But with a bit more planning, certainly, we could lay things out more cleanly. And indeed, that's what a computer does. 

But the catch is that if the next string I get after Zamyla is something like the Belinda, propose where we might write the letter b with respect to this grid? Where would you go? To the right of the a, below the z, below the a? What would your first instincts be? AUDIENCE: Below the z. DAVID J. MALAN: So below the z. And that's pretty straightforward, right? It's kind of neat, it's what we do on a keyboard when we hit Enter, or an email when making a bulleted list of things. But the reality is that computers try to be more efficient, and cram certainly as much data into RAM as possible, so that you don't waste any bytes. So that you don't waste any screen real estate. And the problem, though, is that if we literally put the letter b after a, how are we going to know where Zamyla's name ends and the Belinda's name begins? So you humans just proposed, well, hit the Enter key, essentially. Put it down below. Or even as Alex did, just start writing the next name below the previous one, and below that one, and then below that one. That's a visual cue. 

Computers have another visual cue, but it's a little more succinct. It's this funky character. Backslash 0, which is perhaps reminiscent of backslash n, and so forth, now. The special escape sequences. Backslash 0 is the way of representing eight zero bits in a row. 0000 0000. 

The way you express that is not to hit the number zero on your keyboard, because in fact that is an ASCII char. It looks like a number, but is actually a decimal number that represents the circular glyph, the circular typeface. Meanwhile, backslash zero means, literally put eight zero bytes here for me. 

So this is somewhat arbitrary. We could've used any pattern of bits, but the world decided some years ago, that to represent the end of a string in memory, just put a whole bunch of zeros. Because we can detect that. Now that means that no letter of the alphabet can be represented with zeros. 

But that's OK, we've already seen that we're using 65 on up in 97 on up. We didn't get anywhere close to all zeros. So Belinda in a computer's memory is actually going to go here. I've drawn it in yellow just to draw our attention to it. And notice, too, this is completely arbitrary. I've drawn it as a grid. Like, RAM is just some physical object. It doesn't necessarily have rows and columns, per se. It's just got a whole bunch of bytes implemented in hardware somehow. But if after Belinda I typed in Gabe's name, he's going to end up here in memory, and if I typed in Daven's name, for instance, he's going to end up here. And I can continue to write even more names. 

Unfortunately, if I try to write a super long name, I might eventually run out of memory. In which case, getstring is going to return NULL, as we said. But thankfully, at least in this visual here, we didn't get quite that far. 

Now what's nice is that this general idea of treating things as being in boxes is representative of a feature of C and a lot of languages, known as an array. An array is another type of data. It's a data structure, if you will. Structure in the sense of it really, kind of, looking like a box, at least in your mind's eye. An array is a contiguous sequence of identical data types, back to back to back to back. 

So a string, in other words, is an array of chars. An array of characters. But it turns out you can have arrays of bunches of things. In fact, we can put even numbers in an array. So the form in which we're going to start declaring this data structure known as an array is also going to use square brackets. But these square brackets are going to have different meaning in this context. 

And let's see it as follows. Suppose that I opened up a new file here. And I save this as ages.c. And I'll save this in my folder here. And now I'm going to go ahead and start typing something like include CS50.h, include stdio.h, int main void. And then inside of here, I want to first have an int called age. 

And I'm going to use that to get an int from the user for his or her age. But this program is meant to be used by multiple people, for whatever context. I've got a line of people. All of them have to type in their age for maybe some, I don't know, competition, or event that they've arrived for. So the next person, I need another variable. 

Because if I just do age gets getInt, that's going to clobber, or overwrite the previous person's age. So that's no good. So my first instinct might be, oh, all right, if I want to get multiple people's ages-- let's call this age1, int age2 gets int, int age3 gets getInt. And now I'm going to use some pseudocode code here. 

Do something with those numbers. We'll leave for another day what we're doing there, because we only care for the moment about age1, age2, age3. Unfortunately, once I compile this program and put it in front of actual users, what's the fundamentally poor design decision I seem to have made? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, I haven't even tried to figure out how many ages do I actually care about? If I have fewer than three people here, and therefore fewer than three ages, I'm still blindly expecting three. God forbid four people show up. My program just won't even support them. 

And so this, long story short, is not a good habit. Right? I was essentially copying and pasting code and just tweaking the variable names. And, my god, if you had, not three ages, but 10, or 100, or even 6,500 undergraduates, for instance. This is not going to be particularly elegant code, or sustainable. You're going to have to rewrite the program every time your number of people changes. 

So thankfully, in our actual ages.c file for today, we have a more clever solution. First, I'm going to borrow the construct we've used a few times, this do while loop, in order to get the number of people in the room. I'm just going to pester the user, again and again, until he or she gives me a value of n that's a positive integer. 

I could have used, last time's get positive int. But we don't have that for real, so I went ahead and re implemented this idea. Now down here, this is the new trick. In line 27, as the comments in line 26 suggests, declare an array in which to store everyone's age. 

So if you want to get, not one int, not two ints, but a whole bunch of ints. Specifically n integers, were n might be three, might be 100, might be 1,000. The syntax, quite simply, is to say, what data type do you want? What do you want to call that chunk of memory? What do you want to call the grid that looks like this pictorially? 

And in brackets here, you say how big you want the array to be. And so earlier, when I said the syntax is a little different here, we're still using square brackets, but when I'm declaring an array, the number inside of the square brackets means how big do you want the array to be. 

By contrast, when we were using s bracket i a moment ago, s, a string, is indeed an array of chars, but when you're not declaring a variable, as with this keyword here, you're simply getting a specific index, a specific element from that array. Once we know that, the rest of this is straightforward. If new I'm first going to print out what's the age of person number i. Where I just say person number one, person number two, person number three. 

And I'm just doing arithmetic, so that like normal people, we count from one for this program, and not from zero. Then I call getint, but I store the answer in ages bracket i. Which is the i'th age in the array. So whereas last time we were treating these boxes as chars for Zamyla's name, and others. Now, these boxes represent 32 bits, or four bytes in which we can store an int, an int, an int. All of which, again, are the same data type. 

Now I do something silly, like time passes, just to justify writing this program. And then down here, I again iterate over the array saying a year from now, person number one will be something years old. And to figure out that math-- I mean, this is not very complicated arithmetic-- I just add one to their age. Just to demonstrate, again, this. 

Just as I can index into a string, s, so can I index into an array of ages, like that there. So where is this going to be taking us? So we will see, ultimately, a few things in the days to come. One, all this time, when writing your own programs, like Mario, greedy, credit. You've been typing the name of the program and hitting Enter. And then getting the user's input. 

With getString, getInt, getLongLong, or the like. But it turns out that C supports something called command line arguments, which is going to let us actually get at words that you type, at the blinking prompt, after your program's name. 

So in the days to come, you might type something like Caesar, or ./caesar number 13, thereafter. We'll see how that works. Because indeed, in problem set two, we're going to introduce you to a little something reminiscent of Ralphie's challenge earlier of cartography. The art of scrambling information. This, in fact, is very reminiscent of what Ralphie did. 

This is an example of an encryption algorithm called rot13, R-O-T 13. Which simply means rotate the letters in the alphabet 13 places. And if you do that, you'll see now what is, perhaps, a familiar phrase. But the way we're going to use this, ultimately, is more generally. 

In P set two, in the standard edition, you'll implement a couple of ciphers, one called Caesar, one called Vigenere. Both of them are rotational ciphers, in that somehow you turn one letter into a different letter. And Caesar is super simple. You add one, you add 13, or some number up to 26. Vigenere does that on a per letter basis. So Vigenere, as you'll see in the spec, is more secure. 

But at the end of the day what you'll be implementing and P set two, is that key that you use both for encryption and decryption. Referring to the process of turning plain text, some original message, into cypher text, which is something encrypted. And then decrypting it again. 

In the hacker edition, meanwhile, you'll be tasked with something similar in spirit, where we'll give you a file, from a typical Linux, or Mac, or Unix computer called etsy password, which contains a whole bunch of usernames and passwords. And those passwords have all been encrypted, or hashed, so to speak, more properly as you'll see in the spec. 

And the hacker edition will challenge you with taking an input like this, and cracking the password. That is, figuring out what the human's password actually was. Because, indeed, passwords are generally not stored in the clear, and generally passwords should be hard to guess. That's not often the case. 

And what I thought we'd do is conclude with a couple minutes glance at a particularly poor choice of passwords from a film you might recall fondly. And if not, you should rent. 

[VIDEO PLAYBACK] 

-Helmet, you fiend, what's going on? What are you doing to my daughter? 

-Permit me to introduce the brilliant young plastic surgeon, Doctor Phillip Schlotkin. The greatest nose job man in the entire universe and Beverly Hills. 

-Your Highness. 

-Nose job? I don't understand. She's already had a nose job. It was her sweet 16 present. 

-No, it's not what you think. It's much, much worse. If you do not give me the combination to the air shield, doctor Schlotkin will give your daughter back her old nose. -[GASPS] Nooooooooooooo. Where did you get that? 

-All right. I'll tell, I'll tell. 

-No, Daddy, no. You mustn't. 

-You're right my dear. I'll miss your new nose. But I will not tell them the combination no matter what. 

-Very well. Doctor Schlotkin, do your worst. 

-My pleasure. 

-No! Wait, wait. I'll tell. I'll tell. 

-I knew it would work. All right, give it to me. 

-The combination is one. 

-One. 

-One. -Two. -Two. -Two. -Three. -Three. -Three. -Four. -Four. -Four. -Five. -Five. -Five. -So the combination is one, two, three, four, five. That's the stupidest combination I ever hear in my life. That's the kind of thing an idiot would have on his luggage. 

-Thank you, your highness. 

[REMOTE CLICKS] 

-What did you do? 

-I turned off the wall. 

-No, you didn't, you turned off the whole movie. 

-I must've pressed the wrong button. 

-Well, put it back on! Put the movie back on! 

-Yes, sir! Yes, sir. -Let's go, Arnold. Come, Gretchen. Of course you know I'll have to bill you for this. -Well? Did it work? Where's the king? 

-It worked, sir, we have the combination. -Great. Now we can take every last breath of fresh air from planet Druidia. What's the combination? 

-One, two, three, four, five. 

-One, two, three, four, five? -Yes. -That's amazing. I've got the same combination on my luggage. Prepare Spaceball 1 for immediate departure. 

-Yes, sir. 

-And change the combination on my luggage. [DOOR CLOSING SOUND] [CLINK OF DOORS HITTING HELMET] -Ahh. [END VIDEO PLAYBACK] DAVID J. MALAN: That's it for CS50, we'll see you next week. NARRATOR: And now, Deep Thoughts, by Daven Farnham. 

DAVEN FARNHAM: Coding in C is so much harder than Scratch. printf, Scratch was a lie. 

[LAUGHTER SOUNDBITE] DAVID MALAN: All right. So this is CS50, and this is now the start of week three. So up until now, we've been writing programs in C that look a little something like this here. So we've got a couple of sharp includes at the top. We've got int, main, void, and then something to do in the middle, some bit of code inside of that function. But key has been the fact that we've been saying void here. So void, all of this time, specifies that this program, when run, can only be run via its name. You cannot type any other words or numbers after the program's name when running it. So, for instance, if the program were compiled into a file called hello, you could do ./hello, but that is it. 

The only way that you could provide input to this program is by calling a function. For instance, what function have we been using thus far to get input from the user? 

AUDIENCE: Get string. DAVID MALAN: To get string, or get int, or you've seen others, even if you haven't used them yet, like get long, long and the like. But suppose that we actually want to start writing programs that are little more versatile, and, frankly, a little more like the commands that you've been getting, hopefully, a little bit accustomed to. Like cd space Dropbox. This, of course, changes your directory, assuming you're in John Harvard's home directory, to your Dropbox folder. Meanwhile, a command like this creates a new directory called pset2, as you might have already or will soon for problem set two. Make Hello, of course, is a command that builds a program called hello from a file called hello dot c. And in each of these cases, now, we've had provide an argument on the so-called command line, the blinking prompt, so that make knows what to build, and so that mkdir knows what folder to create, and so that cd knows where you want to go. But up until now, we keep saying that main, your default function, has a void expression inside of those parentheses, which means that it cannot take any arguments. 

So starting today, what we're going to do is, we're going to start supporting things like this even. In fact, in this case, which you don't typically manually type, Make has been doing this for us, there are not one but one, two, three additional strings after the program's named clang. So how do we achieve this? 

Well, starting today, in cases where we want to provide input via the so-called command line, we're going to start adding here what's in yellow-- replacing void with int argc comma string argv open bracket close bracket. Now this is interesting for a couple of reasons. One, it's going to let us write programs that are a little more dynamic. But, more compellingly, it's going to open up now a conversation as to what arrays can really be used, for what a string really is underneath the hood, until next week when we start diving in even deeper as to how the machine is making all of this stuff work. But for now, let's draw, perhaps, a picture. 

When you write a program with main declared in this way, such that main takes two arguments, an int and-- what data type is the second argument? 

AUDIENCE: Array. DAVID MALAN: Array. So it looks at first glance like it's a string, but notice the square brackets. Recall last time we introduced the notion of an array. And arrays use square brackets in a couple of contexts. You might use the square brackets to go into an array and get a particular element, like bracket 0 or bracket 1 or bracket 2. But we saw, if briefly, last week that you also use these square brackets to declare the size of an array, if you know in advance how many ints or how many strings or whatever you actually want. So it turns out there's a third context here that has no number inside of the square brackets. When you specify, as I have here, the name of something like argv, which is just a fancy way of saying argument vector, which is another fancy way of saying an array of arguments, open bracket close bracket just means that you don't necessarily know in advance how big the array is going to be, but you know it's going to be an array. So if you don't know the number don't put it in there, for open bracket close bracket means that argv is not a string, but an array of strings. So syntactically, if you think back last week, it's very similar to saying something like int ages open bracket, and then something thereafter. So what does this look like? Let's actually draw a picture. So when you run this program with Main having two arguments defined inside of those parentheses, you essentially have at least two chunks of memory handed to you underneath the hood. One, as I'll draws as this rectangle, is going to be called argc. And just as a quick recap, what is the data type of argc? So it's an int. So a number is going to go in argc-- turns out that stands for argument count. Meanwhile, I've drawn argv as an array. And I don't really know how long it's going to be, so for today's purposes dot dot dot. It might get of some length. But I've pictured here at least four rectangles. So argv a chunk of memory that stores string string string dot dot dot, and argc is just one chunk of memory for an integer. 

So now, let's be a little more precise. If, when I have strings in this array, called argv, I want to get at them individually, just like last week, we're going to use notation like argv bracket 0 to get the first thing an array. Argv bracket 1 to get the second thing, and so forth. The key here being we're still 0 indexed-- we're still counting from 0. So now let's actually put something in this. If I were to compile a program called hello from a file called hello dot c, and then I run that program with dot slash hello, what does my computer, my laptop, look like underneath the hood the moment I run dot slash hello and hit Enter? Well, this is perhaps what we could describe as the content of your computer's memory, or RAM-- Random Access Memory. In other words, the computer, somehow for you magically, puts the number 1 in argc, AKA argcount, and it puts literally the string ./hello in argv bracket 0. I have no idea, frankly, what's in argv bracket 1 or 2 or 3, because if the user has not typed anything besides ./hello, we're going to assume that these are most likely garbage values, so to speak. Those chunks of memory exist, but it's not up to us to look at them, because the argcount is only one. 

Now, meanwhile, if I write run another program, cd, which is more properly a command, in your blinking prompt-- cd space Dropbox-- when I run that, effectively, when the cd program is run, argc, inside of my computer's memory, is for the most briefest second the number 2. And then argv bracket o has cd, argv bracket 1 has Dropbox, and then of course the command completes, so all of this memory essentially goes away and is used for something else. And that's why I say just a split second. 

Meanwhile, if we do mkdir pset2, the picture looks almost the same, but with different strings inside argv. If I do clang dash hello hello dot c, same idea. More stuff is filled in for argv, and argc, of course, is 4. So in other words, even though this array might be dot dot dot, of some variable length, so to speak, you always know where the end of it is, because argc is going to tell you at what point you have to stop looking at elements in argv. You can only look at four in total in this case. 

So let's now take a look at, perhaps, a simple program. One that just says hello to someone like Zamyla. So I claim I'm going to write a program in just a moment via which I could do ./hello space Zamyla, and then I want my program to print out something super-simple like "hello, Zamyla." Now in the past we've used getstring. So in the past, even if you're new to programming, odds are you could whip up a program that uses getstring and then uses printf to say hi to Zamyla. But let's not use getstring this time. Let me instead go into the Appliant and do include standard I O dot h. Let me also include CS50 dot h. Now int main, and now I'm not going to do void today. Instead, I'm going to do int argc string argv open bracket close bracket, not specifying a number. And now here is my so-called to do. What I'm going to do now is, I'm going to do a bit of a leap of faith, I'm going to assume that the user's going to use this program correctly, and I'm simply going to do printf hello, %sn. So nothing new there. But I want to now put whatever word the user types after the program's name. So if I do ./hello space Zamyla, I want to somehow programmatically access quote unquote "Zamyla." so I can go into my argument vector, my array of strings, and if the command, again, was ./hello space Zamyla, what number do I want to put in argv here? AUDIENCE: 1. DAVID MALAN: 1, because bracket 0 turns out is going to be the program's name, as we saw. So bracket 1 is the first word that I, the user, have typed. I'm going to go ahead and save this. I'm going to go into my folder where I've placed this file. I'm going to do make hello 3. Comp IO's OK. ./hello Zamyla Enter. What did I do wrong? I was caught by surprise myself for just a moment there. What did I do wrong? 

AUDIENCE: Name. 

DAVID MALAN: The file's actually called hello3.c. And I did that just for consistency, because we've had hello.c's in the past in the online code. So let's fix this ./hello bracket dash 3 Zamyla. Enter. And now we have hello, Zamyla. Meanwhile, I can change this to be Rob, or really any other word. 

But let's consider a corner case. What might you expect will happen if I don't type anyone's name at all? 

AUDIENCE: Error. 

DAVID MALAN: An error of some sort, perhaps. Let's see. Enter. Null. So printf is actually being a little protective of us here, and literally printing open paren null, but even worse things can happen. And just to demonstrate something you absolutely shouldn't do, let's go in here and start poking around. Right? If I know that the picture in memory is essentially this, argv bracket 1 has Zamyla, argv bracket 0 has ./hello, or ./hello-3. What is in bracket 2? So I can answer that question myself, right? I can just change the 1 to a 2. I can now recompile hello 3, ./hello3 Let's zoom in and hit Enter. Whoops. No quote mark. Interesting. So that's kind of cool to see what else is in here. 

So what else is inside of my laptop? Let's save it with bracket 3. Make hello3, ./hello-3. Curious. And now let's get really bold-- 50. So that's really diving deep into my computer's memory. 50 indexes in. So make hello 3 ./hello-3. Curious. All right, now I'm just going to get reckless. Let's go to 5,000. All right. So let me recompile. Make hello3, ./hello-3. OK. Now some of you, there might be a light bulb going off. How many of you have seen this message before? OK. So, why? 

Odds are-- and there's different things that can cause this, and clearly you're in good company-- we have clearly caused what's called a segmentation fault. And long story short for today, I have touched a segment of memory that I shouldn't have. Where a segment just means a chunk of memory that I shouldn't have. Now the computer guarantees that if I run ./helloZamyla that I can touch argv be bracket 0 and argv bracket 1. But argc is value 2, that means I am only allowed-- it's sort of the honor system-- to touch bracket 0 and bracket 1. If I go any farther, there's absolutely going to be memory there. My RAM exists physically in the computer. But who knows what's there? Indeed, I'm running multiple programs at one time. I might have seen-- if I weren't doing this on the Appliant but on my Mac or PC-- I might have seen the contents of an email. I might have seen an instant message I've recently sent. Anything that might be lingering around in memory could have been accessed by way of this arbitrary square bracket notation. Or, worse yet, you might have found one of my passwords that I'd recently typed in, that a program had stored in memory so as to authenticate me, and then just kind of left it in RAM until I quit that program. 

And indeed, this is one of the danger and one the powers of using a language like C. You have unfettered access to the entire contents of a program's memory, and what bad guys can even do in those cases-- especially when we get to web programming toward the end of the semester, we'll revisit this topic-- is poke around, potentially, someone's computer's memory and find such curious things as we saw there. Or even worse yet, passwords that he or she can then use to do bad things. 

So clearly I shouldn't have done this, because weird things start to happen. Indeed, this is a program crashing. This would be the equivalent of Mac OS or in Windows a program window just disappearing. An unexpected error has occurred. In the command-line environment we see something like this. But that's why, is I'm simply touching memory that doesn't belong to me. 

So let's defend against this a little bit in a different way by looking at this program here. So, again, the skeleton that we saw earlier-- and I've highlighted this time int. And all this time main has indeed returned a value. Even though in most of our lecture examples we've never once used return anything in main. We just write printf close curly brace and that's it. But for free, what the compiler been doing for you, effectively, is returning 0 for you. Turns out-- and it's a little counterintuitive-- that 0 is good. It doesn't mean false per se. 0 is good, and any non-0 value, the world has decided, can signify an error. So if you've ever messed something up on your computer, or a program has just died on you and you've gotten some erroneous window on your screen, saying error negative 49 or error 23-- some seemingly arbitrary value-- that's because a programmer has hard-coded a value like negative 49 or positive 23 to represent any number, dare say, of 4 billion possible things that might go wrong in a program. 

So how might I take advantage of this myself? Well, let me open up a program that I wrote in advance, and poke around online called hello 4. And it's almost identical, except that its got a little bit of error-checking. In this case, I've again declared main as taking two arguments, but this time, on line 17, notice I'm doing a bit of a sanity check. I'm making sure that argc equals equals 2. Because if it is, that means I can safely touch not only bracket 0, but bracket 1. And I go ahead and print out, in this case, Zamyla or Rob or whatever word I typed out. And now just to get a little more proper, I'm going to explicitly return 0 to signify all is well. Nothing bad happened. 

But by convention, I'm going to return 1, or frankly any non-0 value, if something went wrong. Now the user is not going to really notice what's going on. Indeed if I go into this directory, we zoom in and do make hello 4, ./hello-4 Zamyla behaves as I expect. But if I instead don't type anything, nothing seems to happen, but it doesn't crash. And if I instead do something like Rob is a proctor in Thayer-- sharing arbitrary information. But notice, argv 1, 2, 3, 4, and 5 should now exist in memory. That, too, is not what my program expects, because I've checked whether argc equals equals 2 or not. So I'm now defending against this. 

Now, as an aside, we the programmer-- or rather we the users-- never see that 0 or 1 but using a tool called Debugger, or other tools, as we'll see before long, you the programmer can actually see what might be going wrong inside of your program. 

So, any questions on argc? Yeah. 

AUDIENCE: I've seen where they haven't had the character, [INAUDIBLE] just said string star d, like character asterisk comma. Are they equivalent here? 

DAVID MALAN: They are. So the question is, you have occasionally seen programs like this that don't say string argv bracket but instead say something like char star argv bracket. And there's even other variants that you might see. They are indeed equivalent. For now, we have these sort of training wheels on in the form of string in the CS50 library, but in just over a week or so we're going to remove that obstruction altogether and actually look at what the char and the star are, and how those pertain to memory representation more generally. So we'll come back to that. 

Other questions on our argv or argc? Yeah. AUDIENCE: Why did it return an error [INAUDIBLE]? DAVID MALAN: Why did it return an error only-- oh! In the previous case, when we were futzing around with memory, why did it only return an error when I really typed a big number? Short answer is, we just got lucky. Generally speaking, a computer allocates memory in chunks, and it gave me a big enough chunk that I got away, without being noticed, of touching bracket 2, bracket 3, bracket 50, but as soon as I pushed my luck, I went beyond the boundaries of the chunk of memory the operating system had given me. And that's when it clamped down and said, no. Segmentation error. Yeah. 

AUDIENCE: How does the computer know the value of argc? 

DAVID MALAN: How does the computer know the value of argc? When you run a program, that program, by nature of the blinking prompt, is handed the array of words that were typed at the prompt, that was typed at the prompt. And so it is your operating system that essentially populates main's arguments for you. So that's one of the services that you get, sort of secretly underneath the hood of an operating system. Other questions? Yeah. 

AUDIENCE: What does core dump mean? DAVID MALAN: What does core dump mean? So that's a good question. And let me go back into this directory here. And you'll notice that I have a new file there. It's indeed called core, and it's actually typically a decent-sized file. That is essentially a snapshot of the contents of my program's memory or RAM when it crashed. And this will be useful, potentially, diagnostically, once we talk in a future lecture and section about debugging, because you can actually do the equivalent of a digital autopsy on that file to help figure out what you did wrong in your program. Yeah. 

AUDIENCE: Is argc a command in itself, or can you name it anything? 

DAVID MALAN: Good question. Is argc a command in itself, or can you name it anything? It's definitely not a command. It's simply a variable's name or an argument's name, and so absolutely we could call this foo, we could call this bar, which tend to be the go-to words that a computer scientist goes to. But by convention, we use argc and argv. But that's just a human convention, nothing more. All right. So turns out, I've been telling a bit of a white lie-- and frankly, in the future, you'll see we've been telling other white lies. But for now, we're going to peel back one of these. In this case here when I previously ran a program like ./hello or ./hello-3 Zamyla, we had the contents of my computer's memory looking roughly like this. But recall what a string is. What did we say a week ago what a string actually is underneath the hood? AUDIENCE: Array of chars. DAVID MALAN: It's an array of chars, right? So we might have an array of strings, but, in turn, a string is an array of characters. So if I really want to be anal when I draw this picture, I should really be drawing it a little more like this, whereby in each of these indexes of my argv array, there is itself a whole string that itself is in an array. And now the white lie we're telling today is that the picture doesn't look quite like this. In fact, the little squares are typically outside of the big rectangles there. But we'll come back to that before long. But this is ./hello backslash 0, that being the special character that demarcates the end of a string, and we've got another one after Zamyla's name. So what does this mean? 

Well, let me go ahead and open up two other examples that are available online. One is called argv1.c and the other is argv2. It's a super-simple program that is different from past programs in that now I'm using argc and argv up here. And now I'm integrating with a for loop in line 18, from i=0 on up to argc. And what am I going to do with this line of code here? In English. This obviously demonstrates use of argc. But in English, what does it do if I run this program? Yeah? 

AUDIENCE: It's going to print your screen as many times as you want. DAVID MALAN: Exactly. So whatever words I type at the prompt, it's going to regurgitate them at me one per line. So let's go ahead and do this. Let me go into my directory and do make argv1 ./argv1. And now, let's keep it simple. Let's do nothing at first. It did print out one thing, and that's indeed the name of the program, because that's in bracket 0. If I now say foo, it's going to do those two, and if I say foo bar, it's going to say those three things. Now that's somewhat interesting, maybe. But recall that argv is an array of strings, but a string is an array of chars, so we can take things up a notch and apply that basic logic and make code that looks a little more cryptic, admittedly. But by having a nested loop, something akin to what you might recall from Mario, for instance, if you did it this way. 

So now notice on line 19, I'm again iterating over my arguments, from 0 on up to argc. And now in line 21-- I'm borrowing a trick from last week-- I am checking what is the length of argv bracket i. I'm storing that answer in n. And then I'm integrating from j on up to n, where j is initialized to 0. So, convention for counting. Once you've used i, if you have a nested loop, you can't use i again, otherwise you'll clobber, potentially, the value outside of the inner loop. So I'm using j by convention. We might use k. If you have more than k, you probably have too much nesting, typically. But now, notice my printf line is slightly different. I'm not printing %s, I'm printing %c, which, of course, is a placeholder for a char. 

And now notice this syntax. New. We haven't seen it before. But logically, this just means get the ith string in argv and get the jth what? AUDIENCE: Character. DAVID MALAN: Character in that string. So by using square brackets followed by square brackets, this is diving first into argv's strings, and then the second square brackets with j is diving into the characters of that particular string in argv. And then, just for good measure, I'm printing a new line here. So now let me go ahead and open up a slightly bigger window so we can see this in action. Let me go into that folder. And now do make argv-2-- whoops-- make argv-2, ./argv 2. Enter. And it's a little hard to read vertically, but that's indeed the name of the program, followed by a blank line. Now let me go ahead and do foo. Similarly hard to read, but it's indeed printing one character per line. And if I do bar, it's now printing those line by line. So the takeaway here isn't so much that, wow, look at this neat new trick where you can get at the contents of an array's specific characters, but rather how we're taking these basic ideas like indexing into an array, and then indexing into an array that was in that array, and just applying the same ideas to slightly more sophisticated examples. But the basics really haven't changed, even since last week. 

Now this is sort of timely, in that, recall, in week zero we played with a phone book like this. And even though this is obviously physical pieces of paper, you can kind of think of a phone book as an array. Certainly, if you were to reimplement this pieces these pieces of paper in a computer, probably you would use something like an array to store all of those names and numbers from A all the way through Z. So this is nice, because it allows us an opportunity, perhaps, to consider how you might actually implement something like that. As with a series of doors here. So if I could-- we need one volunteer to come on up. Let's see. An unfamiliar face perhaps, unfamiliar face perhaps. How about in orange? Here. Orange shirt, come on up. 

Let's go ahead now and move these doors over to the side, move these out of the way for a moment. What's your name? 

AJAY: 

DAVID MALAN: Ajay. David. Nice to meet you. All right. So we have behind these six doors digitally on the screen-- or, rather, seven doors on the screen-- a whole bunch of numbers. And I've told you nothing in advance-- agreed? AJAY: Nothing in advance. DAVID MALAN: All I want you to do now is to find for me, and for us, really, the number 50, one step at a time. 

AJAY: Number 50? 

DAVID MALAN: The number 50. And you can reveal what's behind each of these doors simply by touching it with a finger. Damn it. [LAUGHTER] 

[APPLAUSE] 

Very well done. OK. We have a lovely gift prize for you here. Your pick of movies we discussed last week. 

AJAY: Oh, man. Oh, I've never seen Spaceballs. 

DAVID MALAN: Spaceballs. All right. So hold on just one moment. How-- let's make this a teachable moment-- how did you go about finding the number 50? AJAY: I chose randomly. DAVID MALAN: So you chose randomly and got lucky. AJAY: Yes. DAVID MALAN: OK. Excellent. So now, had you not gotten lucky, what else might have happened behind these doors? So if I go ahead and reveal these numbers here, they actually are in random order. And the best you could have done, frankly, is by, ultimately, in the worst case, checking them all. So you got super-lucky, which isn't what we'd call an algorithm. Yes, congrats. But now let's-- humor me, if you could. Let's go to this tab here. And here are the numbers in clearly what seems to be a random order, and they were. But now if I instead claim that behind these doors are numbers that are sorted. The goal now is to also find us the number 50. But do it algorithmically, and tell us how you're going about it. And if you find it, you keep the movie. You don't find it, you give it back. AJAY: So I'm going to check the ends first, to determine if there's-- [LAUGHTER AND APPLAUSE] DAVID MALAN: Here you go. Let's take a look at one of Ajay's predecessors, Sean, who wasn't quite as lucky. OK, so your task here, Sean, is the following. I have hidden behind these doors the number seven, but tucked away in some of these doors as well are other non-negative numbers. And your goal is to think of this top row of numbers as just an array. We're just a sequence of pieces of paper with numbers behind them. And your goal is, only using the top array here, find me the number seven. And we are then going to critique how you go about doing it. Find us the number seven, please. No. 5, 19, 13. It's not a trick question. 1. At this point your score is not very good, so you might as well keep going. 3. Go on. Frankly, I can't help but wonder what you're even thinking about. 

SEAN: I can take from only the top row. DAVID MALAN: Only the top row. So you've got three left. So find me 7. 

[AUDIENCE  SHOUTS SUGGESTIONS] So both of those were amazing for very different reasons. So this is where we left off a moment ago, and the key insight here was these doors had numbers behind them that were sorted, the ideal takeaway for which is that you could do fundamentally better in this second example-- and, indeed, that was Sean's first attempt with random numbers just as before-- but as soon as these numbers are sorted, much like the phone book, what can you obviously do? Or how can you leverage that knowledge? Yeah. 

AUDIENCE: You go halfway [INAUDIBLE]. DAVID MALAN: Yeah. Exactly. So Ajay's initial instinct was to check the ends, as I recall, and then we sort of finished the example quickly. But if we started to do this more methodically along those lines, but starting perhaps in the middle, because they're sorted, as soon as we reveal the number 16, we therefore know-- and let's do exactly that-- we therefore know that 50, in today's case, has got to be to the right. So just like in week zero when we tore the phone book in half and threw half of the problem away, same idea here. We can throw this half of the problem away. And probably what you might do algorithmically, once you know that 50 must be to the right, if it's anywhere, is try there, in the middle of the remaining doors. Of course, 50 is higher than 42, so we can throw this remaining quarter of the problem away, and, finally, identify something like 50. But just as with the phone book, these numbers were given to us already in sorted order, which leaves us with the question, how do you get things into sorted order? And, frankly, at what cost? It's one thing to be handed the phone book and then impress your friends by finding a phone number really quickly, right? Tearing 32 pages out to find a person out of 4 billion pages, we said was one extreme example. But how much time did it take Verizon to sort that phone book? How much time did it take us to sort these seven numbers? That's a question that we've thus far completely ignored. 

So let's answer this question now. And we're all out of movies now, but we do have some stress balls. If, say, eight volunteers wouldn't mind joining us up here? Let's go ahead and do, how about the four of you, three of you here? Get some new faces. And the four of you there? And now-- let's not bias here-- and number eight over here on the end. Come on up. All right. So what we have here for each of you is a number. If you'd like to go ahead, take this number. What's your name? 

ARTIE:Artie. 

DAVID MALAN: Artie, okay. You're number 1. 

AMIN: Amin. DAVID MALAN: Amin. David. You're number 2. And go ahead, as I hand you the sheets of paper, line yourselves up in front of the music stands in the same order as up there. 

ANDY: Hi, Andy. 

DAVID MALAN: Andy, it's nice to see you. Number 3. 

JACOB: Jacob. 

DAVID MALAN: Jacob, number 4. Welcome aboard. GRANT: Grant. DAVID MALAN: Grant. Number 5. 

ALANNA: Alanna. 

DAVID MALAN: Alanna, number 6. 

FRANCES: Frances. DAVID MALAN: Frances, number 7. And? 

RACHEL: Rachel. 

DAVID MALAN: Rachel, number 8. All right. Go ahead and get yourself in this order. Let me put one remaining music stand in place. Where do you need a stand? OK. Go ahead and just put your numbers where the audience can see them on, the music stand facing outward. And hopefully, our first sanity check here-- 4, 2, 6. Oh-oh. Wait a minute. We don't have an 8. I need to evict you from the example somehow. No. No, that's OK. Let's see. We can do this. Stand by. There we go. Correct. All right. So, now we have 8, 1, 3 7, 5. OK. Excellent. 

So the question at hand is, at what cost, and via what method, can we actually sort these numbers here so that we can kind of work backwards, ultimately, and decide-- is it really impressive, is it really efficient, that I can divide and conquer a phone book? Is it really efficient that I can divide and conquer those digital pieces of paper on the board, if maybe it's going to cost us a fortune in time or energy or CPU cycles to actually get our data into some sorted order? So let's ask that question. 

So first off, these numbers are in pretty much random order, and I'm going to propose one algorithm, or process by which we can sort these folks. I'm going to approach this pretty naively. And I'm going to recognize that it's kind of a lot for me to wrap my mind around the whole data set at once. But you know what? I'm going to make some very simple marginal fixes. 4 and 2 are out of order, if the goal is to go from 1 on up to 8. So you know what? I'm going to have you guys swap, if you switch physically positions and your pieces of paper. Now 4 and 6, these are in order. I'm going to leave those be. 6 and 8, those are in order. Going to leave them be. 8 and1, out of order. If you two wouldn't mind swapping. Now 8 and 3, if you guys could swap. 8 and 7, if you guys could swap. And 8 and 5, if you guys could swap. 

Now, am I done? No, obviously not. But I have made the situation better, right? What was your name again, number 8? 

RACHEL: Rachel. DAVID MALAN: So Rachel has effectively bubbled up pretty far, all the way to the end of my array of numbers here. And so that problem is kind of solved. Now, clearly, 2 still needs to move a bit, and 4 and 6 and 1. But I seem to have gotten a little closer to the solution. So let's apply this same naive heuristic again. 2 and 4, OK. 4 and 6, OK. 6 and 1, mm-mm. Let's swap. 6 and 3, mm-mm. Let's swap. 6 and 7 is OK. 7 and 5, nope. Let's swap. And now 7 and 8. And what's your name again? FRANCES: Frances. DAVID MALAN: Frances. So now Frances is in even a better position, because now 7 and 8 are correctly bubbled up to the top. So 2 and 4, OK. 4 and 1, let's swap. 4 and 3, let's swap. 4 and 6, you're OK. 6 and 5, let's swap. And now those guys are good. We're almost there. 2 and 1, out of order, so swap. And now let me do a sanity check. 2 and 3, 3 and 4, 4 and 5, 5 and 6, 6 and 7, 8. OK, so we're done. 

But at what cost did I sort these numbers here? Well, how many steps did I potentially take when sorting these folks? Well, we'll come back to that question. But, frankly, if you got a little bored, that's kind of revealing in that this wasn't maybe the most efficient algorithm. And indeed, frankly, I'm sweating all the more walking back and forth. That didn't feel particularly efficient. So let's try something else. If you guys could reset yourselves to these eight values. Good job. 

Let's take a look digitally, for just a moment before we try something else, at what just happened. Up here, you're about to see a visualization of these eight humans whereby blue and red bars represent numbers. The taller the bar, the bigger the number. The shorter the bar, the smaller the number. And what you're going to see is in random order more than eight of them. You're going to see these bars getting sorted by that same algorithm, or set of instructions, which we'll call henceforth bubble sort. So notice, every second or so, two bars are lighting up in red, are being compared by the computer. And then if the big bar and the little bar are out of order, they are being swapped for me. 

Now this is incredibly tedious to watch this, certainly, for very long, but notice the takeaway-- big bars moving to the right, little bars moving to the left. Let's abort this process and speed this up to be much faster, so we can get a high-level sense of what, indeed, bubble sort is doing. Indeed, it's bubbling up to the right hand side of the list, or the array, the bigger bars. And conversely, the little bars are bubbling their way down to the left, albeit at a faster pace than we previously did. So, harder to see with humans, but visually that's indeed what was happening. 

But let's try a fundamentally different approach now. Let's try a different algorithm whereby we have you guys start in these original positions, which was this order here. And let's go ahead now. And I'm going to do something even simpler, right? In retrospect, swapping pairwise again and again, almost a little clever. Let's do things even more naively, where if I want to sort these folks, let me just keep looking for the smallest element. So right now, 4 is the smallest number I've seen. I'm going to remember that. No, 2 is better, and remember that. 1 is even smaller. 3, 7, 5. OK. One-- what's your name again? 

ARTIE: Artie. 

DAVID MALAN: Artie. So, Artie, go ahead. I'm going to pull you out of the line. If you could come back here. And I need to make room for him. We have a decision point here. How might we make room for Artie here at the beginning where number 1 belongs? 

AUDIENCE: Shift. 

DAVID MALAN: OK, we could shift everyone. But propose an optimization. That feels a little annoying for me to ask four people to move all the way down. What else could I do? 

AUDIENCE: Switch them. 

DAVID MALAN: Switch them. And what's your name again? 

JACOB: Jacob. DAVID MALAN: Jacob, move. Much more efficient just to have Jacob swap locations with Artie, as opposed to forcing all four of these folks, thank you very much, to their correct position. What's nice about Artie now, he's in his correct position. Let's do this again. 2, that's the smallest number I've seen. 3, 7, 5. OK. 2 is definitely the smallest. Don't have to do any work. Let's do it again. 6. Smallest? 8. Nope. 4? Ooh. Let me remember 4. 3. Let me remember 3. 7, 5. Smallest number I've seen on this pass is 3. If you'd come on out. Where are we going to put you? And what's your name? 

ALANNA: Alanna. 

DAVID MALAN: Alanna, we're going to have to evict you. But that is more efficient, to just swap two people, than to have multiple people actually sidestep over. Now let's do this again. I'm going to select 4, so come on out. And who's going to move? Number 8, of course. If I now find number 5, come on out. Number 8's going to get evicted again. I'm now going to find number 6 in place. 7 in place. 8 in place. 

What we just did now is something called selection sort, and if we visualize this, it's going to feel a little different. Let's go ahead and from this menu here, this visualization-- let's change this to-- come on, Firefox. Let's change this to selection sort. And let's speed it up as before, and start the visualization now. And this algorithm has a different feel to it. On each iteration, frankly, it's even more straightforward. I'm just selecting the smallest element. Now, frankly, I got a little lucky that time, in that it sorted super-fast. The elements were random. It's not, as we'll eventually see, fundamentally faster. But let's see a third and final approach here as to what's going on. So let's go ahead and reset you guys one final time to be in this order here. 

And now, I'm going to be a little more clever, just to round out our algorithms. I'm going to do this. I'm going to not go back and forth so much. Frankly, I'm tired of all this traversing. I'm just going to take what I'm given at the beginning of the list, and I'm going to sort that then and there. So here we are. Number 4. I'm going to insert number 4 into a sorted list. Done. I claim now, and just to make this more clear, this part of my list is sorted. It's kind of a stupid claim, but indeed 4 is sorted in a list of size one. Now, I'm going to take on number 2. Number 2 I'm now going to insert into the right place. So where does 2 belong? Obviously, over here. So go ahead and move back, if you could. And why don't you guys just take your music stands with you this time. And let's forcibly insert you into the beginning of the list. So a little more work. I had to move Jacob around, and what's your name? 

AMIN: Amin. 

DAVID MALAN: Amin. But at least I didn't go back and forth. I'm just taking things as I go. I'm just inserting them in the right place. 6, this is actually pretty easy. Let's insert you over there, if you just wanted to move over slightly. Number 8, also pretty easy. Right over there. Damn it. Number 1 we can't just swap with Amin here, because that's going to mess up the order. So we have to be a little more clever. So, Artie, if you could back up for a moment. Let's go ahead and shift now, unlike our previous algorithms, to make room for Artie right here at the beginning. So at the end of the day, I'm kind of doing what I wanted to avoid before. And so my algorithm is sort of reversed, intellectually, from what it originally was. I'm just doing the shifting at a different point. Now I'm at 3. Oh, damn. We have to do more work again. So let's push you out. Let's move 8, 6, 4-- oh oh-- and 3 is going to go right there. So at least slight savings this time. 7, not too much work to be done. So if you want to pop back, let's insert you. And lastly, 5, if you want to pop back, we need to shift you, you, you, until five is in place. 

So now to see this at a high level graphically, let's do this algorithm visualization one additional time. So this we shall call insertion sort. We'll run it just as fast, and start it here. And it, too, has a different feel. It's sort of getting better and better, but it's never perfect until I go in and smooth in those gaps. Because, again, I'm only taking what I'm being given from left to right. So I didn't get so lucky that everything was perfect. That's why we had these little mispositions that we fixed over time. 

So all of these algorithms seem to run at slightly different paces. In fact, which would you say is the best or the fastest so far? Bubble sort, the first? Selection sort, the second? Insertion sort, the third? I hear some selection sorts. Other thoughts? 

So it turns out that all of these algorithms are fundamentally just as efficient as each other-- or, conversely, just as inefficient as each other, because we can do fundamentally better than all three of these algorithms. And that's a bit of a white lie, too. when I say as efficient or as inefficient, that's at least for super-large values of n. When we have just eight people here, or maybe 50 or so bars on the screen, you'll absolutely notice differences among these three algorithms. But as n, the number of people, or the number of numbers, or the number of people in the phone book, or the number of web pages in Google's database gets bigger and bigger, we'll see that all three of these algorithms are actually pretty poor. And we can do fundamentally better than that. 

Let's take a look, finally, at what these algorithms might sound like in the context of a few others as well by way of this visualization here that will introduce us to a number of algorithms. Let's go ahead and congratulate our participants here, all of whom sorted themselves very well. If you'd like to take a parting gift. You can keep your numbers as well. And what you'll see, or rather hear, now, is that as we put sounds to each of these bars and associate it with the software, different frequency of sound, you can wrap your mind more audioly around what each of these things look like. The first of which is insertion sort 

[TONES] 

This is bubble sort. 

[TONES] 

Selection sort. 

[TONES] 

Something called merge sort. 

[TONES] 

Gnome sort. 

[TONES] 

That's it for CS50. We will see you on Wednesday. 

NARRATOR: And now, "Deep Thoughts," by Daven Farnham. Why is it a for loop? Why not make it better? I'd make a five loop. 

[LAUGHTER] SPEAKER: All right, this is CS50. This is the end of week three, and if you haven't taken advantage already, know that there will be lunch this Friday as usual, where you can enjoy good conversation and food at Fire and Ice with some of CS50's staff and classmates. Head to this URL here. 

Now you may recall, or you may soon be acquainted with, these things here, which are given out at the end of the semester for many classes. So-called exam blue books, in which you write your answers to exams. Now I have here 26 such blue books, on each of them is written a name, A through Z. And indeed the names are that simple, A through Z. And one of the goals at hand today is going to be to continue what we started on Monday, which is not so much looking at code, but really looking at ideas and problem solving. One of the goals and promises of this course is to teach you to think more carefully, more methodically, and to solve problems more efficiently. And indeed, we can do that really without even touching a line of code. So I have a couple of elephants up here today, orange and blue, if we could get one volunteer, maybe from farther back than usual. How about right there, come on down. The goal of which is going to be to help plus administer this exam here. What's your name? 

AUDIENCE: Mary Beth. SPEAKER: Mary Beth, come on up. Let me get the microphone here for you. Nice to meet you. 

AUDIENCE: Nice to meet you. SPEAKER: All right, so I have here blue books A through Z, and I'm going to pretend that I have one of the students, and they're coming in somewhat randomly at the end of a three hour exam block, so they're ending up in some semi-random order like this. Now your job in just a moment is going to be-- this is actually how they get turned in at the end of the class, most likely. Your job now is going to be, quite simply, to sort these blue books for us from A through Z. 

AUDIENCE: Oh, this is going to take forever. 

SPEAKER: And we will watch as you do this, no pressure. AUDIENCE: No, no pressure or anything. 

SPEAKER: And for fun, let's put up a timer. 

AUDIENCE: So much fun, so much fun. 

SPEAKER: I can hold the mic for you. All right, we've just doubled our speed. So in the meantime, let me pose what's going to be the question for Mary Beth is what is she doing, how is she going about solving this? And in fact, you might not have ever thought about something so simple as when you pick up 26 books like this, which do have a natural ordering to them. What is the process that you actually use? Is it fairly random just picking the first one you see and putting it in its place? Do you first move your hands around looking for A then looking for B? Do you take a look at a pair of them side by side and just say, wait a minute, this isn't right, and then swap the order? We saw already on Monday that there's a number of ways in which we can do this, and indeed as we near the end here, I would take note perhaps of what Mary Beth is doing. We have a few piles it seems, a bigger one, three smaller ones. 

AUDIENCE: I'm ordering them when I find two letters that I know are together in a sequence, I put them together so that I don't have to worry about keeping track of a whole row of books. It's just, oh, A is first, I've got this stack here. SPEAKER: So, almost like a puzzle pieces that have the right shape to match up with each other. AUDIENCE: Pretty much, yeah. SPEAKER: OK, excellent. And now each of these piles is presumably sorted? 

AUDIENCE: Yeah. 

SPEAKER: All right, A through Z. All right, congratulations, you did it. You have your choice. Blue? All right, thank you for that. So Mary Beth did propose what her approach was, but what is another approach how you might go about sorting these things? What would you have done? The record to beat would have been one minute and 50 or so seconds, plus the ones I forgot to count. What would you have done? Yeah? AUDIENCE: Take the stack. Start from the beginning. Check your papers. And if the top one is higher than, maybe, they are, the bottom one is higher, then switch them. 

SPEAKER: OK, so starting at the top and the bottom, and then working your way inward like that, swapping them? OK, so a little similar in spirit to bubble sort, but choosing the extremes not the adjacent pairs. But the short of it is that there's surely a bunch of different ways we could do this, and frankly, I think you kind of adopted a couple approaches, right? You made sort of four sorted piles, and then effectively merged them together. And that's, daresay, another technique altogether. You didn't treat it as one big pile, you divided the problem into four quads, if you will, and then somehow merged them in the end. 

So let's consider, ultimately, how else we might do this. We formalized the notion of bubble sort last time, and bubble sort recall was an algorithm that we visualized with eight of your classmates up here, seemingly randomly sorted at first. And we then decided pairwise, if two elements are out of order, simply swap them. So four and two are obviously out of order, so those two classmates switched positions. And then we repeated with four and six, then six and eight, on each iteration, moving to the right. 

So given eight people, how many pairwise comparisons did I do while walking from left to right in one such iteration? How many comparisons? Seven, right? Because if there's eight people but you have the pair them and you keep moving one hop to the right, you're not going to have eight comparisons because you can't compare an element against itself, or it would just be pointless, so you have seven. Or more generally, if we have n people, we do n minus 1 comparisons with bubble sort. 

So let's consider now how good or bad bubble sort actually was, and try to give ourselves vocabulary with which to critique algorithms like this, and soon our own. So the first pass through bubble sort, the first time I walked from left to right across the stage, took me n minus 1 comparisons. And that's going to be my unit of measure, right? I was kind of talking and strolling, somewhat fast, somewhat slow, so counting my number of seconds isn't particularly telling, but counting the number of operations that I did on Monday, comparing two people, that feels like a nice unit of measure. 

So n minus 1 steps the first time, but then what happened after that? What's the one upside of one pass through an otherwise unsorted list? What can you tell me about the element who was all the way over there? Yeah? That was the biggest element, right? Number eight, even though she started here, every time I compared her against a neighbor, she kept bubbling up to the right hand side of the list. And indeed, that's where the algorithm gets its name. 

Now by that logic, how many comparisons need I make on the second time I make that pass from left to right? n minus 2, right? It would just be wasting my time if I keep comparing eight against someone else because we already know she was in the right place. So that's a bit of an optimization, so the next pass is going to be plus n minus two steps, where n is the number of people. Now you can kind of extrapolate, even if you're not a computer scientist, how this ends. At the end of this algorithm, presumably you've got just one comparison left. You have to kind of fix the beginning of the list in case two and one are out of order and should be one and two, so this bottoms out at plus 1 final comparison. 

Now the dot, dot, dot kind of waves it's hands at some of the juicier details, but let's just go ahead and simplify. If you recall from high school, frankly, a lot of you had math books that had a little cheat sheet on the front cover or the back cover that showed you what series summations like this ultimately added up to. In the general case, if you have a variable like n, and indeed this one, if you looked at your old school math book, you would see that this actually adds up to this sum here, n times n minus 1 all divided by 2. So for now let me just stipulate this is true, so on a leap of faith, that's what this sums up to, and we could prove that in a more general case. But now let's expand this out. So let's multiply this out, so that's n squared, minus n, all divided by 2. That's really n squared, divided by 2, minus n over 2, so that's all nice and interesting. But what happens if we now plug-in a value? Suppose I didn't have eight people, but say a million. And a million just because it's a pretty big number, let's plug that in and see what happens. So if I plug a million into that formula I'm going to get a million squared, divided by 2, minus a million, divided by 2. Now what's that going to equal? So 500 billion, minus 500,000. And if I actually do that math out, that means that sorting a million people with the bubble sort might take me 499,999,500,000 steps or comparisons in the end, we're just extrapolating. 

That feels pretty slow, but frankly measuring one particular input like this, isn't all that telling. But indeed it does suggest that as n gets larger and larger, this algorithm kind of feels worse and worse, or you really start to feel the pain of that exponentiation, that n squared, which adds up pretty fast. And this detail isn't lost on people, in fact some years ago a certain senator who was campaigning, sat down for an interview with Google's Eric Schmidt, CEO at the time, and was challenged with a question much like we're exploring today. Let's take a look. 

[VIDEO PLAYBACK] 

-Senator, you're here at Google, and I like to think of the presidency as a job interview. Now, it's hard to get a job as president, and you're going through the rigors now. It's also hard to get a job at Google. We have questions, and we ask our candidates questions, and this one is from Larry Schwimmer. What-- you guys think I'm kidding, it's right here. What is the most efficient way to sort a million 32-bit integers? 

-Well-- 

-I'm sorry, maybe-- 

-No, no, no. I think the bubble sort would be the wrong way to go. 

-Come on, who told him this? I didn't see computer science in your background. 

-We've got our spies in there. 

-OK, let's ask a different interview question. 

[END VIDEO PLAYBACK] 

SPEAKER: So talking about specific numbers though, isn't going to be all that useful. It is not a life lesson that bubble sort, given a million inputs, might take as many as 500 billion steps. You can't really generalize too effectively from that and make good design decisions when writing programs. So let's focus though on how we might simplify this result. 

So I've highlighted in yellow here the result of n squared divided by 2, so a million squared divided by 2, and then I've highlighted what the ultimate answer was once we subtracted off n divided by 2. And the claim I'm going to make now is, who the heck cares if you subtract off a little old n over 2 when the first part of this formula is so much bigger? It dominates the other term, n squared divided by 2 is so much bigger, clearly, as n gets large like a million, that is there really a big difference at the end of the day between 500 billion and 499,999,500,000? Not really. And so what we're going to do as computer scientists is ignore those lower order terms and take something like this and really just simplify it to the term that's going to matter. The bigger our data sets get, the bigger our databases get, the more web pages we have to search, the more friends you have on Facebook. 

As n gets larger, we're really going to care about the largest term in any such analysis of our algorithms performance. And I'm going to say, you know what, bubble sort is on the order of big O, on the order of n squared. It's not exactly n squared as we've seen, but who really cares about those smaller terms, and frankly, who really cares if we divide by 2? That's just a constant factor. And is 500 billion versus 250 billion really that big of a deal? I could just wait one year, let my laptop literally get twice as fast in hardware, and that sort of difference just goes away naturally over time. 

What we care about is the expression, the part of the expression that's going to vary as our input gets bigger and bigger. And indeed, in the real world, that's what's happening increasingly is the inputs to our problems and algorithms are getting bigger. So big O is going to be the notation, the asymptotic notation, that we just use as computer scientists to describe the performance, or the running time, of an algorithm. So that we can compare algorithms on different computers written by different people, by using some fundamentally similar metric like the number of comparisons you're making, or maybe the number of swaps you're making. 

What we're not going to count is the amount of time that passes on the clock on the wall typically. What we're not going to worry about is how much memory you're using today at least, though that's another resource we might measure. We're going to try to base our analyses on just the basic operations, the ones, frankly, that you can see most visually. So with something like big O of n squared, I claim that O of n squared is an upper bound on the so-called running time of bubble sort. In other words, if you wanted to claim that there's this upper limit on how many steps an algorithm might take, it's going to be in the big O of n squared in this case, an upper bound. 

What if I instead change the story to be not about bubble sort, but about this upper bound. Can you think of an algorithm that we've looked at already whose upper bound, maximum measure of time or operations, would be said to be bounded by n, a linear function, not a quadratic one that's curved? What's an algorithm that always takes no more than like n steps, or 2n steps, or 3n steps? Yeah? 

AUDIENCE: Finding the biggest number in a list? 

SPEAKER: Perfect, finding the biggest number in a list. If I'm given a list of people for instance, each of who is holding a number, what is the maximum number of steps it should take me, a reasonably smart person, to find the largest person in that list? n, right? Because in the worst case, where might the biggest value be? Right, all the way at the end. So in the worst case upper bound, I might have to go all the way over here and be like, oh, here's number eight, or whatever that value is. Now it would just be stupid if I kept going, right? Looking for more and more elements if the last of them is over there? So surely, n is an upper bound. I don't need to take more steps than that. 

So what if instead I proposed that there are algorithms in this world that have a running time that's bounded by big O of log n, log n? Where have we seen this before? Yeah? 

AUDIENCE: In the phone book problem? SPEAKER: Like the phone book problem. What was the measure of how much time or how many tears it took me to find someone like Mike Smith in the phone book? We claimed it was log n, and even if unfamiliar or it it's a little hazy what a logarithm or exponent was, just remember that log n generally refers to the process, in this case, of dividing something in half again, and again, and again, and again, such that it gets increasingly small as you do that. 

So log of n refers, sure, to the phone book example, to binary search in theory, when we had the virtual doors on the board, or when Sean was searching for something. If he had used binary search, log n would be the upper bound on how much time that takes. But those algorithms that ran in log n assumed what key detail? That the list was sorted, right? Your algorithm is wrong if your input is not sorted, and yet you're using something like binary search because you might jump right over the element without realizing it's indeed there. 

Now what might this mean, big O of one? This doesn't mean that your algorithm takes one and only one step, it just means it takes a constant number of steps. Maybe it's 1, maybe it's 10, maybe it's 1,000, but it's independent of the size of the problem. No matter how big n is, a constant time algorithm always takes the same number of steps. So what might be an algorithm we've talked about or just intuitively that comes to you that always runs in so-called constant time? Yeah? 

AUDIENCE: Add two numbers. SPEAKER: Add two numbers, 2 plus 2 equals 4, done. So that might work, what else? How about more real world, yeah? 

AUDIENCE: Finding the first thing in a list. SPEAKER: Finding the first element in a list, sure. We've actually been talking about arrays already, how do you get at the first element in an array, no matter how long the array is in C code? You just use like the bracket zero notation, bam, you're there. And indeed arrays, as an aside, support something generally known as random access, random access memory, because you can literally jump to any one place. We can do this even more simply we can rewind to week zero when we did Scratch. How much time did it take for the say block in Scratch to execute? Just constant time, right? Say something, say something, it doesn't matter how big Scratches world is, it's always going to take the same amount of time to simply say something. 

So that's constant time, but what's the flip side? If that was upper bounds, what if we want to describe the lower bounds of our algorithms running time? Almost a best case potentially, if you will, though these terms could apply to best cases, worst cases, average cases more generally, but let's just focus on lower bounds more generally. What's an algorithm that has a lower bound of n steps, or 2n steps, or 3n steps? Some factor of n steps, that's its lower bound. Yeah? 

AUDIENCE: Bubble sort? 

SPEAKER: Bubble sort takes you minimally n steps, why? Why is that? Why should that start to come to you intuitively, even if it doesn't just yet? Yeah? 

AUDIENCE: [INAUDIBLE]. SPEAKER: Exactly. In the best possible scenario of bubble sort, and a lot of algorithms, if I hand you eight people who are already sorted, it would be foolish for you, the algorithm, to go back and forth more than once, right? Because as soon as you walk through the list once, you should realize, oh, I made no swaps, this list is sorted, exit. But that's going to take you n steps. 

And conversely, what's another way of thinking about it? Bubble sort is an omega, so to speak, of n, because if you look at fewer than n elements, what is the fundamental issue there? You don't know if it's sorted, right. We humans might glance at eight people and be like, oh, it's sorted, that didn't take me n steps, but it did. Your eyes, even though you kind of have a big field of vision, you looked at eight elements, you looked at eight people, that's eight steps effectively. And only if I walk through the whole list do I realize, yes, sorted. If I stop halfway thinking, all right, it's pretty sorted so far, what are the odds it's not sorted? That algorithms not going to be correct. Might be faster, but incorrect. 

So now we have a way of describing a lower bounds, and what about constant time? What's an algorithm that has a lower bound on its running time of one? 1 step, 2 steps, 10 steps, but constant, independent of n, the size of the input? Yeah, in back. 

AUDIENCE: Printf? SPEAKER: What's that? AUDIENCE: Printf? SPEAKER: Printf. OK, sure. So it takes a fixed number of steps. And I should now-- now that we're talking about C code and not Scratch, something like say, with printf, we should start to get careful. Because printf does take input, it's a string, and strings do technically have length. So if we now want to pick on you, if you don't mind, technically we could argue that printf does take a variable length input, and surely it might take more time to print a string this long, than this long. 

So what if we consider just the sorting and searching examples? What about Mike Smith in the phone book, or binary search more generally? In the best case, what might happen? I open the phone book and, bam, there's Mike Smith's number. I can call him right away. 

Took one step, maybe two steps, but a constant number of steps if I got lucky. And frankly, we saw on Monday your classmate get quite lucky twice in a row. And that was indeed constant time in a lower bounds on the algorithm in question for finding the number 50 behind those closed doors. 

Now, as an aside, if you discover that both big O, the upper bound, and omega, the lower bound, are one in the same, that is the same formula in parentheses, you can also say, just to be fancy, that something is in theta of n or theta of some other value. That just means when big O and omega are the same. Now what about selection sort? Let's use this new vocabulary. In selection sort, what were we doing again, and again, and again? I was going back and forth through the list, looking for whom? The smallest number. 

So how many steps, how many comparisons did I have to make in order to figure out who the smallest element in the list was? n minus 1, right? Because if I just start with the one I'm given and I start comparing him or her, then him or her, him or her, him or her, I can only pair elements together n minus 1 times. So selection sort similarly takes n minus 1 steps the first time. 

How many steps does it take me to find the second smallest element? n minus 2, because I'm being dumb if I keep looking at the same people again if I've already selected him or her and put them in their place. And the third step, n minus 3, then n minus 4. We've seen this pattern before, and indeed selection sort similarly has an upper bound of n squared if we do up that summation. What is its lower bound, selection sort? Minimally, how much time must selection sort take, as we defined it on Monday? Propose two options. Maybe it's n, as before. Maybe it's n squared, as it is now as the upper bound. 

AUDIENCE: n squared. SPEAKER: n squared. Why? 

AUDIENCE: Because you have to define [INAUDIBLE]. 

SPEAKER: Exactly. At least as I defined selection sort it was pretty naive, keep going, find the smallest element. Go again, find the smallest element. Go again, find the smallest element. There's no sort of optimization in there that might let me abort after just n or so steps. So indeed, selection sort, omega of n squared. 

What about insertion sort, where I took who I was given, and then I plopped him or her in the right place? Then I proceeded to the second person, plopped him or her in the right place. Then the next person, plopped him or her in the right place. Notice that this is very linear, so to speak. I'm a straight line, I'm not going back and forth, I've never looking back really, but what's happening when I insert him or her into the beginning of the list as we did on Monday? What's happening? Yeah? AUDIENCE: [INAUDIBLE]. SPEAKER: Yeah, that was the catch, right? You might recall from your classmates, if they were making any movement with their feet, that was an operation. So if there were three people here and the new person belonged way over there, on a long stage like this, sure, he or she could just go to the very end. But if we're thinking about a computer and an array of memory, these people are going to have to shuffle over to make room for that person. And so that n minus 1 shufflings, n minus 2 shufflings, n minus 3 shufflings is just kind of happening behind me, not in front of me as before, in some sense. Now as an aside, and as you might have seen online if you start poking around about sorts, there's so many different ones out there, some of them better than others. Indeed, bogosort is one that's kind of fun to look up. Bogosort takes a set of numbers or say a deck of cards, randomly shuffles them, and checks if they're sorted. And if not, does it again. And if not, does it again. If not, does it again. Incredibly stupid. 

And indeed, if you read like the Wikipedia article, its nickname is stupid sort. It will eventually work, hopefully, given enough time, but that amount of time could take quite some time. So if I could, let's speed things up from Mary Beth's example earlier, by having a few more elements, but two more processors. Two people, if you wouldn't mind joining me. How about 1 over here, and let's go-- no one over there? No one over there? OK. You with the black shirt, yes, come on down. All right, what's your name? 

AUDIENCE: Peter. 

SPEAKER: What's that? 

AUDIENCE: Peter. SPEAKER: Peter, David, nice to meet you. All right, we have Peter here, if you want to come onto the table over here. And what's your name? 

AUDIENCE: Elena. SPEAKER: Elena. OK, nice to meet you. Elena meet Peter. Peter, Elena. And we'll need Andrew up here as well, please. And your challenge is going to be to sort a deck of cards. And if unfamiliar, deck of cards should ultimately be sorted a little something like this where we'll do the clubs, then the spades, then the hearts and diamonds, from ace as a one, all the way up to king. 

The cards I'm going to give you are going to be 52 in quantity. We're going to similarly time you, in just a moment. We're going to throw Andrew up on the screen here, so as to watch as you do this. And so that all of this is all the more visible, these are the cards I got on Amazon. So they are already randomly sorted, and we're going to time you. And we're going to keep it real this time, so we're going to try to pressure you because otherwise this will get tedious quickly. If you could proceed to sort 52 elements together via some means, now. 

And again, as we watch these guys do what, in the end is going to produce an obvious result, think about really how they're each doing it, how you might describe it. Because again, these are all processes, algorithms that we take for granted as a human. But you've probably long had intuition, long before you even thought about taking a computer science class you might have had the intuition with which to solve problems like this. But once you recognize the patterns and begin to formalize the steps with which you're solving these problems, you'll find that you can solve much more interesting and much more complex problems quickly. So someone from the audience, what is at least one element of the algorithm that they're using here? 

AUDIENCE: [INAUDIBLE] SPEAKER: What's that? AUDIENCE: By suit. SPEAKER: By suit. So first they are clustering all of the diamonds together it seems, all of the hearts together it seems, and so forth, without respect for the numbers on the cards. And now they appear, for instance, to be sorting them by number. Very good. 

All right, so what's going to be the final step then here? Once we have four sorted suits, what do we need to do to the four piles in order to achieve one sorted deck, quite simply? So we need to merge them again. 

So there's an interesting idea that again, daresay, is very intuitive even if you might never have slapped that kind of label on it. This fundamental notion of dividing the problem not in half this time, but at least into four pieces. Solving pretty much fundamentally identical problems in isolation of each other, and then merging the results. And, excellent, done. All right, a big round of applause, if we could. 

[APPLAUSE] 

SPEAKER: I have no idea what you'll do with these, but here you go. Thank you so much. So let's see, two minutes and eight seconds, if you'd like to challenge your friends. What then is going to be a take away from this that we can leverage more generally? Well, think back to this array of numbers, and think back now to some of the pseudocode we've written in the past, and this was the pseudocode for solving the phone book problem. Whereby in pseudocode I enumerated a more methodical way of describing how I did a very intuitive human algorithm of dividing the phone book in half, repeat, repeat, repeat, until I find someone like Mike Smith, if he is indeed in the phone book. 

But I kind of used what I'll call a very iterative approach here, in particular notice line 8 and line 11. Those are evidence of an iterative approach, a looping approach, because that's exactly the behavior they induce. Those lines both say go to line three, and you can kind of think of that in your mind's eye as being a loop. It's telling you to go back up to step three and repeat, again, and again, and again. 

But what if we leverage a key idea here that we didn't the last time, and simplify line 8 and line 11 and their neighbors as just this, in yellow. It's not fundamentally shortening the pseudocode very much, but it's fundamentally changing the nature of my algorithm. What I'm now saying in step 7, in step 10, is to search for Mike in the exact same way, but just in the left half or the right half. 

So in other words, if I start from step one, pick up phone book, open to middle of phone book, look at names, if Smith is among name's, call Mike, else if Smith is earlier in book, step seven search for Mike in left half of book. But that kind of feels like it's leaving me hanging, right? In yellow, is an instruction, but how do I search for Mike in the left half of the phone book? Where do I have an algorithm with which I can search for someone like Mike Smith? Well, it's staring us in the face. I can literally use the exact same program effectively going up to the top again and re-running the same lines of code. 

So even though this should feel like a bit of a cyclical definition where you're answering someone's question by just sort of asking the same question again, like why, why, why? The reality is because we've hard coded a couple of special lines, step 4, which is an if, and step 12, which is effectively another branch, because we have those stopgap measures, this algorithm will terminate if we find Mike, or if we don't. But in step 7 and 10 now, we have what we'll call a recursive algorithm. And recursion is indeed a powerful idea that's a little mind bending at first, that we can now apply as follows. 

Merge sort will be the last sort that we look at, at least in class formally. And it's fundamentally different from those last three, and certainly last four if we include bogosort. Here's the pseudocode for merge sort. When on input of n elements, so given an array of size n, if n is less than 2, return. So why do I have that sanity check first? What's the implication if I hand you an array whose length n is less than 2? It's already sorted, obviously, right? Because the list either has one element, which is trivially sorted because it's the only thing there. Or, it's of size zero which means there's nothing to sort, so by nature it is sorted. There's just nothing wrong there. So that's our so-called base case. 

That is similar in spirit to what we did with Mike. If Mike's in the phone book, call him. If he's not there, give up. It's a so-called base case, to make sure this algorithm at the end of the day will stop in certain circumstances. 

But here's the leap of faith now, else, sort the left half of the elements, then sort the right half of the elements, and then merge the sorted halves. And here's where it feels like we're copping out. I've asked you to sort n elements, and I'm saying, OK, do it by sorting the left and sorting the right. But I am saying one other thing, and this is the key theme it seems in the intuition thus far, there's this third step of merging. Which even though it seems so dumb in spirit, like just merge things together, it seems to be a key step toward the reassembly of two problems that were divided ultimately in half. 

So merge sort, let's do this, if you'll humor me, with one more demonstration, just so that we have some numbers to work with. Can I exchange eight stress balls for eight people? All right, how about you three, you four in this section, five, six, and let's do 7, 8, come on up. OK, yeah OK. Minus 8, there we go, plus 1. Excellent. All right come on up, let's quickly give you numbers. Number two, number three, number four, number five, six, seven, and eight. I did eight correctly this time. 

OK, so go ahead if you could, and let's sort in the original order that we had yesterday which looked like this, if you wouldn't mind. And let's do it in front of the table. All right, so merge sort. This is where it's going to get kind of interesting, because I seem to be giving myself so much less information today. 

So merge sort first of all on input of n elements, and is obviously not less than two, it's eight, so I have some more work to do. So now mentally we as a class are now in the else branch, which means three steps. First, I have to sort the left half of the elements. So how do I go about doing this? Well, I'm going to kind of mentally divide the list here, you don't have to physically move, and I'm going to focus only on the left half of the elements here. So how do I go about sorting a list now of size four? What's my algorithm? First I check is n less than two, no, so I proceed to the else block again. Sort left half of elements. 

So now again, mentally, and this is where you have to accrue a lot of mental history, if you will. Now I'm sorting the left half of the left half. All right, so now I call my same merge sorting algorithm, is n less than two? No, it is two, so I have to sort the left half, and the right half. So here we go, sort the left half. Why don't you just take one step forward. What's your name? 

AUDIENCE: Darren. 

SPEAKER: Dan. Dan has stepped forward. 

AUDIENCE: Darren. SPEAKER: Darren, done. Did you say Darren or Dan? 

AUDIENCE: Darren. 

SPEAKER: Darren. OK, Darren has stepped forward and he is now sorted. And this is almost an inane claim, right? I don't really seem to be achieving anything, but let's proceed. Now let me sort the right half of the elements. What's your name? 

AUDIENCE: Luke. 

SPEAKER: Luke. Come on, step forward. Done, I have sorted Luke. The left half is now sorted and the right half is now sorted, but again, there's a key step here. What do I next need to do? Merge the sorted halves. Now we're going to just have everyone back and forth in this way, because I kind of need some scratch space. It's almost like these guys are on a table, and I need some room to move them around on. So I'm going to merge you guys by looking at the left half and the right half. And who obviously comes first, left half or right half? So right half, so let's move Luke over here to Darren's original position. And now to merge their left half in, Darren's going to move right there. 

So feels like almost a bubble sort effect, but my fundamental algorithm, very different this time. But now's where things get a little annoying because you have to rewind mentally where did I leave off. I've just merged the sorted halves, which means I'm where in my algorithm? I have to sort the right half, right? 

If you rewind, literally on the video, you'll see that we got to this point of Luke and Darren by sorting the left half of the left half. Then we merged those sorted halves, which means the next step is sort the right half of the left half. All right, so let's do this more quickly. All right, six, I'm going to claim you are now sorted, come on forward. What's your name? 

AUDIENCE: Adriano. 

SPEAKER: Adriano. Adriano is now sorted. And what's your name? 

AUDIENCE: Alex. 

SPEAKER: Alex is now sorted. Left half, right half, what's the final step? Merge. Pretty trivial, so I'm going to merge in six, take a step back, eight, take a step back. And now notice this is a useful takeaway, what is now true about the left half of the list, irrespective of how we began? It is sorted. 

Now it's not sorted in the big scheme of things, but it is sorted independently of the other half. Now what step am I on if I keep rewinding how the story began? Now I have to sort the right half. So now we're way back at the beginning of the story, and let's do this more rapidly. So I'm going to sort the right half of the whole list. What's the next step? Sort the left half of the right half. Sort the left half of the left half of the right half. And what's your name? 

AUDIENCE: Omar. 

SPEAKER: Omar, step forward, done. Left half is sorted. And what's your name? 

AUDIENCE: Chris. 

SPEAKER: Chris, take a step forward, you are now sorted. What's the key step now? Merge. So one is going to merge into place here, if you could take a step back, and three is going to take a step back, merge. So the left half of the right half, is now sorted. Frankly, this algorithm feels like we are wasting way more time than before, but if we did this in real time, we'll see what the takeaways going to be. Now here I am, right half of the right half, let me go ahead and sort the left half. Step forward, what's your name? AUDIENCE: Ramsey. SPEAKER: Ramsey is now sorted. What's your name? 

AUDIENCE: Marina. 

SPEAKER: Marina is now sorted as well, if you take one step forward. Key step here is now merge, I'm going to pluck from my two lists, left and right. Five is going to come first, and seven is going to come next. And again, this is deliberate. The fact that they're taking steps forward and back is meant to represent that we can't do this algorithm in place as easily as bubble sort, and selection sort, and insertion sort where we just kept swapping people. I literally need a sort of scratch paper in which to put these folks while I do the merging, and then I can put them back in place. And that's key because I'm using a new resource, space, not just time. 

OK, this is amazing. Left half is sorted, right half is sorted, now that key merging step. How am I going to merge this? So if you'll follow my left hand and right hand, I'm going to point my left hand at the left half, my right hand at the right half, and now I have to decide step by step whom to merge in. Who obviously comes first? Number one. So come on over here, here's our scratch pad. So now number one, and notice what I'll do with my right hand, I'm going to move my right hand one step over to point number three, and now I have to make the same decision. And actually stand right in front of Luke here if you could, because this is our scratch pad. So who comes next? We have Luke with number two or Chris with number three. Obviously Luke, number two, so you come here. 

But my left hand now is going to be incremented to point at Darren, and here's the key take away with merging, I'm going to keep doing this, obviously, if you kind of follow the logic. But my hands are never going to go backwards, which means I'm only ever moving to the left with my merging process, and that's going to be key to our analysis in just a moment. 

So now let's finish this up rapidly. So three comes next, then four comes next, and now five comes next, then six, and seven, and then finally eight. Feels like the slowest algorithm yet, but not if we actually run it at the same sort of clock speed, so to speak, with the same ticking clock as before. Why? Well, Let's take a look at the end result. 

Let's go back over here, let me pull up a demonstration visually of what we just did. Zooming in here, on this page here, telling Firefox that we want to queue up in this box, let's say bubble sort, with which we're now well familiar, selection sort, which is another fairly straightforward one, and now today's merge sort, which will be our climactic ending. The reason it took so much longer here with humans and me verbally is, obviously, I'm explaining every step. But if you simply execute this, much like we did bubble sort and selection sort not only visually, watch just how much more efficiently this leveraging of division and conquering can be when applied to a data set that's not even size eight, but even much, much bigger. I give you merge sort, side by side with these other algorithms. This is going to get painful quickly, and the ending is not particularly climactic, they just end up sorted. But the key take away is that look how much faster merge sort was, unless you think I'm just kind of messing with you. If we do this one final time, let's reload this, let's go back and choose bubble sort, and just for kicks, let's choose insertion sort, just for good measure. And this time again, let's choose merge sort and let's actually run these side by side. 

And it's not, in fact, a fluke. What I've effectively done is I've divided my input in half, again, and again, and again. And there's only so many times you can divide your input into halves, left and right. What's the formula that we keep seeing that describes the division in half again, and again, and again, and again? 

AUDIENCE: Log n. 

SPEAKER: Log n. But then there's one other key step, this algorithm is not log n steps. If it were only log n steps, we would be in the same problem as before where we can't be sure everything's sorted. You have to minimally look at n elements to be sure n elements are sorted, otherwise it's a leap of faith. 

So it's minimally log n steps, but what about this key merging step where I merged my left half and right half and walked across the stage? How many steps is that to merge? It's n, but I didn't just merge the final time. On each of those nested calls, on each of those nested merges, I still sorted. I merged these two guys, then these two guys, then these two guys and so forth. 

So I did merging again, and again. How many times? So every time I divided the list in half, I did a merge. Divide the list in half, do a merge. So if dividing the list can be done log n times, and the merging ultimately takes n steps, what might be now the upper bound on the running time of our algorithm? n log n. 

And indeed, that's what we've achieved here. So the feel that you see visually when those three things run side by side is n squared against n squared against n log n. Which fundamentally we'll see, not only today but in the future, is much, much faster. A round of applause for these guys, I will reward them with stress balls. Let's adjourn here today, and we will see you on Monday. SPEAKER: All right, this is CS50. This is the end of week three, and if you haven't taken advantage already, know that there will be lunch this Friday as usual, where you can enjoy good conversation and food at Fire and Ice with some of CS50's staff and classmates. Head to this URL here. 

Now you may recall, or you may soon be acquainted with, these things here, which are given out at the end of the semester for many classes. So-called exam blue books, in which you write your answers to exams. Now I have here 26 such blue books, on each of them is written a name, A through Z. And indeed the names are that simple, A through Z. And one of the goals at hand today is going to be to continue what we started on Monday, which is not so much looking at code, but really looking at ideas and problem solving. One of the goals and promises of this course is to teach you to think more carefully, more methodically, and to solve problems more efficiently. And indeed, we can do that really without even touching a line of code. So I have a couple of elephants up here today, orange and blue, if we could get one volunteer, maybe from farther back than usual. How about right there, come on down. The goal of which is going to be to help plus administer this exam here. What's your name? 

AUDIENCE: Mary Beth. SPEAKER: Mary Beth, come on up. Let me get the microphone here for you. Nice to meet you. 

AUDIENCE: Nice to meet you. SPEAKER: All right, so I have here blue books A through Z, and I'm going to pretend that I have one of the students, and they're coming in somewhat randomly at the end of a three hour exam block, so they're ending up in some semi-random order like this. Now your job in just a moment is going to be-- this is actually how they get turned in at the end of the class, most likely. Your job now is going to be, quite simply, to sort these blue books for us from A through Z. 

AUDIENCE: Oh, this is going to take forever. 

SPEAKER: And we will watch as you do this, no pressure. AUDIENCE: No, no pressure or anything. 

SPEAKER: And for fun, let's put up a timer. 

AUDIENCE: So much fun, so much fun. 

SPEAKER: I can hold the mic for you. All right, we've just doubled our speed. So in the meantime, let me pose what's going to be the question for Mary Beth is what is she doing, how is she going about solving this? And in fact, you might not have ever thought about something so simple as when you pick up 26 books like this, which do have a natural ordering to them. What is the process that you actually use? Is it fairly random just picking the first one you see and putting it in its place? Do you first move your hands around looking for A then looking for B? Do you take a look at a pair of them side by side and just say, wait a minute, this isn't right, and then swap the order? We saw already on Monday that there's a number of ways in which we can do this, and indeed as we near the end here, I would take note perhaps of what Mary Beth is doing. We have a few piles it seems, a bigger one, three smaller ones. 

AUDIENCE: I'm ordering them when I find two letters that I know are together in a sequence, I put them together so that I don't have to worry about keeping track of a whole row of books. It's just, oh, A is first, I've got this stack here. SPEAKER: So, almost like a puzzle pieces that have the right shape to match up with each other. AUDIENCE: Pretty much, yeah. SPEAKER: OK, excellent. And now each of these piles is presumably sorted? 

AUDIENCE: Yeah. 

SPEAKER: All right, A through Z. All right, congratulations, you did it. You have your choice. Blue? All right, thank you for that. So Mary Beth did propose what her approach was, but what is another approach how you might go about sorting these things? What would you have done? The record to beat would have been one minute and 50 or so seconds, plus the ones I forgot to count. What would you have done? Yeah? AUDIENCE: Take the stack. Start from the beginning. Check your papers. And if the top one is higher than, maybe, they are, the bottom one is higher, then switch them. 

SPEAKER: OK, so starting at the top and the bottom, and then working your way inward like that, swapping them? OK, so a little similar in spirit to bubble sort, but choosing the extremes not the adjacent pairs. But the short of it is that there's surely a bunch of different ways we could do this, and frankly, I think you kind of adopted a couple approaches, right? You made sort of four sorted piles, and then effectively merged them together. And that's, daresay, another technique altogether. You didn't treat it as one big pile, you divided the problem into four quads, if you will, and then somehow merged them in the end. 

So let's consider, ultimately, how else we might do this. We formalized the notion of bubble sort last time, and bubble sort recall was an algorithm that we visualized with eight of your classmates up here, seemingly randomly sorted at first. And we then decided pairwise, if two elements are out of order, simply swap them. So four and two are obviously out of order, so those two classmates switched positions. And then we repeated with four and six, then six and eight, on each iteration, moving to the right. 

So given eight people, how many pairwise comparisons did I do while walking from left to right in one such iteration? How many comparisons? Seven, right? Because if there's eight people but you have the pair them and you keep moving one hop to the right, you're not going to have eight comparisons because you can't compare an element against itself, or it would just be pointless, so you have seven. Or more generally, if we have n people, we do n minus 1 comparisons with bubble sort. 

So let's consider now how good or bad bubble sort actually was, and try to give ourselves vocabulary with which to critique algorithms like this, and soon our own. So the first pass through bubble sort, the first time I walked from left to right across the stage, took me n minus 1 comparisons. And that's going to be my unit of measure, right? I was kind of talking and strolling, somewhat fast, somewhat slow, so counting my number of seconds isn't particularly telling, but counting the number of operations that I did on Monday, comparing two people, that feels like a nice unit of measure. 

So n minus 1 steps the first time, but then what happened after that? What's the one upside of one pass through an otherwise unsorted list? What can you tell me about the element who was all the way over there? Yeah? That was the biggest element, right? Number eight, even though she started here, every time I compared her against a neighbor, she kept bubbling up to the right hand side of the list. And indeed, that's where the algorithm gets its name. 

Now by that logic, how many comparisons need I make on the second time I make that pass from left to right? n minus 2, right? It would just be wasting my time if I keep comparing eight against someone else because we already know she was in the right place. So that's a bit of an optimization, so the next pass is going to be plus n minus two steps, where n is the number of people. Now you can kind of extrapolate, even if you're not a computer scientist, how this ends. At the end of this algorithm, presumably you've got just one comparison left. You have to kind of fix the beginning of the list in case two and one are out of order and should be one and two, so this bottoms out at plus 1 final comparison. 

Now the dot, dot, dot kind of waves it's hands at some of the juicier details, but let's just go ahead and simplify. If you recall from high school, frankly, a lot of you had math books that had a little cheat sheet on the front cover or the back cover that showed you what series summations like this ultimately added up to. In the general case, if you have a variable like n, and indeed this one, if you looked at your old school math book, you would see that this actually adds up to this sum here, n times n minus 1 all divided by 2. So for now let me just stipulate this is true, so on a leap of faith, that's what this sums up to, and we could prove that in a more general case. But now let's expand this out. So let's multiply this out, so that's n squared, minus n, all divided by 2. That's really n squared, divided by 2, minus n over 2, so that's all nice and interesting. But what happens if we now plug-in a value? Suppose I didn't have eight people, but say a million. And a million just because it's a pretty big number, let's plug that in and see what happens. So if I plug a million into that formula I'm going to get a million squared, divided by 2, minus a million, divided by 2. Now what's that going to equal? So 500 billion, minus 500,000. And if I actually do that math out, that means that sorting a million people with the bubble sort might take me 499,999,500,000 steps or comparisons in the end, we're just extrapolating. 

That feels pretty slow, but frankly measuring one particular input like this, isn't all that telling. But indeed it does suggest that as n gets larger and larger, this algorithm kind of feels worse and worse, or you really start to feel the pain of that exponentiation, that n squared, which adds up pretty fast. And this detail isn't lost on people, in fact some years ago a certain senator who was campaigning, sat down for an interview with Google's Eric Schmidt, CEO at the time, and was challenged with a question much like we're exploring today. Let's take a look. 

[VIDEO PLAYBACK] 

-Senator, you're here at Google, and I like to think of the presidency as a job interview. Now, it's hard to get a job as president, and you're going through the rigors now. It's also hard to get a job at Google. We have questions, and we ask our candidates questions, and this one is from Larry Schwimmer. What-- you guys think I'm kidding, it's right here. What is the most efficient way to sort a million 32-bit integers? 

-Well-- 

-I'm sorry, maybe-- 

-No, no, no. I think the bubble sort would be the wrong way to go. 

-Come on, who told him this? I didn't see computer science in your background. 

-We've got our spies in there. 

-OK, let's ask a different interview question. 

[END VIDEO PLAYBACK] 

SPEAKER: So talking about specific numbers though, isn't going to be all that useful. It is not a life lesson that bubble sort, given a million inputs, might take as many as 500 billion steps. You can't really generalize too effectively from that and make good design decisions when writing programs. So let's focus though on how we might simplify this result. 

So I've highlighted in yellow here the result of n squared divided by 2, so a million squared divided by 2, and then I've highlighted what the ultimate answer was once we subtracted off n divided by 2. And the claim I'm going to make now is, who the heck cares if you subtract off a little old n over 2 when the first part of this formula is so much bigger? It dominates the other term, n squared divided by 2 is so much bigger, clearly, as n gets large like a million, that is there really a big difference at the end of the day between 500 billion and 499,999,500,000? Not really. And so what we're going to do as computer scientists is ignore those lower order terms and take something like this and really just simplify it to the term that's going to matter. The bigger our data sets get, the bigger our databases get, the more web pages we have to search, the more friends you have on Facebook. 

As n gets larger, we're really going to care about the largest term in any such analysis of our algorithms performance. And I'm going to say, you know what, bubble sort is on the order of big O, on the order of n squared. It's not exactly n squared as we've seen, but who really cares about those smaller terms, and frankly, who really cares if we divide by 2? That's just a constant factor. And is 500 billion versus 250 billion really that big of a deal? I could just wait one year, let my laptop literally get twice as fast in hardware, and that sort of difference just goes away naturally over time. 

What we care about is the expression, the part of the expression that's going to vary as our input gets bigger and bigger. And indeed, in the real world, that's what's happening increasingly is the inputs to our problems and algorithms are getting bigger. So big O is going to be the notation, the asymptotic notation, that we just use as computer scientists to describe the performance, or the running time, of an algorithm. So that we can compare algorithms on different computers written by different people, by using some fundamentally similar metric like the number of comparisons you're making, or maybe the number of swaps you're making. 

What we're not going to count is the amount of time that passes on the clock on the wall typically. What we're not going to worry about is how much memory you're using today at least, though that's another resource we might measure. We're going to try to base our analyses on just the basic operations, the ones, frankly, that you can see most visually. So with something like big O of n squared, I claim that O of n squared is an upper bound on the so-called running time of bubble sort. In other words, if you wanted to claim that there's this upper limit on how many steps an algorithm might take, it's going to be in the big O of n squared in this case, an upper bound. 

What if I instead change the story to be not about bubble sort, but about this upper bound. Can you think of an algorithm that we've looked at already whose upper bound, maximum measure of time or operations, would be said to be bounded by n, a linear function, not a quadratic one that's curved? What's an algorithm that always takes no more than like n steps, or 2n steps, or 3n steps? Yeah? 

AUDIENCE: Finding the biggest number in a list? 

SPEAKER: Perfect, finding the biggest number in a list. If I'm given a list of people for instance, each of who is holding a number, what is the maximum number of steps it should take me, a reasonably smart person, to find the largest person in that list? n, right? Because in the worst case, where might the biggest value be? Right, all the way at the end. So in the worst case upper bound, I might have to go all the way over here and be like, oh, here's number eight, or whatever that value is. Now it would just be stupid if I kept going, right? Looking for more and more elements if the last of them is over there? So surely, n is an upper bound. I don't need to take more steps than that. 

So what if instead I proposed that there are algorithms in this world that have a running time that's bounded by big O of log n, log n? Where have we seen this before? Yeah? 

AUDIENCE: In the phone book problem? SPEAKER: Like the phone book problem. What was the measure of how much time or how many tears it took me to find someone like Mike Smith in the phone book? We claimed it was log n, and even if unfamiliar or it it's a little hazy what a logarithm or exponent was, just remember that log n generally refers to the process, in this case, of dividing something in half again, and again, and again, and again, such that it gets increasingly small as you do that. 

So log of n refers, sure, to the phone book example, to binary search in theory, when we had the virtual doors on the board, or when Sean was searching for something. If he had used binary search, log n would be the upper bound on how much time that takes. But those algorithms that ran in log n assumed what key detail? That the list was sorted, right? Your algorithm is wrong if your input is not sorted, and yet you're using something like binary search because you might jump right over the element without realizing it's indeed there. 

Now what might this mean, big O of one? This doesn't mean that your algorithm takes one and only one step, it just means it takes a constant number of steps. Maybe it's 1, maybe it's 10, maybe it's 1,000, but it's independent of the size of the problem. No matter how big n is, a constant time algorithm always takes the same number of steps. So what might be an algorithm we've talked about or just intuitively that comes to you that always runs in so-called constant time? Yeah? 

AUDIENCE: Add two numbers. SPEAKER: Add two numbers, 2 plus 2 equals 4, done. So that might work, what else? How about more real world, yeah? 

AUDIENCE: Finding the first thing in a list. SPEAKER: Finding the first element in a list, sure. We've actually been talking about arrays already, how do you get at the first element in an array, no matter how long the array is in C code? You just use like the bracket zero notation, bam, you're there. And indeed arrays, as an aside, support something generally known as random access, random access memory, because you can literally jump to any one place. We can do this even more simply we can rewind to week zero when we did Scratch. How much time did it take for the say block in Scratch to execute? Just constant time, right? Say something, say something, it doesn't matter how big Scratches world is, it's always going to take the same amount of time to simply say something. 

So that's constant time, but what's the flip side? If that was upper bounds, what if we want to describe the lower bounds of our algorithms running time? Almost a best case potentially, if you will, though these terms could apply to best cases, worst cases, average cases more generally, but let's just focus on lower bounds more generally. What's an algorithm that has a lower bound of n steps, or 2n steps, or 3n steps? Some factor of n steps, that's its lower bound. Yeah? 

AUDIENCE: Bubble sort? 

SPEAKER: Bubble sort takes you minimally n steps, why? Why is that? Why should that start to come to you intuitively, even if it doesn't just yet? Yeah? 

AUDIENCE: [INAUDIBLE]. SPEAKER: Exactly. In the best possible scenario of bubble sort, and a lot of algorithms, if I hand you eight people who are already sorted, it would be foolish for you, the algorithm, to go back and forth more than once, right? Because as soon as you walk through the list once, you should realize, oh, I made no swaps, this list is sorted, exit. But that's going to take you n steps. 

And conversely, what's another way of thinking about it? Bubble sort is an omega, so to speak, of n, because if you look at fewer than n elements, what is the fundamental issue there? You don't know if it's sorted, right. We humans might glance at eight people and be like, oh, it's sorted, that didn't take me n steps, but it did. Your eyes, even though you kind of have a big field of vision, you looked at eight elements, you looked at eight people, that's eight steps effectively. And only if I walk through the whole list do I realize, yes, sorted. If I stop halfway thinking, all right, it's pretty sorted so far, what are the odds it's not sorted? That algorithms not going to be correct. Might be faster, but incorrect. 

So now we have a way of describing a lower bounds, and what about constant time? What's an algorithm that has a lower bound on its running time of one? 1 step, 2 steps, 10 steps, but constant, independent of n, the size of the input? Yeah, in back. 

AUDIENCE: Printf? SPEAKER: What's that? AUDIENCE: Printf? SPEAKER: Printf. OK, sure. So it takes a fixed number of steps. And I should now-- now that we're talking about C code and not Scratch, something like say, with printf, we should start to get careful. Because printf does take input, it's a string, and strings do technically have length. So if we now want to pick on you, if you don't mind, technically we could argue that printf does take a variable length input, and surely it might take more time to print a string this long, than this long. 

So what if we consider just the sorting and searching examples? What about Mike Smith in the phone book, or binary search more generally? In the best case, what might happen? I open the phone book and, bam, there's Mike Smith's number. I can call him right away. 

Took one step, maybe two steps, but a constant number of steps if I got lucky. And frankly, we saw on Monday your classmate get quite lucky twice in a row. And that was indeed constant time in a lower bounds on the algorithm in question for finding the number 50 behind those closed doors. 

Now, as an aside, if you discover that both big O, the upper bound, and omega, the lower bound, are one in the same, that is the same formula in parentheses, you can also say, just to be fancy, that something is in theta of n or theta of some other value. That just means when big O and omega are the same. Now what about selection sort? Let's use this new vocabulary. In selection sort, what were we doing again, and again, and again? I was going back and forth through the list, looking for whom? The smallest number. 

So how many steps, how many comparisons did I have to make in order to figure out who the smallest element in the list was? n minus 1, right? Because if I just start with the one I'm given and I start comparing him or her, then him or her, him or her, him or her, I can only pair elements together n minus 1 times. So selection sort similarly takes n minus 1 steps the first time. 

How many steps does it take me to find the second smallest element? n minus 2, because I'm being dumb if I keep looking at the same people again if I've already selected him or her and put them in their place. And the third step, n minus 3, then n minus 4. We've seen this pattern before, and indeed selection sort similarly has an upper bound of n squared if we do up that summation. What is its lower bound, selection sort? Minimally, how much time must selection sort take, as we defined it on Monday? Propose two options. Maybe it's n, as before. Maybe it's n squared, as it is now as the upper bound. 

AUDIENCE: n squared. SPEAKER: n squared. Why? 

AUDIENCE: Because you have to define [INAUDIBLE]. 

SPEAKER: Exactly. At least as I defined selection sort it was pretty naive, keep going, find the smallest element. Go again, find the smallest element. Go again, find the smallest element. There's no sort of optimization in there that might let me abort after just n or so steps. So indeed, selection sort, omega of n squared. 

What about insertion sort, where I took who I was given, and then I plopped him or her in the right place? Then I proceeded to the second person, plopped him or her in the right place. Then the next person, plopped him or her in the right place. Notice that this is very linear, so to speak. I'm a straight line, I'm not going back and forth, I've never looking back really, but what's happening when I insert him or her into the beginning of the list as we did on Monday? What's happening? Yeah? AUDIENCE: [INAUDIBLE]. SPEAKER: Yeah, that was the catch, right? You might recall from your classmates, if they were making any movement with their feet, that was an operation. So if there were three people here and the new person belonged way over there, on a long stage like this, sure, he or she could just go to the very end. But if we're thinking about a computer and an array of memory, these people are going to have to shuffle over to make room for that person. And so that n minus 1 shufflings, n minus 2 shufflings, n minus 3 shufflings is just kind of happening behind me, not in front of me as before, in some sense. Now as an aside, and as you might have seen online if you start poking around about sorts, there's so many different ones out there, some of them better than others. Indeed, bogosort is one that's kind of fun to look up. Bogosort takes a set of numbers or say a deck of cards, randomly shuffles them, and checks if they're sorted. And if not, does it again. And if not, does it again. If not, does it again. Incredibly stupid. 

And indeed, if you read like the Wikipedia article, its nickname is stupid sort. It will eventually work, hopefully, given enough time, but that amount of time could take quite some time. So if I could, let's speed things up from Mary Beth's example earlier, by having a few more elements, but two more processors. Two people, if you wouldn't mind joining me. How about 1 over here, and let's go-- no one over there? No one over there? OK. You with the black shirt, yes, come on down. All right, what's your name? 

AUDIENCE: Peter. 

SPEAKER: What's that? 

AUDIENCE: Peter. SPEAKER: Peter, David, nice to meet you. All right, we have Peter here, if you want to come onto the table over here. And what's your name? 

AUDIENCE: Elena. SPEAKER: Elena. OK, nice to meet you. Elena meet Peter. Peter, Elena. And we'll need Andrew up here as well, please. And your challenge is going to be to sort a deck of cards. And if unfamiliar, deck of cards should ultimately be sorted a little something like this where we'll do the clubs, then the spades, then the hearts and diamonds, from ace as a one, all the way up to king. 

The cards I'm going to give you are going to be 52 in quantity. We're going to similarly time you, in just a moment. We're going to throw Andrew up on the screen here, so as to watch as you do this. And so that all of this is all the more visible, these are the cards I got on Amazon. So they are already randomly sorted, and we're going to time you. And we're going to keep it real this time, so we're going to try to pressure you because otherwise this will get tedious quickly. If you could proceed to sort 52 elements together via some means, now. 

And again, as we watch these guys do what, in the end is going to produce an obvious result, think about really how they're each doing it, how you might describe it. Because again, these are all processes, algorithms that we take for granted as a human. But you've probably long had intuition, long before you even thought about taking a computer science class you might have had the intuition with which to solve problems like this. But once you recognize the patterns and begin to formalize the steps with which you're solving these problems, you'll find that you can solve much more interesting and much more complex problems quickly. So someone from the audience, what is at least one element of the algorithm that they're using here? 

AUDIENCE: [INAUDIBLE] SPEAKER: What's that? AUDIENCE: By suit. SPEAKER: By suit. So first they are clustering all of the diamonds together it seems, all of the hearts together it seems, and so forth, without respect for the numbers on the cards. And now they appear, for instance, to be sorting them by number. Very good. 

All right, so what's going to be the final step then here? Once we have four sorted suits, what do we need to do to the four piles in order to achieve one sorted deck, quite simply? So we need to merge them again. 

So there's an interesting idea that again, daresay, is very intuitive even if you might never have slapped that kind of label on it. This fundamental notion of dividing the problem not in half this time, but at least into four pieces. Solving pretty much fundamentally identical problems in isolation of each other, and then merging the results. And, excellent, done. All right, a big round of applause, if we could. 

[APPLAUSE] 

SPEAKER: I have no idea what you'll do with these, but here you go. Thank you so much. So let's see, two minutes and eight seconds, if you'd like to challenge your friends. What then is going to be a take away from this that we can leverage more generally? Well, think back to this array of numbers, and think back now to some of the pseudocode we've written in the past, and this was the pseudocode for solving the phone book problem. Whereby in pseudocode I enumerated a more methodical way of describing how I did a very intuitive human algorithm of dividing the phone book in half, repeat, repeat, repeat, until I find someone like Mike Smith, if he is indeed in the phone book. 

But I kind of used what I'll call a very iterative approach here, in particular notice line 8 and line 11. Those are evidence of an iterative approach, a looping approach, because that's exactly the behavior they induce. Those lines both say go to line three, and you can kind of think of that in your mind's eye as being a loop. It's telling you to go back up to step three and repeat, again, and again, and again. 

But what if we leverage a key idea here that we didn't the last time, and simplify line 8 and line 11 and their neighbors as just this, in yellow. It's not fundamentally shortening the pseudocode very much, but it's fundamentally changing the nature of my algorithm. What I'm now saying in step 7, in step 10, is to search for Mike in the exact same way, but just in the left half or the right half. 

So in other words, if I start from step one, pick up phone book, open to middle of phone book, look at names, if Smith is among name's, call Mike, else if Smith is earlier in book, step seven search for Mike in left half of book. But that kind of feels like it's leaving me hanging, right? In yellow, is an instruction, but how do I search for Mike in the left half of the phone book? Where do I have an algorithm with which I can search for someone like Mike Smith? Well, it's staring us in the face. I can literally use the exact same program effectively going up to the top again and re-running the same lines of code. 

So even though this should feel like a bit of a cyclical definition where you're answering someone's question by just sort of asking the same question again, like why, why, why? The reality is because we've hard coded a couple of special lines, step 4, which is an if, and step 12, which is effectively another branch, because we have those stopgap measures, this algorithm will terminate if we find Mike, or if we don't. But in step 7 and 10 now, we have what we'll call a recursive algorithm. And recursion is indeed a powerful idea that's a little mind bending at first, that we can now apply as follows. 

Merge sort will be the last sort that we look at, at least in class formally. And it's fundamentally different from those last three, and certainly last four if we include bogosort. Here's the pseudocode for merge sort. When on input of n elements, so given an array of size n, if n is less than 2, return. So why do I have that sanity check first? What's the implication if I hand you an array whose length n is less than 2? It's already sorted, obviously, right? Because the list either has one element, which is trivially sorted because it's the only thing there. Or, it's of size zero which means there's nothing to sort, so by nature it is sorted. There's just nothing wrong there. So that's our so-called base case. 

That is similar in spirit to what we did with Mike. If Mike's in the phone book, call him. If he's not there, give up. It's a so-called base case, to make sure this algorithm at the end of the day will stop in certain circumstances. 

But here's the leap of faith now, else, sort the left half of the elements, then sort the right half of the elements, and then merge the sorted halves. And here's where it feels like we're copping out. I've asked you to sort n elements, and I'm saying, OK, do it by sorting the left and sorting the right. But I am saying one other thing, and this is the key theme it seems in the intuition thus far, there's this third step of merging. Which even though it seems so dumb in spirit, like just merge things together, it seems to be a key step toward the reassembly of two problems that were divided ultimately in half. 

So merge sort, let's do this, if you'll humor me, with one more demonstration, just so that we have some numbers to work with. Can I exchange eight stress balls for eight people? All right, how about you three, you four in this section, five, six, and let's do 7, 8, come on up. OK, yeah OK. Minus 8, there we go, plus 1. Excellent. All right come on up, let's quickly give you numbers. Number two, number three, number four, number five, six, seven, and eight. I did eight correctly this time. 

OK, so go ahead if you could, and let's sort in the original order that we had yesterday which looked like this, if you wouldn't mind. And let's do it in front of the table. All right, so merge sort. This is where it's going to get kind of interesting, because I seem to be giving myself so much less information today. 

So merge sort first of all on input of n elements, and is obviously not less than two, it's eight, so I have some more work to do. So now mentally we as a class are now in the else branch, which means three steps. First, I have to sort the left half of the elements. So how do I go about doing this? Well, I'm going to kind of mentally divide the list here, you don't have to physically move, and I'm going to focus only on the left half of the elements here. So how do I go about sorting a list now of size four? What's my algorithm? First I check is n less than two, no, so I proceed to the else block again. Sort left half of elements. 

So now again, mentally, and this is where you have to accrue a lot of mental history, if you will. Now I'm sorting the left half of the left half. All right, so now I call my same merge sorting algorithm, is n less than two? No, it is two, so I have to sort the left half, and the right half. So here we go, sort the left half. Why don't you just take one step forward. What's your name? 

AUDIENCE: Darren. 

SPEAKER: Dan. Dan has stepped forward. 

AUDIENCE: Darren. SPEAKER: Darren, done. Did you say Darren or Dan? 

AUDIENCE: Darren. 

SPEAKER: Darren. OK, Darren has stepped forward and he is now sorted. And this is almost an inane claim, right? I don't really seem to be achieving anything, but let's proceed. Now let me sort the right half of the elements. What's your name? 

AUDIENCE: Luke. 

SPEAKER: Luke. Come on, step forward. Done, I have sorted Luke. The left half is now sorted and the right half is now sorted, but again, there's a key step here. What do I next need to do? Merge the sorted halves. Now we're going to just have everyone back and forth in this way, because I kind of need some scratch space. It's almost like these guys are on a table, and I need some room to move them around on. So I'm going to merge you guys by looking at the left half and the right half. And who obviously comes first, left half or right half? So right half, so let's move Luke over here to Darren's original position. And now to merge their left half in, Darren's going to move right there. 

So feels like almost a bubble sort effect, but my fundamental algorithm, very different this time. But now's where things get a little annoying because you have to rewind mentally where did I leave off. I've just merged the sorted halves, which means I'm where in my algorithm? I have to sort the right half, right? 

If you rewind, literally on the video, you'll see that we got to this point of Luke and Darren by sorting the left half of the left half. Then we merged those sorted halves, which means the next step is sort the right half of the left half. All right, so let's do this more quickly. All right, six, I'm going to claim you are now sorted, come on forward. What's your name? 

AUDIENCE: Adriano. 

SPEAKER: Adriano. Adriano is now sorted. And what's your name? 

AUDIENCE: Alex. 

SPEAKER: Alex is now sorted. Left half, right half, what's the final step? Merge. Pretty trivial, so I'm going to merge in six, take a step back, eight, take a step back. And now notice this is a useful takeaway, what is now true about the left half of the list, irrespective of how we began? It is sorted. 

Now it's not sorted in the big scheme of things, but it is sorted independently of the other half. Now what step am I on if I keep rewinding how the story began? Now I have to sort the right half. So now we're way back at the beginning of the story, and let's do this more rapidly. So I'm going to sort the right half of the whole list. What's the next step? Sort the left half of the right half. Sort the left half of the left half of the right half. And what's your name? 

AUDIENCE: Omar. 

SPEAKER: Omar, step forward, done. Left half is sorted. And what's your name? 

AUDIENCE: Chris. 

SPEAKER: Chris, take a step forward, you are now sorted. What's the key step now? Merge. So one is going to merge into place here, if you could take a step back, and three is going to take a step back, merge. So the left half of the right half, is now sorted. Frankly, this algorithm feels like we are wasting way more time than before, but if we did this in real time, we'll see what the takeaways going to be. Now here I am, right half of the right half, let me go ahead and sort the left half. Step forward, what's your name? AUDIENCE: Ramsey. SPEAKER: Ramsey is now sorted. What's your name? 

AUDIENCE: Marina. 

SPEAKER: Marina is now sorted as well, if you take one step forward. Key step here is now merge, I'm going to pluck from my two lists, left and right. Five is going to come first, and seven is going to come next. And again, this is deliberate. The fact that they're taking steps forward and back is meant to represent that we can't do this algorithm in place as easily as bubble sort, and selection sort, and insertion sort where we just kept swapping people. I literally need a sort of scratch paper in which to put these folks while I do the merging, and then I can put them back in place. And that's key because I'm using a new resource, space, not just time. 

OK, this is amazing. Left half is sorted, right half is sorted, now that key merging step. How am I going to merge this? So if you'll follow my left hand and right hand, I'm going to point my left hand at the left half, my right hand at the right half, and now I have to decide step by step whom to merge in. Who obviously comes first? Number one. So come on over here, here's our scratch pad. So now number one, and notice what I'll do with my right hand, I'm going to move my right hand one step over to point number three, and now I have to make the same decision. And actually stand right in front of Luke here if you could, because this is our scratch pad. So who comes next? We have Luke with number two or Chris with number three. Obviously Luke, number two, so you come here. 

But my left hand now is going to be incremented to point at Darren, and here's the key take away with merging, I'm going to keep doing this, obviously, if you kind of follow the logic. But my hands are never going to go backwards, which means I'm only ever moving to the left with my merging process, and that's going to be key to our analysis in just a moment. 

So now let's finish this up rapidly. So three comes next, then four comes next, and now five comes next, then six, and seven, and then finally eight. Feels like the slowest algorithm yet, but not if we actually run it at the same sort of clock speed, so to speak, with the same ticking clock as before. Why? Well, Let's take a look at the end result. 

Let's go back over here, let me pull up a demonstration visually of what we just did. Zooming in here, on this page here, telling Firefox that we want to queue up in this box, let's say bubble sort, with which we're now well familiar, selection sort, which is another fairly straightforward one, and now today's merge sort, which will be our climactic ending. The reason it took so much longer here with humans and me verbally is, obviously, I'm explaining every step. But if you simply execute this, much like we did bubble sort and selection sort not only visually, watch just how much more efficiently this leveraging of division and conquering can be when applied to a data set that's not even size eight, but even much, much bigger. I give you merge sort, side by side with these other algorithms. This is going to get painful quickly, and the ending is not particularly climactic, they just end up sorted. But the key take away is that look how much faster merge sort was, unless you think I'm just kind of messing with you. If we do this one final time, let's reload this, let's go back and choose bubble sort, and just for kicks, let's choose insertion sort, just for good measure. And this time again, let's choose merge sort and let's actually run these side by side. 

And it's not, in fact, a fluke. What I've effectively done is I've divided my input in half, again, and again, and again. And there's only so many times you can divide your input into halves, left and right. What's the formula that we keep seeing that describes the division in half again, and again, and again, and again? 

AUDIENCE: Log n. 

SPEAKER: Log n. But then there's one other key step, this algorithm is not log n steps. If it were only log n steps, we would be in the same problem as before where we can't be sure everything's sorted. You have to minimally look at n elements to be sure n elements are sorted, otherwise it's a leap of faith. 

So it's minimally log n steps, but what about this key merging step where I merged my left half and right half and walked across the stage? How many steps is that to merge? It's n, but I didn't just merge the final time. On each of those nested calls, on each of those nested merges, I still sorted. I merged these two guys, then these two guys, then these two guys and so forth. 

So I did merging again, and again. How many times? So every time I divided the list in half, I did a merge. Divide the list in half, do a merge. So if dividing the list can be done log n times, and the merging ultimately takes n steps, what might be now the upper bound on the running time of our algorithm? n log n. 

And indeed, that's what we've achieved here. So the feel that you see visually when those three things run side by side is n squared against n squared against n log n. Which fundamentally we'll see, not only today but in the future, is much, much faster. A round of applause for these guys, I will reward them with stress balls. Let's adjourn here today, and we will see you on Monday. [MUSIC PLAYING] 

SPEAKER 1: All right, this is CS50, and this is the start of week four, and as you may have heard or read, the world has been ending. Going all around the internet has been knowledge and awareness of a bug in a program, a programming language called Bash. This has been wonderfully branded as Shellshock, or the Bash door, but articles like these have not been uncommon. And in fact, many of them bring back memories of Heartbleed, which you may have noticed in the press back this past spring, which was similarly fairly dramatic. Now of those of you here today, how many of you have, even if you don't understand what it's all about, heard of Shellshock? All right, and how many of you have computers that are vulnerable? OK, there should be far, far more hands up right now, for reasons we shall see. 

Let's take a look at what's been going on in the media and then explain it a bit here for us technically. 

SPEAKER 2: Security experts have warned that a serious flaw could be about to affect hundreds of millions of the world's web users. So what exactly is the bug that's been dubbed Shellshock, and what does it do? Well, Shellshock is also known as the Bash bug, the software it exploits. Hackers use the virus to scan vulnerable systems running Linux and Unix operating systems and then infect them. Bash is a command line shell. This lets users issue commands to launch programs and features within software by typing in text. It's typically used by programmers, and shouldn't be open to the wider world, though Shellshock changes that. 

Well, worringly, some analysts warn it could be a bigger threat, because Shellshock allows complete control of an infected machine, whereas Heartbleed only allowed hackers to spy on computers. It's so serious, it's been rated a 10 out of 10 for severity by the National Vulnerability Database. 2/3 of all web servers are at risk, including some Mac computers. Well, make sure you patch your systems now. Anyone hosting a website running the affected operating systems should take action as soon as possible. Anyone who can afford it should look to their monitoring and web application firewalls to look out for any attacks. SPEAKER 3: Worst thing that could happen is that somebody would write code that would automatically go and scan the internet and would affect all of these computers. And once they do that, well, the worst thing they could do is just delete everything, or shut the sites down. So we could see damage from that point of view, where we would have malicious people who just decide to cause havoc by bringing systems down or deleting files, and things like that. SPEAKER 2: Some say this is one of the most difficult to measure bugs in years, and it may take weeks or even months to determine its ultimate impact. 

SPEAKER 1: So all of that is true, but the funny thing is, almost all of the imagery you just saw, except for maybe the keyboard, has nothing to do with the bug whatsoever. Servers and wires and so forth, it's sort of tangentially related, but at the core it's actually pretty familiar what's going on here. In fact, let me go into our CS50 appliance. Let me go ahead and maximize the terminal window here. And you guys have been using this, or the embedded version thereof, in gedit in order to write programs, type commands, and so forth, and this is actually, and has been for weeks, Bash, B-A-S-H. This is the Bourne-again shell, which is just a fancy way of saying, this is a program that has a blinking prompt, effectively, that sits there waiting for input for you. And it's the command line interface via which you guys have been running commands and ultimately compiling and then running programs. 

But Bash is also a programming language in the following sense. You know that there are commands like cd and ls and also clang and others, but you can define your own commands by implementing them in Bash. Now we're not going to go into great detail as to Bash the programming language, but know, for instance, that at the moment, there's no command called "hello." So it can be found in one of these packages. It's not installed on my computer. Ask your administrator. But if I want there to be a program called "hello" in Bash or at my prompt, I can actually use syntax that's quite like C. It's not quite the same, but it looks pretty similar to a function, albeit missing some details. Nothing seems to happen, but now if I type "hello," you can actually write a program, not in C, not in Java, not in another programming language, but in Bash itself. 

Now the key here is that I wrote the name I wanted to give this new command, and the parentheses are also symbolic of this being a function. As an aside, you can also do fun things, and in fact, even on Mac OS, this is a program called Terminal. It comes built into anyone's computer that has a Mac in this room, and you can do similar things in Mac OS, but you can go more beyond that. And this is a little tangential, but it's kind of fun. I was reminded this morning, when thinking this through, of a little game I used to play with one of CS50's former TFs whereby any time he would walk away from his keyboard with his screen unlocked, I would execute a command like this-- "say hello." And now any time he came back to his keyboard after I cleared the screen and he would sit down, try to do some work, list the contents of his directory-- 

[AUDIO PLAYBACK] 

-Hello. Hello. 

SPEAKER 1: So, in fairness, it wasn't actually "hello." It was usually something more akin to that-- [AUDIO PLAYBACK] -Beep. SPEAKER 1: --that I would-- so his computer would swear at him any time he actually sat down at his keyboard. And very quickly he figured out not to leave his screen unlocked. But this suggests the sort of stupid fun that you can have with something like Bash. But it's a little more serious, to be sure, than that. And in fact, this is one of the most dangerous and long-lasting bugs that has really hit the world globally. This bug has been around for some 20 years, and you'll be struck in just a moment by its relative simplicity. 

So this is a representative command that if you own a Mac, literally right now when you have your lid open, you can try typing into that program called Terminal. Terminal is under Applications Utilities-- for once, Windows users don't have to worry about this particular threat-- but those of you with Macs can type this into a window like I'll do here, and if you do type that into this program called Terminal, like I'll do now, if you see the word "vulnerable," your computer is vulnerable to exploitation. 

Now what does that actually mean? And this is admittedly some pretty crazy syntax, but let's at least draw out some of the interesting aspects. So there's some syntax that looks a little familiar, at least from C and programming more generally. I see some parentheses, semicolons, curly braces, and such, but it turns out that this stupid thing here in yellow is essentially a function that does nothing. The colon means do nothing, and the semicolon means stop doing nothing. So inside of these curly braces, the fact that I have an equal sign to the left, this is essentially creating a command, or a variable, called x, and assigning it that yellow bit of code there. That could be something like "echo hello" or "say beep" or something akin to that. But notice if your eyes wander further to the right, there's more to this line than just the end of that semicolon. "Echo vulnerable," and then beyond that there's even more. Another semicolon, bash -c:. 

So long story short, this line of code is sufficient for compelling a computer that's vulnerable to doing something that you want it to do, because there's a bug in Bash whereby even though Bash was supposed to stop reading lines of command right there after the yellow text, for a 20-plus year old bug, Bash has actually been reading beyond that semicolon and pretty much doing what it is told. 

So what's the implication of that ultimately? I just said "echo hello" or "echo vulnerable," but what if you did something actually malicious, like rm -rf *, which you might not have ever typed before, and frankly you probably shouldn't too soon, because you can do a lot of damage with it. Why? rm does what, of course? Removes. * means what? All. So it's a so-called wild card, so it means delete everything in the current directory. -r happens to mean recursive, which means if what you're deleting is a directory, and inside of there is other files and other directories, recursively dive into there and delete all of that. And -f is the worst of them all. Anyone know what -f means here? Force. So force means, even if this is a bad idea, do it without prompting me for further confirmation. So, you know, we laugh at this, but frankly, I probably type this multiple times a day, because the reality is it's the fastest way to delete a whole bunch of stuff. But even I have done some damage. 

But if you were to trick a computer into defining some stupid variable or function called x, but then tricking the computer into executing beyond the boundaries of that function, beyond that semicolon, you could indeed trick a computer into executing something like rm -rf or the Email command or the Copy command. Anything literally you can do with the computer, whether it's deleting files, creating files, spamming someone, attacking some server remotely, if you can express it with a command, you can trick a computer into doing that. 

Now what's an example of how you might do this? Well, there's a lot of computers on the internet running Bash. All of us Mac users are among them. A lot of Linux servers are among them as well, and Unix servers. Windows again gets relatively off the hook unless you've installed special software. Now a lot of servers, for instance, run web servers, and in fact Linux is perhaps the most popular operating system to run on computers on the internet that are serving up web pages. Now as we'll see later in the semester, when you send a request from your browser-- Chrome, Internet Explorer, whatever-- to a remote server, it turns out that even though you just typed www.example.com, your browser is sending a message that's a little more arcane, like this. 

But notice a little something strange. The first two lines I've never seen before, but they don't look particularly threatening. But notice what I've stolen for the third line here. If a bad guy were to send a message like this from his or her computer to a vulnerable Mac or a vulnerable Linux server, the funny thing is that Bash, that simple little command prompt, is omnipresent and is often used to essentially execute the contents of a message that it receives. And by that logic, you can trick a web server, therefore, by sending something like User-Agent, which usually is supposed to say the name of your browser. User-Agent Chrome, User-Agent Internet Explorer, User-Agent Firefox, this is just your browser's way of identifying itself. But if a bad guy very cleverly says, mm-mm, I'm not going to tell you what my browser is, I'm instead going to send you this cryptic-looking thing with an rm -rf * in it, you can literally trick a vulnerable web server on the internet into executing exactly that in there for deleting all of the files. And frankly, that's not even the worst of it. You can do anything. You could start a distributed denial of service attack if you sent this message to whole bunches of web servers and then had them all descend, for instance, on Harvard.edu servers, and you can sort of bang the heck out of them by a network traffic that was otherwise triggered by this bad guy. 

So, long story short, almost everyone in this room who owns a Mac is vulnerable to this. The silver lining is that unless you're running a web server on your laptop, and unless you've actually configured it to allow something like SSH into it, you're actually safe. It's vulnerable, but there's no one trying to get into your laptop, so you can sort of rest assured. However, Apple will soon be updating a fix for this. The world of Linux has already released a number of fixes for Fedora and Ubuntu and other versions of Linux, and indeed if you run update 50 in the appliance, even that too will be updated and corrected. But that too has not really been vulnerable, because unless you've tinkered with the appliance and made your laptop publicly accessible on the internet, which is not by default, you've actually been fine because of firewalling and other techniques. 

But it's an extreme example of a bug that we've lived for for literally 20 years, and who knows if someone all this time has known about it? And in fact, this is one of the fundamental challenges that we'll see later in the semester about security, is that just like in the real world, the good guys are at the disadvantage. To keep the bad guys out, we have to make sure that every door is locked, that every window is secure, that every point of entry into a home is secure to keep the bad guys out. But what does the bad guy have to do to actually compromise your home and steal from you? He or she just has to find one unlocked door, one broken window, or something along those lines, and it's the same thing in computer security. We can write millions of lines of programming code and spend hundreds or thousands of hours trying to get it correct, but if you make just one mistake in correctness, you can put the entire system and indeed in this case, the entire internet and world at risk. 

So if you'd like to learn more about this, go to this URL here. There's no need for action tonight unless you're among those more comfortable that have been running your own web server, in which case you should, in fact, update your software. 

And this too is the title of a speech, and now a paper, that we've linked on the course's website for today. It was by a fellow named Ken Thompson, who was accepting a very famous award in computer science, and he gave this speech some years ago, essentially on this same topic. Asking folks the question, should you really trust, ultimately, the software you've been given? For instance, we all have been writing programs, and we've been compiling them with Clang. And to your knowledge, have you written any programs for CS50 where there's a back door of sorts, there's a way that a bad guy, if running your program, could take over your computer? Probably not, right? Mario, and Greedy, and Credit. These are all pretty small programs. You'd have to be pretty bad if you actually made your whole computer vulnerable after writing 10 or 20 lines of code, or at least unaware of some of the security implications. Now I say that facetiously, but we're going to see today and this week it's actually really, really easy to be bad and make even short programs vulnerable. 

But for now, at least, realize that the question being asked here is about Clang in a compiler. Why have we been trusting Clang for the past two or three weeks? Who's to say that whoever wrote Clang didn't have an "if" condition in there that essentially injected some zeros and ones into every program it compiles that would let him or her access your computer when you're asleep and your laptop lid is open and your computer is running? Right? We have this sort of honor system right now where we trust that Clang is legit. You trust that the appliance is legit. You trust that literally every program on your Mac or PC is trustworthy. And as this simple bug suggests, even if it's not malicious, that's absolutely not likely to be the case. 

So you should be scared as hell. Frankly, there's no simple solution to this other than a sort of societal awareness of the increasing complexity that we're building on top of our computer systems, and how increasingly vulnerable we might very well be. 

Now with that said, Breakout. So Breakout is problem set three, and Breakout is a game from yesteryear that you might recall, but for us in problem set three, it allows us to take things back up a notch so that when we are writing programs, even in a Terminal window like this, we can actually run, ultimately, graphical programs not unlike those we had access to in Scratch. So this is the staff's implementation of Breakout, which is just this brick-breaking game, that you move your paddle back and forth, and you hit the ball against those colored bricks up top. So this is bringing us sort of back to where we were able to be very quickly with Scratch, and now with C, implementing our own graphical user interfaces. 

But more than that, this problem set represents the first in which we're giving you a bunch of code. And in fact, I bring explicit attention to this, because especially for those less comfortable, this problem set, at least at first glance, is going to feel like we've taken it up a notch. Because we've given you, for some of the search and sorting problems in the pset, a bunch of code that we wrote, and a couple of comments that say "to do," where you have to fill in the blanks. So not too scary, but it's the first time we're handing you code that you need to first read, understand, and then add to and complete it. 

And then with Breakout, we're going to do the same, giving you a few dozen more lines of code that, frankly, give you a lot of the framework for the game but stop short of implementing the bricks and the ball and the paddle, but we do implement some other features. And even that at first glance, again, especially if less comfortable, might seem particularly daunting and you think there's so many new functions you need to wrap your mind around, and that's true. But keep in mind, it's quite like Scratch. Odds are you didn't use all of the puzzle pieces in Scratch. Odds are you didn't care to wrap your mind around all of them because all it took was a quick glance to understand, oh, that's what I can do with that puzzle piece. And indeed, in problem set 3 spec, we'll point you at the documentation that will introduce you to some new functions, and ultimately the programming constructs you use. Conditions, loops, variables, and functions will be identical to what we've seen thus far. 

So indeed, what we'll give you is some sample code that lets you create a window that looks not unlike this, and ultimately turn it into something quite like this. So take advantage of CS50, discuss office hours and more, and take comfort in the fact that the amount of code you have to write is actually not all that much. The first challenge is just to acclimate yourself to some code we've written. 

Any questions on pset3, Shellshock, or otherwise? 

AUDIENCE: It seemed like going through with Breakout that the code is almost an object-oriented style, but I thought C was an object-oriented program. SPEAKER 1: An excellent question. So in looking through the distribution code, the code we wrote for pset3, for those familiar, it looks like it's a little object-oriented. Short answer is, it is. It's an approximation of how you might do object-oriented code using a language like C, but it is still ultimately procedural. There are no methods inside of the variables, as you'll see. But it is reminiscent of that. And we'll see that feature again when we get to PHP and JavaScript toward the end the semester. But for now, think of it as a hint of what's to come. Good question. All right. So merge sort was how we left things last time. And merge sort was cool in the sense that it was so much faster, at least based on the cursory tests we did last week, than, say, bubble sort, selection sort, insertion sort. And what was neat too is just how succinctly and cleanly you can express it. And what did we say it was an upper bound on the running time of merge sort? Yeah? 

AUDIENCE: n log n? 

SPEAKER 1: n log n, right. n log n. And we'll come back to what that really means or where that comes from, but this was better than what running time that we saw for bubble selection and insertion sort? So n squared. n squared is bigger than this, and even if it's not quite obvious, know that log n is smaller than n, so if you do n times something smaller than n, it's going to be less than n squared. It's a bit of intuition there. But we paid a price for this. It was faster, but a theme that started to emerge last week was this tradeoff. I got better performance time wise, but what did I have to spend on the other hand, in order to achieve that? 

AUDIENCE: Memory. SPEAKER 1: Say again? AUDIENCE: Memory. SPEAKER 1: Memory, or space more generally. And it wasn't super obvious with our humans, but recall that our volunteers were stepping forward and stepping back as though there's an array here, and as though there's a second array here that they could use, because we needed someplace to merge those folks. We couldn't just swap them in place. So merge sort leverage is more space, which we didn't need with the other algorithms, but the upside is that it's much faster. And frankly, in the real world space these days-- RAM, hard disk space-- is relatively cheap, and so that's not necessarily a bad thing. 

So let's take a quick look, a little more methodically, at what we did and why we said it was n log n. So here are the eight numbers and the eight volunteers we had last time. And the first thing that Merge Sort told us to do was what? AUDIENCE: Divide in two. SPEAKER 1: Say again? AUDIENCE: Divide in two. SPEAKER 1: Divide in two, right. This is very reminiscent of the phone book, of divide and conquer more generally. So we looked at the left half. And then once we said, sort the left half of the elements, what did we next say? Sort the left half of the left half, which allowed us to, after dividing in two, focus on four and two. 

How do you sort a list now, in yellow, of size two, using Merge Sort? Well divide it in half, and sort the left half. And this was where things got a little stupid briefly. How do you sort a list that's of size one, like this number four here? It's sorted. You're done. 

But then how do you sort a list of size one when it's the number two? Well, same thing, but now what was the third and the key step in Merge Sort? You had to merge the left half and the right half. And once we did that, we looked at four, we looked at two. We decided all right, obviously two comes first, so we put two in its place, followed by four. And now you have to kind of rewind, and this is sort of characteristic of an algorithm like Merge Sort, rewind in memory. What was the next line of the story? What should I be focusing on next? The right half of the left half, Which is six and eight. 

So let me just step through this without belaboring the point too much. Six and eight, then six is sorted, eight is sorted. Merge them together like that, and now the next big step is, of course, sort the right half from the very first step of this algorithm. So we focus on one, three, seven, five. We then focus on the left half. The left half of that, the right half of that, and then merge in one and three. Then the right half, then left half of it, then the right half of it. Merge it in, and now what step remains? Merge the big left half and the big right half, so one goes down there, then two, then three, then four, then five, then six, then seven, then eight. 

So now why is this ultimately revealing, especially if n and logarithms more generally rather escape you, at least in recent memory? Well, notice the height of this thing. We had eight elements, and we divided it by two, by two, by two. So log base two of eight gives us three. And trust me on that if a little hazy on that. But log base two of eight is three, so we've done three layers of merging. And when we merged elements, how many elements did we look at on each of those rows? A total of n, right? Because to merge the top row, even though we did it piecemeal, we ultimately touched every number once. And in the second row, to merge those lists of size two, we had to touch each element once. And then here really clearly in the last row, we had to touch each of those elements once, but only once, so herein lies, then, our n log n. 

And now just to make things a little more formal for just a moment, if you were to now analyze this at a sort of higher level and try to decide, well how might you go about expressing the running time of this algorithm just by looking at it and not by using a contrived example? Well, how much time would you say a step like this in yellow would take, if n<2 return? That's a big O of what? So I'm seeing one, so one step, maybe two steps because it's if and then return, but it's constant time, right? So we said O(1), and that's how I'll express this. T, just be running time. n is the size of the input, so T(n), just a fancy way of saying the running time given input of size n is going to be on the order of constant time, in O(1). 

But otherwise, what about this? How would you express the running time of this yellow line? T of what? You can kind of cheat here and answer my question cyclically. So if the running time in general we just say is T(n). And now you're kind of punting here and saying, well, just sort the left half, and then sort the right half. How might we symbolically represent the running time of this yellow line? T of what? What's the size of the input? n over two. Why don't I just say that? And then this is another T(n/2) and then again, if I merge two sorted halves, how many elements am I going to have to touch total? n. So I can express this, just to be kind of fancy, as the running time in general. T(n) is just the running time of T(n/2), plus T(n/2), left half and right half, plus O(n), which is probably n steps, but maybe, if I'm using two fingers, it's twice as many steps, but it's linear. It's some number of steps that's a factor of n, so we might express this as this. And this is where now we'll punt to the back of our high school math textbook we're that recurrence ultimately ends up equaling this, n times log n, if you actually do out the math more formally. 

So that's just two perspectives. One numerically with a hard-coded representative example using eight numbers, and a more general look at how we got there. But what's really interesting here is, again, this notion of cycling. I'm not using for loops. I'm kind of defining something in terms of itself, not only with this mathematical function, but also in terms of this pseudo code. This pseudo code is recursive in that two of its lines is essentially telling it to go use itself to solve a smaller problem of smaller size, and then again and again and again until we whittle it down to this so-called base case. 

So let's actually draw a more compelling take-away from this as follows. Let me go into gedit and take a look at some of today's source code, in particular this example here. Sigma 0, which apparently adds the numbers one through n. So let's see what's familiar and unfamiliar here. First we have a couple of includes, so nothing new there. Prototype. I'm a little hazy on this after few days, but what did we say a prototype of a function is? AUDIENCE: [INAUDIBLE]. SPEAKER 1: What's that? AUDIENCE: We announce it. SPEAKER 1: We announce it. So you are teaching Clang, hey, not actually implementing this yet, but somewhere in this file, presumably, is going to be a function called what? Sigma. And this is just a promise that it's going to look like this. It's going to take an integer as input-- and I can be more explicit and say int n --and it's going to return an int, but semicolon means, mm, I'll get around to implementing this a little later. Again, Clang is dumb. It's only going to know what you tell it top to bottom, so we need to at least give it a hint of what's to come. 

Now let's look at main here. Let's scroll down here and see what main is doing. It's not that long of a function, and in fact the construct here is familiar. I declare a variable n, and then I pester the user again and again for a positive integer using getInt, and only exit out of this loop once the user has complied. Do While, we've used to pester the user in that way. Now this is interesting. I declare an int called "answer." I assign it the return value of a function called "sigma." I don't know what that does yet, but I remember declaring it a moment ago. And then I'm passing in the value that the user typed in, n, and then I report the answer. Well let's scroll back for just a moment. Let's go ahead into this directory, make sigma 0, and actually run this program and see what happens. So if I go ahead and run this program, ./sigma-0, and I type in a positive integer like two, Sigma, as the Greek symbol implies, is just going to add up all the numbers from zero on up to two. So 0 plus 1 plus 2. So this should hopefully give me 3. That's all it's doing. And similarly, if I run this again and I give it the number three, that's 3 plus 2, so that's 5, plus 1 should give me 6. And then if I get really crazy and start typing in bigger numbers, it should give me bigger and bigger sums. So that's all. 

So what does sigma look like? Well, it's pretty straightforward. It's how we might have implemented this for the past couple of weeks. "int" is going to be the return type. Sigma is the name, and it takes a variable m instead of n. I'll change that up top. Then this is just a sanity check. We'll see why in a moment. Now I declare another variable, sum, initialize it to zero. Then I have this For loop iterating, apparently for clarity, from i=1 on up to an =m, which is whatever the user typed in, and then I increment the sum like this. And then return the sum. 

So a couple of questions. One, I claim in my comment that this avoids risk of an infinite loop. Why would passing in a negative number induce, potentially, an infinite loop? 

AUDIENCE: You'll never reach m. 

SPEAKER 1: Never reach m. But m is passed in, so let's consider a simple example. If m is passed in by the user as negative one. Irrespective of main. Main protects us from this too, so I'm just being really anal with sigma to also make sure that the input can't be negative. So if m is negative, something like negative one. What's going to happen? Well, i is going to get initialized to one, and then i is going to be less than or equal to m? 

Stand by. That was-- let's not, let's nix this story. I didn't ask that question, because the risk that I am alluding to is not going to happen because i is always going be greater than-- OK, I retract that question. OK. Let's focus only on this part here. Why did I declare some outside of the loop? Notice on line 49 I've declared i inside of the loop, but online 48 I've declared some outside. Yeah. AUDIENCE: [INAUDIBLE]. SPEAKER 1: Sure. So first and foremost I certainly don't want to declare and initialize sum to zero inside of the loop on every iteration, because this would clearly defeat the purpose of summing up the numbers. I would keep changing the value back to zero. And also, what's another more arcane reason for that same design decision? Yeah. 

AUDIENCE: [INAUDIBLE]. SPEAKER 1: Exactly. I want to access it outside of the loop too on what line? On 53. And based on our rule of thumb from a couple of lectures ago, variables are scoped, really, to the curly braces that encompass them. So if I don't declare sum inside of these outer curly braces, I can't use it in line 53. Put another way, if I declared sum in here, or even within the For loop, I could not access it in 53. The variable would effectively be gone. So a couple of reasons there. But now let's go back and see what happens. So sigma gets called. It adds up 1 plus 2, or 1 plus 2 plus 3, and then returns the value, stores it in answer, and printf here is why I'm seeing on the screen. So this is what we'll call an iterative approach, where iteration just means using a loop. A For loop, a While loop, a Do While loop, just doing something again and again and again. 

But sigma is kind of a neat function in that I could implement it differently. What about this, which just to be kind of cool, let me really get rid of a lot of distraction because this function is really quite simple. Let's whittle it down just to its four core lines and get rid of all the comments and curly braces. This is kind of a mind-blowing alternative implementation. All right, maybe not mind-blowing, but it's kind of sexier, all right, to look at this so much more succinctly. With just four lines of code, I first have this sanity check. If m is less than or equal to zero, sigma makes no sense. It's only supposed to be in this case for positive numbers, so I'm just going to return zero arbitrarily so that we at least have some so-called base case. 

But here's the beauty. The entirety of this idea, adding the numbers from 1 to n, or m in this case, can be done by kind of passing the buck. Well, what is the sum of 1 to m? Well, you know what? It's the same as the sum of m plus the sum of 1 to m minus 1. Well you know what? What's sigma of m minus 1? Well, if you kind of follow this logically, it's the same as m minus 1 plus sigma of m minus 2. So you can kind of just-- this is like, if you're just trying to annoy a friend and they ask you a question, you kind of respond with a question, you can kind of keep passing the buck. But what's key is that if you keep making the question smaller and smaller and smaller, you're not asking what's sigma of n, what's sigma of n, what's sigma of n? You're asking what's sigma of n, what's sigma of n minus 1, what's sigma of n minus 2? Eventually your question is going to become what? What is sigma of one or zero, some very small value, and as soon as you get that, your friend, you are not going to ask the same question again, you're just going to say, oh it's zero. We're done playing this sort of stupid cyclical game. 

So recursion is the act in programming of a function calling itself. This program, when compiled and run, is going to behave exactly the same way, but what's key is that inside of a function called sigma, there is a line of code wherein we're calling ourselves, which would normally be bad. For instance, what if I first compiled this, so make sigma-- make sigma 1 ./sigma-1. Positive integer, please, 50 1275. So what the function seems to be, based on one test, correct. But what if I get a little dangerous and delete the so-called base case, and just say, well I'm just making this more complicated than it is. Let's just compute the sigma by taking m and then adding in sigma of m minus one? Well, what's going to happen here? Let's zoom out. Let's recompile the program, save it, recompile the program, and then ready ./sigma-1 zooming in, enter positive integer please, 50. How many of you are willing to fess up to seeing that? 

OK. So this can happen for a number of reasons, and frankly this week we're about to give you more of them. But in this case, try to reason backwards what might have happened here? Segmentation fault, we said last time, refers to a segment of memory. Something bad happened. But what was it mechanically that went awry here because of my removal of that so-called base case, where I returned a hard-coded value? What do you think went wrong? Yeah. 

AUDIENCE: [INAUDIBLE]. SPEAKER 1: Ah. Good question. So the size of the number that I was summing up got so big that it exceeded the size of the memory space. Good idea, but not fundamentally going to cause a crash. That might cause integer overflow, where the bits just flip over and then we mistake a really big number for like a negative number, but that itself won't cause a crash. Because at the end of the day an int is still 32 bits. You're not going to accidentally steal a 33rd bit. But a good thought. Yeah. 

AUDIENCE: [INAUDIBLE]. SPEAKER 1: The method never stops running, and indeed it calls itself again and again and again and again and again, and none of those functions ever finish because their sole line of code calls themself again and again and again. And what's really happening here, and now we can kind of draw this pictorially. Let me go over to a picture for just a moment. This is a picture, that will eventually flesh out in more detail, of what's going on inside of your computer's memory. And it turns out that on the bottom of this picture is something called the stack. This is a chunk of memory, a chunk of RAM, that's just used any time a function is called. Any time you, a programmer, call a function, the operating system, like Mac OS, Windows, or Linux, grabs a bunch of bytes, maybe a few kilobytes, maybe few megabytes of memory, hands them to you, and then lets you run your function using whatever variables you need. And if you then call another function and another function, you get another slice of memory and another slice of memory. 

And indeed, if these green trays from Annenberg represent that memory, here's what happens the first time you call function sigma. It's like putting a tray like this on what's initially an empty stack. But then if that tray calls itself, so to speak, calling another instance of sigma, that's like asking the operating system, ooh, need a little more memory, give me that. And then it gets piled on on top. But what's key here is that the first tray is still there, because he invoked this second tray. Now meanwhile, sigma call sigma, that's like asking for more memory. Gets piled on over here. sigma call sigma, that's another tray that gets piled on here. And if you keep doing this, eventually, kind of map this visual to that chart, what's going to happen with the stack of trays? It is going to exceed the amount of memory your computer has. And as soon as this green tray exceeds the horizontal line above stack and above that word heap, which we'll come back to in the future, that is a bad thing. The heap is a different segment of memory, and if you let these trays pile and pile on, you're going to exceed your own segment of memory, and a program is indeed going to crash. 

Now as an aside, this idea of recursion, therefore, can clearly lead to problems, but it's not necessarily a bad thing. Because consider, after all, how-- and maybe this takes some getting used to --how elegant or how simple that implementation of sigma was. And we're not going to use recursion all that much in CS50, but in CS51, and really any class where you manipulate data structures like trees, or family trees, that have some hierarchy, it's super, super useful. Now, as an aside, so that you as aspiring computer scientists are familiar with some of Google's inside jokes, if you go to Google and you look up what is the definition of, say, recursion, enter. Uh-huh. As an aside, I pulled up a few. This was like 10 minutes of procrastination this morning. If you also Google "askew," notice by tilting your head slightly-- and then this one is perhaps most atrocious of all since someone spent like their day implementing this some years ago-- come on. Oh, wait-- that's a bug. 

So running on one of the world's biggest websites are these stupid little Easter eggs. They probably consume a nontrivial number of lines of code just so that we can have little fun things like that. But at least now you get some of those inside jokes. 

Now let's take a look at some of the white lies we've been telling of late, and start to peel back some layers technically so that you really understand what's been going on and you can understand some of the threats, like Shellshock, that have now started to become on the forefront of everyone's attention, at least in the media. So here is a very simple function that returns nothing, void. Its name is swap. It takes in two variables and it returns nothing. Takes in a and b . So a quick demonstration. We brought these up. We might as well take a little break here for just a moment and have a little something to drink. If someone wouldn't mind joining me up here for just a moment. How about you in the maroon shirt? Come on up. Just the one today. Thank you, though. All right, and we have coming up who here? What's your name? 

SPEAKER 4: Laura. 

SPEAKER 1: Laura. Come on up. So Laura, very simple challenge today. Nice to meet yo. All right. So we have some milk over here and we have some orange juice over here and some cups that we borrowed from Annenberg today. 

SPEAKER 4: Borrowed. SPEAKER 1: And going to go ahead and give you half a glass of this. All right. And we'll give you half a glass of the milk. Oh, and just so that you can remember what this was like, I remembered to bring this up and on today. Okay. If you wouldn't mind, let's see, we can put them over your own glasses if you want. This'll be the world from Laura's eyes. All right. So your goal, given two cups of liquid here, milk and orange juice, is swap the two contents so that the orange juice goes into the milk cup and the milk goes into the orange juice cup. 

SPEAKER 4: Do I get another cup? SPEAKER 1: I'm so glad you asked, though it would have been much better footage if you hadn't asked. But yes, we can offer you a third cup that's empty, of course. All right. So swap the contents there. Very nice. Very good. You're doing this remarkably carefully. And step three. All right. Excellent. A big round of applause would be good for Laura. All right. We have a little parting gift for you, but let me take these. Thank you so much. So a simple example, though, to demonstrate that if you do want to swap the contents of two containers, or let's call them variables, you need some temporary storage to stage one of the contents in so that you can actually do the swap. So indeed, this source code up here in C is representative of exactly that. If the orange juice was a and the milk was b, and we wanted to swap the two, you could try something creative by pouring one into the other, but that probably wouldn't end particularly well. And so we use a third cup, call it tmp, T-M-P by convention, and put the contents of the OJ in that, then swap one cup, then put the OJ into the original cup, thereby achieving, exactly as Laura did, the swap. 

So let's do exactly that. Let me go ahead and open up an example that's actually called "no swap," because this is not as simply done as you might think. So in this program, notice that I'm using stdio.h, our old friend. I have the prototype for swap up there, which means its implementation's probably down below, and let's see what this main program's going to do for me. I first declare int x gets one, and int y gets two. So think of those as OJ and milk, respectively. And then I just have a printf saying x is this and y is this, just so I can visually see what's going on. Then I have printf claiming that I'm swapping the two, and then I print out a claim that they're swapped, and I print out x and y again. So down here in swap is exactly what Laura did, and exactly what we saw on the screen a moment ago. 

So let's go ahead and be sorely disappointed. Make no swap, and run no swap, zooming in on the output here. Enter x is 1, y is 2, swapping swapped. x is still 1, and y is still 2. So even though, frankly, this looks exactly like, albeit more technically, what Laura did, didn't seem to work. So why is that? Well, it turns out that when we write a program like this that has both main, highlighted here, and then another function, like swap, highlighted here, which it calls, the world looks a little something like these trays a moment ago. When main first gets called, that's like asking operating system for a bit of memory for any local variables like x and y that main has, and they end up right there. But if main calls swap, and main passes to swap two arguments, a and b, orange juice and milk, it's not like handing the orange juice and the milk to Laura. What a computer does, is it passes copies of the orange juice and copies of the milk to Laura, so that what's ultimately inside of this tray is the value one and two, or OJ and milk, but copies thereof, so that at this point in the story, there is OJ and milk in each of these trays. There's a one and a two in each of these trays, and the swap function is indeed working. It's swapping them inside of the second topmost tray, but that swapping has no impact. And based on just some basic principle we've talked about before, and indeed just a few minutes ago, what might explain why changing a and b inside of swap has no effect on x and y, even though I passed x and y to the swap function. What's the key word here that might simplistically explain? I think I heard it here? AUDIENCE: Return. SPEAKER 1: Return? Not return. Let's go with one other. What's that? 

AUDIENCE: [INAUDIBLE]. 

SPEAKER 1: OK, so return-- we could make return work in the story, but there's an even simpler explanation. AUDIENCE: Scope. SPEAKER 1: Scope. I'll take scope. So scope, remember where our x and y declared. They're declared inside of main right up here. a and b, meanwhile, are effectively declared inside of swap, not quite in the curly braces but still in the general area of swap. And so indeed, a and b only exist within this tray from Annenberg, this second chunk of code. So we're indeed changing the copy, but that's not really all that helpful. 

So let's take a look at this a little lower level. I'm going to go back into the Source Directory, and I'm going to first zoom in here, and just to confirm that I'm in this bigger terminal window, the program's still behaving like that. Suppose now that this is not intentional. Clearly I wanted swap to work, so it feels like a bug. Now I could start adding a lot of printf's to my code, printing out x over here, y over here, a over here, b over here. But frankly, that's probably what you've been doing for a couple of weeks now, in office hours and at home when working on psets trying to find some bugs. But you'll see, if you haven't already, that problem set three introduces you to a command called GDB, where GDB, GNU debugger, has itself a whole bunch of features that can actually let us understand situations like this, but more compellingly, solve problems and find bugs. So I'm going to do this. Instead of ./noswap, I'm instead going to run GDB ./noswap. In other words, I'm going to run my program not in Bash, our new friend today. I'm going to run my program noswap inside of this other program called GDB, which is a debugger, which is a program that's designed to help you humans find and remove bugs. So if I hit Run here, there's an atrocious amount of text that you really never have to read. It's essentially a distraction from the prompt, which I'm going to hit Control-L to get up at the top there. This is the GDB prompt. If I want to run this program now, as this little cheat sheet on today's slide suggests, Run is the first commands that we meant to introduce. And I'm just going to type run up here inside of GDB, and indeed it ran my program. Now there's some additional outputs of the screen like this, but that's GDB just being anal and telling us what's going on. You don't really have to worry about these details right now. But what's really cool about GDB, if I do this again-- Control-L clears the screen-- let me go ahead and type "break main," thereby, when I hit Enter, setting what's called a break point at noswap.c, line 16, which is where GDB figured out my program actually is, my function actually is. This we'll ignore for now but that's the address in memory specifically of this function. So now when I type run, notice what's cool here. My program breaks at the line I told GDB to pause execution at. So I don't have to now change my code, add some printf's, recompile it, rerun it, change, add some printf's, save it, recompile it, run it. I can just walk through my program step by step by step at human speed, not at Intel-inside kind of speed. 

So now notice this line appears here, and if I go back to my program in gedit, notice that that is actually the very first line of code. There's line 16 in gedit. There's line 16 within GDB, and even though this black and white interface isn't nearly as user friendly, this means that line 16 hasn't been executed yet, but it's about to be. So indeed if I type print x, not printf, just print x, I get some bogus value there of zero, because x hasn't been initialized yet. So I'm going to type next, or, if you want to be fancy, just n for next. But when I type next enter, now notice it moves on to line 17. So logically, if I've executed line 16 and I now type print x, what should I see? One. 

And now this is admittedly confusing. $2 is just a fancy way of, if you want to refer to that value later, you can say "dollar sign two." It's like a back reference. But for now, just ignore it. What's interesting is what's on the right of the equal sign. And now if I type next again and print y, I should see 2. I can also now print x again, and frankly, if I'm getting a little confused as to where I am, I can type list for list and just see some context around the point I'm actually at. And now I can type next, and there x is 1. Now I type next. Oh, y is 2. And again, it is confusing, because GDB's output is being commingled with my own output. But if you keep in mind, by glancing back and forth at your code or laying it out side by side perhaps, you'll see that really I'm just stepping through my program. 

But notice what happens next, literally. Here's line 22. Let me go over it, thereby moving on to 23, and if I print x now, still one. And if I print y now, still one. So this is not a useful exercise. So let's redo this. Let me go back up to the top and type run again. And it's saying the program that's being debugged has started already, started from the beginning. Yes, let's do this again. And this time let's do next, next, next, next, next, but now things get interesting. Now I want to step into swap, so I don't type next. I type step, and now notice it has jumped me to noswap.c line 33. If I go back to gedit, what's line 33? That's the first actual line of code inside of swap. Which is nice, because now I can kind of poke around and get curious as to what's going on truly in there. Let me print tmp. Whoa. Why does tmp have some crazy, bogus garbage value? AUDIENCE: It hasn't been initialized. SPEAKER 1: It hasn't been initialized. And indeed, when you run a program, you're given a whole bunch of memory by the operating system, but you haven't initialized any values, so whatever bits you're seeing here, even though it's this crazy big negative number, just means that those are the remnants from some previous usage of that RAM, even though I haven't myself needed it yet. So now I'm going to go ahead and type next, and if I now type print tmp, what should I see? Whatever the value of a was, a is the first argument, just like x was the first thing being passed in, so a and x should be the same, so print tmp should print me one. 

So what you'll see in problem set three is a tutorial of sorts on GDB, but realize that this is the beginning of a look at a tool that will actually help you solve problems so much more effectively. What we're ultimately going to do on Wednesday is start to peel back a few layers and remove some training wheels. That thing called string that we've used for some time, we're going to slowly take that away from you and start talking about something more esoterically known as char*, but we're going to do this nice and gently at first, even though pointers, as they're called, can do some very bad things if abused, by looking at a little claymation from our friend Nick Parlante from Stanford University, a professor in computer science who put together this preview of what's to come this Wednesday. 

[VIDEO PLAYBACK] -Hey, Binky. Wake up. It's time for pointer fun. 

-What's that? Learn about pointers? Oh, goody! [END VIDEO PLAYBACK] SPEAKER 1: That awaits you on Wednesday. We'll see you then. [VIDEO PLAYBACK] -And now, Deep Thoughts, by Daven Farnham. 

-Why are we learning C? Why not A+? 

[LAUGHTER] 

[END VIDEO PLAYBACK] [MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50, and this is the end of Week Four. And one of the topics today is that of digital forensics, the art of recovering information. And indeed, even though you're in the midst right now of Peace at Three and Breakout, next week, the focus will be on precisely this domain. 

So one of the coolest jobs I ever had was back in graduate school, when I was working for the local Middlesex County District Attorney's office, doing forensics work. So essentially, the Massachusetts State Police, on occasion, when working on cases would bring in things like hard drives and floppy disks and memory cards and the like. And they would hand them to me and my mentor, and our goal was to find evidence, if there was any, on these media. Now, you might have seen glimpses of this world of forensics in the media, TV and movies. But the job I had, and daresay that world, is not quite like you would see it. Let's take a look at what you've probably seen. [VIDEO PLAYBACK] -OK. Now, let's get a good look at you. 

[MUSIC PLAYING] 

-Hold it. Run that back. 

-Wait a minute. Go right. -There. Freeze that. -Full-screen. 

-OK. Freeze that. -Tighten up on that, will you? 

-Vector in on that guy by the back wheel. 

-Zoom in right here on this spot. 

-With the right equipment, the image can be enlarged and sharpened. 

-What's that? 

-It's an enhancement program. 

-Can you clear that up any? 

-I don't know. Let's enhance it. 

-Enhance Section A6. I enhanced the detail, and-- -I think there's enough to enhance. Release it to my screen. 

-I enhanced the reflection in her eye. -Let's run this through video enhancement. 

-Edgar, can you enhance this? 

-Hang on. 

-I've been working on this reflection. 

-There's someone's reflection. 

-Reflection. -There's a reflection of the man's face. 

-The reflection! -There's a reflection. -Zoom in on the mirror. You can see a reflection. 

-Can you enhance the image from here? -Can you enhance it? -Can you enhance it? -Can we enhance this? -Can you enhance it? -Hold on a second. I'll enhance. -Zoom in on the door. -Times 10. -Zoom. -Move in. -More. -Wait, stop. -Stop. -Pause it. -Rotate us 75 degrees around the vertical, please. 

-Stop. Go back to the part about the door again. 

-Got an image enhancer that can bitmap? 

-Maybe we can use the Pradeep Singh method to see into the windows. 

-The software is state of the art. 

-The eigenvalue is off. 

-With the right combination of algorithms-- 

-He's taken illumination algorithms to the next level, and I can use them to enhance this photograph. 

-Lock on and enlarge the z-axis. 

-Enhance. Enhance. -Enhance. -Freeze and enhance. [END VIDEO PLAYBACK] DAVID J. MALAN: So those are all words, but they were not used in sentences correctly. And indeed in the future, any time, please, you hear someone say the word, "enhance," chuckle just a little bit. Because when you try to enhance, for instance, this is what happens. 

So here's a gorgeous photo. This is CS50's own Daven. And suppose that we wanted to focus in on the twinkle in his eye, or the reflection of the bad guy that was clearly captured by the security camera. This is what happens when you zoom in on an image that has only a finite number of bits associated with it. 

That is what you would get. And indeed, in Daven's eye is but four, maybe six pixels that compose exactly what was glimmering there. So Problem Set Four will ultimately have you explore this world, particularly by nature of something we call file i/o, where i/o is just a fancy way of saying input and output. 

So thus far, all of the interactions we've had with a computer have been largely with your keyboard and the screen, but not so much with the hard disk, or saving of files beyond the ones you yourself write. Your programs thus far have not been creating, and saving, and updating their own files. 

Well, what's a file? Well, something like a JPEG. This is an image you might have or upload to Facebook, or see anywhere on the web. Indeed, that photo we just saw of Daven was a JPEG. And what's interesting about files like JPEGs is that they can be identified, typically, by certain patterns of bits. 

In other words, what is it that distinguishes a JPEG from a GIF from a PING from a Word document from an Excel file? Well, it's just different patterns of bits. And those different patterns are usually at the start of those files. 

So that when your computer opens a Word doc, or when a computer opens a JPEG, it looks typically at the first several bits in the file. And if it recognizes a pattern, it says, oh, this is an image. Let me display it to the user as a graphic. Or, oh, this looks like a Word doc. Let me show it to the user as an essay. 

So for instance, JPEGs, it turns out, are fairly sophisticated underneath the hood. But the first three bytes in most every JPEG start with these three numbers. So byte zero, one, and two are, in most every JPEG, 255, then the number 216, then the number 255. 

And what you'll be able to start doing next week is actually poking underneath the hood of files like JPEGs and like bitmap files, and seeing what's always been there for as long as you've been using a computer. 

But what's there is not typically written like decimal numbers like this. Computer scientists don't tend to speak in decimal. They don't really speak in binary. Typically, when we want to express numbers, we actually use hexadecimal, which you may recall from, say, Problem Set One, which challenged you to think about a different system. 

We, of course, are familiar with decimal, zero through nine. We talked about binary. And we don't really have to use that much here on out, because computers will use that. But programmers will very often, but not always, use hexadecimal, which just means you have 16 letters in your alphabet, as opposed to two or 10. 

So how do you count to higher than nine in hexadecimal? You go 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f, just by convention. But what's key is that each of these is a single symbol. There is no 10. There is no 11, per se, because each of your digits, just like in decimal and just like in binary, should just be a single character, by convention. 

So that then is the alphabet we have at our disposal for hexadecimal. So what does a JPEG look like if you were to write out those first three bytes not as decimal but, for instance, as hexadecimal? And why is hex even all that useful? 

Well, a quick look at an example. So if I write out the bits that represent these decimal numbers-- this might be a little rusty now from a few weeks back, but the left one and the right one are pretty easy. 255 was the biggest number we could represent with eight bits. It was all ones. So the only one that's mildly interesting is the middle one. And if you kind of do out the math, you will deduce that, indeed, that pattern of one and zeros represents 216. So let's just stipulate for now that these are correct. But why is this interesting? 

Well, a byte, of course, is eight bits. And it turns out that if you think of a byte as two chunks of four bits, like this. Let me just add some space. So before, after. I've just added some white space for visualization's sake here. How might we now represent in, say, hexadecimal each quad of bits, each set of four bits? 

So for instance, on the left now, we have 1111 in binary. What is that number in decimal, if you do out the math? You have the ones place, the twos place, the fours place, and the eights place. 

AUDIENCE: 15. DAVID J. MALAN: It's 15. So if we do eight plus four plus two plus one, we get 15. So I could write down 15 below 1111, but the whole point here is hexadecimal, not decimal. So instead of writing down 15, 1-5, I'm going to write that in hex, which if you think back, if you have zero through f, what is 15 going to be? AUDIENCE: f. DAVID J. MALAN: So it turns out it's f. And you can work that out by saying, well, if a is 10, then OK, f is 15. So indeed, we could rewrite this same set of numbers as f f. And then if we do a bit of math, we'll deduce that that's d. Eight is pretty easy, because we have a one in the eights place. And then, we have a couple more f f's. 

So what humans tend to do by convention when they use hexadecimal is they just write this a little more succinctly, get rid of most of that white space. And just to be super clear to readers that this is hexadecimal, the simple convention among humans is you write zero x, which has no meaning other than a visual identifier of, here comes a hex number. 

And then, you put the two digits, f f in this case, then d a, then f f. So long story short, hexadecimal just tends to be useful because each of its digits, zero through f, perfectly lines up with a pattern of four bits. 

So if you have two hexadecimal digits, zero through F, again and again, that gives you perfectly eight bits or one byte. So that's why it tends to be conventionally useful. There's no intellectual content really beyond that, other than its actual utility. 

Now JPEGs aren't the only file formats for graphics. You might recall that there are files like this in the world, at least from a few years back. 

So this was actually installed in Windows XP on millions of PCs around the world. And this was a bitmap file, BMP. And a bitmap file, as you'll see next week, just means a pattern of dots, pixels as they're called, a map on bits, really. 

So what's interesting, though, about this file format, BMP, is that underneath the hood, it has more than just three bytes that compose its header, so to speak, the first few bites. It actually looks a little complicated at first glance. And you'll see this in the P set. And getting something particular out of this now isn't so important, as just the fact that at the beginning of every bitmap file, a graphical format, there's a whole bunch of numbers. 

Now Microsoft, the author of this format, tends to call those things not ints and chars and floats but words and d words and longs and bytes. So they're just different data types. They're different names for the same thing. But you'll see that in P Set Four. 

But this is only to say that if a human double-clicks some .BMP file on his or her hard drive, and a window opens up showing him or her that image, that happened because the operating system presumably noticed not only the .BMP file extension in the file name, but also the fact that there's some convention to the pattern of bits at the very beginning of that bitmap file. 

But let's now focus on such a complicated file, but instead on something like this. Suppose here in GEdit, I just have the beginnings of a program that's pretty simple. I've got some includes up top. Now I've got #include "structs.h" but I'll come back to that in a moment. But this is useful for now. So this is a program that's going to implement like the registrar's database. So a database of students, and every student in the world has a name and a house and probably some other stuff, but we'll keep it simple. Every student has a name and a house. 

So if I wanted to write a program whose purpose in life was just to iterate from zero on up to three, if there's three students at Harvard University. And I just want to get, using GetString, each student's name and house, and then just print those out. 

This is sort of like Week One, Week Two stuff now, where I just want a for loop or something like that. And I want to call GetString a few times, and then print f a few times. So how might I do this, though, when both a name and a house are involved for each student? 

So my first instinct might be to do something like this. I might first say, well, give me, say, an array of strings called names. And I don't want a hardcode three here. What do I want to put there? So STUDENTS, because that's just a constant declared at the top, just so I don't have to hardcode three in multiple places. This way, I can change it one place, and it affects a change everywhere. And then, I might do string houses STUDENTS. 

And now, I might do something like for (int i = 0; i < STUDENTS; i++. So I'm typing fast, but this is probably familiar syntax now. 

And now, this was more recent. If I want to put in the i-th student's name, I think I do this. And then, not names but houses bracket i. I do this, GetString, and let me go back and fix this line. Agree? Disagree? It's not very user-friendly. I haven't told the user what to do. 

But now, if I also wanted to later, let's say, print these things out-- so TODO later. I'm going to do more with this-- this arguably is a correct implementation of getting names and houses, three of them total of each, from a user. 

But this is not very good design, right? What if a student has not just a name and a house, but also an ID number, and a telephone number, and an email address, and maybe a home page, and maybe a Twitter handle, and any number of other details associated with a student or a person, more generally. How would we begin to add functionality to this program? 

Well, I feel like the simplest way might be to do something like, let's say, int ids STUDENTS. So I can put all their IDs in there. And then, for something like phone numbers, I'm not sure how to represent that just yet. So let's go ahead and just call this twitters STUDENTS, which is a little strange, but-- and a bunch more fields. 

I've started to effectively copy and paste here. And this is going to grow pretty unwieldy pretty quickly, right? Wouldn't it be nice if there were in the world a data structure known not as an int or a string, but something higher level, an abstraction, so to speak, known as a student? C did not come with built-in functionality for students, but what if I wanted to give it such? 

Well, it turns out, I'm going to open a file called structs.h here, and you can do exactly that. And we're going to start doing this now. And underneath the hood of P Set Three, you've already been doing this now. There is no such thing as a g rect or a g oval in the programming language C. 

Folks at Stanford implemented those data types by using this approach here, declaring their own new data types using a new keyword called struct and another one called typedef. And indeed, even though the syntax looks a little different from stuff we've seen before, in principle, it's super simple. 

This just means "define a type." That's going to be a structure, and a structure is just like a container for multiple things. And that structure is going to have a string called name, and a string called house. And let's call, just for convenience, this whole data structure student. 

So the moment you get to the semicolon, you have now created your own data type called student that now stands alongside int, and float, and char, and string, and g rect, and g oval, and any number of other things people have invented. 

So what's useful about this now is that if I go back to struct 0 and finish this implementation, which I wrote in advance here, notice that all of the inevitable messiness that was about to start happening as I added phone numbers and twitters and all these other things to a student's definition, now it's succinctly wrapped up as just one array of students. 

And each of those students now has multiple things inside of it. So that just leaves one question. How do you get at the name, and the house, and the ID, and whatever else is inside of the student? Super simple, as well. New syntax, but a simple idea. 

You simply index into the array, as we did last week and this. And what's clearly the new piece of syntax? Just ., which means "go inside the structure and get the field called name, get the field called house, get the field called student." 

So in P Set Three, if you're still working on that, and most folks still are, realize that as you start using things like g rects and g ovals and other things that don't seem to come from Week Zero, One, or Two, realize that that's because Stanford declared some new data types. 

And indeed, that's exactly what we'll do, as well, in P Set Four, when we start to deal with things like images, bitmaps, and more. So that's just a teaser and a mental model for what is to come. Now, I procrastinated a bit this morning. I was kind of curious to see what the Microsoft wallpaper actually looks like today. And it turns out someone in 2006 actually went to almost precisely the same spot to photograph in reality what looks like that these days. The field is now a little overgrown. 

So speaking now of images, let's bring back Daven here on the screen and Nicholas, and just remind you that if you'd like to join us for lunch this Friday, head to our usual URL here. 

So where did we leave off on Monday? We introduced this problem, right? This was seemingly a correct implementation of swap, whereby you taking two ints, one called a, one called b, swap them, just like Laura did here on stage with the milk and the water, by using a temporary variable, or an empty cup, so that we could put b in a and a in b without making a mess of things. We used a variable. It's called temp. 

But what was the fundamental problem with this code on Monday? What was the problem here? Yeah. 

AUDIENCE: It takes up more space. 

DAVID J. MALAN: Takes up more space, because I'm using a variable, and that's OK. That is true, but I'm going to say that's OK. It's only 32 bits in the grand scheme of things, so not a big deal. Other thoughts? AUDIENCE: It only swaps the variables locally. DAVID J. MALAN: Exactly. It only swaps the variables locally. Because any time you call a function-- when I had the trays from Annenberg last time, you have main on the bottom. As soon as you call a function called swap, swap does not get x and y, the original values. What does swap get, did we claim? AUDIENCE: Copies. DAVID J. MALAN: So copies of them. So it gets one and two, if you recall the example from last time, but a copy of one and two that are successfully swapped. But unfortunately in the end, those values are still the same. So we can see this with our new friend, hopefully GDB, that you or the TFs and Ca's have been guiding you toward as follows. 

So no swap recall looks like-- let's open up this-- looks like this. We initialized x to one, y to two. Had a bunch of print f's. But then, the key call here was to swap, which is exactly the code we just saw a moment ago. Which is correct at first glance, but functionally, this program does not work, because it doesn't permanently swap x and y. 

So let's see this, a quick warm up here with GDB, a ./noswap. A bunch of overwhelming information that I'll get rid of with Control L for now. And now, I'm going to go ahead and run it. And unfortunately, that was not that useful. It ran the program inside of this program called GDB, a debugger, but it didn't let me poke around. 

So how can I actually pause execution inside this program? So break. And I could break on any line number, one, 10, 15. But I can also break symbolically by saying break main. And that's going to set a break point, apparently at line 16 in main. And where is line 16? Let's go up to the code and go up to noswap. And indeed, line 16 is the very first in the program. 

So now, if I go ahead and type run this time, Enter, it paused. So let's poke around. Print x-- why is x zero? And ignore the dollar sign. That's just for fancier usage of the program. Why is x zero at the moment? Yeah. 

AUDIENCE: It paused right before line 16, not actually on line 16. DAVID J. MALAN: Exactly. GDB, by default, has paused execution just before line 16. So it hasn't executed, which means x is of some unknown value. And we got lucky that it's something clean like zero. So now if I type next, now it executed 16. It's waiting for me to execute 17. Let me go ahead and print x. It's one. Let me go ahead and print y. What should I see now? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: A little louder. 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Not quite a consensus. So yes, we see some garbage value. Now, y is 134514064 there. Well, it's just some garbage value. My program uses RAM for different purposes. There's other functions. Other people wrote inside my computer. So those bits have been used for other values, and what I'm seeing is the remnants of some prior use of that memory. 

So no big deal, because as soon as I type next and then print y, it's initialized to the value that I want. So now, let's go ahead a little faster. N for next. Let's do it again. Let's do it again. But I don't want to hit it here, because if I want to see what's going on inside of swap, what's the command? 

AUDIENCE: steps. 

DAVID J. MALAN: steps. So this steps me into a function, rather than over it. And now, it's a little cryptic honestly, but this is just telling me I'm in line 33 now. And let's do this again. Print temp. Garbage value, negative this time, but that's just still a garbage value. So let's do next, print temp. It's initialized to 1, which was the value of x, aka a. 

Now, where are our a and x coming from? Well, notice in main, we called these values x and y. We then passed them to swap as follows. X came first, comma y. And then, swap could call them x and y. But for clarity, it's calling them a and b. But a and b are now going to be copies of x and y, respectively. 

So if I go back to GDB, temp is now one and a is now one. But if I do next and now do print a, a has already been moved over. The milk has been poured into the former orange juice's glass, or vice versa. 

And if I do next again, and now if I print out as a sanity check, a is still two, but b is now one. Frankly, it's still there. I don't care what temp is. But as soon as I now type, let's say, continue to go back, now I'm at the end the program. And unfortunately, x is still one and y is still two. 

So what was the utility of GDB there? It didn't help me fix the problem per se, but it hopefully help me understand it by realizing that yes, my logic is right, but my code is not ultimately having a permanent impact. So that's a problem we're going to now solve today. 

But let's get there by way of this. String is a lie. It, too, not a data type that exists in C. It's been a synonym for some time for something else, and we can reveal that as follows. 

Let me go ahead and open up a program called compare-0. And rather than type this one out, we'll start to walk through the code I already wrote, but it's only a few lines. So this is compare-0. And the first thing I'm doing is getting a line of text. 

But notice what I'm doing for the first time. What is different clearly about line 21? Actually, wait a minute. This is copy two. That is not even the right program. All right, spoiler alert. All right, so never mind that. That's the answer to a future question. 

Here is compare-0, and I'm about to get a line of text. Program's much simpler. So this is straightforward. This is like Week One, Week Two stuff at the moment. string s = GetString. Now, I say it again down here. string t = GetString. And then, the last thing in this program, as its name suggests, is I'm going to try to compare them. 

So if s, the first string, equals = t, then I'm going to say you type the same thing. Else, I'm going to say you type different things. So let's compile and run this program. So make compare zero. Looks good. No compilation errors. 

Let me go ahead now and type ./compare-0. Let me go ahead and say something :Daven and something :Rob. And I type different things. So far, so good. Program seems to be correct. 

But let's run it again. Say something: Gabe. Say something: Gabe. All right. Maybe I hit space bar or something funky. Let's do it again. So Zamyla. Zamyla. Different things. So what is going on? 

So we have these two lines of code, GetString being called twice. And then, I'm simply trying to compare s and t. But what really then is going on? Well, my handwriting's about to butcher this example somewhat. And let's actually throw this up over here, as well. 

So we have a line like string s = GetString. So that's simply the first interesting line from that program. But what all this time has been going on underneath the hood? Well, on the left-hand side is string, which is some type of variable, and it's called s. So I know that this is using memory, or RAM, in my computer somehow. So I'm going to abstractly draw that as a square. 32 bits, it turns out, but more on that in the future. And then, what's going on over here? 

Well, GetString obviously gets a string from the user. And GetString got Zamyla or Gabe or Daven. So let's choose the first of those, which was Daven. So effectively, what GetString got me in that first case was D-a-v-e-n. And then, what else did it give me secretly? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, the /0 or null character. So it effectively gave me a string. But we already know from previous looks that a string is just an array of characters, and it's terminated by this special sentinel character, /0. 

But if this is true and this is a square, this is clearly a much bigger rectangle. And indeed, this is, I claim, only 32 bits. And this is clearly more than 32 bits, because this is probably eight plus eight plus eight plus eight plus eight, just because of bytes in ASCII. How the heck are we going to fit Daven into this little box here? 

Well, what is GetString actually doing? Well, this grid here represents my computer's memory or RAM. So let's arbitrarily say that if each of these represents a byte, then we can think of each byte as having an address, like 33 Oxford Street, or 34 Oxford Street, or 35 Oxford Street. 

So just like homes have addresses and buildings have addresses, so do individual bytes of memory have addresses or numbers that uniquely identify them. Now, this is arbitrary. But to keep it simple, I'm going to use hexadecimal just by convention, but the 0x means nothing other than "this is hexadecimal." and I'm going to claim that the "D" ends up at Byte One in memory. 

I got nothing else going on in memory, so Daven got the first spot at Byte One. This, then, is going to be 0x2. This is going to 0x3. This is going to be 0x4. This is going to 0x5. This is going to be 0x6. 

But once you start thinking about what the computer's doing underneath the hood, you can start to infer how you, some years ago, would have implemented C itself. What is GetString probably returning-- because it feels like it's not returning Daven, per se, because he's surely not going to fit in this little box-- so what is GetString probably returning? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: The location of Daven. And it's been doing this ever since Week One. What GetString is really returning is not a string, per se. That's one of the little white lies. It's returning the address of the string in memory, the unique address. Daven lives at 33 Oxford Street. But more succinctly, Gavin lives at 0x1, Address Number One. 

So what gets put in this little box then, to be clear, is just the address of that string. So all this time, this has been going on. But what this hints at now is that if all s has is a number inside of it, who's to stop you, the programmer, from putting any number in any variable and just jumping to that chunk of memory? And indeed, we'll see that's a threat next time. 

But for now, this feels insufficient. If I say, get me a string, you give me Daven. But you don't really give me Daven. All you give me is Daven's address. How do I then know for sure where Daven begins and ends-- the story's getting weird-- where Daven begins and ends, and then, the next string in memory starts? 

Well, if you're handing me the beginning of Daven, essentially, how do I know where the end of his name is? That special null character, which is all the more important now if strings underneath the hood are simply identified uniquely by their location in memory. So all this time, that's what's been going on. 

So when we look now at the code here, explain if you would the bug in line 26. Why is Zamyla and Zamyla different? Why is Gabe and Gabe different? Yeah, in back. 

AUDIENCE: They have different addresses. 

DAVID J. MALAN: Simply because they have different addresses. Because when you call GetString again, which I'll do quickly here, if this is the second line, string t, as I did in that program, equals another call to GetString. The next time I call GetString, I'm going to get a different chunk of memory. 

GetString is allowed to ask the operating system for more and more memory. It's not going to reuse the same six bytes every single time. It's going to get a new chunk of memory, which means t is going to get some other value over here. 

So when I do s equals = t, you're not comparing D against this and A against this and V against this. You're comparing this against this, which frankly is pretty useful-- useless-- is pretty useless, because who really cares where the strings are in memory? 

And indeed, we haven't. And we're not going to start particularly caring. Only to the extent that bugs can arise and security threats can arise will we actually start to care about this. So let's fix this problem. Turns out, you fix it super simply. 

And let's actually, before I reveal that again, what would you do if in a CS50 class, and you had to implement a comparison against two strings. You clearly can't just use s equals = t. But just logically, how would you compare this string against this string using C code? Yeah. 

AUDIENCE: Just do the for loop [INAUDIBLE] DAVID J. MALAN: Perfect. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. Just use a for loop or a while loop or whatever. But just apply the basic idea that if this is a chunk of memory or an array and this is, iterate over both at the same time. And just compare the letters. 

And you've got to be a little careful, because you don't want one finger to go past the other because one string is longer than the other. So you're going to want to check for this special value at the end, null. But it really is, in the end, as simple as that. And frankly, we don't need to reinvent that wheel. Here is Version Two. And what I'm going to say here is that instead of comparing s equals = t, I'm instead going to say, if string comparison of s comma t equals = 0. Now, what is string compare? 

It turns out, it's a function that comes with C, whose purpose in life is to compare two strings. And stir compare, if we read its man page or documentation or CS50 reference, it will simply tell you that stir compare returns either a negative number or a positive number or zero, where zero means they're equal. 

So just conjecture. What might it mean if stir compare returns negative value or positive value? AUDIENCE: Greater than or less than. DAVID J. MALAN: Yeah, greater than or less than. So if you wanted to sort a whole bunch of strings in a dictionary-- as we will eventually down the road-- perfect function to use potentially, because it's going to do that comparison of strings for you, and tell you does a comes before b, or does b come before a alphabetically. We can do exactly that. 

And notice I did one other thing in this example. What else has changed higher up in this main function? Char*. And this is that other white lie. All this time, when you've been writing string, we have been secretly rewriting string as char* so that clang actually understands you. 

In other words, in CS50.h and as we'll eventually see, we made a synonym called string that's the same thing as char*. And for now, know only that the *, in this context, at least, means the address. 

The address of what? Well, the fact that I said char*, and not int* or float*, means that char* is the address of a char. So this little box here, aka string, is really of type char*, which is simply a fancy way of saying, in this box will go an address. And what does that address refer to? Apparently, a char. 

But we could absolutely have int* and other things. But for now, char* is really the most straightforward and one of interest. So this problem is going to rise, though, again. 

Suppose I open up this program. Let's see if now we can predict what's wrong with this code. So in this program, copy-0, I'm going to go ahead and again call GetString and store the value in s. 

And then, why am I doing this, just as a reminder from weeks past? We did say that GetString sometimes returns null. What does it mean if GetString returns null? Something went wrong. It probably means the string is too big, the computer's out of memory. It happens super, super, super rarely, but it could happen. We want to check for it, and that's all we're doing. 

Because we'll see now, if you don't start checking habitually for things like null, you might actually start to go to addresses in memory that are invalid. And you're going to start inducing more and more segmentation faults. Or in a Mac or a PC, just causing a computer to hang or a program to freeze, potentially. 

So now, I claim in copy-0.c, that I am going to copy these strings by way of line 28. And then, I'm going to claim at the bottom here that I'm going to change one of them. 

So notice this. I'm calling our old friend strlen. And just explain in English what this line 34 is doing? What does t bracket 0 represent on the left. Yeah. 

AUDIENCE: First character of t? DAVID J. MALAN: First character of t. That's it. First character of t, I want to assign the uppercase version of the first character in t. So this is capitalizing the first letter. And then, the very last thing I do in this program is I claim here's the original, s, and here's the copy, t. 

But based on the story we just told about what strings really are, what is line 28 really doing, and what is the resulting bug going to be on the screen? 

So first, the first question, 28. What is string t = s really doing? If we have on the left-hand side here string t = s; that gives me one box here and one box here. And suppose this address is 0x, let's say, 50 this time, arbitrarily. What does string t = s do underneath the hood? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: It stores the memory address there, so 0x50 goes there. So if now, I go to the first character in t and uppercase it, what am I effectively doing to s? I'm really doing the same thing, right? Because if Address 0x50-- and just, I don't have much room on the board here, but assume that this is 0x50 down here, somewhere in my computer's memory. 

And I have, for instance, gabe in lowercase here, like this. And I have said t bracket 0 gets capitalized. Well, t bracket 0 is the first letter in t. So little g is going to become big G. But the problem is, what does s also point to? 

AUDIENCE: The same. 

DAVID J. MALAN: The same exact thing. So a simple explanation perhaps, even if the syntax is a little weird. So let's do this. Make copy-0 and then ./copy-0. Say something: Gabe. And unfortunately, both of them have now been capitalized, but for that underlying reason that we're simply now dealing with addresses. 

So how do we begin to address-- no pun intended-- how do we begin to address this particular problem? Well, in copy1.c, things are going to get a little more complicated. But I would claim a conceptually simple solution. 

So hard to get at first glance. Not going to be easy for the first time you type it out, perhaps, but if the problem is that simply doing t = s just copies the address, what, again if I can pick on you, is going to be the solution for actually copying a string? 

AUDIENCE: We'll probably use a loop again. 

DAVID J. MALAN: Yeah. So we're going to need a loop again. And because if we want to copy a string s into another string, we probably want to do it character by character. But the problem is, if this is originally s, now we need to start explicitly allocating memory for t. 

In other words, let's redraw this one last time. If this is string s = GetString. And let's put this up here, as well. This is GetString. And then, the picture for something like that is going to be as before, g-a-b-e-/0. That looks a little something like this. And s therefore, we call this 0x50, and that's going to be 51, 52. 

So this is 0x50. And then, I do string t. In memory, that's just going to give me a little square like this. So what's the key step now? If I want to copy s into t, what blank do we need to fill in here? Or what do we need to do at a high level? Yeah? Someone? Yeah. 

AUDIENCE: We need to [INAUDIBLE]. DAVID J. MALAN: Yeah, we need to fill in this blank. I can't copy and then capitalize Gabe's name until I ask the operating system for another chunk of memory that's at least as big as the original. So that leaves us with a question. 

How do I ask the operating system not just for a simple little pointer-- as this is called, an address, a pointer-- not for a simple little box like this called a string? How do I ask the operating system for a big chunk of memory? Thus far, I've only gotten that back indirectly by calling GetString. So how is GetString even getting its memory? 

Well, it turns out that there's this other function here that we'll now start to use. Now, this looks way more cryptic than-- and I am the only one who can see it-- this line looks way more cryptic then it should at first glance. But let's tease it apart. 

On the left-hand side, I have char* t. So in English, let's start to formulate proper sentences in technical jargon. So this is allocating a variable of type char* called t. Now, what does that really mean? 

Well, that means, what am I going to put in this variable called t? An address of a char. So that's just the simpler, more reasonable way of describing the left-hand side. So that creates this box here only. So the right-hand side, presumably, is going to allocate that bigger chunk of memory how? So let's tease this apart. 

It's overwhelming at first glance, but what's going on inside here? First, there's malloc, which is apparently our new friend, "memory allocate." So this is the argument being passed into it, so it's a pretty big argument. So let's tease this apart. 

strlen of s, of course, represents the-- AUDIENCE: The number of characters. DAVID J. MALAN: Just the number of characters in s. So the length of s, the original string. So G-a-b-e. So it's probably four in this case. Why am I doing +1 after calling strlen of s? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: For that special null character. If you ask me what's the length of Gabe's name, I am going to say four. Underneath the hood, though, I need that fifth byte for the null character. So that's why I'm doing the +1. 

Now just in case you are running this program on a computer other than, say, the CS50 appliance, where the size of a char might be different from my own computer-- turns out that I can call this operator sizeof, just ask the computer, what is the size of a char on this computer? 

And by multiplying five in this example by the size of a char, which on most computers will just be one, malloc is going to allocate for me this big chunk of memory over here on the right. And it's going to return-- it is a function-- so it's going to return to me what? AUDIENCE: The address? DAVID J. MALAN: The address of what? AUDIENCE: Of the memory it allocated? DAVID J. MALAN: Of the memory it allocated. So I have no idea, frankly, where this is going to end up. I'm going to propose that it's going to end up at 0x88. Completely arbitrary, but somewhere other than 0x50, because the operating system, what Windows and Mac OS do for me, is make sure that it's giving me different chunks of RAM. 

So this is the value where this chunk of memory might end up. So this is what ends up in here, 0x88. So now clearly, I can understand that this is not the same as this, because they're pointing at different chunks of memory. So if I now actually want to copy this in, let's do your proposed solution. 

Let's just go, create a for loop, and do t bracket i gets s bracket i. Because now I can use this array-like notation, because even though malloc very generically allocates me memory, memory is just contiguous bytes. Byte, byte, byte, back to back to back. 

I can surely as a programmer treat it as an array, which means I can use this finally familiar notation of just some square brackets. 

So let me pause there, because this is a lot all at once, even though the basic idea to recap is that string, all this time, is not a new data type per se. It's just a so-called pointer, an address of a character, which just means it's a number that by human convention we tend to write as 0x something. 

But it's just a number, like 33 Oxford Street, which happens to be the CS building's address. Any questions on these details? Yeah? 

AUDIENCE: Why do we check for t equal to null? 

DAVID J. MALAN: Why do we check for t equal to null? If we read the documentation-- great question-- for malloc, it's going to say in fine print, sometimes malloc might return null, just like GetString. And indeed, GetString returns null if, in turn, malloc returns null, because GetString uses malloc. 

And that might happen if the OS, Mac OS, Windows, whatever, is simply out of memory for you. So that's what happened there. 

And let me reveal one other thing that might just blow your mind or completely be too far over the line. But let me pull up the same for loop for copying, which a moment ago, recall was this. t bracket i gets s bracket i. 

Nice and user-friendly. Feels like Week Two again. But this version actually can be rewritten as this, which looks cryptic. It's a technique called pointer arithmetic, address arithmetic. But why does this work? 

Now annoyingly, the authors of C decided to use the * symbol for different purposes. We've seen it used once already, char*, which means "give me a variable that's going to contain the address of a char." So char* in that context means "give me a variable." 

Unfortunately, if you use the * without a word in front of it, like char, it's now called the dereference operator. And we'll see more of this before long. But it just means "go there." It's like saying, if someone handed me on a piece of paper "33 Oxford Street," if I do "*33 Oxford Street," that means "go down the road to the CS building." 

So * just means go there if there's no word in front of it. So what is t, to be clear? t is the address of the chunk of memory that was given back to me. s is the address of what, to be clear, in the example we've been discussing, of lowercase gabe? s is the address of-- AUDIENCE: The string. DAVID J. MALAN: Of Gabe's original name. So it's the address of this chunk of memory. So if I say t + i-- i, notice, is just our old friend. It's just an index variable that's iterating from zero on up to the length of the string s. So it's going to be zero, then one, then two, then three, then four. So let's assemble these new Scratch-like puzzle pieces, if you will, even though, again, the syntax is far more arcane than Scratch. So t is an address + i is going to give me a number, because these are all numbers that we've been drawing as hex. But they're just numbers. 

So if the address of t we said was 0x88, what's 0x88 plus zero. Even if you're not comfortable with hex yet, take a guess. 

AUDIENCE: The original. 

DAVID J. MALAN: Still 0x88. So what does * 0x88 mean? It means, "go there" which means effectively, "put your finger here." And now on the right-hand side of this expression, * and then in parens, s + i means s, which is the address up here of the little g. s + 0 is, of course, s, whatever s is. 

So now, it's *s, which just like *33 Oxford Street means go to the address s. So here's this finger, right hand. So what am I going to copy into what? The thing on the right, which is gabe, little g here, into here. 

And so the effect of that first iteration of the loop, as you proposed, even though it looks crazy more complicated than anything we've seen before, is simply saying go here and copy that character here. It's giving you a map to both locations. 

And we'll see far more of this. But for now, the hope is just to introduce some of these basic ideas. And indeed, let's look at one final program here, and then the promised claymation, which will make everything all right. All right. So let me open up-- there we go. So let me-- we'll come back to this picture before long. Let me open up this final example here. 

So here is a super, super program that accomplishes nothing in life that does the following. It first declares two variables, x and y, that are not numbers this time, per se. They're not integers, per se. They are apparently int*. So just anyone, what does it mean if your data type, your variable, is of type int* star? That's the address of an int. 

So I've no idea where it is yet. It just means "put, eventually, the address of an int here." 0x50, 0x88, wherever it is in memory, an address is going there. And that's what y is going to be, as well. 

If I now say x = malloc(sizeof(int)), this is a fancy way of saying, hey operating system, via malloc, give me enough memory for the size of an int, which is probably going to be 32 bits or four bytes. 

So what does malloc return? Malloc returns an address. So what's going to get stored in x? The address of the chunk of memory, the four bytes, that malloc just found for me by asking the operating system. 

Now meanwhile, line four here, the *x = 42. Just to be clear, what's going down there? On the left-hand side, *x. that's like *33 Oxford Street. So *x means what? 

AUDIENCE: Go to. 

DAVID J. MALAN: Go to that address. Wherever that chunk of memory is, go to it. And put what there, obviously? AUDIENCE: 42. DAVID J. MALAN: 42. All right, *y, same idea. Go to the address in y. Put the number 13 there, but what is y at the moment? AUDIENCE: There is no memory for y. DAVID J. MALAN: There is no memory for y. So what does y probably contain, as we've been saying? 

AUDIENCE: Garbage. 

DAVID J. MALAN: Some garbage value. Now, garbage value is still a number. It can still be mistaken for an address. It's as though someone scribbled something down, and I misinterpreted it as meaning some building down the street. And if you just try to go into some building you don't own, or some chunk of memory you haven't been given, bad things might happen. Computer might crash, or some other undetermined behavior might happen. 

So the intro, then, to Binky is this. I still remember, 20 some odd years later, where I was when I finally understood pointers. 

Which is to say, if you leave here in three minutes and think I don't understand pointers, realize I have remembered for 20 years for some crazy reason when and why it finally sunk in, sitting with my teaching fellow, Nishat Mehta in the back of Eliot Dining Hall. Now, I've remembered this because this was one of the topics I, in particular, struggled with. And then, it finally clicked, like I dare say a lot of topics eventually will. And now, to make that feel all the happier and all the more convincing, let's take a final look in our last three minutes here at Binky, from our friend, Nick Parlante from Stanford. 

[VIDEO PLAYBACK] 

-Hey, Binky. Wake up! It's time for pointer fun. 

-What's that? Learn about pointers? Oh, goody! 

-Well, to get started, I guess we're going to need a couple pointers. 

-OK. This code allocates two pointers, which can point to integers. -OK. Well, I see the two pointers, but they don't seem to be pointing to anything. 

-That's right. Initially, pointers don't point to anything. The things they point to are called pointees, and setting them up's a separate step. 

-Oh, right, right. I knew that. The pointees are separate. Er, so how do you allocate a pointee? 

-OK. Well, this code allocates a new integer pointee, and this part sets x to point to it. 

-Hey, that looks better. So make it do something. 

-OK. I'll dereference the pointer x to store the number 42 into its pointee. For this trick, I'll need my Magic Wand of Dereferencing. 

-Your Magic Wand of Dereferencing? That-- that's great. 

-This is what the code looks like. I'll just set up the number, and [POP] 

-Hey, look. There it goes. 

-So doing a dereference on x follows the arrow to access its pointee. In this case, a store 42 in there. Hey try using it to store the number 13 through the other pointer, y. 

-OK. I'll just go over here to y, and get the number 13 set up. And then, take the Wand of Dereferencing and just [BUZZ] 

-Oh! 

-Oh, hey! That didn't work. Say, Binky, I don't think dereferencing y is a good idea, because you know, setting up the pointee is a separate step. And I don't think we ever did it. 

-Good point. -Yeah. We allocated the pointer y, but we never set it to point to a pointee. 

-Very observant. -Hey, you're looking good there, Binky. Can you fix it so that y points to the same pointee as x? 

-Sure. I'll use my Magic Wand of Pointer Assignment. 

-Is that going to be a problem like before? -No. This doesn't touch the pointees. It just changes one pointer to point to the same thing as another. 

-Oh, I see. Now y points to the same place as x. So wait. Now, y is fixed. It has a pointee. So you can try the Wand of Dereferencing again to send the 13 over. 

-Uh, OK. Here it goes. [POP] 

-Hey, look at that. Now dereferencing works on y. And because the pointers are sharing that one pointee, they both see the 13. -Yeah. Sharing, whatever. So are we going to switch places now? 

Oh, look. We're out of time. 

-But-- 

-Just remember the three pointer rules. Number One, the basic structure is that you have a pointer, and it points over to a pointee. But the pointer and pointee are separate, and the common error is to set up a pointer, but to forget to give it a pointee. 

Number Two, pointer dereferencing starts at the pointer and follows its arrow over to access its pointee. As we all know, this only works if there is a pointee, which kind of gets back to Rule Number One. 

Number Three, pointer assignment takes one pointer and changes it to point to the same pointee as another pointer. So after the assignment, the two pointers will point to the same pointee. Sometimes, that's called sharing. And that's all there is to it, really. Bye-bye now. [END VIDEO PLAYBACK] DAVID J. MALAN: That's it for CS50. We will see you next week. [MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50. And this is the start of week 5. And as you may have noticed, some of the material is getting a little more complex, the little denser. 

And it's very easy, especially if you've been in the habit for some time, to be trying to scribble down most anything we do, we're saying in class. But realize, that is not perhaps the ideal pedagogical approach to learning this kind of material, and material more generally. And so we are pleased to announce that CS50's own Gheng Gong has begun to prepare a canonical set of notes for the course, the hope of which is that, one, these not only serve as a reference and a resource for reviewing material and going back through material that might have escaped you the first time around, but also so that your heads can be more up than down, when it comes time to lecture, so that you might engage more thoughtfully, as opposed to more scribbly. 

With that said, what you'll find on the website is such documents as this. And notice, at top left, there's not only a table of contents, but also time codes that will immediately jump you to the appropriate part in the video online. And what Chang here has done is, essentially, documented what happened in this particular lecture. And many of the lectures are already online now with this URL. And we'll continue to post the remainder of those by the end of this week, so do take advantage of that resource. 

So without further ado, we started to peel back the layer that has been string for some time. And what did we say a string actually is last week? So char star. And char star, well, what did that really mean? Well, all this time, if we've been calling a function, like getString, and storing the so-called return value of getString in a variable-- it's called s type string-- we've been writing the line of code up there above. And it's only when I see my handwriting magnified here do I realize just how atrocious this is. 

However, let's assume that, on the right-hand side is, nonetheless, a reasonable depiction of what's been going on all this time with getString. getString, of course, gets a string. But what does that really mean? It means it gets a chunk of memory from the operating system by calling a function, called malloc. But more on that later. And then it populates that chunk of memory with the letters the user has typed in, followed by, of course, a null character, or backslash zero at the very end. 

Meanwhile, on the left-hand side of this story, all this time, we've been declaring a variable, like s. And that variable is what now will start calling a pointer. It's not a box inside of which we put the string, Daven, per se, but rather we put in that square box on the left what exactly? Yeah? 

AUDIENCE: The address of where it's located in memory. 

DAVID J. MALAN: Exactly. The address of where Daven is located in memory. And not where all of Daven is located, per se, but specifically the address of what? Yeah? 

AUDIENCE: First character. 

DAVID J. MALAN: The first character in Daven, which, in this case, I proposed was arbitrarily and unrealistically 1, Ox1, which just means the hexadecimal number of 1. But it's probably going to be a much bigger number that we might draw with a 0x as a prefix, representing a hexadecimal character. And because we don't need to know where the rest of the characters of Daven are, because of what simple design decision that was made many years ago? Yeah? 

AUDIENCE: Backslash 0. DAVID J. MALAN: Yeah, exactly. The backslash 0 allows you, albeit in linear time, to traverse the string, walk from left to right, with a for loop, or a while loop, or something like that, and determine, oh, here is the end of this particular string. So with just the address at the beginning of a string, we can access the entirety of it, because all this while, a string has just been a char star. 

So it's certainly fine to continue using the CS50 library and this abstraction, so to speak, but we'll begin to see exactly what's been going on underneath this whole time. So you may recall this example, too, from last time, compare 0, which didn't actually compare. But we began to solve this. 

But as perhaps a refresher, might I interest someone in a pink elephant today, also made by Chang? How about you in front? [INAUDIBLE]. Come on up. 

And in the meantime, as you come up, let's consider for just a moment what this code was actually doing. It's declaring two variables up top, s and t, and calling getString. This isn't a very user-friendly program, because it doesn't tell you what to do. But let's just assume we're focusing on the juicy part. And then we do, if s equals equals t, it should say printf, you typed the same thing. Hello. What's your name? 

JANELLE: Janelle. DAVID J. MALAN: Janelle, nice to meet you. So your challenge at hand for this elephant is to first draw us a picture of what's being represented in those first two lines. So s and t might be represented how on the screen? And you can just draw it with your finger on this big screen. 

So there's two halves to each side of that equation. So there's s on the left, and then getString on the right. And then there's t on the left, and then getString on the right. So how might we begin drawing a picture that represents what's going on here in memory, would you say? And let me let you explain what you're doing as you go. 

JANELLE: OK. Well, first, it would be asking you to get the input string. And it would store-- oh, sorry. DAVID J. MALAN: OK. Good. And this is called what? Oh, OK. Keep going. I didn't mean to interrupt. JANELLE: Sorry. So it would input it into the address of-- not sure. I can't exactly remember the number, but I believe it was starting with 0. 

DAVID J. MALAN: That's all right, because I made the numbers up, so there's no right answer. 

JANELLE: Starting with the 0 arc. 

DAVID J. MALAN: OK, so element 0. Sure. 

JANELLE: And then if was like just a two-letter-- 

DAVID J. MALAN: OK, back to you. 

JANELLE: So element 0, and then element 1 or element 2. DAVID J. MALAN: And which piece of the picture are you drawing right now? The call to getString? Or the declaration of s? 

JANELLE: The declaration of s, I believe. Oh, the getString, because it would be inputted into each [? area. ?] 

DAVID J. MALAN: Good. Exactly. Even though this effectively returns an array, recall, when we get back a string, we can index into that string using 01 and 2. Technically, these are probably represented by individual addresses, but that's fine. 

So suppose, if I can just fast forward to where we left off last time, if one of the strings was g a b e, backslash 0, thereby representing gabe's input, how might we represent s now? If this is the memory that's been returned by getString? 

JANELLE: Would it be represented by an arc? 

DAVID J. MALAN: By an arc? Well, no. Let's just say, pictorially, let me just go ahead and propose that, if this is s, this is the return value of getString. And you've drawn this as 0, 1, 2, which is perfectly reasonable, because we can index into the string, as such. But just to be consistent with last time, let me go ahead and arbitrarily propose that this is address 1, this is address 2, this is address 3, and so forth. And so, just to be super clear, what's going to go in s as a result of that first line of code, would you say? 

JANELLE: Address 1? 

DAVID J. MALAN: Exactly. So address 0x1. And meanwhile, let me go ahead and duplicate much of what you've done and add my own t here. If I were to type in gabe again, a second time, when prompted with getString, where, of course, is gabe going to go? Well, presumably-- 

JANELLE: Like on here? DAVID J. MALAN: Yeah. JANELLE: Or it's also in the same boxes? DAVID J. MALAN: Let me propose, yeah, exactly, so in these additional boxes. But what's key now is that, even though I've drawn these pretty close together-- 0x1, this is 0x2-- in reality, this now might be address 0x10, for instance, and 0x11, and 0x12, and so forth. And so, if that's the case, what's going to end up here in t? 

JANELLE: 0x10? DAVID J. MALAN: Exactly. So 0x10. And so now, final question. You have, by far, had to work the hardest for an elephant thus far. By now, if I pull up the code again, when I do, in line three, if s equals equals t, what am I actually comparing that we've drawn here? 

JANELLE: The two addresses? DAVID J. MALAN: Exactly. So I'm saying is s equal equal to t? In other words, is 1 equal equal to 10? And of course, the obvious answer now is, no. And so this program is ultimately going to print what, would you say? 

JANELLE: Would it be, you typed the same thing? 

DAVID J. MALAN: So if s is 1 and t is 10? 

JANELLE: You typed different things. 

DAVID J. MALAN: Exactly. You typed different things. All right. So a round of applause, if we could, here. [APPLAUSE] That was painful. I know. Nicely done. So now let's see if we can't tease apart what the fix was. And of course, when we fixed this-- which I'll now represent in green-- we did a couple of enhancements here. First, just as a sanity check, I'm first checking if s equals null and t equals null. And just to be clear, when might s or t be null in code like this? When might s or t be null. Yeah? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Exactly. If the string that the user typed in is way too long to fit into memory, or some weird corner case like that, getString, as we'll see, literally today, in its documentation, says it will return null as a special sentinel value, or just sort of a special symbol that means something went wrong. So we want to check for that, because it turns out that null is a very dangerous value. 

Often, if you try to do something with null involving a function-- passing it as input, for instance-- that function might very will crash and, with it, take down your whole program. So this third line now is just a sanity check, error checking, if you will. That's a good habit now for us to get into any time we try to use a value that could, potentially, be null. 

Now, in the fourth line here, "if strcmp(s, t)," well, what's that referring to? Well, we said this was a very succinctly named function for string comparison. And its purpose in life is to compare its first argument against it second, but not in terms of their addresses, as we did unintentionally a moment ago with the red code, but rather to compare those two strings in the humanly intuitive way by comparing this, against this, against this, against this, and then stopping if and when one or both of my fingers hits a backslash 0. So someone years ago implemented strcmp to implement for us the functionality that we hoped we would have gotten by just comparing two simple values. 

Now frankly, I keep drawing all of these various numbers. But the reality is, I've been making these up the whole time. And so let me just go ahead and scribble these out to make a point that, at the end of the day and moving forward, we're not really going to care about what addresses things are actually in memory. So I'm not going to draw these kinds of numbers so much anymore, I'm just an abstract this away a little more friendly with just arrows. 

In other words, if s is a pointer, well, let's just draw it, literally, as a pointer, an arrow pointing from itself to something else, and not worry too much more about the minutia of these addresses which, again, I made up anyway. But we'll see those addresses, sometimes, when debugging code. 

Now meanwhile, this program up here fixes, of course, that problem by comparing those two strings. But we ran into another problem. This was from the copy program last time, whereby, I was trying to capitalize just the first character in a string. But what was the symptom we saw last time when a user typed in a value, like gabe in lowercase, for s, then we assigned s into t, as in the third line there, and then I tried to capitalize t bracket 0? What was the effect of changing t bracket 0 here? 

AUDIENCE: It changed s. 

DAVID J. MALAN: Yeah, I changed s, as well. Because what was really going on? Well, let me see if I can clean up this picture, as follows. 

If s is, again, the word g, a, b, e, backslash, 0, and s we'll continue drawing as a box here, but no more addresses. Let's stop making things up. Let's just draw a picture to simplify the world. 

When I declare t with string t, that creates that chunk of memory. Square happens to be 32 bits in most computers. In fact, if you've ever heard of a computer having a 32-bit architecture, really fancy-speak, that just means it uses 32-bit addresses. And as a technical aside, if you've ever wondered why older computers, if you actually tried to soup them up with lots of RAM, could only have a maximum of four gigabytes of RAM, well that's because, literally, your old computer could only count as high as 4 billion, 4 billion bytes, because it was using 32-bit numbers for addresses. 

But in any case, in this example, story's much simpler. t is just another pointer, or really a char star, aka string. And how do I want to update this picture now with that second line of code, after the dot, dot, dot? When I do string t equals s semicolon, how does this picture change? Yeah? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Yeah. Exactly. I just put an arrow from the t box to the same address, the same first letter in gave. Or technically, if this guy were still at 0x1, it's as though I had 0x1 here and 0x1 here. But again, who cares about the addresses? It's just the idea that now matters. So this is what's happening here. So of course, if you do t bracket 0, which is array notation, of course-- and frankly, it looks like there's an array over here, but now there's this weird thing. Know that the programming language, C, offers you this feature, whereby, even if t is a pointer, or s is a pointer, you can still use that familiar, comfortable square bracket notation to go to the first element, or the second element, or any element that that pointer is pointing to because, presumably, it is, as in this case, pointing at some array. 

So how do we fix this? Frankly, this is where it got a little overwhelming at first glance. But here is a new and improved version. 

So first, I'm getting rid of the CS50 library, just to expose that s is indeed a char star, just a synonym. And t is also a char star. But what is going on on the right-hand side of that line where t is assigned a value? 

What is malloc? What it's strlen? What is sizeof(char)? Why the heck does this line look so complex? What's it doing at a high level? What's it storing in t? Yeah? AUDIENCE: It's allocating a certain amount of memory space. It's to store, I guess, letters [INAUDIBLE]. 

DAVID J. MALAN: Perfect. Perfect. It's allocating a certain amount of memory space to store, presumably, future letters. And in particular, malloc is therefore returning what? 

AUDIENCE: Returning the [INAUDIBLE]? DAVID J. MALAN: Exactly. Returning the address of that memory, which is a fancy way of saying, returns the address of the first byte of that memory. The onus is on me to remember how much memory I actually allocated or asked malloc for. 

Now how much is that? Well, even though there's a lot of parentheses here, malloc takes just a single argument. And I'm specifying strlen of s, so give me as many bytes as there are in s, but add one. Why? Yeah? 

AUDIENCE: The backslash 0. DAVID J. MALAN: Exactly. We've got to do a little housekeeping. So because there's a backslash 0, we'd better remember that. Otherwise, we're going to create a string that doesn't have that special terminator. 

Meanwhile, just to be super anal, I have sizeof(char), just in case someone runs my code not on the CS50 appliance, but maybe a different computer altogether where chars are one byte, by convention, but two bytes, or something bigger than that. It's just to be super, super averse to errors. Even though, in reality, it's most likely going to be a 1. 

Now, meanwhile, I go ahead and copy the string, t bracket i equals t bracket s. And I will defer to last week's source code to see what's going on. But the key takeaway, and the reason I put the code now in green, is because that very last line, t bracket 0 equals toupper, has the effect of capitalizing which string? t and/or s? That last line of code. 

Just t, because what's happened this time, if I slightly undo that last step, what's happened is, when I call malloc, I essentially get a chunk of memory that is the same size as the original, because that's the arithmetic I did. I'm storing in t the address of that chunk of memory. Even though this looks nice and pretty, nice and blank, the reality is there's, what we'll keep calling, garbage values in here. That chunk of memory might very well have been used before, a few seconds, a few minutes ago. So there could absolutely be numbers or letters there, just by accident. But they're not valid, until I myself populate this chunk of memory with actual chars, as I do in that for loop there. All right? 

So now, the climax of these three examples that were seemingly broken last time, this Swap example, this function worked in the sense that it swapped a and b. But it didn't work in what other sense? Yeah? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Exactly. If I were to call this function from another-- for instance, from a function like main, where I have a variable, x and y, as I did last week, same code, and I pass in x and y to Swap, and then call Swap-- this, of course, is the correct version is what we're about to see-- it did not work. So what is the fix? 

Well, so just to be clear, let me go ahead and-- give me one second here, and see if I can show you the last one, which will be in-- let's see if I can find this real fast-- OK, [INAUDIBLE]. OK, there it is. So ignore the commands I'm just typing. I want it to retrieve at the last minute an example from last time, which is now called no Swap. 

So no Swap is where we left off last time, whereby, I initialized x to 1 and y to 2. I then call Swap, passing in 1 and 2. And then this function worked in some sense, but it had no permanent effect on x and y. So the question at hand is, how now do we actually fix this problem? What is the solution at hand? 

Well, in swap.c, which is new today, notice a couple of differences. x and y are the same. But what is clearly different about line 25? What's new there, if you remember what it looked like a second ago? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Yeah. So the ampersands are a new piece of syntax not only in this program, but also more generally in CS50. To date, I don't think we've seen any examples or really talked about them in any detail, other than, maybe, preemptively in section, an ampersand like this. Well, it turns out ampersand is one of the last pieces of new syntax we're going to learn. All it means is the address of some variable. At what address does x live? But what address does y live? Because if the fundamental problem before was that x and y were being passed as copies, what we really want to do is provide Swap with like a treasure map that leads to where x and y actually are in RAM, so that Swap can follow that map and go to wherever x or y marks the spot and change the actual values 1 and 2 there. 

So Swap needs to change slightly too. And at first glance, this might seem a little similar to char star. And indeed it is. So a is a pointer to what type of data, based on this highlighted portion? So it's an int. 

So a is no longer an int, it's the address of an int. And similarly, b is now going to be the address of an int. So when I now call Swap from Main, I'm not going to give Swap 1 and 2. I'm going to give it like Ox-something and Ox-something, two addresses that will lead Swap to their actual locations in my computer's memory. 

So now, my remaining implementation needs to change a tad. What's obviously different now in these three lines of code? There's these damn stars all over the place, all right? So what's going on here? Yeah? 

AUDIENCE: It's obviously [INAUDIBLE]. 

DAVID J. MALAN: Exactly. So in this context-- and this was not the best design decision, admittedly, years ago. In this context, where you just have a star, and you don't have a data type, like int, immediately to the left, instead you have an equal sign, clearly, in this context, when you say star a, that means go to the address that's in a. Follow the treasure map, so to speak. 

And meanwhile, in line 37, it means the same thing. Go to the address a, and put what there? Whatever is at the location that b specifies. In other words, go to b. Get that value. Go to a and, per the equal sign, the assignment operator, put that value there. 

Similarly, int temp is just an int. Nothing needs to change about temp. It's just a spare glass from Annenberg for some milk or orange juice. But I do need to say, go to b. Go to that destination and put the value in temp there. So what's happening then? When I actually call Swap this time, if this first tray here represents Main, this second tray represents Swap, when I pass ampersand x and ampersand y from Main to Swap, just to be clear, what is this stack frame receiving? Yeah? 

AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly. The address of x and the address of y. And you can think of these like postal addresses. 33 Oxford Street and 35 Oxford Street, and you want to move the two buildings that are at those locations. 

It's sort of a ridiculous idea, but that's all we mean by address. Where in the world can you find those two ints? Where in the world can you find those two buildings? So if finally, after all this time I go into today's source code and compile Swap and run ./swap, finally, for the first time do we actually see that my values have indeed been swapped successfully. And now, we can even take note of this in, say, gdb. 

So let me go into the same file. Let me go ahead and run gdb of ./swap. And now, in Swap, I'm going to go ahead and set a break point in Main. And now I'm going to go ahead and run the program. And now we see my code paused at that line. 

If I go ahead and print x, what should I see here? It's a question. Say again? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: So random numbers, maybe. Maybe I get lucky, and it's nice and simple, like 0. But maybe it's some random number. In this case, I got lucky. It just happens to be 0. But it is indeed luck, because not until I type next and then print x has that line of code, line 19, been executed. 

Meanwhile, if I type next again, and now print out y, I'm going to see 2. Now, if I type next, it's going to get a little confusing, because now, the printf is going to appear on the screen, as it did. x is 1. 

Let's do this again. And now, here's where things get interesting. Before I call Swap or even step into it, let's take a little peek. x is, again, 1. Y is, of course, quick sanity check, 2, so not hard there. But what is ampersand x? Answer, it's kind of funky looking. But the int star in parentheses is just gdp's way of saying this is an address. It's not an int, it's a pointer to an int, or otherwise known as an address. 

What is this crazy thing? We've never seen something quite like that before. So this is the address in my computer's memory of where x happens to live. It's Ox-something. And this is, frankly, why I've started drawing arrows, instead of numbers, because who really cares that your int is at a particular address that's that big. But bffff0c4, these are all indeed hexadecimal digits, which are 0 through f. 

So we're not going to dwell too long on what those things are. But if I print out y, of course, I see 2. But ampersand y, I see this address. And notice, for the curious, how far apart are x and y? You can ignore most of the address. Four bytes. And that's consistent with our earlier claim that how big is an int? Four bytes. So it looks like everything's lining up nicely, as you might hope, in memory. 

So now, let's just fast forward to the end of this story. Let's go ahead and type step, to dive into the Swap function. Now notice, if I type a, it's identical to the address of x. If I type b, it's identical to the address of y. So what should I see if I say, go to the address a? So print star a. So star means go there, in this context. Ampersand means what's the address of. So star a means 1. And print star b gives me 2. 

And let me assume, for the moment, that at least the code that proceeds to execute now can be reasoned through in that way. But we'll revisit this idea before long. So this version of Swap is now correct and allows us to swap this particular data type. 

So any questions then on Swap? On star? On address of? And you'll see, with problem set 4, sort of, but problem set 5, definitely, how these things are useful and get much more comfortable with them, as a result. Anything at all? All right. So malloc is, again, this function that just allocates memory, memory allocation. And why is this useful? Well, all this time, you've been using malloc. If you consider now how getString works, presumably, it's been asking someone for a chunk of memory, anytime the user types a string in, because we certainly didn't know, as CS50 staff, how big those strings that humans are going to type might be. 

So let's, for the first time, start to peel back how the CS50 library works, by way of a couple of examples that will lead us there. So if I open up gedit and open up scanf 0, we're going to see the following code. Scanf 0, available on the website for today, has relatively few lines of code here, 14 through 20. And let's see what it's doing. It declares an int, called x. It says something like, number please. And now it says, scanf %i, &x. So there's a bunch of new stuff there. 

But scanf, you can kind of think of as the opposite of printf. printf, of course, prints to the screen. scanf sort of scans from the user's keyboard something he or she has typed. 

%i is just like printf. This means expect the user to type an int. And now, why do you think I might be passing scanf &x? If the purpose in life of scanf is to get something from the user, what is the meaning of passing it, &x, now? Yeah? 

AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly. Whatever I, the human, type in, my input is going to be saved at that location. It's not sufficient, recall, to just pass in x, because we've seen already, any time you pass just a raw variable, like an int, to some other function, sure, it can change that variable, but not permanently. It can't have an effect on Main. It can only change its own local copy. But if, instead, you don't give me the actual int, but you give me directions to that int, I now, being scanf, surely, I can follow that address and put a number there so you have access to it as well. 

So when I run this program, let's see. Make scanf 0 dot slash, scanf 0. And if I now type a number like 50, thanks for the 50. If I now type a number like negative 1, for the negative 1. I now type a number like 1.5, hm. Why did my program ignore me? Well, because simply, I told it to expect an int only. All right. So that's one version of this. Let's take things up a notch and propose that this is not good. And herein lies a very simple example of how we can start writing code that other people can exploit or compromise by doing bad things. So line 16, so similar in spirit to before, but I'm not declaring it int this time. I'm declaring it char star, aka string. 

But what does that really mean? So if I don't specify an address-- and I'm calling it arbitrarily, buffer, but I could call it s, to be simple-- and then I do this, explain to me, if you could, based on the previous logic, what is scanf doing in line 18, if pass %s and buffer, which is an address? What is scanf, if you apply the exact same logic as version 0, going to try to do here, when the user types something in? Yeah? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Exactly. Scanf, by the logic earlier, is going to take the string that the human typed in-- it's now a string, it's not a number, presumably, if he or she cooperates-- and it's going to try to put that string in memory at whatever address buffer specifies. And this is great, because buffer is indeed meant to be an address. 

But I claim this program is buggy in a very serious way, because what value is buffer by default? What have I initialized into? What chunk of memory? I haven't, right? 

So even though I've allocated a char star that's no longer called s, it's instead called, buffer-- so let's draw the variable's name now as buffer-- if I haven't called getString or malloc here, that effectively means that buffer is just some garbage value. 

Now what does that mean? It means that I have told scanf to expect a string from the user. And you know what? Whatever this thing is pointing to-- and I draw question mark, but in reality, it's going to be something like Ox1, 2, 3, right? It's some bogus value that just happens to be there from before. So put another way, it's as though buffer is just pointing to something in memory. I have no idea what. 

So if I type in gabe now, it's going to try to put g-a-b-e /0 there. But who knows what that is? And in the past, any time we've tried to touch memory that doesn't belong to us, what has happened? Or almost every time. Segmentation fault, right? 

This arrow, I have no idea where it's pointing. it's just some random value. And of course, if you interpret a random value as an address, you're going to go to some random destination. So gabe might indeed crash my program in this case here. 

So what can we do that's almost as bad? Consider this third and final example of scanf. This version is better in what sense? If you are comfortable with the previous problem, this is better. Why? 

AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Good. So this case of line 16 is better, in the sense that we're explicitly allocating some memory. We're not using malloc, we're using the week 2 approach of just declaring an array. And we've said before that a string is just an array of characters, so this is totally legitimate. But it's, of course, as you note, fixed size, 16. 

So this program is totally safe, if I type in one character strings, two character strings, 15 character strings. But as soon as I start typing 16, 17, 18, 1,000 character strings, where is that string going to end up? It's going to end up partly here. But then who knows what else is beyond the boundaries of this particular array? 

It's as though I've declared 16 boxes here. So rather than draw out all 16, we'll just pretend that I've drawn 16. But if I then try to read a string that's much longer, like 50 characters, I'm going to start putting a, b, c, d, x, y, z. And this is presumably some other memory segment that, again, might cause my program to crash, because I've not asked for anything more than just 16 bytes. 

So who cares? Well, here's the CS50 library. And most of this is just like instructions up top. The CS50 library, all this time, has had this line in line 52. We've seen typedef, or you will see typedef in pset 4, which just creates a synonym whereby char star can be more simply referred to as string. So this is one of the few training wheels we've used secretly underneath the hood. 

Meanwhile, here's the function, getchar. Now apparently, there's no body to it. And in fact, if I keep scrolling, I don't actually see any implementations of these functions. As a sanity check, why is that? 

AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Yeah. So this is the header file. And header files contain prototypes, plus some other stuff, it seems, like typedefs. But in CS50.c, which we've never given you outright, but has been in the CS50 appliance all this time, deep inside of its folders, notice that there's a whole bunch of functions in here. 

In fact, let's scroll down. Let's ignore most of them, for now. But scroll down to getInt and see how getInt works. So here is getInt. And if you ever really cared how get int works, here is its documentation. And among the things it says is it tells you what the ranges of values it can return. It's essentially negative 2 billion to positive 2 billion, give or take. 

And it turns out, all this time, even though we've never had you check for it, if something goes wrong, it turns out that all this time, getInt has been returning a special constant, not null, but rather int_max, which is just a programmer's convention. It means here is a special value. Make sure to check for this, just in case something goes wrong. But we've never bothered with that to date, because again, this is meant to simplify. 

But how does getInt get implemented? Well, one, it takes no arguments. We know that. It returns an int. We know that. So how does it work underneath the hood? 

So there's apparently an infinite loop, at least the appearance of one. Notice that we're using getString. So that's interesting. getInt calls our own function, getString. And now why might this be the case? Why am I being defensive here in line 165? What could happen in line 164, just to be clear? It's the same answer as before. Might just be out of memory. Something goes wrong with getString, we've got to be able to handle that. And the reason I don't return null is that, technically, null is a pointer. getInt has to return an int. So I've arbitrarily decided, essentially, that 2 billion, give or take, is going to be a special value that I can never actually get from the user. It's just the one value I'm going to waste to represent an error code. 

So now, things get a little fancy. And it's not quite the same function as before, but it's very similar. So notice, I declare here, in line 172, both an int n and a char c. And then I use this funky line, sscanf, which it turns out doesn't scan a string from the keyboard. It stands an existing string that the user has already typed in. So I already called getString, which means I have a string in memory. sscanf is what you'd call a parsing function. It looks at the string I've typed in, character by character, and does something useful. That string is stored in line. And I know that only by going back up here and saying, oh, OK, I called it not s this time, but line. 

And now this is a little different. But this effectively means, for reasons we'll somewhat wave our hands at today, that we are checking to see if the user typed in and int and maybe another character. If the user typed in an int, it's going to be stored in n, because I'm passing this by address, the new trick we've seen today. If the user also typed in like 123x, that x is going to end up a letter in character c. 

Now it turns out that sscanf will tell me, intelligently, how many variables was sscanf successfully able to fill. So by this logic, if the function I'm implementing is getInt, but I'm checking, potentially, for the user to have typed in an int followed by something else, what do I want sscanf's return value truly to be? If the purpose is to get just an int from the user? 

So if sscanf returns 2, what does that mean? The user typed in something like, literally, 123x, which is just nonsense. It's an error condition, and I want to check for that. 

So if the user types this in, by this logic, what does sscanf return, would you say? So it's going to return 2, because the 123 is going to go in here, and the x is going to end up in here. But I don't want the x to get filled. I want to sscanf to only succeed in filling the first of its variables. And so that's why I want sscanf to return 1. 

And if this is a bit over the head for the moment, that's totally fine. Realize though, that one of the values of getInt and getString is that we're doing a heck of a lot of error checking like this so that, to date, you can pretty much type anything at your keyboard, and we will catch it. And we certainly, the staff, will definitely not be the source of a bug in your program, because we're defensively checking for all of the stupid things that a user might do, like typing a string, when you really wanted int. So for now-- we'll come back to this before long-- but all this time, getString and getInt have been underneath the hood using this basic idea of addresses of memory. 

So now, let's make things a little more user-friendly. As you may recall, from Binky last time-- if my mouse will cooperate-- so we had this code, which frankly, is fairly nonsensical. This code achieves nothing useful, but it was the example that professor Parlante used in order to represent what was going on in a program involving memory. 

So let's retell this story super briefly. These first two lines, in English, do what, would you say? Just in reasonably human, but slightly technical terms, take a stab. AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: OK, you're establishing addresses for your x and y variables. Not quite, because x and y are not variables in the traditional sense. x and y are addresses or will store address. So let's try this once more. Not a bad start, though. Yeah? 

AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Good. I think that's a little cleaner. Declaring two pointers, two integers. And we're calling them x and y. Or if we were to draw this as a picture, again, recall quite simply that all we're doing with that first line is drawing a box like this, with some garbage value in it, and calling it x, and then another box like this, with some garbage value in it, calling it y. We've declared two pointers that ultimately will store the address of an int. So that's all there. 

So when Binky did this, the clay just looked like this. And Nick just kind of wrapped up the arrows, as though they're not pointing anywhere in particular, because they're just garbage values. They're not explicitly initialized anywhere in particular. 

Now the next line of code, recall, was this. So in reasonably user-friendly, but somewhat technical English, what is this line of code doing? Yeah? 

AUDIENCE: [INAUDIBLE]. 

DAVID J. MALAN: Perfect. It's allocating the chunk of the memory that's the size of an int. And that's half the answer. You answered the right half of the expression. What is happening on the left-hand side of the equal sign? Yeah? AUDIENCE: And assigns it to the variable x? 

DAVID J. MALAN: And assigns it to the variable x. So to recap, right-hand side allocates enough memory to store an int. But malloc specifically returns the address of that chunk of memory, which you've just proposed gets stored in x. 

So what Nick did last time with Binky is he dragged that pointer out, the clay, to point now at a white chunk of memory that is equal to the size of an int. And indeed, that's meant to represent four bytes. 

Now, the next line of code did this, star x gets 42. So 42 is straightforward on the right-hand side, meaning of life. Left-hand side, star x means what? That too might have gone-- that's OK. OK. 

AUDIENCE: Basically, go to the [INAUDIBLE] DAVID J. MALAN: Good. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Exactly. Left-hand side means go to x. x is address. It's like 33 Oxford Street, or Ox1. And star x means go to that address and put what there? 42. 

So indeed, that's exactly what Nick did. He started with by, essentially, mentally pointing a finger at x, following the arrow to the white box on the right-hand side, and putting the number 42 there. But then things got a little dangerous, right? Binky's about to lose his head. 

Star y equals 13, bad luck, means what? So star y means go to the address in y. But what is the address in y? All right, it's garbage value, right? I drew it as a question mark. Nick drew it as a curled up arrow. And as soon as you try to do star y, saying go there, but there is not a legitimate address, it's some bogus location, the program's going to crash. And Binky's head is going to fly off here, as it did. 

So in the end, this program was just flat out flaw. It was a buggy program. And it needed to be fixed. And the only way, really, to fix it would be, for instance, this line, which we didn't even get to, because the program crashed too soon. But if we were to fix this, what effect does doing y equal x have? Well, it essentially points y at whatever value x is pointing at. 

So in Nick's story, or Binky's story, both x and y were pointing at the white chunk of memory, so that, finally, when you do star y equals 13 again, you end up putting 13 in the appropriate location. So all of these lines are perfectly legitimate, except for this one, when it happened before you actually assigned y some value. 

Now thankfully, you don't have to reason through all of these kinds of issues on your own. Let me go ahead and open up a terminal window here and open up, for just a moment, a super short program that also is sort of pointless. It's ugly. It doesn't achieve anything useful. But it does demonstrate issues of memory, so let's take a look. 

Main, super simple. It apparently calls a function, f, and then returns 0. It's kind of hard to mess this up. So Main is pretty good, so far. 

So f is problematic. And just didn't put much effort into naming it here, to keep the focus on the code. f has two lines. And let's see what's now going on. So on the one hand here-- and let me make this consistent with the previous example-- on the one hand, the left-hand side is doing what, in English? It is-- AUDIENCE: Creating a pointer. DAVID J. MALAN: Creating a pointer to an int and calling it x. So it's creating one of those boxes I keep drawing on the touch screen. And now, on the right-hand side, malloc, of course, is allocating a chunk of memory. And just to be clear, how much memory is it apparently allocating, if you just kind of do the math here? 

So it's 40 bytes. And I know that only because I know an int, on the CS50 appliance, at least, is four bytes. So 10 times 4 is 40. So this is storing an x, the address of the first out of 40 ints that have been allocated space back, to back, to back, to back. 

And that's what's key about malloc. It doesn't take a little memory here, a little here, a little here. It gives you one chunk of memory, contiguously, from the operating system. 

Now what about this, x bracket 10 equals 0? Arbitrary line of code. It doesn't achieve anything useful. But it is interesting, because x bracket 10--? Yeah? 

AUDIENCE: [INAUDIBLE]? 

DAVID J. MALAN: x bracket 10 doesn't have to be null. The null detail only comes into play with strings, at the end of a string. But a good thought. 

How big is this array, even though I've allocated 40 bytes? It's 0 through nine, right? It's 10 ints, total. 40 bytes, but 10 ints, indexed 0 through 0. 

So what is that x bracket 10? It's actually some unknown garbage value. It's memory that doesn't belong to me. I should not be touching that byte number 41, 42, 43, 44. I'm going slightly too far. 

And indeed, if I run this program, it might very well crash. But sometimes, we'll get lucky. And so just to demonstrate this-- and frankly, you never know before you do it-- let's run this. It didn't actually crash. 

But if I change this, for instance, to be like 1,000, to make this really deliberate, let's see if we can get it to crash this time. OK, it didn't crash. How about 100,000? Let's remake it, and now rerun it. OK. Phew. All right. So apparently, again, these segments of memory, so to speak, are reasonably big, so we can get lucky again and again. But eventually, once you get ridiculous and really go far out on the screen, you touch memory that really, really doesn't belong to you. 

But frankly, these kinds of bugs are going to be harder and harder to figure out on your own. But thankfully, as programmers, we have tools that allow us to do this for us. So this is, perhaps, one of the ugliest programs, even uglier than gdb's output. But it always has a line or two that are super useful. 

Valgrind is a program that helps you not debug a program, per se, but find memory-related problems, specifically. It will automatically run your code for you and look for at least two things. One, did you do something accidental like touch memory that didn't belong to you? It will help you find those cases. 

And two, it will help you find something called memory leaks, which we have completely ignored, naively, for some time and blissfully. But it turns out, all this time, whenever you've called getString in so many of our programs, you're asking the operating system for memory, but you have any recollection of ever giving it back, doing unalloc, or free, as it's called. No, because we've never asked you to do so. 

But all this time, the programs you've been writing in C have been leaking memory, asking the operating system for more and more memory for strings and whatnot, but never handing it back. And now this is a bit of a oversimplification, but if you've ever run your Mac or your PC for quite some time, opening lots of programs, maybe closing programs, and even though your computer hasn't crashed, it's getting so much slower, as though it's really using a lot of memory or resources, even though, if you're not even touching the keyboard, that could be-- but not always-- could be that the programs you're running have themselves memory leaks. And they keep asking the OS for more and more memory, but forgetting about it, not actually using it, but therefore taking memory away from other programs that might want it. So that's a common explanation. Now here's where Valgrind's output is completely atrocious to those less and more comfortable alike. But the interesting stuff is right up here. It is telling me an invalid write of size four happens in this program, in particular, at line 21 of memory.c. 

If I go to line 21, hm, there indeed is an invalid write of size four. Why size four? Well, this number-- and it could be anything-- is an int. So it's four bytes. So I'm putting four bytes where they don't belong. That's what Valgrind is actually telling me. Moreover, it will also tell me, as we'll see, as you run this in a future pset, if and when you've leaked memory, which indeed I have, because I've called malloc, but I haven't actually called, in this case, free, which we'll eventually see is the opposite of malloc. 

So now, I think, a final example. So this one's a little more arcane, but it's perhaps the biggest reason to be careful with memory, and the reason that many programs and/or web servers, even to this day, are taken over by bad guys somewhere on the internet who are somehow sending bogus packets to your server trying to compromise your accounts, or take your data, or just generally take over a machine. Buffer overflow, as the name suggests, means overflowing not an int, but a buffer. And a buffer is just a fancy way of saying it's a bunch of memory. 

And indeed, I called a string before buffer, instead of s. Because if it's a buffer, like in the YouTube sense, or any time you're watching a video, you might have seen the word buffering, dot, dot, dot. It's incredibly annoying. And that just means that your video player is trying to download lots of bytes, lots of bytes from a video from the internet. But it's slow, so it's trying to download a bunch of them to fill a buffer, a container, so that you have enough bytes that it can then show you the video, without pausing constantly. But it turns out, you can have a buffer to this big. But try to put this much data in it, and very bad things can happen. So for instance, let's look at this final teaser of an example. This is another program that, at first glance, doesn't do anything super useful. It's got a Main function that calls that function, f. And that function, f, up here, has a char array, called c, of size 12. And then it's using this new function called strncpy. 

It turns out that, with this simple, simple line of code, just two lines, we have made my entire program, and therefore, my entire computer, and my user account, and my hard drive potentially vulnerable to anyone who knows and is good enough to run this program with a certain command line argument. In other words, if this bad guy puts inside of argvargv[1] by typing at the keyboard a very specially crafted string, not abc, 123, but essentially, binary symbols that represent executable code, a program that he or she wrote, with this simple program, which is representative of thousands of programs that are similarly vulnerable, daresay, he or she can ultimately delete all the files on my hard drive, get a blinking prompt so that he or she can type commands on their own, email all files to myself. Anything that I can do, he or she can do with this code. 

We won't quite solve this yet. And in fact, it's going to involve a little picture like this, which we'll soon come to understand all the better. But for today, let's end on what's, hopefully, a slightly more understandable XKCD joke, until we resume next time. All right. See you on Wednesday. 

[MUSIC PLAYING] 

SPEAKER: And now, deep thoughts, by Daven Farnham. Memory is like jumping into a pile of golden leaves on a Sunday afternoon. Wind blowing, tossing your hair-- oh, I miss the days when-- 

[LAUGHTER] [MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50. This is week five continued, and we have some good news and some bad news. So good news is that CS50 launches this Friday. If you would like to join us, head to the usual URL here. Even better news, no lecture this coming Monday the 13th. Slightly less better news, quiz zero is next Wednesday. More details can be found at this URL here. And over the next couple days we'll be filling in the blanks with regards to the rooms that we will have reserved. Better news is that there'll be a course-wide review session this coming Monday in the evening. Stay tuned to the course's website for location and details. Sections, even though it is a holiday, will also meet as well. Best news, lecture next Friday. So this is a tradition we have, as per the syllabus. Just-- it's going to be amazing. You will see things like constant time data structures and hash tables and trees and tries. And we'll talk about birthday problems. A whole bunch of stuff awaits next Friday. OK. Anyhow. So recall that we've been focusing on this picture of what's inside of our computer's memory. So memory or RAM is where programs exist while you're running them. If you double-click an icon to run some program or double-click an icon to open some file, it's loaded from your hard drive or solid state drive into RAM, Random Access Memory, where it lives until the power goes off, the laptop lid closes, or you quit the program. 

Now that memory, of which you probably have 1 gigabyte these days, 2 gigabytes, or even much more, is generally laid out for a given program in this sort of rectangular conceptual model whereby we have the stack at the bottom and a bunch of other stuff at the top. The thing at the very top we've seen on this picture before but never talked about is the so-called text segment. Text segment is just a fancy way of saying the zeros and ones that compose your actual compiled program. 

So when you double-click Microsoft Word on your Mac or PC, or when you run dot slash Mario on a Linux computer at your terminal window, the zeros and ones that compose Word or Mario are stored temporarily in your computer's RAM in the so-called text segment for a particular program. Below that goes initialized and uninitialized data. This is stuff like global variables, that we've not used many of, but on occasion we've had global variables or statically defined strings that is hard coded words like "hello" that aren't taken in from the user that are hard-coded into your program. 

Now, down at the bottom we have the so-called stack. And the stack, thus far, we've been using for what kinds of purposes? What's the stack been used for? Yeah? 

AUDIENCE: Functions. 

DAVID J. MALAN: For functions? In what sense for functions? 

AUDIENCE: When you call a function, the arguments are copied onto the stack. 

DAVID J. MALAN: Exactly. When you call a function, its arguments are copied onto the stack. So any X's or Y's or A's or B's that you're passing into a function are temporarily put on the so-called stack, just like one of the Annenberg dining hall trays, and also things like local variables. If your foo function or your swap function have local variables, like temp, those two end up on the stack. Now, we won't talk too much about them, but these environment variables at the bottom we saw a while ago when I was futzing at the keyboard one day and I started accessing things like argv 100 or argv 1,000, just elements-- I forget the numbers-- but that weren't supposed to be accessed by me. We started seeing some funky symbols on the screen. Those were so-called environment variables like global settings for my program or for my computer, not unrelated to the recent bug that we discussed, Shellshock, that's been plaguing quite a few computers. 

Now lastly, in today's focus we'll ultimately be on the heap. This is another chunk of memory. And fundamentally all this memory is the same stuff. It's the same hardware. We're just sort of treating different clusters of bytes for different purposes. The heap is also going to be where variables and memory that you request from the operating system is temporarily stored. 

But there's kind of a problem here, as the picture implies. We sort of have two ships about to collide. Because as you use more and more of the stack, and as we see today onward, as you use more and more of the heap, surely bad things might happen. And indeed, we can induce that intentionally or unintentionally. So the cliffhanger last time was this program, which didn't serve any functional purpose other than to demonstrate how you as a bad guy can actually take advantage of bugs in someone's program and take over a program or even a whole computer system or server. So just to glance briefly, you notice that main at the bottom takes in command line arguments, as per argv. And it has a call to a function f, essentially a nameless function called f, and it's passing in argv[1]. 

So whatever word the user types in at the prompt after this program's name, and then this arbitrary function up top, f, takes in a string, AKA char*, as we've begun to discuss, and it just calls it "bar." But we could call it anything. And then it declares, inside of f, an array of characters called c-- 12 such characters. 

Now, by the story I was telling a moment ago, where in memory is c, or are those 12 chars going to end up? Just to be clear. Yeah? 

AUDIENCE: On the stack. 

DAVID J. MALAN: On the stack. So c is a local variable. We're asking for 12 chars or 12 bytes. Those are going to end up on the so-called stack. Now finally is this other function that's actually pretty useful, but we've not really used it ourselves, strncopy. It means string copy, but only n letters, n characters. So n characters will be copied from bar into c. And how many? The length of bar. So in other words, that one line, strncopy, is going to copy effectively bar in to c. 

Now, just to kind of anticipate the moral of this story, what is potentially problematic here? Even though we're checking the length of bar and passing it into strncopy, what is your gut telling you is still broken about this program? Yeah? 

AUDIENCE: Doesn't include room for the null character. DAVID J. MALAN: Doesn't include room for the null character. Potentially, unlike in past practice we don't even have so much as a plus 1 to accommodate that null character. But it's even worse than that. What else are we failing to do? Yeah? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Perfect. We've hard coded 12 pretty arbitrarily. That isn't so much the problem, but the fact that we're not even checking if the length of bar is less than 12, in which case it's going to be safe to put it into the memory called c that we've allocated. Indeed, if bar is like 20 characters long, this function appears to be copying 20 characters from bar into c, thereby taking at least 8 bytes that it shouldn't be. That's the implication here. 

So in short, broken program. Not such a big deal. Maybe you get a segmentation fault. We've all had bugs in programs. We all might have bugs in programs right now. But what's the implication? Well, here's a zoomed-in version of that picture of my computer's memory. This is the bottom of my stack. And indeed, at the very bottom is what's called parent routine stack, fancy way of saying that's main. So that whoever called the function f that we're talking about. So this is the bottom of the stack. Return address is something new. It's always been there, always been in that picture. We just never called attention to it. Because it turns out the way c works is that when one function calls another, not only do the arguments to that function get pushed onto the stack, not only do the function's local variables get pushed onto the stack, something called a return address also gets put onto the stack. Specifically, if main calls foo, main's own address in memory, ox something, effectively gets put onto the stack so that when f is done executing it knows where to jump back to in the text segment in order to continue executing. 

So if we're here conceptually, in main, then f gets called. How does f know who to hand control back? Well, this little breadcrumb in red here, called the return address, it just checks, what is that return address? Oh, let me jump back to main here. And that's a little bit of an oversimplification, because the zeros and ones for main are technically up here in the tech segment. But that's the idea. f just has to know what to where control ultimately goes back. 

But the way computers have long laid out things like local variables and arguments is like this. So in the top of this picture in blue is the stack frame for f, so all of the memory that f specifically is using. So accordingly, notice that bar is in this picture. Bar was its argument. And we claimed that arguments to functions get pushed onto the stack. And c, of course, is also in this picture. 

And just for notational purposes, notice at the top left-hand corner is what would be c bracket 0 and then slightly down to the right is c bracket 11. So in other words, you can imagine that there's a grid of bytes there, first of which is top left, bottom of which is the last of those 12 bytes. 

But now try to fast forward. What is about to happen if we pass in a string bar that's longer than c? And we're not checking if it's indeed longer than 12. Which part of this picture is going to get overwritten by bytes 0, 1, 2, 3, dot dot dot, 11, and then bad, 12, 13 through 19? What's going to happen here, if you infer from the ordering that c bracket 0 is on the top and c bracket 11 is sort of down to the right? Yeah? 

AUDIENCE: Well, it's going to overwrite the char* bar. 

DAVID J. MALAN: Yeah, it looks like you're going to overwrite char* bar. And worse, if you send in a really long string, you might even overwrite what? The return address. Which again, is just like a breadcrumb to tell the program where to go back to when f is done being called. 

So what bad guys typically do is if they come across a program that they're curious whether is exploitable, buggy in such a way that he or she can take advantage of that bug, generally they don't get this right the first time. They just start sending, for instance, random strings into your program, whether at the keyboard, or frankly they probably write a little program to just automatically generate strings, and start banging on your program by sending in lots of different inputs at different lengths. 

As soon as your program crashes, that's an amazing thing. Because it means he or she has discovered what is probably indeed a bug. And then they can get more clever and start focusing more narrowly on how to exploit that bug. In particular, what he or she might do is send, in the best case, hello. No big deal. It's a string that's sufficiently short. But what if he or she sends, and we'll generalize it as, attack code-- so zeros and ones that do things like rm-rf, that remove everything from the hard drive or send spam or somehow attack the machine? 

So if each of these letters A just represents, conceptually, attack, attack, attack, attack, some bad code that someone else wrote, but if that person is smart enough to not only include all of those rm-rfs, but also have his or her last few bytes be a number that corresponds to the address of his or her own attack code that he or she passed in just by providing it at the prompt, you can effectively trick the computer into noticing when f is done executing, oh, it's time for me to jump back to the red return address. But because he or she has somehow overlapped that return address with their own number, and they're smart enough to have configured that number to refer, as you see in the super top left-hand corner there, the actual address in the computer's memory of some of their attack code, a bad guy can trick the computer into executing his or her own code. 

And that code, again, can be anything. It's generally called shell code, which is just a way of saying that it's not generally something as simple as rm-rf. It's actually something like Bash, or an actual program that gives him or her programmatic control to execute anything else that they want to. So in short, this all derives from the simple fact that this bug involved not checking the boundaries of your array. And because the way computers work is that they use the stack from effectively, conceptually, bottom on up, but then the elements you push onto the stack grow top down, this is incredibly problematic. Now, there are ways to work around this. And frankly, there are languages with which to work around this. Java is immune, for instance, to this particular issue. Because they don't give you pointers. They don't give you direct memory addresses. So with this power that we have to touch anything in memory we want comes, admittedly, great risk. 

So keep an eye out. If, frankly, in the months or years to come, anytime you read about some exploitation of a program or a server, if you ever see a hint of something like a buffer overflow attack, or stack overflow is another type of attack, similar in spirit, much as inspires the website's name, if you know it, it's all talking about just overflowing the size of some character array or some array more generally. Any questions, then, on this? Don't try this at home. 

All right. So malloc thus far has been our new friend in that we can allocate memory that we don't necessarily know in advance that we want so we don't have to hard code into our program numbers like 12. Once the user tells us how much data he or she wants to input, we can malloc that much memory. 

So malloc it turns out, to the extent we've been using it, explicitly last time, and then you guys have been using it for getstring unknowingly for several weeks, all of malloc's memory comes from the so-called heap. And this is why getstring, for instance, can allocate memory dynamically without knowing what you're going to type in advance, hand you back a pointer to that memory, and that memory is still yours to keep, even after getstring returns. Because recall after all that the stack is constantly going up and down, up and down. And as soon as it goes down, that means any memory this function used should not be used by anyone else. It's garbage values now. 

But the heap is up here. And what's nice about malloc is that when malloc allocates memory up here, it's not impacted, for the most part, by the stack. And so any function can access memory that has been malloc'd, even by a function like getstring, even after it is returned. 

Now, the converse of malloc is free. And indeed, the rule you need to start adopting is any, any, any time you use malloc you must yourself use free, eventually, on that same pointer. All this time we have been writing buggy, buggy code, for many reasons. But one of which has been using the CS50 library, which itself is deliberately buggy, it leaks memory. Any time you've called getstring over the past few weeks we're asking the operating system, Linux, for memory. And you have never once given it back. And this is not, in practice, a good thing. 

And Valgrind, one of the tools introduced in Pset 4, is all about helping you now find bugs like that. But thankfully for Pset 4 you don't need to use the CS50 library or getstring. So any bugs related to memory are ultimately going to be your own. 

So malloc is more than just convenient for this purpose. We can actually now solve fundamentally different problems, and fundamentally solve problems more effectively as per week zero's promise. Thus far this is the sexiest data structure we've had. And by data structure I just mean a way of conceptualizing memory in a way that goes beyond just saying, this is an int, this is a char. We can start to cluster things together. 

So an array looked like this. And what was key in about an array is that it gives you back-to-back chunks of memory, each of which is going to be of the same type, int, int, int, int, or char, char, char, char. But there's a few downsides. This for instance, is an array of size six. Suppose you fill this array with six numbers and then, for whatever reasons, your user wants to give you a seventh number. Where do you put it? 

What's the solution if you have created an array on the stack, for instance, just with the week two notation that we introduced, of square brackets with a number inside? Well, you've got six numbers in these boxes. What would your instincts be? Where would you want to put it? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: Sorry? 

AUDIENCE: Put it on the end. 

DAVID J. MALAN: Put it on the end. So just over to the right, outside of this box. Which would be nice, but it turns out you can't do that. Because if you've not asked for this chunk of memory, it could be by coincidence that this is being used by some other variable altogether. Think back a week or so when we laid out Zamyla and Davin and Gabe's names in memory. They were literally back to back to back. So we can't necessarily trust that whatever's over here is available for me to use. 

So what else might you do? Well, once realizing you need an array of size seven, you could just create an array of size seven then use a for loop or a while loop, copy it into the new array, and then somehow just get rid of this array or just stop using it. But that's not particularly efficient. In short, arrays don't let you dynamically resize. 

So on the one hand you get random access, which is amazing. Because it lets us do things like divide and conquer, binary search, all of which we've talked about on the screen here. But you paint yourself into a corner. As soon as you hit the end of your array, you have to do a very expensive operation or write a whole bunch of code to now deal with that problem. 

So what if instead we had something called a list, or a linked list in particular? What if instead of having rectangles back to back to back, we have rectangles that leave a little bit of wiggle room in between them? And even though I've drawn this picture or adapted this picture from one of the texts here to be back to back to back very orderly, in reality, one of those rectangles could be up here in memory. One of them could be up here. One of them could be up here, over here, and so forth. 

But what if we drew, in this case, arrows that somehow link these rectangles together? Indeed, we've seen a technical incarnation of an arrow. What have we used in recent days that, underneath the hood, is representative of an arrow? A pointer, right? 

So what if, instead of just storing the numbers, like 9, 17, 22, 26, 34, what if we stored not only a number but a pointer next to each such number? So that much like you would thread a needle through a whole bunch of fabric, somehow tying things together, similarly can we with pointers, as incarnated by arrows here, kind of weave together these individual rectangles by effectively using a pointer next to each number that points to some next number, that points to, in turn, some next number? So in other words, what if we actually wanted to implement something like this? Well unfortunately, these rectangles, at least the one with 9, 17, 22, and so forth, these are no longer nice squares with single numbers. The bottom, rectangle below 9, for instance, represents what should be a pointer, 32 bits. Now, I'm not yet aware of any data type in C that gives you not only an int but a pointer altogether. 

So what's the solution if we want to invent our own answer to this? Yeah? 

AUDIENCE: [INAUDIBLE] 

DAVID J. MALAN: What's that? 

AUDIENCE: New structure. 

DAVID J. MALAN: Yeah, so why don't we create a new structure, or in C, a struct? We've seen structs before, if briefly, where we dealt with a student structure like this, who had a name and a house. In Pset 3 breakout you used a whole bunch of structs-- GRect and GOvals that Stanford created to cluster information together. So what if we take this same idea of the keywords "typedef" and "struct," and then some student-specific stuff, and evolve this into the following: typedef struct node-- and node is just a very generic computer science term for something in a data structure, a container in a data structure. A node I claim is going to have an int n, totally straightforward, and then a little more cryptically, this second line, struct node* next. But in less technical terms, what is that second line of code inside the curly braces? Yeah? 

AUDIENCE: [INAUDIBLE] DAVID J. MALAN: A pointer to another node. So admittedly, syntax a little cryptic. But if you read it literally, next is the name of a variable. What is its data type? It's a little verbose this time, but it's of type struct node*. Any time we've seen something star, that means it's a pointer to that data type. So next is apparently a pointer to a struct node. 

Now, what is a struct node? Well, notice you see those same words at top right. And indeed, you also see the word "node" down here at the bottom left. And this is actually just a convenience. Notice that in our student definition there's the word "student" only once. And that's because a student object was not self-referential. There's nothing inside of a student that needs to point to another student, persay. That would be sort of weird in the real world. 

But with a node in a linked list, we do want a node to be referential to a similar object. And so notice the change here is not just what's inside the curly braces. But we add the word "node" at the top as well as adding it to the bottom in lieu of "student." And this is only a technical detail so that, again, your data structure can be self-referential, so that a node can point to another such node. 

So what is this ultimately going to mean for us? Well, one, this stuff inside is the contents of our node. This thing up here, top right, is just so that, again, we can refer to ourselves. And then the outermost stuff, even though node is a new term, perhaps, it's still the same as student and what was underneath the hood in SPL. 

So if we now wanted to start implementing this linked list, how might we translate something like this to code? Well, let's just see an example of a program that actually uses a linked list. Among today's distribution code is a program called List Zero. And if I run this I created a super simple GUI, Graphical User Interface, but it's really just printf. And now I've given myself a few menu options-- Delete, Insert, Search, and Traverse. And Quit. These are just common operations on a data structure known as a link list. 

Now, Delete is going to delete a number from the list. Insert's going to add a number to the list. Search is going to look for number in the list. And traverse is just a fancy way of saying, walk through the list, print it out, but that's it. Don't change it in any way. 

So let's try this. Let's go ahead and type 2. And then I'm going to insert the number, say 9. Enter. And now my program is just programmed to say, list is now 9. Now, if I go ahead and do Insert again, let me go ahead and zoom out and type in 17. Now my list is 9, then 17. If I do insert again, let's skip one. Instead of 22, as per the picture we've been looking at here, let me jump ahead and insert 26 next. So I'm going to type 26. The list is as I expect. But now, just to see if this code is going to be flexible, let me now type 22, which at least conceptually, if we're keeping this sorted, which is indeed going to be another goal right now, should go in between 17 and 26. So I hit Enter. Indeed, that works. And so now let me insert the last, per the picture, 34. 

All right. So for now let me stipulate that Delete and Traverse and Search do, in fact, work. In fact, if I do run Search, let's search for the number 22, Enter. It found 22. So that is what this program List Zero does. 

But what is actually going on that implements this? Well, first I might have, and indeed I do have, a file called list0.h. And somewhere in there is this line, typedef, struct node, then I have my curly braces, int n, and then struct-- what was the definition? Struct node next. So we need the star. Now technically we get into the habit of drawing it here. You might see textbooks and online references do it there. It's functionally equivalent. In fact, this is a little more typical. But I'll be consistent with what we did last time and do this. And then lastly, I'm going to do this. 

So in a header file somewhere, in list0.h today is this struct definition, and maybe some other stuff. Meanwhile in list0c there's going to be a few things. But we're going to just start and not finish this. List0.h is a file I want to include in my C file. And then at some point I'm going to have int, main, void. And then I'm going to have some to-do's here. I'm also going to have a prototype, like void, search, int, n, whose purpose in life is to search for an element. And then down here I claim in today's code, void, search, int, n, no semicolon but open curly braces. And now I want to somehow search for an element in this list. But we don't have enough information on the screen yet. I haven't actually represented the list itself. So one way we could implement a linked list in a program is I kind of want to do something like declare linked list up here. For simplicity, I'm going to make this global, even though in general we shouldn't do this too much. But it will simplify this example. So I want to declare a linked list up here. Now, how might I do that? 

Here's the picture of a linked list. And I don't really know at the moment how I'm going to go about representing so many things with just one variable in memory. But think back a moment. All this time we've had strings, which we then revealed to be arrays of characters, which we then revealed to just be a pointer to the first character in an array of characters that's null terminated. So by that logic, and with this picture kind of seeding your thoughts, what need we actually write in our code to represent a linked list? How much of this information do we need to capture in C code, would you say? Yeah? 

AUDIENCE: We need a pointer to a node. DAVID J. MALAN: A pointer to a node. In particular, which node would your instincts be to keep a pointer to? 

AUDIENCE: The first node. 

DAVID J. MALAN: Yeah, probably just the first. And notice, the first node is a different shape. It's only half the size of the struct, because it's indeed only a pointer. So what you can indeed do is declare a linked list to be of type node*. And let's just call it first and initialize it to null. So null, again, is coming into the picture here. Not only is null used as like a special return value for things like getstring and malloc, null is also the zero pointer, the lack of a pointer, if you will. It just means nothing is yet here. Now first, I could've called this anything. I could have called it "list" or any number of other things. But I'm calling it "first" so that it lines up with this picture. So just like a string can be represented with the address of its first byte, so can a linked list. And we'll see other data structures be represented with just one pointer, a 32-bit arrow, pointing at the very first node in the structure. 

But now let's anticipate a problem. If I'm only remembering in my program the address of the first node, the first rectangle in this data structure, what had better be the case about the implementation of the rest of my list? What's a key detail that's going to ensure this actually works? And by "actually works" I mean, much like a string, lets us go from the first character in Davin's name to the second, to the third, to the fourth, to the very end, how do we know when we're at the end of a linked list that looks like this? When it's null. And I've represented this sort of as like an electrical engineer might, with the little grounding symbol, of sorts. But that just means null in this case. You can draw it any number of ways, but this author happened to use this symbol here. 

So long as we're stringing all of these nodes together, only remembering where the first one is, so long as we put a special symbol at the very last node in the list, and we'll use null, because that's what we have available to us, this list is complete. And even if I only give you a pointer to the first element, you, the programmer, can certainly access the rest of it. But let's let your minds wander a little bit, if they're not already quite wandered-- what's going to be the running time of finding anything in this list? Damn it, it's big O of n, which isn't bad, in fairness. But it is linear. We have given up what feature of arrays by moving more toward this picture of dynamically woven together or linked nodes? We've given up random access. An array is nice because mathematically everything is back to back to back to back. Even though this picture looks pretty, and even though it looks like these nodes are nicely spaced apart, in reality they could be anywhere. Ox1, Ox50, Ox123, Ox99, these nodes could be anywhere. Because malloc does allocate memory from the heap, but anywhere in the heap. You don't necessarily know that it's going to be back to back to back. And so this picture in reality's not going to be quite this pretty. 

So it's going to take a bit of work to implement this function. So let's implement search now. And we'll see kind of a clever way of doing this. So if I am a search function and I'm given a variable, integer n to look for, I need to know the new syntax for looking inside of a structure that's pointed to, to find n. So let's do this. 

So first I'm going to go ahead and declare a node*. And I'm going to call it pointer, just by convention. And I'm going to initialize it to first. And now I can do this in a number of ways. But I'm going to take a common approach. While pointer is not equal to null, and that's valid syntax. And it just means do the following, so long as you're not pointing at nothing. What do I want to do? 

If pointer dot n, let me come back to that, equals-- equals what? What value am I looking for? The actual n that was passed in. So here's another feature of C and many languages. Even though the structure called node has a value n, totally legitimate to also have a local argument or variable called n. Because even we, with human eyes, can distinguish that this n is presumably different from this n. Because the syntax is different. You've got a dot and a pointer, whereas this one has no such thing. So this is OK. That's OK to call them the same things. 

If I do you find this, I'm going to want to do something like announce that we found n. And we'll leave that as a comment or pseudocode code. Else, and here's the interesting part, what do I want to do if the current node is not containing n that I care about? How do I achieve the following? If my finger at the moment is PTR, and it's pointing at whatever first is pointing at, how do I move my finger to the next node in code? Well, what's the breadcrumb we're going to follow in this case? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Yeah, so next. So if I go back to my code here, indeed, I'm going to go ahead and say pointer, which is just a temporary variable-- it's a weird name, ptr, but it's just like temp-- I'm going to set pointer equal to whatever pointer is-- and again, this is going to be a little buggy for a moment-- dot next. In other words, I'm going to take my finger that's pointing at this node here and I'm going to say, you know what, take a look at the next field and move your finger to whatever it's pointing at. And this is going to repeat, repeat, repeat. But when does my finger stop doing anything at all? As soon as what line of code kicks in? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: If point while pointer is not equal to null. At some point my finger's going to be pointing at null and I'm going to realize that's the end of this list. Now, this is a little white lie for simplicity. It turns out that even though we just learned this dot notation for structures, pointer is not a struct. ptr is what? Just to be more nitpicky. It's a pointer to a node. It's not a node itself. If I had no star here, pointer absolutely-- it's a node. This is like week one declaration of a variable, even though the word "node" is new. 

But as soon as we introduce a star, it's now a pointer to a node. And unfortunately you can't use the dot notation for a pointer. You have to use the arrow notation, which, strikingly, is the first time any piece of syntax looks intuitive. This literally looks like an arrow. And so that's a good thing. And down here literally looks like an arrow. So I think that's the la-- I don't think I'm over-committing here-- I think that's the last new piece of syntax we're going to see. And thankfully, it's indeed a little more intuitive. 

Now, for those of you who might prefer the old way, you can still use the dot notation. But as per Monday's conversation, we first need to go there, go to that address, and then access the field. So this is also correct. And frankly, this is a little more pedantic. You're literally saying, dereference the pointer and go there. Then grab .n, the field called n. But frankly, no one wants to type or read this. And so the world invented the arrow notation, which is equivalent, identical, it's just syntactic sugar. So a fancy way of saying this looks better, or looks simpler. 

So now I'm going to do one other thing. I'm going to say "break" once I've found it so I don't keep looking for it. But this is the gist of a search function. But it's a lot easier, in the end, not to walk through the code. This is indeed the formal implementation of search in today's distribution code. I dare say that insert is not particularly fun to walk through visually, nor is delete, even though at the end of the day they boil down to fairly simple heuristics. 

So let's do this. If you'll humor me here, I did bring a bunch of stress balls. I brought a bunch of numbers. And could we get just a few volunteers to represent 9, 17, 20, 22, 29, and 34? So essentially everyone who's here today. That was one, two, three, four, five, six people. And I've been asked to go-- see, no one in the back raises their hands. OK, one, two, three, four, five-- let me load balance-- six. OK, you six come on up. We'll need other people. We brought extra stress balls. And if you could, for just a moment, line yourselves up just like this picture here. 

All right. Let's see, what's your name? 

AUDIENCE: Andrew. 

DAVID J. MALAN: Andrew, you are number 9. Nice to meet you. Here you go. AUDIENCE: Jen. DAVID J. MALAN: Jen. David. Number 17. Yes? 

AUDIENCE: I'm Julia. 

DAVID J. MALAN: Julia, David. Number 20. AUDIENCE: Christian. DAVID J. MALAN: Christian, David. Number 22. And? 

AUDIENCE: JP. DAVID J. MALAN: JP. Number 29. So go ahead and get in-- Uh oh. Uh oh. Standby. 20. Does anyone have a marker? AUDIENCE: I've got a Sharpie. DAVID J. MALAN: You got a Sharpie? OK. And does anyone have a piece of paper? Save the lecture. Come on. AUDIENCE: We've got it. DAVID J. MALAN: We got it? All right, thank you. Here we go. Was this from you? You just saved the day. So 29. All right. I misspelled 29, but OK. Go ahead. All right, I'll give you your pen back momentarily. So we have these folks here. Let's have one other. Gabe, do you want to play the first element here? We'll need you to point at these fine folks. So 9, 17, 20, 22, sort of 29, and then 34. Did we lose someone? I do have a 34. Where did-- OK, who wants to be 34? OK, come on up, 34. All right, this will be well worth the climax. What's your name? 

AUDIENCE: Peter. 

DAVID J. MALAN: Peter, come on up. All right, so here's a whole bunch of nodes. Each of you guys represents one of these rectangles. And Gabe, the slightly odd man out, represents first. So his pointer is a little smaller on the screen than everyone else. And in this case, each of your left hands is going to either point down, thereby representing null, so just the absence of a pointer, or it's going to be pointing at a node next to you. 

So right now if you adorn yourselves like the picture here, go ahead and point at each other, with Gabe in particular pointing at number 9 to represent the list. OK, and number 34, your left hand should just be pointing at the floor. 

OK, so this is the linked list. So this is the scenario in question. And indeed, this is representative of a class of problems that you might try to solve with code. You want to ultimately insert a new element into the list. In this case, we're going to try inserting the number 55. But there's going to be different cases to consider. And indeed, this is going to be one of the big-picture takeaways here, is, what are the different cases. What are the different if conditions or branches that your program might have? 

Well, the number you're trying to insert, which we know now to be 55, but if you didn't know in advance, I daresay falls into at least three possible situations. Where might a new element be? AUDIENCE: And the end or middle. DAVID J. MALAN: At the end, in the middle, or at the beginning. So I claim there's at least three problems we need to solve. Let's choose what's perhaps arguably the simplest one, where the new element belongs at the beginning. So I'm going to have code quite like search, which I just wrote. And I'm going to have ptr, which I'll represent here with my finger, as usual. 

And remember, what value did we initialize ptr to? So we initialized it to null initially. But then what did we do once we were inside our search function? We set it equal to first, which doesn't mean doing this. If I set ptr equal to first, what should my hand really be pointing at? Right. So if Gabe and I are going to be equal values here, we need to both point at number 9. 

So this was the beginning of our story. And now this is just straightforward, even though the syntax is new. Conceptually this is just linear search. Is 55 equal to 9? Or rather, let's say less than 9. Because I'm trying to figure out where to put 55. Less than 9, less than 17, less than 20, less than 22, less than 29, less than 34, no. So now we're in case one of at least three. 

If I want to insert 55 over here, what lines of code need to get executed? How does this picture of humans need to change? What do I do with my left hand? This should be null initially, because I'm at the end of the list. And what should happen here with Peter, was it? He's obviously going to point to me. So I claim there's at least two lines of code in the sample code from today that's going to implement this scenario of adding 55 at the tail. And could I have someone hop up and just represent 55? All right, you are the new 55. 

So now what if the next scenario comes along, and we want to insert at the beginning or the head of this list? And what's your name, number 55? 

AUDIENCE: Jack. 

DAVID J. MALAN: Jack? OK, nice to meet you. Welcome aboard. So now we're going to insert, say, the number 5. Here's the second case of the three we came up with before. So if 5 belongs at the beginning, let's see how we find that out. I initialize my ptr pointer to number 9 again. And I realized, oh, 5 is less than 9. So fix this picture for us. Whose hands, Gabe's or David's or-- what's number 9's name? 

AUDIENCE: Jen. 

DAVID J. MALAN: Jen's hands-- which of our hands need to change? OK, so Gabe points at what now? At me. I am the new node. So I'll just kind of move here to see it visually. And meanwhile what do I point that? Still where I'm pointing. So that's it. So just really one line of code fixes this particular issue, it would seem. All right, so that's good. And can someone be a placeholder for 5? Come on up. We'll get you next time. 

All right, so now-- and as an aside, the names I'm not making explicit mention of right now, pred pointer, predecessor pointer and new pointer, that's just the names given in the sample code to the pointers or my hands that's kind of pointing around. What's your name? 

AUDIENCE: Christine. 

DAVID J. MALAN: Christine. Welcome aboard. All right, so let's consider now a slightly more annoying scenario, whereby I want to insert something like 26 into this. 20? What? These are-- good thing we have this pen. All right, 20. If someone could get another piece of paper ready, just in case-- all right. Oh, interesting. Well this is an example of a lecture bug. OK so what's your name again? AUDIENCE: Julia. DAVID J. MALAN: Julia, can you pop out and pretend you were never there? OK, this never happened. Thank you. So suppose we want insert Julia into this linked list. She is the number 20. And of course she's going to belong at the begin-- don't point at anything yet. So your hand can kind of be down null or some garbage value. Let's tell the quick story. I'm pointing at number 5 this time. Then I check 9. Then I check 17. Then I check 22. And I realize, ooh, Julia needs to go before 22. So what needs to happen? Whose hands need to change? Julia's, mine, or-- what's your name again? 

AUDIENCE: Christian. 

DAVID J. MALAN: Christian or? 

AUDIENCE: Andy. 

DAVID J. MALAN: Andy. Christian or Andy? Andy needs to point at? Julia. All right. So Andy, do you want to point at Julia? But wait a minute. In the story thus far, I'm the sort of one in charge, in the sense that pointer is the thing that's moving through the list. We might have a name for Andy, but there's no variable called Andy. The only other variable we have is first, who's represented by Gabe. 

So this is actually why thus far we've not needed this. But now on the screen there is mention again of pred pointer. So let me be more explicit. If this is pointer, I had better get a little more intelligent about my iteration. If you don't mind my going through here again, pointing here, pointing here. But let me have a pred pointer, predecessor pointer, that's kind of pointing at the element I was just at. So when I go here, now my left hand updates. When I go here my left hand updates. And now I have not only a pointer to the element that goes after Julia, I still have a pointer to Andy, the element before. So you have access, essentially, breadcrumbs, if you will, to all of the requisite pointers. 

So if I'm pointing at Andy and I'm also pointing at Christian, whose hands should now be pointed elsewhere? So Andy can now point at Julia. Julia can now point at Christian. Because she can copy my right hand's pointer. And that effectively puts you back into this place here. So in short, even though this is taking us kind of forever to actually update a linked list, realize that the operations are relatively simple. It's of one, two, three lines of code ultimately. But wrapped around those lines of code presumably is a bit of logic that effectively asks the question, where are we? Are we at the beginning, the middle, or the end? 

Now, there are certainly some other operations we might implement. And these pictures here just depict what we just did with humans. What about removal? If I want to, for instance, remove the number 34 or 55, I might have the same kind of code, but I'm going to need one or two steps. Because what's new? If I remove someone at the end, like number 55 and then 34, what also has to change as I do that? I have to not evict-- what's your name again? 

AUDIENCE: Jack. 

DAVID J. MALAN: Jack. I have to not only evict-- free Jack, so literally call free Jack, or at least the pointer there too, but now what needs to change with Peter? His hand better start pointing down. Because as soon as I call free on Jack, if Peter's still pointing at Jack and I therefore keep traversing the list and access this pointer, that's when our old friend segmentation fault might actually kick in. Because we've given the memory back to Jack. 

You can stay there awkwardly for just a moment. Because we have just a couple final operations to consider. Removing the head of the list, or the beginning-- and this one's a little annoying. Because we have to know that Gabe is kind of special in this program. Because indeed, he has his own pointer. He's not just being pointed at, as is almost everyone else here. 

So when the head of the list is removed, whose hands need to change now? What's your name again? 

AUDIENCE: Christine. 

DAVID J. MALAN: I'm awful at names, apparently. So Christine and Gabe, whose hands need to change when we try to remove Christine, number 5, from the picture? OK, so let's do Gabe. Gabe's going to point, presumably, at number 9. But what next should happen? AUDIENCE: Christine should be null [INAUDIBLE]. DAVID J. MALAN: OK, we should probably make-- I heard "null" somewhere. AUDIENCE: Null and free her. DAVID J. MALAN: Null what? AUDIENCE: Null and free her. DAVID J. MALAN: Null and free her. So this is very easy. And it's perfect that you're now sort of standing there, not belonging. Because you've been decoupled from the list. You've effectively been orphaned from the list. And so we had better call free now on Christine to give that memory back. Otherwise every time we delete a node from the list we might be making the list shorter, but not actually decreasing the size in memory. And so if we keep adding and adding, adding things to the list, my computer might get slower and slower and slower, because I'm running out of memory, even if I'm not actually using Christine's bytes of memory anymore. 

So in the end there are other scenarios, of course-- removal in the middle, removal at the end, as we saw. But the more interesting challenge now is going to be to consider exactly what the running time is. So not only can you keep your pieces of paper, if, Gabe, you wouldn't mind giving everyone a stress ball. Thank you so much to our linked list of volunteers here, if you could. 

[APPLAUSE] 

DAVID J. MALAN: All right. So a couple of analytical questions then, if I could. We've seen this notation before, big O and omega, upper bounds and lower bounds on the running time of some algorithm. So let's consider just a couple of questions. 

One, and we said it before, what's the running time of search for a list in terms of big O? What's an upper bound on the running time of searching a linked list as implemented by our volunteers here? It's big O of n, linear. Because in the worst case, the element, like 55, we might be looking for might be where Jack was, all the way at the end. And unfortunately, unlike an array we can't get fancy this time. Even though all of our humans were sorted from small elements, 5, all the way up to the bigger element, 55, that's usually a good thing. But what does that assumption no longer allow us to do? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say again? AUDIENCE: Random access. DAVID J. MALAN: Random access. And in turn that means we can no longer use weak zeros, intuition, and obviousness of using binary search and divide and conquer. Because even though we humans could obviously see that Andy or Christian were roughly in the middle of the list, we only know that as a computer by skimming the list from the very beginning. So we've given up that random access. 

So big O of n now is the upper bound on our search time. What about omega of our search? What's the lower bound on searching for some number in this list? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say again? AUDIENCE: One. DAVID J. MALAN: One. So constant time. In the best case, Christine is indeed at the beginning of the list. And we're looking for number 5, so we found her. So no big deal. But she's got to be at the beginning of the list in this case. What about something like Delete? What if you want to delete an element? What's the upper bound and lower bound on deleting something from a linked list? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say again? AUDIENCE: n. DAVID J. MALAN: n is indeed the upper bound. Because in the worst case we try to delete Jack, like we just did. He's all the way at the end. Takes us forever, or n steps to find him. So that's an upper bound. That's linear, sure. And the best case running time, or the lower bounds in the best case would be constant time. Because maybe we try to delete Christine, and we just get lucky she's at the beginning. Now wait a minute. Gabe was also at the beginning, and we also had to update Gabe. So that wasn't just one step. So is it indeed constant time, in the best case, to remove the smallest element? It is, even though it might be two, three, or even 100 lines of code, if it's the same number of lines, not in some loop, and independent of the size of the list, absolutely. Deleting the element at the beginning of the list, even if we have to deal with Gabe, is still constant time. 

So this seems like a massive step backwards. And what a waste of time if, in week one and week zero we had not only pseudocode code but actual code to implement something that's log base n, or log, rather, of n, base 2, in terms of its running time. So why the heck would we want to start using something like a linked list? Yeah. 

AUDIENCE: So you can add elements to the array. DAVID J. MALAN: So you can add elements to the array. And this too is thematic. And we'll continue to see this, this trade-off, much like we've seen a trade-off with merge sort. We could really speed up search or sorting, rather, if we spend a bit more space and have an additional chunk of a memory or an array for merge sort. But we spend more space, but we save time. In this case, we're giving up time but we're gaining flexibility, dynamism if you will, which is arguably a positive feature. 

We're also spending space. In what sense is a linked list more expensive in terms of space than an array? Where is the extra space coming from? Yeah? 

AUDIENCE: [INAUDIBLE] pointer. 

DAVID J. MALAN: Yeah, we also have the pointer. So this is minorly annoying in that no longer am I storing just an int to represent an int. I'm storing an int and a pointer, which is also 32 bits. So I'm literally doubling the amount of space involved. So that's a trade-off, but that's in the case of int. Suppose that you're not storing int, but suppose each of these rectangles or each of these humans was representing a word, an English word that might be five characters, 10 characters, maybe even more. Then adding just 32 more bits might be less of a big deal. 

What if each of the students in the demonstration were literally student structs that have names and houses and maybe phone numbers and Twitter handles and the like. So all of the fields we started talking about the other day, much less of a big deal as our nodes get more interesting and big to spend, eh, an additional pointer just to link them together. But indeed, it's a trade-off. And indeed, the code is more complex, as you'll see by skimming through that particular example. But what if there were some holy grail here. What if we don't take a step backwards but a massive step forward and implement a data structure via which we can find elements like Jack or Christine or any other elements in this array in true constant time? Search is constant. Delete is constant. Insert is constant. All of these operations are constant. That would be our holy grail. And that is where we will pick up next time. See you then. [MUSIC PLAYING] DAVID MALAN: This is CS50. And this is both the start and the end-- like literally-- almost the end of week six. 

I thought I'd share a little bit of a fun fact. I've pulled this up from a past semester's data set. You may recall that we ask you on every p set form if you've watched online or if you've attended in person. And here is the data. So today was very much predictable. But we wanted to spend a bit of time with you nonetheless. Would anyone like to conjecture why this graph is so jaggy, up down, up down, so consistently? What do each of the peaks and troughs represent? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Indeed. And more amusingly, god forbid, we hold one lecture on a Friday at the beginning of the semester, that's what we see happen. So today, we partake in a bit more about data structures. And to give you more of a solid mental model for problems at five, which is now out. Misspellings, wherein, we'll hand you a text file some 100,000 plus English words, and you're going to have to figure out how to cleverly load them into memory, into RAM, using some data structure of your choice. 

Now one such data structure could be, but probably shouldn't be, the fairly simplistic linked list, which we introduced last time. And a linked list had at least one advantage over an array. What's one advantage of a linked list arguably? 

AUDIENCE: Insertion. 

DAVID MALAN: Insertion. What do you mean by that? 

AUDIENCE: Anywhere along the list [INAUDIBLE]. 

DAVID MALAN: Good. So you can insert an element wherever you want in the middle of the list without having to shuffle anything, which we concluded, in our sorting discussions, isn't necessarily a good thing, because it takes time to actually move all of those humans left or right. And so with a linked list, you can just allocate with malloc, a new node, and then update a couple of pointers-- two, three operations max-- and we're able to slot someone in anywhere into a list. 

What else was advantageous about a linked list? Yeah? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Perfect. Perfect. It's really dynamic. And that you're not committing, in advance, to some fixed size chunk of memory, like you would have to with an array, the upside of which is that you can allocate nodes only on demand thereby using only as much space as you actually need. By contrast with an array, you might accidentally allocate too little. And then it's just going to be a pain in the neck to reallocate a new bigger array, copy everything over, free the old array, and then move about your business. Or worse, you might allocate way more memory than you actually need, and so you're going to have a very sparsely-populated array, so to speak. 

So a linked list gives you these advantages of dynamism and flexibility with insertions and deletions. But surely there must be a price paid. In fact, one of the themes explored on quiz zero was a couple of the trade-offs we've seen thus far. So what's a price paid or a downside of a linked list? Yeah. 

AUDIENCE: No random access. 

DAVID MALAN: No random access. But who cares? Random access doesn't sound compelling. 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. If you want to have a certain algorithm-- and let me actually propose binary search in particular, which is one we've used quite a bit-- if you don't have random access, you can't do that simple arithmetic of finding like the middle element and jumping right to it. You instead have to start at the first element and linearly search from left to right if you want to find the middle or any other element. 

AUDIENCE: It probably takes more memory. 

DAVID MALAN: Takes more memory. Where is that additional cost coming from in memory? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. In this case here, we had a linked list for integers, and yet we're doubling the amount of memory we need by also storing these pointers. Now less of a big deal as your structs get larger and you're storing not a number but maybe a student or some other object. But the point certainly remains. And so a number of the operations on linked lists were called were big O of n-- linear. Things like insertion or search or deletion in case an element happened to be at the very end of the list whether it's sorted or not. 

Sometimes you might get lucky and in so lower bounds on these operations might also be constant time if you're always looking at the first element, for instance. But ultimately, we promised to achieve the holy grail of data structures, or some approximation thereof, by way of constant time. Can we find elements or add elements or remove elements from a list? We shall see quite soon. And it turns out that one of the mechanisms we're going to start to use today, annual use in p set five, is actually pretty familiar. For instance, if this is a bunch of exam books, each of which has a student's first name and last name on it, and I pick them up from at the end of an exam, and they're all pretty much in a random order, and we want to go about sorting these exams so that once graded it's just a lot easier and faster to hand them back out to students alphabetically. What would your instincts be for a pile of exams like this? 

Well, if you're like me, you might see that this is m, so I'm going to sort of put this into, if this is my table or my floor where I'm spreading things out-- or my array really-- I might put all of the Ms in there. Oh. Here's an A. So I might put the As over here. Oh. Here's another A. I'm going to put that over here. Here's a Z. Here is another M. And so I might start making piles like this. And then maybe I'd go in later and sort of very nitpicky-ly sort the individual piles. But the point is I would look at the input that I'm handed and I would make some calculated decision based on that input. If it starts with A, put it over there. If it starts with Z, put it over there, and everything in between. 

So this is a technique that's generally known as hashing-- H-A-S-H-- which generally means taking as input and using that input to compute a value, generally a number, and that number is the index into a storage container, like an array. So in other words, I might have a hash function, as I do in my head, that if I see someone's name who starts with A, I'm going to map that to zero in my head. And if I see someone with Z, I'm going to map that to 25 in my head and then put that into the last most pile. 

Now, if you think about not my brain but a C program, what numbers could you rely on to achieve that same result? In other words, if you had the ASCII character A, how do you determine what bucket to put it in? You probably don't want to put it into bucket 65, which would be like over there for no good reason. Where do you want to put A in terms of its ASCII value? Where do you want to do to its ASCII value to come up with a smarter bucket to put it in? 

AUDIENCE: Minus A. 

DAVID MALAN: Yeah. So minus A or minus specifically 65 if it's a capital A. Or 98 if it's a lowercase a. And so that would allow us to, very simply and very arithmetically, put something into a bucket like that. So it turns out we actually do this as well even with the quizzes. 

So you might recall you circled your teaching fellow's name on the cover. And the TF's names were organized into these columns alphabetically, well, believe it or not, when all 80 plus of us got together the other night to grade, the last step in our grading process is to hash the quizzes into a big space of floor at the [INAUDIBLE] and to lay everyone's quizzes out in exactly the order of their TF's names on the cover, because then it's a lot easier for us to search through that using linear search or some kind of cleverness for a TF to find his or her students' quizzes. 

So this idea of hashing that you'll see is quite powerful is actually pretty commonplace and very intuitive, much like perhaps divide and conquer was in week zero. I fast forward to the hackathon a couple of years ago. This was Zamyla and a couple of other staff greeting students as they came in. And we had a whole bunch of folding tables there with name tags. And we had the name tags organized with like the As over there and the Zs over there. And so one of the TFs very cleverly wrote this as the instructions for the day. And in week 12 of the semester this all made perfect sense and everyone knew what to do. But anytime you've queued in the same way, you're implementing the same notion of a hash. So let's formalize it a little bit. Here is an array. It's drawn to be a little wide just to depict, visually, that we might put strings in something like this. And this array is clearly of size 26 total. And the thing is called table arbitrarily. But this is just an artist's rendition of what a hash table might be. 

So a hash table now is going to be a higher level data structure. At the end of the day we're about to see that you can implement a hash table, which is much like the check-in line at a hackathon much like this table used for sorting exam books. But a hash table is sort of this high level concept that could use an array underneath the hood to implement it, or it could use a length list, or even perhaps some other data structures. And now that's the theme-- taking some of these fundamental ingredients like an array and this building block now of a length list and seeing what else we can build on top of those, like ingredients into a recipe, making more and more interesting and useful final results. 

So with the hash table we might implement it in memory pictorially like this, but how might it actually be coded up? Well, maybe as simply is this. If CAPACITY in all caps, is just some constant-- for instance 26, for 26 letters of the alphabet-- I might call my variable table, and I might claim that I'm going to put char stars in there, or string. So it's as simple as this if you want to implement a hash table. And yet, this is really just an array. But again, a hash table is now what we'll call an abstract data type that's just sort of a conceptual layering on top of something more mundane now like an array. 

Now, how do we go about solving problems? Well, earlier I had the luxury of having enough table space here so that I could put the quizzes anywhere I wanted. So As might go here. Zs might go here. Ms might go here. And then I had some extra space. But this is a bit of a cheat right now because this table, if I really thought of it as an array, is just going to be of some fixed size. 

So technically, if I pull up another student's quiz and see, oh, this person's name starts with an A too, I kind of want to put it there. But as soon as I put it there, if this table indeed represents an array, I'm going to be overriding or clobbering whoever this student's quiz is. Right? If this is an array, only one thing can go in each of these cells or elements. And so I kind of have to pick and choose. 

Now earlier I kind of cheated and did this or I just kind of stacked them above each other. But that's not going to fly in code. So where could I put the second student whose name is A if all I had is this available table space? And I've used three slots and it looks like there's just a few others. What could you do? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah. Maybe let's just keep it simple. Right? It doesn't fit where I want to put it. So I'm going to put it technically where a B would go. Now, of course, I'm starting to paint myself into a corner. If I get to a student whose name is actually B, now B is going to be moved a little forward, as might happen, yep, if this is a B, now it has to go here. 

And so this very quickly could become problematic, but it's a technique that actually is referred to as linear probing, whereby you just consider your array to be along the line. And you just kind of probe or inspect each available element looking for an available spot. And as soon as you find one, you drop it in there. 

Now, the price being paid now for this solution is what? We have a fixed size array, and when I insert names into it, at least initially, what's the running time of insertion for putting the students' quizzes in the right buckets? Big O of what? 

AUDIENCE: n. DAVID MALAN: I heard big O of n. Not true. But we'll tease apart why in just a moment. What else might it be? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: And let me do it visually. So suppose this is the letter S. 

AUDIENCE: It's one. DAVID MALAN: It's one. Right? This is an array, which means we have random access. And if we think of this as zero and this as 25, and we realize that, oh, here's my input S, I can certainly convert S, an ASCII character, to a corresponding number between zero and 25 and then immediately put it where it belongs. 

But of course, as soon as I get to the second person who's name is A or B or C eventually, if I've used the linear probing as my solution, the running time of insertion in the worst case is actually going to devolve into what? And I did hear it here correctly early on. AUDIENCE: [INAUDIBLE] DAVID MALAN: So it is n indeed once you have a sufficiently large data set. So, on the one hand, if your array is big enough and your data is sparse enough, you get this beautiful constant time. But as soon as you start getting more and more elements, and just statistically you get more people with the letter A as their name or the letter B, it could potentially devolve into something more linear. So not quite perfect. So could we do better? 

Well, what was our solution before when we want to have more dynamism than something like an array allowed? AUDIENCE: [INAUDIBLE] DAVID MALAN: What did we introduce? Yeah. So a linked list. Well, let's see what a linked list might do for us instead. Well, let me propose that we draw the picture as follows. Now this is a different picture from an example from a different text, actually, that is actually using an array of size 31. And this author simply decided to hash strings not based on the person's names, but based on their birthdates. Irrespective of the month, they figured if you're born on the first of a month or the 31st of a month, the author will hash based on that value, so as to spread the names out a bit more than just 26 spots might allow. And perhaps it's a little more uniform than going with alphabetical letters, because of course there's probably more people in the world with names that start with A than certainly some other letters of the alphabet. So maybe this is a little more uniform, assuming a uniform distribution of babies across a month. 

But, of course, this is still imperfect. Right? We're having collisions. Multiple people in this data structure are still having the same birthdate at least you're irrespective of month. But what has the author done? Well, it looks like we have an array on the left-hand side drawn vertically, but that's just an artist's rendition. It doesn't matter what direction you draw an array, it's still an array. What is this an array of apparently? 

AUDIENCE: Linked list. 

DAVID MALAN: Yeah. It looks like it's an array of linked list. So again, to this point of sort of using these data structures now as ingredients to more interesting solutions, you can absolutely take a fundamental, like an array, and then take something more interesting like a linked list and even combine them into an even more interesting data structure. And indeed, this too would be called a hash table, whereby the array is really the hash table, but that hash table has chains, so to speak, that can grow or shrink based on the number of elements you want to insert. 

Now, accordingly, what's the running time now? If I want to insert someone whose birthday is October 31, where does he or she go? All right. At the very bottom where it says 31. And that's perfect. That was constant time. But what if we find someone else whose birthday is, let's see, October, November, December 31? Where is he or she going to go? Same thing. Two step though. That's constant though isn't it? All right. At the moment it is. But in the general case, the more people we add, probabilistically, we're going to get more and more collisions. 

Now this is a little better because technically now my chains could be in the worst case how long? If I insert n people into this more sophisticated data structure, n people, in the worst case it's going to be n. Why? 

AUDIENCE: Because if everybody has the same birthday, they're going to be one line. DAVID MALAN: Perfect. It might be a little contrived, but truly in the worst case, if everyone has the same birthday, given the inputs you have, you're going to have a massively long chain. And so, you could call it a hash table, but really it's just a massive linked list with a whole lot of wasted space. But in general, if we assume that at least birthdays are uniform-- and it probably isn't. I'm making that up. But if we assume, for the sake of discussion that they are, then in theory, if this is the vertical representation of the array, well then hopefully you're going to get chains that are, you know, roughly the same length where each of these represents a day of the month. 

Now if there's 31 days in the month, that means my running time really is big O of n over 31, which feels better than linear. But what was one of our commitments a couple of weeks ago whenever it came to expressing the running time of an algorithm? Just only look at the high order term. Right? 31 is definitely helpful. But this is still big O of n. But one of the themes of problem set five is going to be to acknowledge that absolutely, asymptotically, theoretically this data structure is no better than just one massive linked list. And indeed, in the worst case, this hash table might devolve into that. 

But in the real world, with us humans that own Macs or PCs or whatever and are running real world software on real world data, which algorithm are you going to prefer? The one that takes end steps or the one that takes n divided by 31 steps to find some piece of data or to look up some information? I mean, absolutely the 31 makes a difference in the real world. It is 31 times faster. And we humans are certainly going to appreciate that. 

So realize the dichotomy there between actually talking about things theoretically and asymptotically which definitely has value as we've seen, but in the real world, if you care about just making the human happy for general inputs, you might very well want to accept the fact that, yes, this is linear, but it's 31 times faster than linear might be. And better yet, we don't just have to do something arbitrary like a birthdate, we could spend a little more time and cleverness and think about what we might do, given a person's name and maybe their birthdate to combine those ingredients to figure out something that is truly more uniform and less jaggy, so to speak than this picture currently suggests it might be. How could we implement this in code? Well, let me propose that we just borrow some syntax we've used a couple times thus far. And I'm going to define a node, which again is a generic term for just some container for some data structure. I'm going to propose that a string is going in there. But we're going to start taking those training wheels off now. 

No more CS50 library really, unless you want to use it for your final project, which is fine, but now we're going to pull back the curtain and say it's just a char star. So the word there is going to be the person's name in question. And now I have a link here to the next node so that these represent each of the nodes in the chain, potentially, of a linked list. 

And now how do I declare the hash table itself? How do I declare this whole structure? Well, really, much like I used a pointer to just the first element of a list before, similarly can I just say I just need a bunch of pointers to implement this whole hash table. I'm going to have an array called table for hash table. It's going to be of size capacity. That's how many elements can fit in it. And each of those elements in this array is going to be a node star. Why? Well, per this picture, what I'm implementing the hash table as effectively in the beginning is just this array that we've drawn vertically, each of whose squares represents a pointer. That ones that have slashes through them are just null. And the ones that have arrows going to the right are actual pointers to actual nodes, ergo the start of a linked list. 

So here, then, is how we might implement a hash table that implements separate chaining. Now can we do better? All right I promised last time that we could achieve constant time. And I kind of gave you constant time here, but then said not really constant time because it's still dependent on the total number of elements you're inputting into the data structure. But suppose we did this. Let me go back to the screen over here. Let me also project this up here, clear the screen, and suppose I did this. Suppose I wanted to insert the name Daven in into my data structure. 

So I want to insert a string Daven into the data structure. What if I don't use a hash table, but I use something that's more tree-like like a family tree, where you have some root at the top and then nodes and leaves that go downward and outward. Suppose then, that I want to insert Daven's into what's currently an empty list. I'm going to do the following: I'm going to create a node in this family tree-like data structure that looks a little like this, each of which rectangles has, let's say, for now 26 elements in it. And each of the cells in this array is going to represent the letter of an alphabet. 

Specifically, I'm going to treat this is A, then B, then C, then D, this one here. So this is going to effectively represent the letter D. But to insert all of Daven's name I need to do a bit more. So I'm first going to hash, so to speak. I'm going to look at the first letter in Daven's which is obviously a D, and I'm going to allocate a node that looks like this-- a big rectangle big enough to fit the whole alphabet. 

Now D is done. Now A. D-A-V-E-N is the goal. So now what I'm going to do is this. As soon as I started D notice there's no pointer there. It's garbage values at the moment, or I might initialize it to null. But let me keep going with this idea of building a tree. Let me allocate another one of these nodes that has 26 elements in it. 

And you know what? If this is just a node in memory that I created with malloc, using a struct as we'll soon see, I'm going to do this-- I'm going to draw an arrow from the thing that represented D down to this new node. And now, first the next letter in Daven's name, V-- D-A-V-- I'm going to go ahead and draw another node like this, whereby, the V elements here, which we'll draw for instance-- whoops. We won't draw there. It's going to go here. 

Then we're going to consider this to be V. And then down here we're going to index down from V into what we'll consider E. And then from here we're going to go have one of these nodes here. And now we have a question to answer. I need to somehow indicate that we're at the end of the string Daven. So I could just leave it null. 

But what if we have Daven's full name also, which is, as we've said, Davenport? So what if Daven is actually a substring, a prefix of a much longer string? We can't just permanently say nothing is going to go there, because we could never insert a word like Davenport into this data Structure 

So what we could do instead is treat each of these elements as maybe having two elements inside of them. One is a pointer, indeed, as I've been doing. So each of these boxes is not just one cell. But what if the top one-- the bottom one's going to be null, because there is no Davenport just yet. What if the top one is some special value? And it's going to be a little hard to draw it this size. But suppose it's just a check mark. Check. D-A-V-E-N is a string in this data structure. 

Meanwhile, if I had more space here, I could do P-O-R-T, and I could put check in the node that has the letter T at the very end. So this is a massively complex-looking data structure. And my handwriting certainly doesn't help. But if I wanted to insert something else, consider what we would do. If we wanted to put David in, we'd follow the same logic, D-A-V, but now I would point in the next element not from E, but from I to D. So there's going to be more nodes in this tree. We're going to have call malloc more. But I don't want to make a complete mess of this picture. So let's instead look at one that's been pre-formulated like this with not dot, dot, dots, but just abbreviated arrays. But each of the nodes in this tree up here represents the same thing-- an array Ray of size 26. 

Or if we want to be really proper now, what if someone's name as an apostrophe, let's assume that each node actually has like 27 indexes in it, not just 26. So this now is going to be a data structure called a trie-- T-R-I-E. A trie, which is supposedly historically a clever name for a tree that's optimized for retrieval, which of course, is spelled with an I-E so it's trie. But that is the history of the trie. 

So a trie is this tree-like data structure like a family tree that ultimately behaves like that. And here is just another example of a whole bunch of other people's names. But the question now at hand is what have we gained by introducing arguably a more complicated data structure, and one, frankly, that uses a lot of memory. 

Because even though, at the moment, I'm only using D's pointer and A and V and Es and Ns, I'm wasting a heck of lot of memory. But where I spend one resource, I tend to do gain back another. So if I'm spending more space, what's probably the hope? That I'm spending less what? AUDIENCE: Less time. DAVID MALAN: Time. Now why might that be? Well, what is the insertion time, in terms of big O now, of a name like Daven or Davenport or David? Well, Daven was five steps. Davenport would be nine steps, so it would be a few more steps. David would be five steps as well. So those are concrete numbers, but surely there's an upper bound on the length of someone's name. And indeed, in the problem sets of five specification, we're going to propose that it's something that's 40-some-odd characters. 

Realistically, no one has an infinitely long name, which is to say that the length of a name or the length of a string we might have certain the state of structure is arguably what? It's constant. Right? It might be a big constant like 40-something, but it is constant. And it has no dependency on how many other names are in this data structure. In other words, if I wanted to now insert Colton or Gabriel or Rob or Zamyla or Alison or Belinda or any other names from the staff into this data structure, is the running time of inserting other names going to be at all impacted by how many other elements are in the data structure already? It's not. Right? Because we're effectively using this multi-layer hash table. And the running time of any of these operations is dependent not on the number of elements that are in the data structure or that are eventually going to be in the data structure, but on the length of what specifically? 

The string being inserted, which does make this asymptotically constant time-- big O of one. And frankly, just in the real world, this means inserting Daven's name takes like five steps, or Davenport nine steps, or David five steps. That's pretty darn small running times. And, indeed, that's a very good thing, especially when it's not dependent on the total number of elements in there. So how might we implement this kind of structure in code? It's a little more complex, but still it's just an application of basic building blocks. I'm going to redefine us node as follows: bool called word-- and this could be called anything. But the bool represents what I drew as a check mark. Yes. This is the end of a string in this data structure. 

And, of course, the node star there is referring to children. And, indeed, just like a family tree, you would consider the nodes that are hanging off of the bottom of some parent element to be children. And so the children is going to be an array of 27, the 27th one just being for apostrophe. We're going to sort of special case that. So you can have certain names with apostrophes. Maybe even hyphen should go in there, but you'll see in p set 5 we only care about letters and apostrophes. 

And then how do you represent the data structure itself? How do you represent the root of this trie, so to speak? Well, just like with a linked list, you need a pointer to the first element. With a trie you just need one pointer to the root of this trie. And from there you can hash your way down deeper and deeper to every other node in the structure. So simply with this can we represent that struct. 

Now Meanwhile-- Oh, question. 

AUDIENCE: What's bool word? 

DAVID MALAN: Bool word is just this C incarnation of what I described in this box here, when I started splitting each of the array's elements into two pieces. One is a pointer to the next node. The other has to be something like a check box to say yes, there's a word Daven that ends here, because we don't want, at the moment, Dave. 

Even though Dave is going to be a legitimate word, he's not in the trie yet. And D is not a word. And D-A is not a word or a name. So the check mark indicates only once you hit this node is the previous path of characters actually a string that you've inserted. So that's all the bool there is doing for us. 

Any other questions on tries? Yeah. 

AUDIENCE: What is the overlap? What if you have a Dave and a Daven? DAVID MALAN: Perfect. What if you have a Dave and a Daven? So if we insert, say a nickname, for David-- Dave-- D-A-V-E? This is actually super simple. So we're only going to take four steps. D-A-V-E. And what do I have to do once I hit that fourth node? Just going to check. We're already good to go. Done. Four steps. Constant time asymptotically. And now we've indicated that both Dave and Daven are strings in the structure. So not a problem. And notice how the presence of Daven did not make it take any more time or less time for Dave and vice versa. 

So what else can we now do? We've used this metaphor before of trays representing something. But it turns out that a stack of trays is actually demonstrative of another abstract data type-- a higher level data structure that at the end the day is just like an array or a linked list or something more mundane. But it's a more interesting conceptual concept. A stack, like these trays here in Mather, are generally called just that-- a stack. 

And in this type of data structure you have two operations-- you have one called push for adding something to the stack, like putting another tray back on the top of the stack. And then pop, which means you take the topmost tray off. But what's key about a stack is that it's got this curious characteristic. As the dining hall staff are rearranging the trays for the next meal, what's going to be true about how students interact with this data structure? AUDIENCE: They're going to pop one off. DAVID MALAN: They're going to pop one off, hopefully the top. Otherwise it's just kind of stupid to go all the way to the bottom. Right? The data structure doesn't really allow you to grab the bottom tray at least easily. So there's this curious property to a stack that the last item in is going to be the first one out. And computer scientists call this LIFO-- last in, first out. And it actually does have interesting applications. It's not necessarily as obvious as some others, but it can, indeed, be useful, and it can, indeed, be implemented in a couple of different ways. 

So one, and actually, let me not to dive into that. Let's do this instead. Let's look at one that's almost the same idea, but it's a little fairer. Right? If you're one of these fan boys or girls that really likes Apple products and you woke up at 3:00 AM to line up at some store to get the very latest iPhone, you might have queued up like this. 

Now a queue is very deliberately named. It's a line because there's some fairness to it. Right? It would kind of sucked if you've got there first at the Apple Store but you are effectively the bottommost tray because the Apple employees then pop the last person who actually got in line. So stacks and queues, even though functionally they're kind of the same-- it's just this collection of resources that's going to grow and shrink-- there's this fairness aspect to it, at least in the real world, where the operations you exercise are fundamentally different. A stack-- a queue rather-- is said to have two operations: n queue and d queue. Or you can call them any number of things. But you just want to capture the notion that one is adding and one is ultimately subtracting. 

Now underneath the hood, both the stack and a queue could be implemented how? We won't go into the code of it because the higher level idea is sort of more obvious. I mean, what do humans do? If I'm the first person at the Apple Store and this is the front door, you know, I'm going to stand here. And the next person's going to stand here. And the next person's going to stand here. So what data structure lends itself to a queue? 

AUDIENCE: A queue. DAVID MALAN: Well, a queue. Sure. What else? 

AUDIENCE: A linked list. 

DAVID MALAN: A linked list you could implement. And a linked list is nice because then it can grow arbitrarily long as opposed to having some fixed number of people in the store. But maybe a fixed number of places is legitimate. Because if they only have like 20 iPhones on the first day, maybe they only need an array of size 20 to represent that queue, which is only to say now once we start talking about these higher level problems, you can implement it in any number of ways. And there's probably just going to be a trade off in space and time or just in your own code complexity. 

What about a stack? Well, a stack, we've seen too could just be these trays. And you could implement this an array. But at some point if you use an array, what's going to happen to the trays you're trying to put down? All right. You're only going to be able to go so high. And I think in Mather they're actually recessed in that opening. So indeed, it's almost like Mather is using an array of fixed size, because you can only fit so many trays in that opening in the wall down below people's knees. And so that might be said to be an array, but we could certainly implement that more generally with a linked list. 

Well, what about another data structure? Let me pull up one other visual here. Something like how about this one here? Why might it be useful to have not something as fancy as a trie, which we saw had these very wide nodes, each of which is in an array? But what if we do something more simply, like an old school family tree, each of whose nodes here is just storing a number. Instead of a name or a descendant is just storing a number like this. 

Well, the jargon we use in data structures is both tries and trees, where a trie, again, is just one whose nodes are arrays, is still what you might use from grade school when you made a family tree-- leaves and the root of the tree and children of the parent and siblings thereof. And we might implement a tree, for instance, as simply as this. A tree, if it as a node, one of these circles that has a number, it's not going to have one pointer, but two. And as soon as you add a second pointer, you can actually now make sort of two-dimensional data structures in memory. Much like a two-dimensional array, you can have kind of two-dimensional linked lists but ones that follow a pattern where there's no cycles. It's truly a tree with one grandparent way up here and then some parents and children and grandchildren and great-grandchildren. and so forth. 

But what's really neat about this too, just to tease you with a bit of code, recall recursion from awhile back, whereby you write a function that calls itself. This is a beautiful opportunity to implement something like recursion, because consider this. 

This is a tree. And I've been a little anal with how I put the integers into the street. So much so that it has a special name-- a binary search tree. Now we've heard of binary search, but can you work backwards from this thing's name? What is the pattern of how I inserted the integers into this tree? It's not arbitrary. There's some pattern. Yeah. 

AUDIENCE: Smaller ones on the left. 

DAVID MALAN: Yeah. Smaller ones are on the left. Bigger ones are on the right. Such that a true statement is a parent is greater than its left child, but less than its right child. And that alone is even a recursive verbal definition because you can apply that same logic to every node and it only bottoms out, a base case if you will, when you hit one of the leaves, so to speak, where a leave has no children further. 

Now how might you find the number 44? You would start at the root and say, hm. 55 is not 44 So do I want to go right or do I want to go left? Well, obviously you want to go left. And so it's just like the phone book example in binary search more generally. But we're implementing it now a little more dynamically than an array might allow. And in fact, if you want to look at the code, at first glance sure. It looks like a whole bunch of lines. But it's beautifully simple. If you want to implement a function called search whose purpose in life is to search for a value like n, an integer, and you're passed in a one pointer-- a pointer to the node of the roots, rather, of that tree from which you can access everything else, notice how straightforwardly you can implement the logic. If tree is null, obviously it's not there. Let's just return false. Right? If you hand it nothing, there's nothing there. 

Else, if n is less than tree arrow n-- now arrow n, recall we introduced super briefly the other day, and that just means de-reference the pointer and look at the field called n. So it means go there and look at the field called n. So if n, the value you're given, is less than the value in the trees integer, where do you want to go? To the left. 

So notice the recursion. I'm returning-- not true. Not false. I'm returning whatever the answer is from a call to myself, passing an n again, which is redundant, but what's slightly different now? How am I making the problem smaller? I'm passing in as the second argument, not the root of the tree, but the left child in this case. So I'm passing in the left child. 

Meanwhile, if n is bigger than the node I'm currently looking at, I search the right hand side. Else, if the tree is not null, and if the element's not to the left and it's not to the right, what is wonderfully the case? We've actually found the node in question, and so we return true. 

So we've just scratched the surface now some of these data structures. In problem set five you'll explore these yet further, and you'll be given your design choice of how to go about this. What I'd like to conclude on is just a 30 second teaser of what awaits next week and beyond. 

As we begin-- thankfully you might think-- our transition slowly from the world of C and lower level implementation details, to a world in which we can take for granted that someone else has finally implemented these data structures for us, and we'll start to understand the real world means of implementing web-based programs and websites more generally and also the very security implications that we've only begun to scratch the surface of. Here is what awaits us in the days to come. 

[VIDEO PLAYBACK] 

-He came with a message, with a protocol all his own. He came to a world of cruel firewalls, uncaring routers, and dangers far worse than death. He's fast. He's strong. He's TCP/IP, and he's got your address. "Warriors of the Net." [END VIDEO PLAYBACK] DAVID MALAN: Coming next week. We will see you then. [VIDEO PLAYBACK] -And now, "Deep Thoughts" by Daven Farnham. -David always starts lectures with, "All right." Why not, "Here's the solution to this week's problem set" or "We're giving all of you an A?" [LAUGHING] [END VIDEO PLAYBACK] [MUSIC PLAYING] DAVID MALAN: This is CS50. And this is both the start and the end-- like literally-- almost the end of week six. 

I thought I'd share a little bit of a fun fact. I've pulled this up from a past semester's data set. You may recall that we ask you on every p set form if you've watched online or if you've attended in person. And here is the data. So today was very much predictable. But we wanted to spend a bit of time with you nonetheless. Would anyone like to conjecture why this graph is so jaggy, up down, up down, so consistently? What do each of the peaks and troughs represent? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Indeed. And more amusingly, god forbid, we hold one lecture on a Friday at the beginning of the semester, that's what we see happen. So today, we partake in a bit more about data structures. And to give you more of a solid mental model for problems at five, which is now out. Misspellings, wherein, we'll hand you a text file some 100,000 plus English words, and you're going to have to figure out how to cleverly load them into memory, into RAM, using some data structure of your choice. 

Now one such data structure could be, but probably shouldn't be, the fairly simplistic linked list, which we introduced last time. And a linked list had at least one advantage over an array. What's one advantage of a linked list arguably? 

AUDIENCE: Insertion. 

DAVID MALAN: Insertion. What do you mean by that? 

AUDIENCE: Anywhere along the list [INAUDIBLE]. 

DAVID MALAN: Good. So you can insert an element wherever you want in the middle of the list without having to shuffle anything, which we concluded, in our sorting discussions, isn't necessarily a good thing, because it takes time to actually move all of those humans left or right. And so with a linked list, you can just allocate with malloc, a new node, and then update a couple of pointers-- two, three operations max-- and we're able to slot someone in anywhere into a list. 

What else was advantageous about a linked list? Yeah? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Perfect. Perfect. It's really dynamic. And that you're not committing, in advance, to some fixed size chunk of memory, like you would have to with an array, the upside of which is that you can allocate nodes only on demand thereby using only as much space as you actually need. By contrast with an array, you might accidentally allocate too little. And then it's just going to be a pain in the neck to reallocate a new bigger array, copy everything over, free the old array, and then move about your business. Or worse, you might allocate way more memory than you actually need, and so you're going to have a very sparsely-populated array, so to speak. 

So a linked list gives you these advantages of dynamism and flexibility with insertions and deletions. But surely there must be a price paid. In fact, one of the themes explored on quiz zero was a couple of the trade-offs we've seen thus far. So what's a price paid or a downside of a linked list? Yeah. 

AUDIENCE: No random access. 

DAVID MALAN: No random access. But who cares? Random access doesn't sound compelling. 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. If you want to have a certain algorithm-- and let me actually propose binary search in particular, which is one we've used quite a bit-- if you don't have random access, you can't do that simple arithmetic of finding like the middle element and jumping right to it. You instead have to start at the first element and linearly search from left to right if you want to find the middle or any other element. 

AUDIENCE: It probably takes more memory. 

DAVID MALAN: Takes more memory. Where is that additional cost coming from in memory? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. In this case here, we had a linked list for integers, and yet we're doubling the amount of memory we need by also storing these pointers. Now less of a big deal as your structs get larger and you're storing not a number but maybe a student or some other object. But the point certainly remains. And so a number of the operations on linked lists were called were big O of n-- linear. Things like insertion or search or deletion in case an element happened to be at the very end of the list whether it's sorted or not. 

Sometimes you might get lucky and in so lower bounds on these operations might also be constant time if you're always looking at the first element, for instance. But ultimately, we promised to achieve the holy grail of data structures, or some approximation thereof, by way of constant time. Can we find elements or add elements or remove elements from a list? We shall see quite soon. And it turns out that one of the mechanisms we're going to start to use today, annual use in p set five, is actually pretty familiar. For instance, if this is a bunch of exam books, each of which has a student's first name and last name on it, and I pick them up from at the end of an exam, and they're all pretty much in a random order, and we want to go about sorting these exams so that once graded it's just a lot easier and faster to hand them back out to students alphabetically. What would your instincts be for a pile of exams like this? 

Well, if you're like me, you might see that this is m, so I'm going to sort of put this into, if this is my table or my floor where I'm spreading things out-- or my array really-- I might put all of the Ms in there. Oh. Here's an A. So I might put the As over here. Oh. Here's another A. I'm going to put that over here. Here's a Z. Here is another M. And so I might start making piles like this. And then maybe I'd go in later and sort of very nitpicky-ly sort the individual piles. But the point is I would look at the input that I'm handed and I would make some calculated decision based on that input. If it starts with A, put it over there. If it starts with Z, put it over there, and everything in between. 

So this is a technique that's generally known as hashing-- H-A-S-H-- which generally means taking as input and using that input to compute a value, generally a number, and that number is the index into a storage container, like an array. So in other words, I might have a hash function, as I do in my head, that if I see someone's name who starts with A, I'm going to map that to zero in my head. And if I see someone with Z, I'm going to map that to 25 in my head and then put that into the last most pile. 

Now, if you think about not my brain but a C program, what numbers could you rely on to achieve that same result? In other words, if you had the ASCII character A, how do you determine what bucket to put it in? You probably don't want to put it into bucket 65, which would be like over there for no good reason. Where do you want to put A in terms of its ASCII value? Where do you want to do to its ASCII value to come up with a smarter bucket to put it in? 

AUDIENCE: Minus A. 

DAVID MALAN: Yeah. So minus A or minus specifically 65 if it's a capital A. Or 98 if it's a lowercase a. And so that would allow us to, very simply and very arithmetically, put something into a bucket like that. So it turns out we actually do this as well even with the quizzes. 

So you might recall you circled your teaching fellow's name on the cover. And the TF's names were organized into these columns alphabetically, well, believe it or not, when all 80 plus of us got together the other night to grade, the last step in our grading process is to hash the quizzes into a big space of floor at the [INAUDIBLE] and to lay everyone's quizzes out in exactly the order of their TF's names on the cover, because then it's a lot easier for us to search through that using linear search or some kind of cleverness for a TF to find his or her students' quizzes. 

So this idea of hashing that you'll see is quite powerful is actually pretty commonplace and very intuitive, much like perhaps divide and conquer was in week zero. I fast forward to the hackathon a couple of years ago. This was Zamyla and a couple of other staff greeting students as they came in. And we had a whole bunch of folding tables there with name tags. And we had the name tags organized with like the As over there and the Zs over there. And so one of the TFs very cleverly wrote this as the instructions for the day. And in week 12 of the semester this all made perfect sense and everyone knew what to do. But anytime you've queued in the same way, you're implementing the same notion of a hash. So let's formalize it a little bit. Here is an array. It's drawn to be a little wide just to depict, visually, that we might put strings in something like this. And this array is clearly of size 26 total. And the thing is called table arbitrarily. But this is just an artist's rendition of what a hash table might be. 

So a hash table now is going to be a higher level data structure. At the end of the day we're about to see that you can implement a hash table, which is much like the check-in line at a hackathon much like this table used for sorting exam books. But a hash table is sort of this high level concept that could use an array underneath the hood to implement it, or it could use a length list, or even perhaps some other data structures. And now that's the theme-- taking some of these fundamental ingredients like an array and this building block now of a length list and seeing what else we can build on top of those, like ingredients into a recipe, making more and more interesting and useful final results. 

So with the hash table we might implement it in memory pictorially like this, but how might it actually be coded up? Well, maybe as simply is this. If CAPACITY in all caps, is just some constant-- for instance 26, for 26 letters of the alphabet-- I might call my variable table, and I might claim that I'm going to put char stars in there, or string. So it's as simple as this if you want to implement a hash table. And yet, this is really just an array. But again, a hash table is now what we'll call an abstract data type that's just sort of a conceptual layering on top of something more mundane now like an array. 

Now, how do we go about solving problems? Well, earlier I had the luxury of having enough table space here so that I could put the quizzes anywhere I wanted. So As might go here. Zs might go here. Ms might go here. And then I had some extra space. But this is a bit of a cheat right now because this table, if I really thought of it as an array, is just going to be of some fixed size. 

So technically, if I pull up another student's quiz and see, oh, this person's name starts with an A too, I kind of want to put it there. But as soon as I put it there, if this table indeed represents an array, I'm going to be overriding or clobbering whoever this student's quiz is. Right? If this is an array, only one thing can go in each of these cells or elements. And so I kind of have to pick and choose. 

Now earlier I kind of cheated and did this or I just kind of stacked them above each other. But that's not going to fly in code. So where could I put the second student whose name is A if all I had is this available table space? And I've used three slots and it looks like there's just a few others. What could you do? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah. Maybe let's just keep it simple. Right? It doesn't fit where I want to put it. So I'm going to put it technically where a B would go. Now, of course, I'm starting to paint myself into a corner. If I get to a student whose name is actually B, now B is going to be moved a little forward, as might happen, yep, if this is a B, now it has to go here. 

And so this very quickly could become problematic, but it's a technique that actually is referred to as linear probing, whereby you just consider your array to be along the line. And you just kind of probe or inspect each available element looking for an available spot. And as soon as you find one, you drop it in there. 

Now, the price being paid now for this solution is what? We have a fixed size array, and when I insert names into it, at least initially, what's the running time of insertion for putting the students' quizzes in the right buckets? Big O of what? 

AUDIENCE: n. DAVID MALAN: I heard big O of n. Not true. But we'll tease apart why in just a moment. What else might it be? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: And let me do it visually. So suppose this is the letter S. 

AUDIENCE: It's one. DAVID MALAN: It's one. Right? This is an array, which means we have random access. And if we think of this as zero and this as 25, and we realize that, oh, here's my input S, I can certainly convert S, an ASCII character, to a corresponding number between zero and 25 and then immediately put it where it belongs. 

But of course, as soon as I get to the second person who's name is A or B or C eventually, if I've used the linear probing as my solution, the running time of insertion in the worst case is actually going to devolve into what? And I did hear it here correctly early on. AUDIENCE: [INAUDIBLE] DAVID MALAN: So it is n indeed once you have a sufficiently large data set. So, on the one hand, if your array is big enough and your data is sparse enough, you get this beautiful constant time. But as soon as you start getting more and more elements, and just statistically you get more people with the letter A as their name or the letter B, it could potentially devolve into something more linear. So not quite perfect. So could we do better? 

Well, what was our solution before when we want to have more dynamism than something like an array allowed? AUDIENCE: [INAUDIBLE] DAVID MALAN: What did we introduce? Yeah. So a linked list. Well, let's see what a linked list might do for us instead. Well, let me propose that we draw the picture as follows. Now this is a different picture from an example from a different text, actually, that is actually using an array of size 31. And this author simply decided to hash strings not based on the person's names, but based on their birthdates. Irrespective of the month, they figured if you're born on the first of a month or the 31st of a month, the author will hash based on that value, so as to spread the names out a bit more than just 26 spots might allow. And perhaps it's a little more uniform than going with alphabetical letters, because of course there's probably more people in the world with names that start with A than certainly some other letters of the alphabet. So maybe this is a little more uniform, assuming a uniform distribution of babies across a month. 

But, of course, this is still imperfect. Right? We're having collisions. Multiple people in this data structure are still having the same birthdate at least you're irrespective of month. But what has the author done? Well, it looks like we have an array on the left-hand side drawn vertically, but that's just an artist's rendition. It doesn't matter what direction you draw an array, it's still an array. What is this an array of apparently? 

AUDIENCE: Linked list. 

DAVID MALAN: Yeah. It looks like it's an array of linked list. So again, to this point of sort of using these data structures now as ingredients to more interesting solutions, you can absolutely take a fundamental, like an array, and then take something more interesting like a linked list and even combine them into an even more interesting data structure. And indeed, this too would be called a hash table, whereby the array is really the hash table, but that hash table has chains, so to speak, that can grow or shrink based on the number of elements you want to insert. 

Now, accordingly, what's the running time now? If I want to insert someone whose birthday is October 31, where does he or she go? All right. At the very bottom where it says 31. And that's perfect. That was constant time. But what if we find someone else whose birthday is, let's see, October, November, December 31? Where is he or she going to go? Same thing. Two step though. That's constant though isn't it? All right. At the moment it is. But in the general case, the more people we add, probabilistically, we're going to get more and more collisions. 

Now this is a little better because technically now my chains could be in the worst case how long? If I insert n people into this more sophisticated data structure, n people, in the worst case it's going to be n. Why? 

AUDIENCE: Because if everybody has the same birthday, they're going to be one line. DAVID MALAN: Perfect. It might be a little contrived, but truly in the worst case, if everyone has the same birthday, given the inputs you have, you're going to have a massively long chain. And so, you could call it a hash table, but really it's just a massive linked list with a whole lot of wasted space. But in general, if we assume that at least birthdays are uniform-- and it probably isn't. I'm making that up. But if we assume, for the sake of discussion that they are, then in theory, if this is the vertical representation of the array, well then hopefully you're going to get chains that are, you know, roughly the same length where each of these represents a day of the month. 

Now if there's 31 days in the month, that means my running time really is big O of n over 31, which feels better than linear. But what was one of our commitments a couple of weeks ago whenever it came to expressing the running time of an algorithm? Just only look at the high order term. Right? 31 is definitely helpful. But this is still big O of n. But one of the themes of problem set five is going to be to acknowledge that absolutely, asymptotically, theoretically this data structure is no better than just one massive linked list. And indeed, in the worst case, this hash table might devolve into that. 

But in the real world, with us humans that own Macs or PCs or whatever and are running real world software on real world data, which algorithm are you going to prefer? The one that takes end steps or the one that takes n divided by 31 steps to find some piece of data or to look up some information? I mean, absolutely the 31 makes a difference in the real world. It is 31 times faster. And we humans are certainly going to appreciate that. 

So realize the dichotomy there between actually talking about things theoretically and asymptotically which definitely has value as we've seen, but in the real world, if you care about just making the human happy for general inputs, you might very well want to accept the fact that, yes, this is linear, but it's 31 times faster than linear might be. And better yet, we don't just have to do something arbitrary like a birthdate, we could spend a little more time and cleverness and think about what we might do, given a person's name and maybe their birthdate to combine those ingredients to figure out something that is truly more uniform and less jaggy, so to speak than this picture currently suggests it might be. How could we implement this in code? Well, let me propose that we just borrow some syntax we've used a couple times thus far. And I'm going to define a node, which again is a generic term for just some container for some data structure. I'm going to propose that a string is going in there. But we're going to start taking those training wheels off now. 

No more CS50 library really, unless you want to use it for your final project, which is fine, but now we're going to pull back the curtain and say it's just a char star. So the word there is going to be the person's name in question. And now I have a link here to the next node so that these represent each of the nodes in the chain, potentially, of a linked list. 

And now how do I declare the hash table itself? How do I declare this whole structure? Well, really, much like I used a pointer to just the first element of a list before, similarly can I just say I just need a bunch of pointers to implement this whole hash table. I'm going to have an array called table for hash table. It's going to be of size capacity. That's how many elements can fit in it. And each of those elements in this array is going to be a node star. Why? Well, per this picture, what I'm implementing the hash table as effectively in the beginning is just this array that we've drawn vertically, each of whose squares represents a pointer. That ones that have slashes through them are just null. And the ones that have arrows going to the right are actual pointers to actual nodes, ergo the start of a linked list. 

So here, then, is how we might implement a hash table that implements separate chaining. Now can we do better? All right I promised last time that we could achieve constant time. And I kind of gave you constant time here, but then said not really constant time because it's still dependent on the total number of elements you're inputting into the data structure. But suppose we did this. Let me go back to the screen over here. Let me also project this up here, clear the screen, and suppose I did this. Suppose I wanted to insert the name Daven in into my data structure. 

So I want to insert a string Daven into the data structure. What if I don't use a hash table, but I use something that's more tree-like like a family tree, where you have some root at the top and then nodes and leaves that go downward and outward. Suppose then, that I want to insert Daven's into what's currently an empty list. I'm going to do the following: I'm going to create a node in this family tree-like data structure that looks a little like this, each of which rectangles has, let's say, for now 26 elements in it. And each of the cells in this array is going to represent the letter of an alphabet. 

Specifically, I'm going to treat this is A, then B, then C, then D, this one here. So this is going to effectively represent the letter D. But to insert all of Daven's name I need to do a bit more. So I'm first going to hash, so to speak. I'm going to look at the first letter in Daven's which is obviously a D, and I'm going to allocate a node that looks like this-- a big rectangle big enough to fit the whole alphabet. 

Now D is done. Now A. D-A-V-E-N is the goal. So now what I'm going to do is this. As soon as I started D notice there's no pointer there. It's garbage values at the moment, or I might initialize it to null. But let me keep going with this idea of building a tree. Let me allocate another one of these nodes that has 26 elements in it. 

And you know what? If this is just a node in memory that I created with malloc, using a struct as we'll soon see, I'm going to do this-- I'm going to draw an arrow from the thing that represented D down to this new node. And now, first the next letter in Daven's name, V-- D-A-V-- I'm going to go ahead and draw another node like this, whereby, the V elements here, which we'll draw for instance-- whoops. We won't draw there. It's going to go here. 

Then we're going to consider this to be V. And then down here we're going to index down from V into what we'll consider E. And then from here we're going to go have one of these nodes here. And now we have a question to answer. I need to somehow indicate that we're at the end of the string Daven. So I could just leave it null. 

But what if we have Daven's full name also, which is, as we've said, Davenport? So what if Daven is actually a substring, a prefix of a much longer string? We can't just permanently say nothing is going to go there, because we could never insert a word like Davenport into this data Structure 

So what we could do instead is treat each of these elements as maybe having two elements inside of them. One is a pointer, indeed, as I've been doing. So each of these boxes is not just one cell. But what if the top one-- the bottom one's going to be null, because there is no Davenport just yet. What if the top one is some special value? And it's going to be a little hard to draw it this size. But suppose it's just a check mark. Check. D-A-V-E-N is a string in this data structure. 

Meanwhile, if I had more space here, I could do P-O-R-T, and I could put check in the node that has the letter T at the very end. So this is a massively complex-looking data structure. And my handwriting certainly doesn't help. But if I wanted to insert something else, consider what we would do. If we wanted to put David in, we'd follow the same logic, D-A-V, but now I would point in the next element not from E, but from I to D. So there's going to be more nodes in this tree. We're going to have call malloc more. But I don't want to make a complete mess of this picture. So let's instead look at one that's been pre-formulated like this with not dot, dot, dots, but just abbreviated arrays. But each of the nodes in this tree up here represents the same thing-- an array Ray of size 26. 

Or if we want to be really proper now, what if someone's name as an apostrophe, let's assume that each node actually has like 27 indexes in it, not just 26. So this now is going to be a data structure called a trie-- T-R-I-E. A trie, which is supposedly historically a clever name for a tree that's optimized for retrieval, which of course, is spelled with an I-E so it's trie. But that is the history of the trie. 

So a trie is this tree-like data structure like a family tree that ultimately behaves like that. And here is just another example of a whole bunch of other people's names. But the question now at hand is what have we gained by introducing arguably a more complicated data structure, and one, frankly, that uses a lot of memory. 

Because even though, at the moment, I'm only using D's pointer and A and V and Es and Ns, I'm wasting a heck of lot of memory. But where I spend one resource, I tend to do gain back another. So if I'm spending more space, what's probably the hope? That I'm spending less what? AUDIENCE: Less time. DAVID MALAN: Time. Now why might that be? Well, what is the insertion time, in terms of big O now, of a name like Daven or Davenport or David? Well, Daven was five steps. Davenport would be nine steps, so it would be a few more steps. David would be five steps as well. So those are concrete numbers, but surely there's an upper bound on the length of someone's name. And indeed, in the problem sets of five specification, we're going to propose that it's something that's 40-some-odd characters. 

Realistically, no one has an infinitely long name, which is to say that the length of a name or the length of a string we might have certain the state of structure is arguably what? It's constant. Right? It might be a big constant like 40-something, but it is constant. And it has no dependency on how many other names are in this data structure. In other words, if I wanted to now insert Colton or Gabriel or Rob or Zamyla or Alison or Belinda or any other names from the staff into this data structure, is the running time of inserting other names going to be at all impacted by how many other elements are in the data structure already? It's not. Right? Because we're effectively using this multi-layer hash table. And the running time of any of these operations is dependent not on the number of elements that are in the data structure or that are eventually going to be in the data structure, but on the length of what specifically? 

The string being inserted, which does make this asymptotically constant time-- big O of one. And frankly, just in the real world, this means inserting Daven's name takes like five steps, or Davenport nine steps, or David five steps. That's pretty darn small running times. And, indeed, that's a very good thing, especially when it's not dependent on the total number of elements in there. So how might we implement this kind of structure in code? It's a little more complex, but still it's just an application of basic building blocks. I'm going to redefine us node as follows: bool called word-- and this could be called anything. But the bool represents what I drew as a check mark. Yes. This is the end of a string in this data structure. 

And, of course, the node star there is referring to children. And, indeed, just like a family tree, you would consider the nodes that are hanging off of the bottom of some parent element to be children. And so the children is going to be an array of 27, the 27th one just being for apostrophe. We're going to sort of special case that. So you can have certain names with apostrophes. Maybe even hyphen should go in there, but you'll see in p set 5 we only care about letters and apostrophes. 

And then how do you represent the data structure itself? How do you represent the root of this trie, so to speak? Well, just like with a linked list, you need a pointer to the first element. With a trie you just need one pointer to the root of this trie. And from there you can hash your way down deeper and deeper to every other node in the structure. So simply with this can we represent that struct. 

Now Meanwhile-- Oh, question. 

AUDIENCE: What's bool word? 

DAVID MALAN: Bool word is just this C incarnation of what I described in this box here, when I started splitting each of the array's elements into two pieces. One is a pointer to the next node. The other has to be something like a check box to say yes, there's a word Daven that ends here, because we don't want, at the moment, Dave. 

Even though Dave is going to be a legitimate word, he's not in the trie yet. And D is not a word. And D-A is not a word or a name. So the check mark indicates only once you hit this node is the previous path of characters actually a string that you've inserted. So that's all the bool there is doing for us. 

Any other questions on tries? Yeah. 

AUDIENCE: What is the overlap? What if you have a Dave and a Daven? DAVID MALAN: Perfect. What if you have a Dave and a Daven? So if we insert, say a nickname, for David-- Dave-- D-A-V-E? This is actually super simple. So we're only going to take four steps. D-A-V-E. And what do I have to do once I hit that fourth node? Just going to check. We're already good to go. Done. Four steps. Constant time asymptotically. And now we've indicated that both Dave and Daven are strings in the structure. So not a problem. And notice how the presence of Daven did not make it take any more time or less time for Dave and vice versa. 

So what else can we now do? We've used this metaphor before of trays representing something. But it turns out that a stack of trays is actually demonstrative of another abstract data type-- a higher level data structure that at the end the day is just like an array or a linked list or something more mundane. But it's a more interesting conceptual concept. A stack, like these trays here in Mather, are generally called just that-- a stack. 

And in this type of data structure you have two operations-- you have one called push for adding something to the stack, like putting another tray back on the top of the stack. And then pop, which means you take the topmost tray off. But what's key about a stack is that it's got this curious characteristic. As the dining hall staff are rearranging the trays for the next meal, what's going to be true about how students interact with this data structure? AUDIENCE: They're going to pop one off. DAVID MALAN: They're going to pop one off, hopefully the top. Otherwise it's just kind of stupid to go all the way to the bottom. Right? The data structure doesn't really allow you to grab the bottom tray at least easily. So there's this curious property to a stack that the last item in is going to be the first one out. And computer scientists call this LIFO-- last in, first out. And it actually does have interesting applications. It's not necessarily as obvious as some others, but it can, indeed, be useful, and it can, indeed, be implemented in a couple of different ways. 

So one, and actually, let me not to dive into that. Let's do this instead. Let's look at one that's almost the same idea, but it's a little fairer. Right? If you're one of these fan boys or girls that really likes Apple products and you woke up at 3:00 AM to line up at some store to get the very latest iPhone, you might have queued up like this. 

Now a queue is very deliberately named. It's a line because there's some fairness to it. Right? It would kind of sucked if you've got there first at the Apple Store but you are effectively the bottommost tray because the Apple employees then pop the last person who actually got in line. So stacks and queues, even though functionally they're kind of the same-- it's just this collection of resources that's going to grow and shrink-- there's this fairness aspect to it, at least in the real world, where the operations you exercise are fundamentally different. A stack-- a queue rather-- is said to have two operations: n queue and d queue. Or you can call them any number of things. But you just want to capture the notion that one is adding and one is ultimately subtracting. 

Now underneath the hood, both the stack and a queue could be implemented how? We won't go into the code of it because the higher level idea is sort of more obvious. I mean, what do humans do? If I'm the first person at the Apple Store and this is the front door, you know, I'm going to stand here. And the next person's going to stand here. And the next person's going to stand here. So what data structure lends itself to a queue? 

AUDIENCE: A queue. DAVID MALAN: Well, a queue. Sure. What else? 

AUDIENCE: A linked list. 

DAVID MALAN: A linked list you could implement. And a linked list is nice because then it can grow arbitrarily long as opposed to having some fixed number of people in the store. But maybe a fixed number of places is legitimate. Because if they only have like 20 iPhones on the first day, maybe they only need an array of size 20 to represent that queue, which is only to say now once we start talking about these higher level problems, you can implement it in any number of ways. And there's probably just going to be a trade off in space and time or just in your own code complexity. 

What about a stack? Well, a stack, we've seen too could just be these trays. And you could implement this an array. But at some point if you use an array, what's going to happen to the trays you're trying to put down? All right. You're only going to be able to go so high. And I think in Mather they're actually recessed in that opening. So indeed, it's almost like Mather is using an array of fixed size, because you can only fit so many trays in that opening in the wall down below people's knees. And so that might be said to be an array, but we could certainly implement that more generally with a linked list. 

Well, what about another data structure? Let me pull up one other visual here. Something like how about this one here? Why might it be useful to have not something as fancy as a trie, which we saw had these very wide nodes, each of which is in an array? But what if we do something more simply, like an old school family tree, each of whose nodes here is just storing a number. Instead of a name or a descendant is just storing a number like this. 

Well, the jargon we use in data structures is both tries and trees, where a trie, again, is just one whose nodes are arrays, is still what you might use from grade school when you made a family tree-- leaves and the root of the tree and children of the parent and siblings thereof. And we might implement a tree, for instance, as simply as this. A tree, if it as a node, one of these circles that has a number, it's not going to have one pointer, but two. And as soon as you add a second pointer, you can actually now make sort of two-dimensional data structures in memory. Much like a two-dimensional array, you can have kind of two-dimensional linked lists but ones that follow a pattern where there's no cycles. It's truly a tree with one grandparent way up here and then some parents and children and grandchildren and great-grandchildren. and so forth. 

But what's really neat about this too, just to tease you with a bit of code, recall recursion from awhile back, whereby you write a function that calls itself. This is a beautiful opportunity to implement something like recursion, because consider this. 

This is a tree. And I've been a little anal with how I put the integers into the street. So much so that it has a special name-- a binary search tree. Now we've heard of binary search, but can you work backwards from this thing's name? What is the pattern of how I inserted the integers into this tree? It's not arbitrary. There's some pattern. Yeah. 

AUDIENCE: Smaller ones on the left. 

DAVID MALAN: Yeah. Smaller ones are on the left. Bigger ones are on the right. Such that a true statement is a parent is greater than its left child, but less than its right child. And that alone is even a recursive verbal definition because you can apply that same logic to every node and it only bottoms out, a base case if you will, when you hit one of the leaves, so to speak, where a leave has no children further. 

Now how might you find the number 44? You would start at the root and say, hm. 55 is not 44 So do I want to go right or do I want to go left? Well, obviously you want to go left. And so it's just like the phone book example in binary search more generally. But we're implementing it now a little more dynamically than an array might allow. And in fact, if you want to look at the code, at first glance sure. It looks like a whole bunch of lines. But it's beautifully simple. If you want to implement a function called search whose purpose in life is to search for a value like n, an integer, and you're passed in a one pointer-- a pointer to the node of the roots, rather, of that tree from which you can access everything else, notice how straightforwardly you can implement the logic. If tree is null, obviously it's not there. Let's just return false. Right? If you hand it nothing, there's nothing there. 

Else, if n is less than tree arrow n-- now arrow n, recall we introduced super briefly the other day, and that just means de-reference the pointer and look at the field called n. So it means go there and look at the field called n. So if n, the value you're given, is less than the value in the trees integer, where do you want to go? To the left. 

So notice the recursion. I'm returning-- not true. Not false. I'm returning whatever the answer is from a call to myself, passing an n again, which is redundant, but what's slightly different now? How am I making the problem smaller? I'm passing in as the second argument, not the root of the tree, but the left child in this case. So I'm passing in the left child. 

Meanwhile, if n is bigger than the node I'm currently looking at, I search the right hand side. Else, if the tree is not null, and if the element's not to the left and it's not to the right, what is wonderfully the case? We've actually found the node in question, and so we return true. 

So we've just scratched the surface now some of these data structures. In problem set five you'll explore these yet further, and you'll be given your design choice of how to go about this. What I'd like to conclude on is just a 30 second teaser of what awaits next week and beyond. 

As we begin-- thankfully you might think-- our transition slowly from the world of C and lower level implementation details, to a world in which we can take for granted that someone else has finally implemented these data structures for us, and we'll start to understand the real world means of implementing web-based programs and websites more generally and also the very security implications that we've only begun to scratch the surface of. Here is what awaits us in the days to come. 

[VIDEO PLAYBACK] 

-He came with a message, with a protocol all his own. He came to a world of cruel firewalls, uncaring routers, and dangers far worse than death. He's fast. He's strong. He's TCP/IP, and he's got your address. "Warriors of the Net." [END VIDEO PLAYBACK] DAVID MALAN: Coming next week. We will see you then. [VIDEO PLAYBACK] -And now, "Deep Thoughts" by Daven Farnham. -David always starts lectures with, "All right." Why not, "Here's the solution to this week's problem set" or "We're giving all of you an A?" [LAUGHING] [END VIDEO PLAYBACK] [MUSIC PLAYING] DAVID MALAN: This is CS50. And this is both the start and the end-- like literally-- almost the end of week six. 

I thought I'd share a little bit of a fun fact. I've pulled this up from a past semester's data set. You may recall that we ask you on every p set form if you've watched online or if you've attended in person. And here is the data. So today was very much predictable. But we wanted to spend a bit of time with you nonetheless. Would anyone like to conjecture why this graph is so jaggy, up down, up down, so consistently? What do each of the peaks and troughs represent? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Indeed. And more amusingly, god forbid, we hold one lecture on a Friday at the beginning of the semester, that's what we see happen. So today, we partake in a bit more about data structures. And to give you more of a solid mental model for problems at five, which is now out. Misspellings, wherein, we'll hand you a text file some 100,000 plus English words, and you're going to have to figure out how to cleverly load them into memory, into RAM, using some data structure of your choice. 

Now one such data structure could be, but probably shouldn't be, the fairly simplistic linked list, which we introduced last time. And a linked list had at least one advantage over an array. What's one advantage of a linked list arguably? 

AUDIENCE: Insertion. 

DAVID MALAN: Insertion. What do you mean by that? 

AUDIENCE: Anywhere along the list [INAUDIBLE]. 

DAVID MALAN: Good. So you can insert an element wherever you want in the middle of the list without having to shuffle anything, which we concluded, in our sorting discussions, isn't necessarily a good thing, because it takes time to actually move all of those humans left or right. And so with a linked list, you can just allocate with malloc, a new node, and then update a couple of pointers-- two, three operations max-- and we're able to slot someone in anywhere into a list. 

What else was advantageous about a linked list? Yeah? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Perfect. Perfect. It's really dynamic. And that you're not committing, in advance, to some fixed size chunk of memory, like you would have to with an array, the upside of which is that you can allocate nodes only on demand thereby using only as much space as you actually need. By contrast with an array, you might accidentally allocate too little. And then it's just going to be a pain in the neck to reallocate a new bigger array, copy everything over, free the old array, and then move about your business. Or worse, you might allocate way more memory than you actually need, and so you're going to have a very sparsely-populated array, so to speak. 

So a linked list gives you these advantages of dynamism and flexibility with insertions and deletions. But surely there must be a price paid. In fact, one of the themes explored on quiz zero was a couple of the trade-offs we've seen thus far. So what's a price paid or a downside of a linked list? Yeah. 

AUDIENCE: No random access. 

DAVID MALAN: No random access. But who cares? Random access doesn't sound compelling. 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. If you want to have a certain algorithm-- and let me actually propose binary search in particular, which is one we've used quite a bit-- if you don't have random access, you can't do that simple arithmetic of finding like the middle element and jumping right to it. You instead have to start at the first element and linearly search from left to right if you want to find the middle or any other element. 

AUDIENCE: It probably takes more memory. 

DAVID MALAN: Takes more memory. Where is that additional cost coming from in memory? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: Exactly. In this case here, we had a linked list for integers, and yet we're doubling the amount of memory we need by also storing these pointers. Now less of a big deal as your structs get larger and you're storing not a number but maybe a student or some other object. But the point certainly remains. And so a number of the operations on linked lists were called were big O of n-- linear. Things like insertion or search or deletion in case an element happened to be at the very end of the list whether it's sorted or not. 

Sometimes you might get lucky and in so lower bounds on these operations might also be constant time if you're always looking at the first element, for instance. But ultimately, we promised to achieve the holy grail of data structures, or some approximation thereof, by way of constant time. Can we find elements or add elements or remove elements from a list? We shall see quite soon. And it turns out that one of the mechanisms we're going to start to use today, annual use in p set five, is actually pretty familiar. For instance, if this is a bunch of exam books, each of which has a student's first name and last name on it, and I pick them up from at the end of an exam, and they're all pretty much in a random order, and we want to go about sorting these exams so that once graded it's just a lot easier and faster to hand them back out to students alphabetically. What would your instincts be for a pile of exams like this? 

Well, if you're like me, you might see that this is m, so I'm going to sort of put this into, if this is my table or my floor where I'm spreading things out-- or my array really-- I might put all of the Ms in there. Oh. Here's an A. So I might put the As over here. Oh. Here's another A. I'm going to put that over here. Here's a Z. Here is another M. And so I might start making piles like this. And then maybe I'd go in later and sort of very nitpicky-ly sort the individual piles. But the point is I would look at the input that I'm handed and I would make some calculated decision based on that input. If it starts with A, put it over there. If it starts with Z, put it over there, and everything in between. 

So this is a technique that's generally known as hashing-- H-A-S-H-- which generally means taking as input and using that input to compute a value, generally a number, and that number is the index into a storage container, like an array. So in other words, I might have a hash function, as I do in my head, that if I see someone's name who starts with A, I'm going to map that to zero in my head. And if I see someone with Z, I'm going to map that to 25 in my head and then put that into the last most pile. 

Now, if you think about not my brain but a C program, what numbers could you rely on to achieve that same result? In other words, if you had the ASCII character A, how do you determine what bucket to put it in? You probably don't want to put it into bucket 65, which would be like over there for no good reason. Where do you want to put A in terms of its ASCII value? Where do you want to do to its ASCII value to come up with a smarter bucket to put it in? 

AUDIENCE: Minus A. 

DAVID MALAN: Yeah. So minus A or minus specifically 65 if it's a capital A. Or 98 if it's a lowercase a. And so that would allow us to, very simply and very arithmetically, put something into a bucket like that. So it turns out we actually do this as well even with the quizzes. 

So you might recall you circled your teaching fellow's name on the cover. And the TF's names were organized into these columns alphabetically, well, believe it or not, when all 80 plus of us got together the other night to grade, the last step in our grading process is to hash the quizzes into a big space of floor at the [INAUDIBLE] and to lay everyone's quizzes out in exactly the order of their TF's names on the cover, because then it's a lot easier for us to search through that using linear search or some kind of cleverness for a TF to find his or her students' quizzes. 

So this idea of hashing that you'll see is quite powerful is actually pretty commonplace and very intuitive, much like perhaps divide and conquer was in week zero. I fast forward to the hackathon a couple of years ago. This was Zamyla and a couple of other staff greeting students as they came in. And we had a whole bunch of folding tables there with name tags. And we had the name tags organized with like the As over there and the Zs over there. And so one of the TFs very cleverly wrote this as the instructions for the day. And in week 12 of the semester this all made perfect sense and everyone knew what to do. But anytime you've queued in the same way, you're implementing the same notion of a hash. So let's formalize it a little bit. Here is an array. It's drawn to be a little wide just to depict, visually, that we might put strings in something like this. And this array is clearly of size 26 total. And the thing is called table arbitrarily. But this is just an artist's rendition of what a hash table might be. 

So a hash table now is going to be a higher level data structure. At the end of the day we're about to see that you can implement a hash table, which is much like the check-in line at a hackathon much like this table used for sorting exam books. But a hash table is sort of this high level concept that could use an array underneath the hood to implement it, or it could use a length list, or even perhaps some other data structures. And now that's the theme-- taking some of these fundamental ingredients like an array and this building block now of a length list and seeing what else we can build on top of those, like ingredients into a recipe, making more and more interesting and useful final results. 

So with the hash table we might implement it in memory pictorially like this, but how might it actually be coded up? Well, maybe as simply is this. If CAPACITY in all caps, is just some constant-- for instance 26, for 26 letters of the alphabet-- I might call my variable table, and I might claim that I'm going to put char stars in there, or string. So it's as simple as this if you want to implement a hash table. And yet, this is really just an array. But again, a hash table is now what we'll call an abstract data type that's just sort of a conceptual layering on top of something more mundane now like an array. 

Now, how do we go about solving problems? Well, earlier I had the luxury of having enough table space here so that I could put the quizzes anywhere I wanted. So As might go here. Zs might go here. Ms might go here. And then I had some extra space. But this is a bit of a cheat right now because this table, if I really thought of it as an array, is just going to be of some fixed size. 

So technically, if I pull up another student's quiz and see, oh, this person's name starts with an A too, I kind of want to put it there. But as soon as I put it there, if this table indeed represents an array, I'm going to be overriding or clobbering whoever this student's quiz is. Right? If this is an array, only one thing can go in each of these cells or elements. And so I kind of have to pick and choose. 

Now earlier I kind of cheated and did this or I just kind of stacked them above each other. But that's not going to fly in code. So where could I put the second student whose name is A if all I had is this available table space? And I've used three slots and it looks like there's just a few others. What could you do? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah. Maybe let's just keep it simple. Right? It doesn't fit where I want to put it. So I'm going to put it technically where a B would go. Now, of course, I'm starting to paint myself into a corner. If I get to a student whose name is actually B, now B is going to be moved a little forward, as might happen, yep, if this is a B, now it has to go here. 

And so this very quickly could become problematic, but it's a technique that actually is referred to as linear probing, whereby you just consider your array to be along the line. And you just kind of probe or inspect each available element looking for an available spot. And as soon as you find one, you drop it in there. 

Now, the price being paid now for this solution is what? We have a fixed size array, and when I insert names into it, at least initially, what's the running time of insertion for putting the students' quizzes in the right buckets? Big O of what? 

AUDIENCE: n. DAVID MALAN: I heard big O of n. Not true. But we'll tease apart why in just a moment. What else might it be? 

AUDIENCE: [INAUDIBLE] DAVID MALAN: And let me do it visually. So suppose this is the letter S. 

AUDIENCE: It's one. DAVID MALAN: It's one. Right? This is an array, which means we have random access. And if we think of this as zero and this as 25, and we realize that, oh, here's my input S, I can certainly convert S, an ASCII character, to a corresponding number between zero and 25 and then immediately put it where it belongs. 

But of course, as soon as I get to the second person who's name is A or B or C eventually, if I've used the linear probing as my solution, the running time of insertion in the worst case is actually going to devolve into what? And I did hear it here correctly early on. AUDIENCE: [INAUDIBLE] DAVID MALAN: So it is n indeed once you have a sufficiently large data set. So, on the one hand, if your array is big enough and your data is sparse enough, you get this beautiful constant time. But as soon as you start getting more and more elements, and just statistically you get more people with the letter A as their name or the letter B, it could potentially devolve into something more linear. So not quite perfect. So could we do better? 

Well, what was our solution before when we want to have more dynamism than something like an array allowed? AUDIENCE: [INAUDIBLE] DAVID MALAN: What did we introduce? Yeah. So a linked list. Well, let's see what a linked list might do for us instead. Well, let me propose that we draw the picture as follows. Now this is a different picture from an example from a different text, actually, that is actually using an array of size 31. And this author simply decided to hash strings not based on the person's names, but based on their birthdates. Irrespective of the month, they figured if you're born on the first of a month or the 31st of a month, the author will hash based on that value, so as to spread the names out a bit more than just 26 spots might allow. And perhaps it's a little more uniform than going with alphabetical letters, because of course there's probably more people in the world with names that start with A than certainly some other letters of the alphabet. So maybe this is a little more uniform, assuming a uniform distribution of babies across a month. 

But, of course, this is still imperfect. Right? We're having collisions. Multiple people in this data structure are still having the same birthdate at least you're irrespective of month. But what has the author done? Well, it looks like we have an array on the left-hand side drawn vertically, but that's just an artist's rendition. It doesn't matter what direction you draw an array, it's still an array. What is this an array of apparently? 

AUDIENCE: Linked list. 

DAVID MALAN: Yeah. It looks like it's an array of linked list. So again, to this point of sort of using these data structures now as ingredients to more interesting solutions, you can absolutely take a fundamental, like an array, and then take something more interesting like a linked list and even combine them into an even more interesting data structure. And indeed, this too would be called a hash table, whereby the array is really the hash table, but that hash table has chains, so to speak, that can grow or shrink based on the number of elements you want to insert. 

Now, accordingly, what's the running time now? If I want to insert someone whose birthday is October 31, where does he or she go? All right. At the very bottom where it says 31. And that's perfect. That was constant time. But what if we find someone else whose birthday is, let's see, October, November, December 31? Where is he or she going to go? Same thing. Two step though. That's constant though isn't it? All right. At the moment it is. But in the general case, the more people we add, probabilistically, we're going to get more and more collisions. 

Now this is a little better because technically now my chains could be in the worst case how long? If I insert n people into this more sophisticated data structure, n people, in the worst case it's going to be n. Why? 

AUDIENCE: Because if everybody has the same birthday, they're going to be one line. DAVID MALAN: Perfect. It might be a little contrived, but truly in the worst case, if everyone has the same birthday, given the inputs you have, you're going to have a massively long chain. And so, you could call it a hash table, but really it's just a massive linked list with a whole lot of wasted space. But in general, if we assume that at least birthdays are uniform-- and it probably isn't. I'm making that up. But if we assume, for the sake of discussion that they are, then in theory, if this is the vertical representation of the array, well then hopefully you're going to get chains that are, you know, roughly the same length where each of these represents a day of the month. 

Now if there's 31 days in the month, that means my running time really is big O of n over 31, which feels better than linear. But what was one of our commitments a couple of weeks ago whenever it came to expressing the running time of an algorithm? Just only look at the high order term. Right? 31 is definitely helpful. But this is still big O of n. But one of the themes of problem set five is going to be to acknowledge that absolutely, asymptotically, theoretically this data structure is no better than just one massive linked list. And indeed, in the worst case, this hash table might devolve into that. 

But in the real world, with us humans that own Macs or PCs or whatever and are running real world software on real world data, which algorithm are you going to prefer? The one that takes end steps or the one that takes n divided by 31 steps to find some piece of data or to look up some information? I mean, absolutely the 31 makes a difference in the real world. It is 31 times faster. And we humans are certainly going to appreciate that. 

So realize the dichotomy there between actually talking about things theoretically and asymptotically which definitely has value as we've seen, but in the real world, if you care about just making the human happy for general inputs, you might very well want to accept the fact that, yes, this is linear, but it's 31 times faster than linear might be. And better yet, we don't just have to do something arbitrary like a birthdate, we could spend a little more time and cleverness and think about what we might do, given a person's name and maybe their birthdate to combine those ingredients to figure out something that is truly more uniform and less jaggy, so to speak than this picture currently suggests it might be. How could we implement this in code? Well, let me propose that we just borrow some syntax we've used a couple times thus far. And I'm going to define a node, which again is a generic term for just some container for some data structure. I'm going to propose that a string is going in there. But we're going to start taking those training wheels off now. 

No more CS50 library really, unless you want to use it for your final project, which is fine, but now we're going to pull back the curtain and say it's just a char star. So the word there is going to be the person's name in question. And now I have a link here to the next node so that these represent each of the nodes in the chain, potentially, of a linked list. 

And now how do I declare the hash table itself? How do I declare this whole structure? Well, really, much like I used a pointer to just the first element of a list before, similarly can I just say I just need a bunch of pointers to implement this whole hash table. I'm going to have an array called table for hash table. It's going to be of size capacity. That's how many elements can fit in it. And each of those elements in this array is going to be a node star. Why? Well, per this picture, what I'm implementing the hash table as effectively in the beginning is just this array that we've drawn vertically, each of whose squares represents a pointer. That ones that have slashes through them are just null. And the ones that have arrows going to the right are actual pointers to actual nodes, ergo the start of a linked list. 

So here, then, is how we might implement a hash table that implements separate chaining. Now can we do better? All right I promised last time that we could achieve constant time. And I kind of gave you constant time here, but then said not really constant time because it's still dependent on the total number of elements you're inputting into the data structure. But suppose we did this. Let me go back to the screen over here. Let me also project this up here, clear the screen, and suppose I did this. Suppose I wanted to insert the name Daven in into my data structure. 

So I want to insert a string Daven into the data structure. What if I don't use a hash table, but I use something that's more tree-like like a family tree, where you have some root at the top and then nodes and leaves that go downward and outward. Suppose then, that I want to insert Daven's into what's currently an empty list. I'm going to do the following: I'm going to create a node in this family tree-like data structure that looks a little like this, each of which rectangles has, let's say, for now 26 elements in it. And each of the cells in this array is going to represent the letter of an alphabet. 

Specifically, I'm going to treat this is A, then B, then C, then D, this one here. So this is going to effectively represent the letter D. But to insert all of Daven's name I need to do a bit more. So I'm first going to hash, so to speak. I'm going to look at the first letter in Daven's which is obviously a D, and I'm going to allocate a node that looks like this-- a big rectangle big enough to fit the whole alphabet. 

Now D is done. Now A. D-A-V-E-N is the goal. So now what I'm going to do is this. As soon as I started D notice there's no pointer there. It's garbage values at the moment, or I might initialize it to null. But let me keep going with this idea of building a tree. Let me allocate another one of these nodes that has 26 elements in it. 

And you know what? If this is just a node in memory that I created with malloc, using a struct as we'll soon see, I'm going to do this-- I'm going to draw an arrow from the thing that represented D down to this new node. And now, first the next letter in Daven's name, V-- D-A-V-- I'm going to go ahead and draw another node like this, whereby, the V elements here, which we'll draw for instance-- whoops. We won't draw there. It's going to go here. 

Then we're going to consider this to be V. And then down here we're going to index down from V into what we'll consider E. And then from here we're going to go have one of these nodes here. And now we have a question to answer. I need to somehow indicate that we're at the end of the string Daven. So I could just leave it null. 

But what if we have Daven's full name also, which is, as we've said, Davenport? So what if Daven is actually a substring, a prefix of a much longer string? We can't just permanently say nothing is going to go there, because we could never insert a word like Davenport into this data Structure 

So what we could do instead is treat each of these elements as maybe having two elements inside of them. One is a pointer, indeed, as I've been doing. So each of these boxes is not just one cell. But what if the top one-- the bottom one's going to be null, because there is no Davenport just yet. What if the top one is some special value? And it's going to be a little hard to draw it this size. But suppose it's just a check mark. Check. D-A-V-E-N is a string in this data structure. 

Meanwhile, if I had more space here, I could do P-O-R-T, and I could put check in the node that has the letter T at the very end. So this is a massively complex-looking data structure. And my handwriting certainly doesn't help. But if I wanted to insert something else, consider what we would do. If we wanted to put David in, we'd follow the same logic, D-A-V, but now I would point in the next element not from E, but from I to D. So there's going to be more nodes in this tree. We're going to have call malloc more. But I don't want to make a complete mess of this picture. So let's instead look at one that's been pre-formulated like this with not dot, dot, dots, but just abbreviated arrays. But each of the nodes in this tree up here represents the same thing-- an array Ray of size 26. 

Or if we want to be really proper now, what if someone's name as an apostrophe, let's assume that each node actually has like 27 indexes in it, not just 26. So this now is going to be a data structure called a trie-- T-R-I-E. A trie, which is supposedly historically a clever name for a tree that's optimized for retrieval, which of course, is spelled with an I-E so it's trie. But that is the history of the trie. 

So a trie is this tree-like data structure like a family tree that ultimately behaves like that. And here is just another example of a whole bunch of other people's names. But the question now at hand is what have we gained by introducing arguably a more complicated data structure, and one, frankly, that uses a lot of memory. 

Because even though, at the moment, I'm only using D's pointer and A and V and Es and Ns, I'm wasting a heck of lot of memory. But where I spend one resource, I tend to do gain back another. So if I'm spending more space, what's probably the hope? That I'm spending less what? AUDIENCE: Less time. DAVID MALAN: Time. Now why might that be? Well, what is the insertion time, in terms of big O now, of a name like Daven or Davenport or David? Well, Daven was five steps. Davenport would be nine steps, so it would be a few more steps. David would be five steps as well. So those are concrete numbers, but surely there's an upper bound on the length of someone's name. And indeed, in the problem sets of five specification, we're going to propose that it's something that's 40-some-odd characters. 

Realistically, no one has an infinitely long name, which is to say that the length of a name or the length of a string we might have certain the state of structure is arguably what? It's constant. Right? It might be a big constant like 40-something, but it is constant. And it has no dependency on how many other names are in this data structure. In other words, if I wanted to now insert Colton or Gabriel or Rob or Zamyla or Alison or Belinda or any other names from the staff into this data structure, is the running time of inserting other names going to be at all impacted by how many other elements are in the data structure already? It's not. Right? Because we're effectively using this multi-layer hash table. And the running time of any of these operations is dependent not on the number of elements that are in the data structure or that are eventually going to be in the data structure, but on the length of what specifically? 

The string being inserted, which does make this asymptotically constant time-- big O of one. And frankly, just in the real world, this means inserting Daven's name takes like five steps, or Davenport nine steps, or David five steps. That's pretty darn small running times. And, indeed, that's a very good thing, especially when it's not dependent on the total number of elements in there. So how might we implement this kind of structure in code? It's a little more complex, but still it's just an application of basic building blocks. I'm going to redefine us node as follows: bool called word-- and this could be called anything. But the bool represents what I drew as a check mark. Yes. This is the end of a string in this data structure. 

And, of course, the node star there is referring to children. And, indeed, just like a family tree, you would consider the nodes that are hanging off of the bottom of some parent element to be children. And so the children is going to be an array of 27, the 27th one just being for apostrophe. We're going to sort of special case that. So you can have certain names with apostrophes. Maybe even hyphen should go in there, but you'll see in p set 5 we only care about letters and apostrophes. 

And then how do you represent the data structure itself? How do you represent the root of this trie, so to speak? Well, just like with a linked list, you need a pointer to the first element. With a trie you just need one pointer to the root of this trie. And from there you can hash your way down deeper and deeper to every other node in the structure. So simply with this can we represent that struct. 

Now Meanwhile-- Oh, question. 

AUDIENCE: What's bool word? 

DAVID MALAN: Bool word is just this C incarnation of what I described in this box here, when I started splitting each of the array's elements into two pieces. One is a pointer to the next node. The other has to be something like a check box to say yes, there's a word Daven that ends here, because we don't want, at the moment, Dave. 

Even though Dave is going to be a legitimate word, he's not in the trie yet. And D is not a word. And D-A is not a word or a name. So the check mark indicates only once you hit this node is the previous path of characters actually a string that you've inserted. So that's all the bool there is doing for us. 

Any other questions on tries? Yeah. 

AUDIENCE: What is the overlap? What if you have a Dave and a Daven? DAVID MALAN: Perfect. What if you have a Dave and a Daven? So if we insert, say a nickname, for David-- Dave-- D-A-V-E? This is actually super simple. So we're only going to take four steps. D-A-V-E. And what do I have to do once I hit that fourth node? Just going to check. We're already good to go. Done. Four steps. Constant time asymptotically. And now we've indicated that both Dave and Daven are strings in the structure. So not a problem. And notice how the presence of Daven did not make it take any more time or less time for Dave and vice versa. 

So what else can we now do? We've used this metaphor before of trays representing something. But it turns out that a stack of trays is actually demonstrative of another abstract data type-- a higher level data structure that at the end the day is just like an array or a linked list or something more mundane. But it's a more interesting conceptual concept. A stack, like these trays here in Mather, are generally called just that-- a stack. 

And in this type of data structure you have two operations-- you have one called push for adding something to the stack, like putting another tray back on the top of the stack. And then pop, which means you take the topmost tray off. But what's key about a stack is that it's got this curious characteristic. As the dining hall staff are rearranging the trays for the next meal, what's going to be true about how students interact with this data structure? AUDIENCE: They're going to pop one off. DAVID MALAN: They're going to pop one off, hopefully the top. Otherwise it's just kind of stupid to go all the way to the bottom. Right? The data structure doesn't really allow you to grab the bottom tray at least easily. So there's this curious property to a stack that the last item in is going to be the first one out. And computer scientists call this LIFO-- last in, first out. And it actually does have interesting applications. It's not necessarily as obvious as some others, but it can, indeed, be useful, and it can, indeed, be implemented in a couple of different ways. 

So one, and actually, let me not to dive into that. Let's do this instead. Let's look at one that's almost the same idea, but it's a little fairer. Right? If you're one of these fan boys or girls that really likes Apple products and you woke up at 3:00 AM to line up at some store to get the very latest iPhone, you might have queued up like this. 

Now a queue is very deliberately named. It's a line because there's some fairness to it. Right? It would kind of sucked if you've got there first at the Apple Store but you are effectively the bottommost tray because the Apple employees then pop the last person who actually got in line. So stacks and queues, even though functionally they're kind of the same-- it's just this collection of resources that's going to grow and shrink-- there's this fairness aspect to it, at least in the real world, where the operations you exercise are fundamentally different. A stack-- a queue rather-- is said to have two operations: n queue and d queue. Or you can call them any number of things. But you just want to capture the notion that one is adding and one is ultimately subtracting. 

Now underneath the hood, both the stack and a queue could be implemented how? We won't go into the code of it because the higher level idea is sort of more obvious. I mean, what do humans do? If I'm the first person at the Apple Store and this is the front door, you know, I'm going to stand here. And the next person's going to stand here. And the next person's going to stand here. So what data structure lends itself to a queue? 

AUDIENCE: A queue. DAVID MALAN: Well, a queue. Sure. What else? 

AUDIENCE: A linked list. 

DAVID MALAN: A linked list you could implement. And a linked list is nice because then it can grow arbitrarily long as opposed to having some fixed number of people in the store. But maybe a fixed number of places is legitimate. Because if they only have like 20 iPhones on the first day, maybe they only need an array of size 20 to represent that queue, which is only to say now once we start talking about these higher level problems, you can implement it in any number of ways. And there's probably just going to be a trade off in space and time or just in your own code complexity. 

What about a stack? Well, a stack, we've seen too could just be these trays. And you could implement this an array. But at some point if you use an array, what's going to happen to the trays you're trying to put down? All right. You're only going to be able to go so high. And I think in Mather they're actually recessed in that opening. So indeed, it's almost like Mather is using an array of fixed size, because you can only fit so many trays in that opening in the wall down below people's knees. And so that might be said to be an array, but we could certainly implement that more generally with a linked list. 

Well, what about another data structure? Let me pull up one other visual here. Something like how about this one here? Why might it be useful to have not something as fancy as a trie, which we saw had these very wide nodes, each of which is in an array? But what if we do something more simply, like an old school family tree, each of whose nodes here is just storing a number. Instead of a name or a descendant is just storing a number like this. 

Well, the jargon we use in data structures is both tries and trees, where a trie, again, is just one whose nodes are arrays, is still what you might use from grade school when you made a family tree-- leaves and the root of the tree and children of the parent and siblings thereof. And we might implement a tree, for instance, as simply as this. A tree, if it as a node, one of these circles that has a number, it's not going to have one pointer, but two. And as soon as you add a second pointer, you can actually now make sort of two-dimensional data structures in memory. Much like a two-dimensional array, you can have kind of two-dimensional linked lists but ones that follow a pattern where there's no cycles. It's truly a tree with one grandparent way up here and then some parents and children and grandchildren and great-grandchildren. and so forth. 

But what's really neat about this too, just to tease you with a bit of code, recall recursion from awhile back, whereby you write a function that calls itself. This is a beautiful opportunity to implement something like recursion, because consider this. 

This is a tree. And I've been a little anal with how I put the integers into the street. So much so that it has a special name-- a binary search tree. Now we've heard of binary search, but can you work backwards from this thing's name? What is the pattern of how I inserted the integers into this tree? It's not arbitrary. There's some pattern. Yeah. 

AUDIENCE: Smaller ones on the left. 

DAVID MALAN: Yeah. Smaller ones are on the left. Bigger ones are on the right. Such that a true statement is a parent is greater than its left child, but less than its right child. And that alone is even a recursive verbal definition because you can apply that same logic to every node and it only bottoms out, a base case if you will, when you hit one of the leaves, so to speak, where a leave has no children further. 

Now how might you find the number 44? You would start at the root and say, hm. 55 is not 44 So do I want to go right or do I want to go left? Well, obviously you want to go left. And so it's just like the phone book example in binary search more generally. But we're implementing it now a little more dynamically than an array might allow. And in fact, if you want to look at the code, at first glance sure. It looks like a whole bunch of lines. But it's beautifully simple. If you want to implement a function called search whose purpose in life is to search for a value like n, an integer, and you're passed in a one pointer-- a pointer to the node of the roots, rather, of that tree from which you can access everything else, notice how straightforwardly you can implement the logic. If tree is null, obviously it's not there. Let's just return false. Right? If you hand it nothing, there's nothing there. 

Else, if n is less than tree arrow n-- now arrow n, recall we introduced super briefly the other day, and that just means de-reference the pointer and look at the field called n. So it means go there and look at the field called n. So if n, the value you're given, is less than the value in the trees integer, where do you want to go? To the left. 

So notice the recursion. I'm returning-- not true. Not false. I'm returning whatever the answer is from a call to myself, passing an n again, which is redundant, but what's slightly different now? How am I making the problem smaller? I'm passing in as the second argument, not the root of the tree, but the left child in this case. So I'm passing in the left child. 

Meanwhile, if n is bigger than the node I'm currently looking at, I search the right hand side. Else, if the tree is not null, and if the element's not to the left and it's not to the right, what is wonderfully the case? We've actually found the node in question, and so we return true. 

So we've just scratched the surface now some of these data structures. In problem set five you'll explore these yet further, and you'll be given your design choice of how to go about this. What I'd like to conclude on is just a 30 second teaser of what awaits next week and beyond. 

As we begin-- thankfully you might think-- our transition slowly from the world of C and lower level implementation details, to a world in which we can take for granted that someone else has finally implemented these data structures for us, and we'll start to understand the real world means of implementing web-based programs and websites more generally and also the very security implications that we've only begun to scratch the surface of. Here is what awaits us in the days to come. 

[VIDEO PLAYBACK] 

-He came with a message, with a protocol all his own. He came to a world of cruel firewalls, uncaring routers, and dangers far worse than death. He's fast. He's strong. He's TCP/IP, and he's got your address. "Warriors of the Net." [END VIDEO PLAYBACK] DAVID MALAN: Coming next week. We will see you then. [VIDEO PLAYBACK] -And now, "Deep Thoughts" by Daven Farnham. -David always starts lectures with, "All right." Why not, "Here's the solution to this week's problem set" or "We're giving all of you an A?" [LAUGHING] [END VIDEO PLAYBACK] DAVID MALAN: De acuerdo. Esto es CS50. Y este es el comienzo de la semana de siete. Así que hoy, tal vez por suerte, comenzamos nuestra transición desde el nivel inferior mundo de la programación C al nivel más alto mundo de la programación web. Y con eso, vamos a echar un vistazo En exactamente cómo funciona el internet, lo que estas máquinas y estas internets que usted ha estado usando desde hace años realmente hacer debajo de la capucha hacia una mejor comprensión de cómo todo trabaja, y cómo puede hacer que funcione para usted. Con ese fin, ¿por qué no tomamos un mirar primero a un ritmo de un programa de televisión llamados Numb3rs, que no nos llevará a empezados en cuanto a exactamente cómo funciona el internet. [REPRODUCCIÓN DE VÍDEO] -Es Una dirección IPP4 de 32 bits. -IP. Ese es el internet. 

Red -Private. Es la red privada de Amita. Oh, ella es tan increíble. 

-Oh, Charlie. 

-Es Una dirección IP espejo. Ella dejarnos mirar lo que está haciendo en tiempo real. [FIN REPRODUCCIÓN DE VÍDEO] DAVID MALAN: Así que no es un todo mucho de malo en ese programa de televisión. Así que vamos a desmenuzar exactamente una de las primeras cosas y ver si no podemos envolver nuestra mente alrededor de ella. Así que el último cuadro de esa película, de ese show es este de aquí, que parece sugerir que este es lo que algunos hackers está utilizando para entrar en algún sistema. 

Pero no. Si te acercas a este código fuente, que es un lenguaje llamado Objective C en que las aplicaciones del iPhone, las aplicaciones de iPad y Mac Aplicaciones del sistema operativo se escriben, verás que este es por algún tipo de programa de dibujo que tiene un lápiz de color como una variable. 

Así que, además, es posible que han dado cuenta de esta dirección aquí. Ahora, esto es un como mal. Y este es, probablemente, elegido deliberadamente ser una dirección no válida de modo que en realidad no conducir a alguna parte si un espectador de televisión en realidad lo visita. Pero este número aquí, algo dot algo dot dot algo algo es lo que es generalmente conocido como una dirección IP. Y en realidad es un buen segue a este tema más en general, conocido como IP, protocolo de Internet. Así que usted tiene probablemente por lo menos escuchado esta frase antes. Pero lo que es IP, o Internet protocolo como usted lo entiende hoy en día? Las probabilidades son, si pedimos un a mano alzada, la mayoría de ustedes probablemente han dicho que el palabras IP dirección antes. Entonces, ¿qué quiso decir? 

AUDIENCIA: [inaudible]? DAVID MALAN: ¿Qué es eso? AUDIENCIA: [inaudible]? DAVID MALAN: Una vez más. AUDIENCIA: Dirección de la computadora. DAVID MALAN: El dirección del ordenador. Así que eso es exactamente correcto. Resulta que cada ordenador en Internet, y en estos días, todos los teléfonos en su bolsillo y la tableta en su mochila, tiene una dirección IP, Internet dirección de protocolo, el cual es una dirección única que identifica a lo largo de toda la internet. Ahora, eso es un poco de un blanco mentir, porque el mundo es en realidad quedando sin direcciones IP. 

Así que hemos empezado a utilizar direcciones IP privadas. Pero más sobre esto en un momento. Pero se puede pensar en una dirección IP como como su calle servicio postal dirección. Tenemos utilizar el ejemplo de Maxwell Dworkin, el edificio CS, antes- 33 Oxford Street Cambridge, Misa, 02138, EE.UU.. Esa es su dirección única en el mundo. 

Del mismo modo hacer ordenadores tienen direcciones únicas. Se acaba de pasar a mirar un poco diferente- una serie dot dot un número una serie dot un número. Y ¿alguien realmente sabe lo que el rango válido de números es para cada uno de los hashes? Sí. 

AUDIENCIA: 0 a 255? DAVID MALAN: Exactamente. 0 a 255. E incluso si usted no sabía que, ahora llegar a una conclusión, cuántos bits se utilizan para representar cada uno de estos números, entonces? Ocho parecer a causa de la más alta que puede contar es 255, que es un valor de 8 bits. Así que en total, una dirección IP es de 32-bits. Así reenvío rápido a la conclusión matemática, cuántos posibles direcciones IP hay en el mundo, entonces? 

Así que eso es de 8 y de 8 y de 8 y de 8, así que eso es 32 bits. Y siempre hemos dicho que 2 a la 32 es más o menos? Okay. Voy a campo éste. Cuatro mil millones. Y hablamos de que en la semana cero cuando hablamos de libros de teléfono con números de locos de páginas. Pero la suerte de que es que no hay un número finito de direcciones IP. Y a pesar de que cuatro mil millones podría parecer mucho, nosotros, los seres humanos han sido consume muy pocos de ellos para todos nuestros servidores y los dispositivos y así sucesivamente. 

Así que esto es realmente convirtiendo en un problema. Ahora, tiende a haber una esquema detrás de quién tiene qué IP. Por ejemplo, muchos de las computadoras en la Universidad de Harvard tienen direcciones únicas que se inician con uno de estos dos valores. MIT, de manera similar, tiene un prefijo. Y una gran cantidad de empresas y universidades tener su propio prefijo único. Y a continuación, la mayoría de nosotros para nuestro hogar conexiones de Internet y similares, compartimos algunos prefijo que Comcast o alguien así le pasa a poseer. Y esto es sólo para decir que si usted miró a la mayoría de las computadoras en el campus, probablemente tendrían una IP dirección que se parece a esto. 

Ahora, es posible que también de vez en cuando ver una dirección IP que empiece así. De hecho, si alguno de ustedes se criaron con acceso a Internet en casa, y usted era nunca suficiente técnicamente curiosidad por hurgar sus propios ajustes de la computadora, es probable que en lugar vio una dirección que parece más este, que comenzó con 10, o 172,6, o 192.168, o algunas variantes de los mismos. 

Y eso sólo significa que el mundo es dejar de lado un montón de números a ser privada, lo que significa usted puede utilizar en su hogar, incluso se puede usarlas en su campus y dentro de su empresa, pero no se puede usarlos en el Internet en general. 

Y por lo que estos privado PI han sido una solución hacia asegurarse de que al menos por lo que lo que se refiere a todo el mundo, no estamos utilizando que muchas direcciones IP. Pero al menos, podemos, por nuestra cuenta campus, tienen más o menos como muchos IPs como queremos. Pero a quién le importa? ¿Cuál es la relevancia de todo esto a un uso real de la Internet? 

Bueno, echemos un vistazo a tal vez una simple foto aquí. Déjame a través tanto de éstos para arriba en la pantalla. Y perdonar mi letra aquí. Pero si pensamos en nosotros mismos como siendo este pequeño portátil aquí en algún lugar en el campus, en estos días tiene conexión Wi-Fi gratuita. 

Pero en antaño y si a encontrar el adaptador adecuado, que puede tener un cable ethernet Del mismo modo que deje se conecta a algún tipo de dispositivo. Y usted puede llamar a este cualquier número de cosas. Pero yo voy a seguir adelante y llamar a esto, por ahora, ¿qué hay de un punto de acceso? 

Así que esta es mi ordenador portátil. Este es mi AP, o punto de acceso, y esto es algún dispositivo inalámbrico, no muy diferente de los que la Universidad de Harvard tiene todo lo largo de los techos y las paredes alrededor del campus que tienen luces parpadeantes y que son lo que sus ordenadores portátiles utilizado para hablar de forma inalámbrica para el resto de la red. 

Así que de alguna manera este portátil está hablando a esa cosa en la pared, en el comedor, o en otro lugar. Ahora, mientras tanto, ese punto de acceso es conectado a algo más en el campus. Y es probable que sea algo conocido como un interruptor. Y se ven mucho más interesante que sólo estos diagramas de caja. 

Pero de alguna manera, esa cosa es conectado a un conmutador. Y a su vez, de alguna manera que el interruptor está conectado a un dispositivo que es probablemente una poco más grande, llamado un router. Y luego, por su parte, Harvard está conectado a todo el Internet que vamos a dibujar como esta nube aquí, a través de algún número de alambres o la tecnología inalámbrica. 

Así que hay un montón de pasos entre yo y el resto del mundo. Y, de hecho, incluso dentro de esta imagen aquí, hay algunos otros servidores o servicios involucrados. Y yo sólo voy a dibujar éstas un tanto abstracta sólo para que tengamos las siglas que se nos presentan. 

Uno se llama DHCP. Y otro, un poco más interesante para hoy, se llama DNS. Así que estos son los servidores que son de alguna manera accesible para mi equipo también. Así que ahora, vamos a burlan aparte un poco de jerga. Así que el punto de acceso es sólo este dispositivo inalámbrico a menudo con antenas que en realidad deja que hable con una forma inalámbrica. En casa, usted puede llamar a este router un hogar. Podría ser hecha por Linksys, o Apple, o D-Link, o cualquier número de empresas. Eso, a su vez, está conectado a un conmutador de algún tipo. O de vuelta a casa, ¿cuál es su conexión Wi-Fi probablemente dispositivo conectado a su lugar? Debido a que es probable que no lo hace poseer todo este equipo. Sí. Módem por cable o módem DSL de vuelta a casa que recibió de Verizon, Comcast o, o una de esas compañías. Así que pensar en todo esto la complejidad el apoyo a una universidad o como realmente un negocio como Comcast. Y realmente, las cosas eso está en su casa es probable que en este lado de la valla, más tal vez uno de ellos a casa route-- uno de estos son los módems de cable o DSL módems que podrían proporcionar. 

Así que un interruptor es un dispositivo con un montón de tomas de datos en el mismo. De hecho, si usted recuerda que las noticias informe que jugamos en la pantalla grande un par de semanas en el que se habla de neurosis de guerra, y lo malo que era esto? Y hubo de estos fotografías de cables y conectores, y las cosas que se ven técnico? Esos fueron sólo interruptores que mudos simplemente conecta los ordenadores a Internet conectando cables en ellos. 

Así que eso es todo un interruptor es. Ahora, estos dispositivos obtienen una poco más interesante. DHCP. Si usted ha hurgó su computadora en casa o incluso en el campus, usted puede ser que haya visto este acrónimo. ¿Alguien sabe lo que es un servidor DHCP? Protocolo de configuración dinámica de host? No es el tipo de cosa que usted realmente necesita para escribir. DHCP. nadie en absoluto? Bien. Así que vamos a rebobinar la historia. Si la historia que aquí nos ocupa se basa en mi tener una dirección única en el mundo, una dirección IP, donde viene eso? En antaño, cuando tienes al campus, que realmente tenía pedirle a alguien en Harvard, lo que debería ser mi dirección IP. Y lo haría de forma manual escríbalo en su ordenador. Pero, más recientemente, las tecnologías existir que le permite de forma dinámica, DHCP, obtener una dirección IP sólo cuando se conecta de forma inalámbrica en el campus o con un alambre. Así servidor DHCP es sólo un servidor que le da a su equipo una IP única dirección, algo al azar o por medio de algún algoritmo. Pero si usted piensa de nuevo un unas semanas o unos pocos años, al registrarse el equipo en el campus, te decías Harvard, autoriza yo me doy una dirección IP. Ahora DNS empezar a obtener una poco más interesante. Sistema de nombres de dominio. ¿Alguien quiere tomar una puñalada en lo que es esta cosa aquí? 

Es uno o más servidores que realizar una tarea bastante simple que es tipo de importancia. Sí. 

AUDIENCIA: Traduce las direcciones URL [inaudible]. DAVID MALAN: Sí. Traduce las direcciones URL de IP direcciones y viceversa. Considere la posibilidad de, después de todo, que cuando vas en el sitio web, que escribe en algo así como facebook.com, o google.com, o harvard.edu, que sin duda nunca ha escrito más probable una dirección IP numérica. 

Y usted puede pensar en la razón por qué. De vuelta en el día, incluso ahora, en cierta medida, cuando usted hace un teléfono llamar a una empresa, que realmente se esfuerzan para comprar ellos mismos un número 800 que en realidad tiene palabras en ella, al igual que al 1-800-collect o algo eso es memorable como que para que la gente no tiene que recordar lo que C-O-L-L-E-C-T en realidad se expande a. Así que hemos visto este heurística en el pasado. Y, en efecto, eso es lo que las direcciones IP y lo que vamos a llamar a los nombres de host o completo nombres de dominio hacen por nosotros. Nos permite a los servidores de direcciones con palabras en lugar de números. Entonces, ¿cómo hacer que realmente ver esta conversión. Voy a seguir adelante y abrir un programa. Yo sólo voy a seguir adelante y abrir una ventana de terminal. Y yo voy a seguir adelante y mostrar lo que hace un servidor DNS. Por ejemplo, si yo quería ver lo que la dirección IP es de Facebook, Puedo escribir en una terminal pedirá así- y usted puede hacer esto incluso dentro de su aparato. Y eso es facebook.com búsqueda. 

Y veo un montón de cosas. Esta primera respuesta es Server-- DNS de Harvard esa imagen que yo tengo dibujado allí. --que de me dice que la propiedad intelectual de Facebook dirección es al parecer esto. Así que déjame ir por delante y copiar ese 173.252.120.16. Y permítanme abro Chrome en mi Mac. Y déjame ir a http: // y pegar que la dirección IP y pulse Enter. 

Y, de hecho, me encuentro en Facebook. Así que de alguna manera que la conversión, de hecho, ocurrió. Y si lo hago de nuevo, vamos a hacer nslookup, www.google.com. Yo vuelva un montón de respuestas. Y de hecho, hay diferentes maneras que las empresas a implementar esto. A veces, le dicen al mundo tienen una dirección IP. 

Pero que una dirección IP se resuelve o asignado a varios servidores. O en el caso de Google, le dicen al mundo, tenemos un montón de direcciones IP. Su portátil es bienvenido a hablar póngase en contacto con cualquiera de estos servidores. Así que todos los que ha estado sucediendo en debajo de la capucha. 

Cuando se escribe en www.google.com Ingrese en el navegador, el navegador, y en convertir su operativo, Mac OS o Windows, o Ubuntu Linux, solicitar al servidor DNS en las inmediaciones, lo que es la dirección real de este servidor. Debido a que el último dispositivo En esta imagen, un router, es aquel cuyo propósito en la vida es información de la ruta, enrutar paquetes por así decirlo, sobres de la información digital que contiene ceros y unos de emisor al destino, de origen al receptor. 

Y así un material rutas del router. Así que ¿por qué es todo esto particularmente relevante? Bueno, echemos un vistazo la forma en que esto podría ser utilizado. Supongamos que tengo aquí una foto de Rob Boden. Así que supongo que quiero enviar esta foto de Rob Boden a Dan en la parte posterior de la sala de conferencias. 

Así que estoy un ordenador como mi portátil, y Dan es algo de otro ordenador en Internet. Y quiero enviar un paquete de información de mí hacia él. Esto plantea la pregunta, ¿cómo puedo en realidad ruta este paquete para él. Bueno, en términos humanos, yo diría, Hey, ¿puedes pasar esto a Dan? 

Y entonces, un montón de ustedes probablemente pasar de nuevo y adelante hacia atrás y adelante hasta que finalmente hace su camino a Dan. Pero eso es un poco impreciso. Computadoras probablemente necesitan ser un poco más metódico. Así que probablemente, Dan tiene una dirección IP. Así que lo que realmente debería hacer es que debo Tomemos, por ejemplo, un sobre blanco como este. Y yo no sé qué Dirección IP de Dan es. 

Así que sólo voy a generalizarlo como IP de Dan. Y voy a poner esto en el campo de mi sobre. Y mientras tanto, tengo una dirección IP. No importa lo que es hoy. Así que sólo voy a decir mi IP en la esquina trasera allí. Y luego, voy a seguir adelante y poner esta foto en el interior de este sobre. 

Y luego, cada uno de ustedes, es de suponer, como enrutadores de internet, han sido preconfigurada por los seres humanos en general, o, a veces por algoritmos automáticos para saber que si la dirección IP de Dan comienza con un 1, debe ir en esa dirección. Si la dirección IP de Dan comienza con un 2, debería ir en esa dirección. Tal vez un 3 va de esa manera. Tal vez un 4 va de esa manera. Y eso es un poco demasiado. Simplista, pero esa es la idea general. Cada uno de estos routers-- y no podría haber hasta 30 entre yo y Dan. --have algún tipo de hoja de cálculo dentro de su memoria, una tabla de base de datos, que sólo dice: Dirección IP que se parece a esto, va de esta manera. Una dirección IP que se ve de esta manera, va de esa manera. Y eso es lo que hace decisiones bastante simplistas. 

Pero resulta que estos routers hacen algo más que eso, potencialmente. Ellos permiten a los ordenadores entrega garantizados, al menos con alta probabilidad. Así que usted puede ser que también haya oído hablar, incluso si usted ha nunca cuidó o preguntado lo que es, usted puede haber oído de algo por este acrónimo. Volvamos aquí para un momento y tire hacia arriba de este. 

TCP, el protocolo de control de transmisión. Otra forma técnica de solo que describe otra tecnología eso se utiliza en Internet. Por lo tanto, el protocolo de Internet IP se utiliza para el direccionamiento. Es cierto que el estándar mundo vino para arriba con eso dicho, poner una dirección IP aquí para Dan, y una dirección IP aquí por ti mismo, y luego poner un poco de información en un sobre. 

Pero TCP es otra tecnología, se utiliza junto con IP. Y de hecho, si alguna vez has visto estas siglas antes, usted probablemente ha visto TCP IP que acaba de slash significa que la gente tiende a utilizarlos juntos. Bueno, es una especie de TCP fresco, ya que permite a aumentar la probabilidad que los datos son en realidad va a obtener de mí a Dan. 

De hecho, el Internet es un lugar loco. No hay garantía de que si envío de datos de esta manera que se va a ir de esa manera la próxima vez. Podría ir de esa manera o de esa manera. La distancia más corta entre dos puntos no es necesariamente una escalera o de la misma línea. 

Por otra parte, algunos de ustedes chicos pueden cometer errores o se dejen confundir con demasiado muchos sobres que te lanzan. Así que usted sólo va a renunciar y, literalmente, soltar algunos de estos sobres en el suelo. Y en esa misma manera pueden ser datos caído en el Internet por los routers. Así que para disminuir la probabilidades de esto, me voy para llevar a mi poca seguridad tijeras y cortar aquí Rob en, digamos, cuatro piezas, cuatro segmentos. 

Y ahora, voy a seguir adelante y poner una pieza más de información en este sobre. Voy a decir algo así como: 1 de 4. Así que ahora, mi sobre final, en menos la primera, parece que este. Voy a seguir adelante y poner éste en aquí. Y por el bien de tiempo, voy a etiquetar los demás idéntica que 2 de 4, 3 de 4, 4 de 4. 

Una vez más, con la dirección IP de Dan en la frente a ella y con mi dirección IP en la parte posterior izquierda, pero yo no pueden enviarlos por el momento. Debido a que resulta que en el Internet, servidores pueden hacer varias cosas. De hecho, todos nosotros podríamos utilizar la web un poco, la web en todo el mundo, http: // lo que sea. Pero hay otra servicios en el Internet. ¿Cuáles son algunos otros servicios, tipo de usuario, servicios favorables al consumidor que vienen a la mente, además de un programa Web-tipo de navegador? AUDIENCIA: Correo electrónico. DAVID MALAN: Correo electrónico. Okay. Bueno. ¿Qué hay otro? AUDIENCIA: Charla. DAVID MALAN: Así chat, si es Skype, o Gchat, o algo de esa manera. 

AUDIENCIA: Almacenamiento. DAVID MALAN: Así que algún tipo de servicio de almacenamiento, sin duda. Algo así como Dropbox, o caja, o similares. Así que hay diferentes servicios en el Internet. Y resulta que Dan, si él es de hecho una computadora, no tiene que ser dedicado a una cosa en la vida. Él realmente puede hacer varias cosas. Y, de hecho, puede ser un servidor de correo electrónico. Él puede ser un servidor web. Él puede ser un servidor de chat. 

Pero eso parece sugerir que Dan necesita saber de antemano cuáles son los contenido de estos mensajes. ¿Es esta una página web que le estoy enviando? ¿Es un correo electrónico que le estoy enviando? Es un instante mensaje que le estoy enviando? Así que necesitamos una pieza más de información sobre estos envolvente de manera que Dan, cuando recibe este sobre, sabe qué programa utilizar para mostrarlo. 

¿Es un navegador? ¿Es Google? ¿Es Skype? ¿O es Outlook o algunos otro programa por completo? Y por eso, viene con TCP sólo una convención humana. El mundo decidió algunos años Hace para asociar números enteros únicos con los servicios más populares. 

Uno de llamado Protocolo de transferencia de archivos, FTP, aunque es un poco anticuado ahora. Pero su identificador único es 21. SMTP para el correo saliente, su único identificador es 25 porque sí. DNS, lo hemos hablado antes, utiliza el número 53 para sus consultas. Al igual que lo es la IP dirección de google.com? 

Y ahora, la más familiar que podrían tener un lugar en algún momento visto el número 80 y tal vez 443. Esos son los únicos identificadores para HTTP, que es el idioma pronto nos veremos utilizamos para el tráfico de Internet entre navegadores y servidores. Y 443 es para el versión segura de los mismos. 

Así que el último detalle que soy va a poner en mi sobre es que yo no voy a enviar esta justo a la propiedad intelectual de Dan. Voy a enviar a decir, : 80, si lo que estoy tratando de enviar él es una página web, una página web que contiene la imagen de Rob Boden. Así que voy a hacer lo mismo cosa en estos otros sobres. 

Y entonces, en última instancia, me voy a caer estas con el router más cercano, reconociendo que ese router no podría necesariamente tomar el mismo camino cada vez. De hecho, yo podría tener la primer paquete que va de esta manera. Segundo paquete podría ir en esa dirección. Tercer packet-- iniciar enrutamiento. --might ir por aquí. Y en teoría- no puede mantenerlo. En teoría, todos los cuatro de estos paquetes debe eventualmente ruta a su manera, sin embargo de manera eficiente o ineficiente, todo el camino hasta la parte posterior. 

En ese momento, Dan, al recibo, puede volver a unirlos basa en-- lo curioso es, todos sabemos lo que el resultado aquí va a ser. Dan se va a poner una foto de Rob. Pero vamos a ver cómo funciona esto. Bueno, más bien, Dan va a obtener parte de un cuadro de Rob. Muy buena. Todo el mundo está hoy participar. Bien. Así como Dan comienza a recibir estos paquetes, vamos a hacer una pregunta. ¿Qué pasa si uno de ustedes sufre es perezoso, sobrecargado, malicioso, o simplemente con alimentación apagado, y uno o más de la paquete no llega a Dan? 

¿Cómo se Dan va a saber que no lo hizo recibir uno de los segmentos de los cuatro Le envié? Sólo intuitivamente, ¿qué podemos hacer? ¿Sí? 

AUDIENCIA: [inaudible]. DAVID MALAN: Exactamente. Porque he ellos con número único, y He especificado cuántos segmentos allí debe ser, él puede inferir a partir de ese que, en su caso, de los segmentos él ha hecho falta. ¿Y qué dice TCP computadoras para hacer, si las computadoras, como Mac OS, y Windows, Linux y soporte y entender TCP, que lo hacen, La documentación de TCP esencialmente dice que Dan me debe enviar un mensaje de vuelta diciendo, hey, David, Me falta paquete número 1 de 4, o 3 de 4, lo que sea que es. 

Y entonces, mi trabajo es tomar otra foto de Rob, que tenemos de extras para el día de hoy si desea tomar uno con usted, y luego puedo volver a enviar ese segmento Rob de todo el camino hasta la parte posterior. 

Así que tan simplista como este mecanismo es que, es lo que está pasando casi en cualquier momento haces algo en el Internet, particularmente para estos el más popular de los servicios. Hay otros protocolos, además de otras tecnologías TCP que funciona un poco diferente. Pero muchos de los servicios que normalmente utilizar realmente confiar en estos protocolos. 

Así que Dan, sacaste el cuadro completo volver allí? Sí. Hemos vuelto a montar Rob en la parte posterior. Muchas gracias a los routers. Supongamos que, en realidad quiero que el ver los routers entre mí y el MIT, tanto como ustedes estaban los routers entre mí y Dan. 

Bueno, en lugar de nslookup para la consulta de servidor de nombres, En cambio yo puedo escribir trazado de ruta, que que realmente se va a hacer lo que dice. Y yo voy a hacer y modo silencioso con guión 1. Es un argumento de línea de comandos que sólo dice, prueba este una vez y no varias veces. 

Y ahora, voy a escribir www.mit.edu. Ahora, la salida es bastante rápido y críptico. Pero lo que es bueno de este es que cada una de estas filas representa esencialmente una estudiante en esta audiencia si usted fuera el camino entre mí y el MIT. Lo que se ve aquí, en primer lugar, es el nombre de dominio que he escrito en, o de dominio completo nombre como se le llama correctamente. 

Y al parecer este es el Dirección IP de www.mit.edu. Mi equipo pensó que fuera para mí. Esto aquí es una promesa que sólo vamos para tratar de llegar a MIT en los 30 saltos. Mejor que haya no más de 30 estudiantes entre mí y Dan. Y ahora, cada una de estas filas representa, literalmente, un router entre yo y Dan, literalmente uno de ustedes. 

Y así que éste no parece a tener un nombre, un nombre de dominio. Sólo tiene una IP. Y sólo tomó 0.662 milisegundos para obtener de mí a ese primer enrutador. El siguiente no era que mucho más lejos. Sólo hizo falta una milisegundo para llegar allí. Y ahora, por suerte, las cosas conseguir un poco más fácil de usar con nombres que son crípticos pero un poco más diciendo. 

Esto aparentemente es un router en el núcleo de la red de Harvard ocupa, sólo porque la gente nos han dicho esto, en el Centro de Ciencias, Carolina del Sur. Y GW es sólo una notación abreviada para puerta de entrada, que es un sinónimo de router. Así que esto es algún sistema manera superíndice de administrador de nombrar uno de los servidores en el Centro de Ciencias. 

Mientras tanto, ese servidor es aparentemente conectadas por algún tipo de cable a otro router que se apoda la puerta de enlace fronterizo uno guión algo, lo que sea esos números significan. Y luego, al parecer, Harvard tiene una conexión eso es otra milisegundo distancia a algo llamado la encrucijada del norte que es un punto de interconexión común entre los lugares grandes como Harvard donde una gran cantidad de cableado va en y permite interconexiones entre las diferentes entidades. 

Paso seis, por desgracia, no tiene un nombre válido. Y el paso de siete pone interesante. No tengo idea de lo que la mayoría de ellos quiere decir. Pero Nueva York no saltan a mí. Y ¿qué significa que probablemente significan? Ni siquiera es técnico. Sólo Nueva York. Así que de hecho, lo que es humano común convención no garantizada pero convención común es que los routers de nombre por la naturaleza de la ciudad o el aeropuerto código que son más cercano al. 

Así que con cierta probabilidad, este número enrutador siete es probablemente, de hecho, en Nueva York. Y esto parece corroborar esa suposición porque es seis milisegundos en lugar de sólo uno más o menos a algo aquí en el campus. Pero ahora que tomar en cuenta, justo en Megabus o lo que sea, que podría tomar cuatro, cinco, seis horas para llegar a un humano de aquí a Nueva York. 

Para conseguir un pedazo de datos, tiene sólo seis milésimas de segundo para conseguir un paquete de mí a Dan si fuera todo el camino en Nueva York. Entonces, finalmente, esto al parecer es el nombre de dominio real para www.mit.edu. Han aparentemente externalizado sus servidores web a una compañía llamada Akamai que significa alguna otra empresa ejecuta sus servidores. Y es por eso que estamos viendo que cosa extraña ahí. 

Bueno, vamos a hacer esto una vez más. Vamos a seguir adelante y hacer una traza ruta a nuestro amigo el profesor Nick Parlante en Stanford que tiene una servidor llamado nifty.stanfor.edu. Intro. Y ahora, vamos a ver, probablemente, un camino ligeramente más largo que pasa a través de un par de ciudades más. Así que aquí éstos sin nombre Servidores de Harvard aquí. Estamos en el núcleo de la Universidad de Harvard, la puerta de entrada de la frontera de Harvard, el cruce de caminos del norte, siempre que ello sea. Y ahora, se está haciendo un poco más interesante. Supongo que el router número ocho es en qué ciudad? AUDIENCIA: [interponiendo VOCES] DAVID MALAN: Chicago probablemente, basada en esto, en base a esta cosa aquí. Y ahora tenemos Salt Lake City, tal vez, tal vez de Los Ángeles aquí, y después de LAX, sí, esto probablemente es LA por la parte inferior. Hasta que por fin, se va desde el sur de California todo el camino hasta el norte de California a donde Stanford se encuentra en Palo Alto. Así que muy bien. Y vamos a tomar un paso más allá. Al parecer, lo haría te llevará 82 milisegundos para enviar un mensaje a Dan si estuvieras en California en lugar de Nueva York. Vamos a hacer algo como rutas de rastreo, uno intentar www.cnn.co.jp para el Versión japonesa de la página web de la CNN. Y ahora, todavía estamos en Boston parece en este momento. 

Un par de servidores y seis ocho no están respondiendo porque están siendo un poco privado. Pero con el tiempo, parece que hay algo interesante en el medio, digamos, el paso siete y nueve. Lo que es, probablemente, entre siete y nueve años, y sin duda entre siete y el paso 17? Hay un enorme salto en la cantidad de tiempo que está tomando para que los datos van de un de estos saltos, uno de estos routers a otro. 

Así que las probabilidades son, en algún lugar aquí, es probable que haya, especialmente aquí, es probable que haya un gran cuerpo de agua que tiene algunos trans Pacífico o trans Cable Atlántico que requiere en realidad aún más tiempo para los datos a ir de un punto a otro. Pero, de nuevo, imaginar las horas que tomaría la marcha a Japón. Aquí, en unos 200 milisegundos, auge, su mensaje es en realidad allí. Así que usted puede jugar con esto en el aparato o incluso en Windows o Mac OS con ligeramente diferentes comandos. A veces, usted recibirá estas estrellas, al igual que en las filas de seis y ocho, que sólo significa que los routers no están configurados para darle una respuesta por el amor de la vida privada. Pero, en general, esta técnica sería, de hecho, trabajar. 

Así que resulta demasiado hay otra información jugosa al acecho en herramientas que usted toma por sentado todos los días. Así por ejemplo, si usted recibe un correo electrónico, francamente como algunos de ustedes puede tener recientemente, de cuestionable orígenes, si usted nunca ha mirado interfaz de Gmail antes, ya sea para la interfaz de la universidad o su ser personal, es posible que vea su bandeja de entrada en busca de esta manera. 

Y de hecho, esta es una dirección de correo electrónico Envié, malan@harvard.edu, a jharvard@cs50.harvard.edu esta mañana sólo para que yo pudiera tomar una captura de pantalla. Pero resulta que, todo esta vez en Gmail, hay ese pequeño triángulo hacia la parte superior derecha hay al lado de la cresta de Harvard que si hace clic, puede hacer clic en Mostrar original. Y si lo hace, en realidad se verá un montón de información muy esotérico como marcas de tiempo, y IP direcciones y nombres de dominio. 

Pero verás, en definitiva, la cabeceras que todo este tiempo tienen sido golpeado en todos y cada uno correo electrónico que se envía y recibe. Y es a estos títulos que la gente puede utilizan, informático o de otro modo, para inferir en realidad con donde cierta probabilidad y de los cuales un correo electrónico en realidad vino. 

De hecho, vamos a hablar en posteriores semanas sobre cómo correo electrónico sí se pueden generar programación que es una cosa muy buena para un sitio web que quiere enviar correos electrónicos a los usuarios. Pero vamos a ver, también, cuán trivial es forjar correos electrónicos de alguien a otra persona, a menos que realmente saber cómo verificar las cabeceras. E incluso que es un perdedor proposición en estos días. 

Así que con eso dicho, vamos a ir a una capa arriba. Comenzamos con IP que aborda los paquetes para nosotros, les da direcciones únicas. TCP, que, en definitiva, garantiza la entrega o, al menos, aumenta la probabilidad de la misma por añadiendo cosas como segmentos, 1 o 4, 2 de 4, 3 de 4, y 4 de 4. 

Y ahora, vamos a capa en la parte superior de que otro protocolo. Todas estas cosas son protocolos, convenciones informáticos que dictan cómo dos ordenadores hablan el uno al otro. HTTP, finalmente hoy, es protocolo de transferencia de hipertexto. Y este es el protocolo que los navegadores web utilizar al hablar con los servidores web. 

Así que cuando acabas de llegar de un navegador como Chrome, o IE, o Firefox, o Safari, o lo que sea, y que escribe en algo como facebook.com y pulsa enter, No sólo su ordenador traducir en facebook.com qué? Una dirección IP. A continuación, converts-- que envía entonces una mensaje a esa dirección IP refrán, dame página actual o dar me la pantalla de inicio de sesión de Facebook. 

O si ya está conectado, dar me la vista predeterminada de mi línea de tiempo. Así que eso es lo que dice HTTP. Y más coloquialmente, si soy una web servidor y usted trate: ¿cuál es su nombre, otra vez? 

AUDIENCIA: Margot. 

DAVID MALAN: Margot es una web servidor, y yo soy un navegador web, y yo simplemente quiero recuperar mi línea de tiempo de Margot, margot.com, Yo diría que, hola, soy David. 

AUDIENCIA: Hola, soy Margot. 

DAVID MALAN: ¿Y entonces respondería con información adicional para mí. Así que tenemos esta estúpida humana convención para instance-- gracias. --de estrechar la mano de cada uno. Y los equipos tienen la misma idea donde un cliente, como un navegador, pide un servidor para hacer algo en su nombre. 

Y así que aquí está una imagen, por ejemplo. A la izquierda es un ordenador portátil, escritorio, lo que sea, o incluso un teléfono. Y a la derecha es una muy vista de un servidor de fecha. Por lo general se ve más pequeña y más sexy en estos días. Pero el punto es simplemente que hay algún tipo de comunicación entre el cliente y el servidor. 

Y clientes en el sentido de alguien en un restaurante y el camarero o camarera, misma idea con las computadoras. Los clientes y los servidores, uno pide información, uno responde con la información. Ahora, ¿cómo hace eso información volver? Bueno, considere esto. Obtén es una especie de defecto manera-- y es un super simple término. --que sólo dicta cómo un navegador obtiene información de un servidor. 

En otras palabras, en lugar de sólo goof-lia extender mi mano a Margot, si realmente fuera un navegador, me sería meter dentro de un sobre, como lo hice con la foto de Rob antes, un mensaje textual que dice, literalmente, algo como esto, GET / HTTP / 1.1hostwww.google.com o margot.com o cualquiera que sea el El nombre del servidor puede pasar a ser. Y luego, punto punto punto, algunas otras cosas. 

Pero, literalmente, en el interior de un sobre haría ser bastante simple textual mensaje así. Eso sobre recibo, Margot haría abrir, leer el contenido, y responder en consecuencia. Ahora, que es un poco no evidente con este ejemplo. Pero obtener /, ¿cuál es la barra inclinada probablemente en referencia a, sólo se basa en su familiaridad con navegar por la web en la vida diaria? ¿Cuál es la barra? 

AUDIENCIA: [inaudible]. DAVID MALAN: Una secuencia de escape. No es una mala idea, pero en general, secuencias de escape van para otro lado. Eso sería una barra invertida normalmente. Pero no es una mala idea. ¿Sí? Un puntero. También tiene una buena idea pero aún más simple que eso. El directorio de inicio. La raíz de un disco duro, por así decirlo. La mayoría de nosotros no escriba esto. Pero técnicamente, si querían a ser súper adecuado en estos días, va a ir a algo como http://www.facebook.com/. 

Ahora, he dicho la mayoría de nosotros no lo haría se moleste en escribir la barra inclinada. Y, francamente, la mayoría navegadores, Chrome incluyen, Ni siquiera te molestes mostrando nosotros la barra en estos días simplemente porque les gusta ser simple y conciso. Pero la tala sólo significa ir a www.facebook.com y obtener raya vertical, la raíz de la unidad de disco duro, la página por defecto en facebook.com. Usando lo que el protocolo? Bueno, utilizando la versión 1.1 de esto se conoce como HTTP. 

El servidor, o Margot-- y por cierto, hacer Te importa que te estoy utilizando en estos? Okay. Así que estamos bien ahora. Así la respuesta Margot ahora con una sobre de su propia, dentro de los cuales es un mensaje de manera similar textual. La primera línea de los cuales es, sí, hablo HTTP versión 1.1. 200 es el código de estado que sólo significa que todo está bien. Tengo la página que estás buscando. 

Mientras tanto, Content-Type: text / html, este es la forma semi-arcano de Margot de decir, lo que ha solicitado está una página web. Y es el tipo, por lo que speak-- casi como un sentido variable pero esto es nivel mucho más alto ahora. Su tipo de datos es texto pero específicamente HTML. El lenguaje que pronto veremos. 

Y luego, hay algunas otras cosas. Así que otra cosas es literalmente lo que Facebook está respondiendo con. Así que veamos esto, también. Déjame ir por delante y abro Chrome en mi portátil que usted puede hacer por su propia computadora también. Y yo voy a seguir adelante y abrir www.facebook.com. Intro. Y me pongo esta pantalla familiarizados aquí. Pero ahora, voy a hacer otra cosa. Voy a seguir adelante y vaya a Ver, desarrollador. Y vaya al desarrollador Herramientas, que debe tener dentro de Chrome en el equipo, al menos dentro de su aparato. Voy a desplazarse este Lo hasta aquí, y ya está va a ver un montón de texto críptico aquí. 

Resulta que lo coloca dentro de Margot de ese sobre en respuesta a mí es un lenguaje llamado HTML, HyperText Markup Language. No es una programación lenguaje, porque no se puede, que no tiene bucles, y las condiciones, y funciones, y cosas por el estilo. Es un lenguaje de marcas. En eso, tiene una sintaxis especial denominados etiquetas y atributos que le dice a un navegador qué mostrar en la pantalla y cómo mostrarlo. Debe estar centrado? ¿Debería ser en negrita? Rojo, verde, azul? Es un lenguaje de marcas. En eso, se le dice a un navegador lo que para mostrar en la pantalla. Así que este es, literalmente, todo el HTML y más que servidores de Facebook está escupiendo y que Chrome, y el IE y Firefox tienen sido diseñado por su autores respectivos de entender. 

Y, de hecho, es una poco más desordenado que eso. Si, en cambio, ir a la vista, Desarrollador, Ver código fuente, esto es en realidad lo que Facebook está fuera poniendo. Ordenar de cero para cinco para el estilo, la derecha, si inferir que esto probablemente no es la mejor. Pero, francamente, que pueden salirse con la suya porque si usted está sirviendo para arriba miles de millones de páginas web por día, que realmente no quiero perder el tiempo, y bytes, y dinero en última instancia, en la transmisión de cosas como la nueva línea caracteres y espacios, y las pestañas porque se está gastando para el ancho de banda innecesariamente con su ISP. 

Así que de hecho, este se entiende para ser minified de esta manera. Pero, ¿qué está haciendo Chrome para nosotros es, está tomando este código HTML, que se ve totalmente como un desastre e ininteligible a humano, Y es sólo el formato de la misma. Es bastante imprimirlo para que podemos envolver nuestras mentes a su alrededor un poco más fácilmente. Pero lo más interesante es esta. Si ahora hago clic en Chrome, no elementos, pero la red, Voy a ver un poco pantalla de registro que es me va a mostrar todo de las peticiones HTTP que son en realidad va hacia atrás y vuelta entre mí y Facebook o me y Margot si yo hago más de una solicitud. 

Así que voy a seguir adelante y haga clic en el icono de recarga hasta aquí en Chrome. Y ahora, un montón de todo cosas pasó volando en la parte inferior. Voy a desplazarse espalda hasta la parte más alta. Y ahora, esta cuenta, la solicitar primera mi navegador hizo fue a www.facebook.com. 

Se trata de utilizar el get mecanismo que sólo significa que está hablando el lenguaje textual que vimos un ejemplo de hace un momento. Y por otra parte, resulta que que la respuesta que Facebook me dio es 200 OK, lo que significa que encontrado la página web en cuestión. 

Si hago clic en esta fila, no puedo realmente ver los encabezados de un poco más claramente. Estos tendrán más sentido en poco tiempo. Pero note que mi navegador envía una todo gran cantidad de información, como anfitrión, y el método, y las cookies. Volveremos a los que después de poco tiempo. Y usted finalmente entiende lo que en realidad es una cookie y la forma en que pronto va a enviar ellos. 

Y usted puede ver lo que Facebook está enviando de vuelta, incluyendo el tipo de contenido de texto HTML, la fecha y hora actual, su privacidad política, o falta de ella, y Entonces, finalmente, un número de cookies que se están establecido en el equipo también. Pero vamos a los que burlan aparte en poco tiempo. 

Pero en fin, cada vez que visitado una página web, ahora desde hace años, usted ha estado enviando mensajes a el que yo envié en un sobre a Margot y Dan. Y usted ha estado recibiendo de nuevo respuestas como esta de Facebook. Pero por otra parte, supongo que lo que está siendo revelada a Facebook y Google, y todos los demás cada vez que usted visita una página web? ¿Qué hay en el exterior de cada sobre de su computadora ha estado enviando? Su dirección de IP, ¿no? Tal vez no por su nombre sí, pero su dirección IP. Y así, vamos a conectar los puntos después, si usted está utilizando los servicios como la web, o BitTorrent, y la vida, y que se haya registrado un ordenador en un lugar como Harvard, alguien sabe alguna parte que John Las direcciones IP de Harvard, este salpican este, dot este, punto este. 

Y, en efecto, los registros pueden Mantuvo tanto en un campus como este, en una red de Comcast, a través de Verizon, o francamente, en el NSA como hemos aprendido recientemente, que los registros de casi todo que usted está haciendo en el Internet. Y vamos a volver a este la clase futuro sobre las implicaciones de estos las decisiones de diseño y seguridad. 

Pero la verdad es, que realmente no tienen casi nada de privacidad. Cada vez que usted ha estado de visita en cualquier lugar en la web, ¿Ha estado mostrando su mano y que revela, al menos, su dirección IP. Nota tanto miedo a un lado, ¿qué podemos hacer para incrustar cosas como gatos en una página web? 

Así que tenemos un montón de respuestas que podría volver desde el servidor. Y no vamos a ver todo esto hoy. Pero 200 es buena. Y es probable que no se ve todos ellos como un ser humano antes. Pero, probablemente, usted ha visto al menos uno de estos. ¿Cuál de estos puede tener un aspecto familiar? AUDIENCIA: 404 DAVID MALAN: Así que 404. Archivo no encontrado. Y de hecho, vas a ver esta programación usted mismo. 404 sólo significa que el archivo de su solicitud, recortar o recortar algo, simplemente no existe. Y un servidor web normalmente responde con 404 como resultado 

Mientras tanto, pronto veremos que el contenido de dicho mensaje son este lenguaje conocido como HTML. Y este es un super sencillo fragmento de HTML que no hace nada que no sea mostrar hola mundo en la pantalla. De hecho, se ve en la parte superior de esta algo que se llama un tipo de documento declaración que se limita a decir, oye, mundo. Este archivo contiene HTML. Y entonces, el siguiente bit de HTML que vas a escribir, tiene un soporte abierto, y luego la palabra HTML, a continuación, un soporte cerrado, y luego cabeza abierta, y corchete de cierre. Así que en resumen, vamos a realidad hacerlo más mecánicamente. Déjame ir a mi aparato, pero usted puede hacer esto en cualquier lugar que tiene un editor de texto para. 

Voy a seguir adelante y guardar un archivo llamado hello.html. Voy a ponerla en mi escritorio para mantener las cosas súper simples en este momento. Y yo voy a hacer exactamente lo que acabo de ver. Así que tipo de documento HTML, HTML abierto soporte. Y ahora, aviso, me voy a hacer lo contrario de forma preventiva. Y por lo contrario, quiero decir la misma etiqueta, por así decirlo, pero comienza con una barra inclinada. Y luego, por aquí, Yo voy a decir, la cabeza, porque resulta que cada página web tiene una cabeza llamada que es algo que va en el título bar, en la parte superior de la página. En el título es sólo va a ser hola aquí. Y ahora, me voy a tener un cuerpo a esta página web. Así que cada página web tiene tanto una cabeza encima de la tapa y un cuerpo que es la tripa de la página. Y aquí, yo sólo voy a decir algo como hola mundo. Y me voy a guardar este archivo. Si ahora puedo minimizar gedit, Mira, hay un poco de archivo en mi escritorio llamado hello.html. Ahora, eso no es en el servidor sin embargo, de por sí, en efecto, que es sólo en mi propio escritorio personal aquí. Pero si abro Chrome y golpear control O- está el gato en cuestión. --y voy a mi escritorio. 

Y abro hello.html, allí, en De hecho, es mi página web super simple. El cuerpo de mi página y esta ventana blanco aquí está el cuerpo con hola mundo. Y el título en la cabeza de La página se encuentra en la pestaña allí. Y vamos a ver pronto que es super fácil de abrir otras páginas también. Por ejemplo, yo voy a ir en una parte del código de distribución para esta semana, fuente siete, y me voy para abrir la no JPEG que este hombre está aquí. Pero yo voy a abrir image.html, que en última instancia se parece a esto. Pero permítanme ahora abro esto en gedit, y entrar en la fuente de Dropbox siete, y image.html. 

La mayor parte de este es sólo Comentarios como pronto veremos. Pero si quiero poner gruñón Gato en el interior de esta página web, basta con poner otro soporte abierto, y luego la imagen o palabra clave img para abreviar, y luego alternativa texto por razones de accesibilidad si alguien tiene una pantalla lector o algo por el estilo. Fuente que es, ¿cuál es la nombre del archivo, cat.jpeg. 

Y luego, porque este etiqueta es un poco especial, ponemos la barra inclinada, como vamos a ver, dentro de la etiqueta. Pero el resultado final es una web página que tiene este aspecto. Así que en resumen, lo que vamos a ser haciendo ahora con el tiempo es el uso de la web y la creación de páginas web a en última instancia ser contenedores no sólo por las cosas tontas como imágenes y enlaces, y mesas, y listas con viñetas, y similares, sino también para darnos a nosotros mismos una interfaz gráfica de usuario, una interfaz gráfica de usuario, no muy diferente de lo que hicimos nosotros Breakout. 

Pero dentro de este entorno, estamos va a empezar a utilizar las lenguas como PHP, y JavaScript, la base de datos lenguaje denominado SQL, un lenguaje de script del lado del cliente llamado JavaScript para crear realidad todas las interfaces más dinámicos pero en un contexto mucho, mucho más familiar. Pero antes de eso, vamos a concluir hoy con una mirada, como se había prometido, de lo que realmente está pasando por debajo de la capucha con internet sí mismo. 

Estipular para hoy que Internet puede ser utilizado para transferir cosas como las páginas web a través de HTTP al igual que yo estreché la mano de Margot antes. Pero hay tantos otros servicios que utilizan TCP e IP que nosotros damos por sentado que el trabajo como veremos aquí en esta película que va a nos llevará a la final de hoy. 

[REPRODUCCIÓN DE VÍDEO] 

-Por Primera vez en la historia, la gente y la maquinaria están trabajando juntos, la realización de un sueño. Una fuerza de unión que sabe no hay límites geográficos. Sin distinción de raza, credo o color. Una nueva era donde la comunicación realmente une a la gente. Este es el amanecer de la red. 

¿Quieres saber cómo funciona? Haga clic aquí para comenzar la viaje en la red. Ahora, exactamente lo que pasó al hacer clic en ese enlace? Usted comenzó un flujo de información. Esta información viaja hacia abajo en su sala de correo personal cuando el señor IP paquetes de los que, etiquetas , y lo envía en su camino. 

Cada paquete es de tamaño limitado. La sala de correo debe decidir cómo dividir la información y la forma de empaquetarlo. Ahora, el paquete necesita una etiqueta que contiene información importante, tales como dirección, del receptor del remitente la dirección y el tipo de paquete que es. 

Debido a que este paquete particular va hacia fuera sobre el Internet, también obtiene una dirección para el servidor proxy, lo que tiene una función especial como veremos más adelante. El paquete está ahora en marcha en su red de área local o LAN. Esta red se utiliza para conectar todos los equipos locales, impresoras routers, etc. para el intercambio de información dentro de la física paredes del edificio. La LAN es un bastante incontrolada colocar y, por desgracia, los accidentes puede suceder. 

La carretera de LAN está lleno con todo tipo de información. Estos son los paquetes IP, Novell paquetes, los paquetes de Apple Talk. Ellos van en contra del tráfico como de costumbre. El router local lee el dirección y, si es necesario, levanta el paquete a otra red. Ah, el router. Un símbolo de control en una mundo aparentemente desorganizado. 

Ahí está, de forma sistemática, indiferente, metódico, conservador, ya veces no del todo a la velocidad. Pero por lo menos, él es exacta para la parte más. 

Como los paquetes salen de la router, que hacen su camino en la intranet de la empresa y la cabeza para el interruptor del router. Un poco más eficiente que el router, el switch del router juega rápido y libremente con los paquetes IP, hábilmente les enrutamiento en el camino. Un Pinball Wizard digital si se quiere. 

-Aquí Vamos. Aquí viene otro. Y es otra. Mira esto, mamá. He aquí va. ¡Vaya. Alrededor de la parte posterior. Hey. En allí. En allí. A la izquierda. A la derecha. A la izquierda. A la derecha. Ya lo tienes. Aquí va. Tira. Anota. Se va. Oye, espera. Oye, ten cuidado. Aquí viene otro. Oh, aquí vamos. 

-Como Paquetes llegan a su destino, son recogido por la interfaz de red, listo para ser enviado al siguiente nivel, en este caso, el proxy. El proxy es utilizado por muchos empresas como una especie de intermediario con el fin de disminuir la carga en su conexión a internet y por razones de seguridad también. Como se puede ver, los paquetes son todos de distintos tamaños, dependiendo de su contenido. 

El proxy abre el paquete y busca la dirección web o URL. Dependiendo de si la dirección es aceptable, el paquete se envía a la Internet. Hay, sin embargo, algunos direcciones que no lo hacen cumplir con la aprobación de el proxy, es decir, las directrices corporativas o de gestión. Estos son sumariamente tratados. Vamos a tener nada de eso. Para los que lo hacen, que está en la carretera de nuevo. 

El siguiente, el servidor de seguridad. El firewall de la empresa sirve a dos propósitos. Previene algún lugar cosas desagradables en Internet entre en la intranet. Y también puede prevenir información corporativa sensible de ser enviados a la Internet. 

Una vez que a través del firewall, un router recoge el paquete y lo coloca en una mucho más estrecha carretera o ancho de banda, como decimos. Obviamente, la fila no se lo suficientemente amplia como para llevarlos a todos. Ahora, usted podría preguntarse, ¿qué sucede a todos aquellos paquetes que no lo hacen a lo largo del camino. Bueno, cuando el Sr. IP no lo hace recibir un acuse de recibo que un paquete ha sido recibido en tiempo oportuno, simplemente envía un paquete de reemplazo. 

Ahora estamos listos para entrar en el mundo de la internet, una araña red de redes interconectadas que abarcan todo nuestro mundo. Aquí, routers y switches establecer vínculos entre las redes. Ahora, la red es enteramente una diverso ambiente que usted encontrará en el muros de protección de la red LAN. 

Fuera de aquí, es el salvaje West, un montón de espacio, un montón de oportunidades, un montón de cosas para explorar, y lugares para ir. Gracias a muy poco control y regulación, nuevas ideas encuentran suelo fértil para empujar la envolvente de sus posibilidades. Pero debido a esta libertad, ciertos peligros también acechan. 

Usted nunca sabe cuando cumplir con el ping temida de la muerte, una versión especial de una petición normal de de ping que algún idiota pensó hasta echar a perder los ejércitos desprevenidos. El camino nuestros paquetes toman tal vez a través de satélite, líneas telefónicas, conexión inalámbrica, o incluso cables transoceánicos. 

Ellos no siempre tienen el más rápido o rutas más cortas posible, pero van a llegar, con el tiempo. Tal vez por eso a veces es llamado la espera en todo el mundo. Pero cuando todo está trabajando sin problemas, usted podría eludir el mundo cinco veces en un abrir y cerrar de ojos, literalmente, y todo por el coste de una llamada local o menos. 

Cerca del final de nuestro destino, vamos a encontrar otro servidor de seguridad. Dependiendo de su perspectiva como un paquete de datos, el servidor de seguridad podría ser un bastión de seguridad o de adversario temido. Todo depende de qué lado estás en, y cuáles son sus intenciones. 

El servidor de seguridad está diseñado para dejar entrar sólo aquellos paquetes que cumplen con sus criterios. Este firewall está funcionando en los puertos 80 y 25. Todos los intentos de entrar por otra los puertos están cerrados para los negocios. 

El puerto 25 se utiliza para los paquetes de correo. Mientras que el puerto 80 está la entrada para paquetes de internet a la web servidor. Dentro de los cortafuegos, los paquetes son evaluados más a fondo. Algunos paquetes hacen fácilmente por la aduana, mientras que otros ven un poco dudosa. 

Ahora, el oficial de cortafuegos no se deje engañar fácilmente, por ejemplo, cuando este ping de intentos de paquetes muerte disfrazarse como un paquete normal de ping. -Mover Largo. Está bien. No hay problema. Que tengas un buen día. Déjame salir de aquí. Adiós. 

-Para Aquellos paquetes suerte suficiente para que sea este el momento, el viaje está por terminar. Es sólo una línea hacia arriba en la interfaz que deben abordarse en el servidor web. Hoy en día, un servidor web puede funcionar en muchos las cosas, a partir de una unidad central, a una cámara web, a la computadora en su escritorio. ¿Por qué no su refrigerador? 

Con el conjunto adecuado arriba, usted podría descubrir si usted tiene los ingredientes para Cacciatore de pollo o si tienes que ir de compras. Recuerde que este es el amanecer de la red. Casi todo es posible. 

Uno por uno, los paquetes son recibido, abierto, y sin envasar. La información que contienen, que es su solicitud de información, se envía a la web aplicación de servidor. 

El paquete en sí se recicla. Listo para ser utilizado de nuevo y lleno de la información solicitada, se dirigió, y enviar en su camino de regreso a ti. Volver más allá de los firewalls, routers, y a través de internet. Volver a través del firewall corporativo. Y en su interfaz. Listo para el suministro de su navegador web con la información que ha solicitado. Eso es esta película. 

Satisfecho con sus esfuerzos y confiando en un mundo mejor, nuestros paquetes de datos de confianza cabalgar dichosamente en la puesta de sol de otro día, sabiendo plenamente que han servido bien a sus amos. Ahora, no es que un final feliz. [FIN REPRODUCCIÓN DE VÍDEO] DAVID MALAN: Eso es todo por CS50. Nos vemos la semana que viene. 

[MÚSICA - KATY PERRY, "caballo negro"] DAVID MALAN: All right. This is CS50. And this is the start of week seven. So today, perhaps thankfully, we begin our transition from the lower level world of C programming to the higher level world of web programming. And with that, we'll take a look at exactly how the internet works, what these machines and these internets that you've been using for years now actually do underneath the hood toward a better understanding of how it all works, and how you can make it work for you. Toward that end, why don't we take a look first at a clip from a TV show called Numb3rs, that will get us started as to exactly how the internet works. [VIDEO PLAYBACK] -It's a 32-bit IPP4 address. -IP. That's the internet. 

-Private network. It's Amita's private network. Oh, she's so amazing. 

-Oh, Charlie. 

-It's a mirror IP address. She's letting us watch what she's doing in real time. [END VIDEO PLAYBACK] DAVID MALAN: So there's a whole lot of wrong with that TV show. So let's tease apart exactly one of the first such things and see if we can't wrap our minds around it. So the last frame of that movie, of that show is this one here, which seems to suggest that this is what some hacker is using to get into some system. 

But no. If you zoom in on this source code, which is a language called Objective C in which iPhone apps, iPad apps, and Mac OS apps are written, you'll see that this is for some sort of drawing program that has a crayon as a variable. 

So additionally, you might have noticed this address here. Now, this is an as wrong. And this is probably deliberately chosen to be an invalid address so that it doesn't actually lead somewhere if a TV viewer actually visits it. But this number here, something dot something dot something dot something is what's generally known as an IP address. And it's actually a good segue to this topic more generally, known as IP, internet protocol. So you've probably at least heard this phrase before. But what is IP, or internet protocol as you understand it today? Odds are, if we asked for a show of hands, most of you have probably said the words IP address before. So what did you mean? 

AUDIENCE: [INAUDIBLE]? DAVID MALAN: What's that? AUDIENCE: [INAUDIBLE]? DAVID MALAN: Once more. AUDIENCE: Address of the computer. DAVID MALAN: The address of the computer. So that's exactly right. It turns out that every computer on the internet, and these days, every phone in your pocket and tablet in your backpack, has an IP address, internet protocol address, which is a unique address that identifies it throughout the entire internet. Now, that's a bit of a white lie because the world's actually running out of IP addresses. 

So we've started using private IP addresses. But more on that in a moment. But you can think of an IP address as like your postal service street address. We've use the example of Maxwell Dworkin, the CS building, before- 33 Oxford Street Cambridge, Mass, 02138, USA. That is its unique address in the world. 

Similarly do computers have unique addresses. They just happen to look a little different- a number dot a number dot a number dot a number. And does anyone actually know what the valid range of numbers is for each of those hashes? Yeah. 

AUDIENCE: 0 to 255? DAVID MALAN: Exactly. 0 to 255. And even if you didn't know that, now draw a conclusion, how many bits are used to represent each of these numbers then? Eight apparently because of the highest you can count is 255, that's an 8-bit value. So in total, an IP address is 32-bits. So fast forwarding to the mathematical conclusion, how many possible IP addresses are there in the world, then? 

So that's 8 plus 8 plus 8 plus 8, so that's 32 bits. And we've always said that 2 to the 32 is roughly? OK. I'll field this one. Four billion. And we talked about that in week zero when we talked about phone books with crazy numbers of pages. But the sort of it is that there's a finite number of IP addresses. And even though four billion might seem like a lot, we humans have been consuming quite a few of them for all of our servers and devices and so forth. 

So this is actually becoming a problem. Now, there tends to be a scheme behind who has what IP. For instance, many of the computers at Harvard have unique addresses that start with one of these two values. MIT, similarly, has a prefix. And a lot of companies and universities have their own unique prefix. And then most of us for our home internet connections and the like, we share some prefix that Comcast or someone like that happens to own. And this is only to say that if you looked at most computers on campus, they'd probably have an IP address that looks like this. 

Now, you might also occasionally see an IP address it starts like this. In fact, if any of you grew up with internet access at home, and you were ever sufficiently technically curious to poke around your own computer settings, you probably instead saw an address that looks more like this, that started with 10, or 172.6, or 192.168, or some variants thereof. 

And that just means that the world is set aside a whole bunch of numbers to be private, which means you can use them in your home, you can even use them on your campus and within your company, but you can't use them on the internet at large. 

And so these private IPs have been a solution toward making sure that at least so far as the whole world is concerned, we're not using that many IP addresses. But at least, we can, on our own campus, have pretty much as many IPs as we want. But who cares? What's the relevance of all of this to an actual usage of the internet? 

Well, let's take a look at perhaps a simple picture here. Let me through both of these up on the screen. And forgive my handwriting here. But if we think of ourselves as being this little laptop here somewhere on campus, these days it has Wi-Fi. 

But in yesteryear and if you find the right adapter, it can have an ethernet cable which would similarly let you connect to some kind of device. And you can call this any number of things. But I'm going to go ahead and call this, for now, how about an access point? 

So this is my laptop. This is my AP, or access point, and this is some wireless device, not unlike the ones that Harvard has all over the ceilings and walls around campus that have blinking lights and that are what your laptops used to talk wirelessly to the rest of the network. 

So somehow this laptop is talking to that thing on the wall, in the dining hall, or elsewhere. Now, meanwhile, that access point is connected to something else on campus. And it's probably something known as a switch. And they look a lot more interesting than just these box diagrams. 

But somehow, that thing's connected to a switch. And in turn, somehow that switch is connected to a device that's probably a bit bigger, called a router. And then, meanwhile, Harvard is connected to the entire internet which we'll draw as this cloud here, via some number of wires or wireless technology. 

So there's a lot of steps between me and the rest of the world. And indeed, even within this picture here, there are some other servers or services involved. And I'm just going to draw these somewhat abstractly just so that we have the acronyms before us. 

One is called DHCP. And another one, a little more interestingly for today, is called DNS. So these are servers that are somehow accessible to my computer as well. So now, let's tease apart a bit of jargon. So the access point is just this wireless device often with antennas that actually let you talk to a wirelessly. At home, you might call this a home router. It might be made by Linksys, or Apple, or D-Link, or any number of companies. That, in turn, is connected to a switch of some sort. Or back home, what is your Wi-Fi device probably connected to instead? Because you probably don't own all this equipment. Yeah. Cable modem or DSL modem back home that you got from Verizon, or Comcast, or one of those carriers. So think of all of this complexity as supporting a university or really a business like Comcast. And really, the stuff that's in your home is probably on this side of the fence plus maybe one of these home route-- one of these are cable modems or DSL modems they might provide. 

So a switch is just a device with a whole bunch of data jacks in it. In fact, if you recall that news report we played on the big screen a couple of weeks ago where we were talking about shell shock, and how bad this was? And there were of these photographs of cables, and jacks, and things that look technical? Those were just dumb switches that just internet connects computers by plugging cables into them. 

So that's all a switch is. Now, these devices get a little more interesting. DHCP. If you've poked around your computer at home or even on campus, you might have seen this acronym. Does anyone know what a DHCP server is? Dynamic host configuration protocol? Not the kind of thing you really need to write down. DHCP. anyone at all? All right. So let's rewind the story. If the story here at hand is predicated on my having a unique address in the world, an IP address, where does that come from? In yesteryear, when you've got to campus, you actually had ask someone at Harvard, what should my IP address be. And you would manually type it into your computer. But more recently, technologies exist that allow you to dynamically, DHCP, get an IP address simply when you plug into campus wirelessly or with a wire. So DHCP server is just a server that gives your computer a unique IP address, somewhat randomly or via some algorithm. But if you think back a few weeks or a few years, when you first registered your computer on campus, you were telling Harvard, authorize me to give me an IP address. Now DNS start to get a little more interesting. Domain name system. Does anyone want to take a stab at what this thing is here? 

It's one or more servers that perform a fairly simple task that's kind of important. Yeah. 

AUDIENCE: Translates URLs [INAUDIBLE]. DAVID MALAN: Yeah. It translates URLs to IP addresses and vice versa. Consider, after all, that when you go on the website, you type in something like facebook.com, or google.com, or harvard.edu, you certainly have never typed most likely a numeric IP address. 

And you can think of the reason why. Back in the day, even now to some extent, when you make a telephone call to a company, they really try hard to buy themselves an 800 number that actually has words in it, like 1-800-collect or something that's memorable like that so that people don't have to remember what C-O-L-L-E-C-T actually expands to. So we've seen this heuristic in the past. And indeed, that's what IP addresses and what we'll call host names or fully qualified domain names do for us. It allows us to address servers by words instead of numbers. So how do we actually see this conversion. I'm going to go ahead and open up a program. I'm just going to go ahead and open up a terminal window. And I'm going to go ahead and show you what a DNS server does. For instance, if I wanted to see what the IP address is of Facebook, I can type at a terminal prompt like this-- and you can do this even inside of your appliance. And that's lookup facebook.com. 

And I see a bunch of things. This first response is Harvard's DNS server-- that picture that I've drawn there. --that's telling me that Facebook's IP address is apparently this. So let me go ahead and copy that 173.252.120.16. And let me open up Chrome on my Mac. And let me go to http:// and paste that IP address in and hit Enter. 

And indeed, I find myself at Facebook. So somehow that conversion, indeed, happened. And if I do this again, let's do nslookup, www.google.com. I get back a whole bunch of responses. And indeed, there's different ways that companies implement this. Sometimes, they tell the world they have one IP address. 

But that one IP address gets resolved or mapped to multiple servers. Or in the case of Google, they tell the world, we have a whole bunch of IP addresses. Your laptop is welcome to talk contact any one of these servers. So all of that's been going on underneath the hood. 

When you type in www.google.com Enter into your browser, your browser, and in turn your operating, Mac OS, or Windows, or Ubuntu Linux, ask the nearby DNS server, what is the actual address of this server. Because the last device in this picture, a router, is the one whose purpose in life is to route information, route packets so to speak, envelopes of digital information containing zeroes and ones from sender to destination, from origin to receiver. 

And so a router routes stuff. So why is this all particularly relevant? Well, let's take a look at how this might be used. Suppose that I have here a picture of Rob Boden. So suppose that I want to send this picture of Rob Boden into Dan in the back of the lecture hall. 

So I am a computer like my laptop, and Dan is some other computer on the internet. And I want to send a packet of information from me to him. That begs the question, how do I actually route this packet to him. Well, in human terms, I would say, hey, can you pass this to Dan? 

And then, a bunch of you would probably pass it back and forth back and forth until eventually makes its way over to Dan. But that's a little imprecise. Computers probably need to be a little more methodical. So probably, Dan has an IP address. So what really I should do is I should take, for instance, a blank envelope like this. And I don't know what Dan's IP address is. 

So I'm just going to generalize it as Dan's IP. And I'm going to put this in the to field of my envelope. And meanwhile, I have an IP address. It doesn't matter today what it is. So I'm just going to say My IP in the back corner there. And then, I'm going to go ahead and put this picture inside of this envelope. 

And then, each of you, presumably, as routers on the internet, have been preconfigured by humans generally or sometimes by automated algorithms to know that if Dan's IP address starts with a 1, it should go that way. If Dan's IP address starts with a 2, it should go that way. Maybe a 3 goes that way. Maybe a 4 goes that way. And that's a little overly. Simplistic but that's the general idea. Each of these routers-- and there might be as many as 30 between me and Dan. --have some kind of spreadsheet inside of their memory, a database table, that just says, IP address that looks like this, goes this way. An IP address that looks like this, goes that way. And that's how it makes fairly simplistic decisions. 

But it turns out that these routers do something more than that, potentially. They allow computers to guarantee delivery, at least with high probability. So you might, too, have heard, even if you've never quite cared or wondered what it is, you might have heard of something by this acronym. Let's go back over here for just a moment and pull up this. 

TCP, transmission control protocol. Another technical way of just describing another technology that's used on the internet. So IP, internet protocol is used for addressing. It some standard that the world came up with that said, you put one IP address here for Dan, and one IP address here for yourself, and then you put some information in an envelope. 

But TCP is another technology, used in conjunction with IP. And indeed, if you've ever seen these acronyms before, you've probably seen TCP slash IP which just means people tend to use them together. Well, TCP is kind of cool because it allows you to increase the probability that the data is actually going to get from me to Dan. 

In fact, the internet is a crazy place. There's no guarantee that if I send data this way that it's going to go that way next time around. It might go that way or that way. The shortest distance between two points is not necessarily a straight or the same line. 

Moreover, some of you guys might make mistakes or get overwhelmed with too many envelopes coming your way. So you just going to give up and literally drop some of these envelopes on the floor. And in that same way can data be dropped on the internet by routers. So to decrease the odds of this, I'm going to take my little safety scissors here and cut Rob into, let's say, four pieces, four segments. 

And now, I'm going to go ahead and put one more piece of information on this envelope. I'm going to say something like, 1 of 4. So now, my final envelope, at least the first, looks like this. I'm going to go ahead and put this one in here. And for time's sake, I'm going to label the others identically as 2 of 4, 3 of 4, 4 of 4. 

Again, with Dan's IP address in the front of it and with my IP address on the back left, but I can't send them just yet. Because it turns out that on the internet, servers can do multiple things. In fact, we all might use the web quite a bit, the worldwide web, http:// whatever. But there's other services on the internet. What are some other services, sort of user, consumer-friendly services that spring to mind besides a web browser-type program? AUDIENCE: Email. DAVID MALAN: Email. OK. Good. What's another one? AUDIENCE: Chat. DAVID MALAN: So chat, whether it's Skype, or Gchat, or something like that. 

AUDIENCE: Storage. DAVID MALAN: So some kind of storage service, certainly. Something like Dropbox, or Box, or the like. So there's different services on the internet. And it turns out that Dan, if he is indeed a computer, doesn't have to be dedicated to one thing in life. He can actually do multiple things. And indeed, he can be an email server. He can be a web server. He can be a chat server. 

But that seems to suggest that Dan needs to know in advance what are the contents of these messages. Is this a web page I'm sending him? Is it an email I'm sending him? Is it an instant message I'm sending him? So we need one more piece of information on these envelope so that Dan, when he receives this envelope, knows what program to use to display it. 

Is it a browser? Is it Google? Is it Skype? Or is it Outlook or some other program altogether? And so, with TCP comes just a human convention. The world decided some years ago to associate unique integers with the most popular services. 

One's called File Transfer Protocol, FTP, though it's a little dated now. But its unique identifier is 21. SMTP for outbound email, its unique identifier is 25 just because. DNS, the thing we talked about earlier, uses the number 53 for its queries. Like what is the IP address of google.com? 

And now, the more familiar you might have somewhere at some point seen the number 80 and maybe 443. Those are the unique identifiers for HTTP, which is the language we'll soon see used for web traffic between browsers and servers. And 443 is for the secure version thereof. 

So the one last detail I'm going to put on my envelope is that I'm not going to send this just to Dan's IP. I'm going to send it to say, :80, if what I'm trying to send him is a web page, a web page that contains Rob Boden's picture. So I'm going to do the same thing on these other envelopes. 

And then ultimately, I'm going to drop these off with the nearest router, recognizing that that router might not necessarily take the same path every time. In fact, I might have the first packet going this way. Second packet might go that way. Third packet-- start routing. --might go over here. And in theory-- can't keep it. In theory, all four of these packets should eventually route their way, however efficiently or inefficiently, all the way to the back. 

At which point, Dan, upon receipt, can reassemble them based on-- the funny thing is, we all know what the outcome here is going to be. Dan's going to get a picture of Rob. But let's see how this works out. Well, rather, Dan's going to get part of a picture of Rob. Very good. Everyone's participating today. All right. So as Dan starts to receive these packets, let's ask one question. What if one of you gets lazy, overloaded, malicious, or just powered off, and one or more of the package doesn't make it to Dan? 

How is Dan going to know he did not receive one of the segments of the four I sent him? Just intuitively, what can we do? Yeah? 

AUDIENCE: [INAUDIBLE]. DAVID MALAN: Exactly. Because I've uniquely numbered them, and I've specified how many segments there should be, he can infer from that which, if any, of the segments he's actually missing. And what TCP tells computers to do, if computers, like Mac OS, and Windows, and Linux support and understand TCP, which they do, TCP's documentation essentially says that Dan should send me a message back saying, hey, David, I'm missing packet number 1 of 4, or 3 of 4, whichever it is. 

And then, my job is to take another picture of Rob, which we have extras of for later today if you'd like to take one with you, and then I can resend that segment of Rob all the way to the back. 

So as simplistic as this mechanism is, that is what's happening almost any time you do something on the internet, particularly for these most popular of services. There are other protocols, other technologies besides TCP that work a little differently. But so many of the services we typically use actually rely on these protocols. 

So Dan, did you get the full picture back there? Yes. We have reassembled Rob in the back. Thank you so much to the routers. Suppose, I actually want the see the routers between me and MIT, much like you guys were the routers between me and Dan. 

Well, rather than nslookup for name server lookup, I can instead type trace route, which is actually going to do what it says. And I'm going to do and quiet mode with dash 1. It's a command line argument that just says, try this once and not multiple times. 

And now, I'm going to type www.mit.edu. Now, the output is fairly quick and cryptic. But what's neat about this is that each of these rows essentially represents a student in this audience if you were the path between me and MIT. What you see up here, first, is the domain name that I typed in, or fully qualified domain name as it's properly called. 

And this apparently is the IP address of www.mit.edu. My computer figured that out for me. This here is a promise that we're only going to try to reach MIT within 30 hops. There better be no more than 30 students between me and Dan. And now, each of these rows represents literally a router between me and Dan, literally one of you guys. 

And so this one doesn't seem to have a name, a domain name. It just has an IP. And it only took 0.662 milliseconds to get from me to that first router. The next one wasn't that much farther away. It only took one millisecond to get there. And now, thankfully, things get a little more user-friendly with names that are cryptic but a little more telling. 

This apparently is a router in the core of Harvard's network housed, only because people have told us this, in the Science Center, SC. And GW is just a shorthand notation for gateway which is a synonym for router. So this is some system administrator's superscript way of naming one of the servers in the Science Center. 

Meanwhile, that server is apparently connected by some kind of cable to another router that's nicknamed the border gateway one dash something, whatever those numbers mean. And then, apparently, Harvard has a connection that's another millisecond away to something called the northern crossroads which is a common peering point between big places like Harvard where lots of cabling goes in and allows interconnections among different entities. 

Step six, unfortunately, doesn't have a valid name. And step seven gets interesting. I have no idea what most of these mean. But NY does jump out at me. And what does that probably signify? It's not even technical. Just New York. So indeed, what's common human convention not guaranteed but common convention is to name routers by nature of the city or the airport code that they're nearest to. 

So with some probability, this router number seven is probably, indeed, in New York. And this seems to corroborate that assumption because it's six milliseconds instead of just one or so to something here on campus. But now take that into account, right on Megabus or whatnot, it might take four, five, six hours to get a human from here to New York. 

To get a piece of data, it takes just six milliseconds to get a packet from me to Dan if he were all the way in New York. Then finally, this apparently is the actual domain name for www.mit.edu. They've apparently outsourced their web servers to a company called Akamai which means some other company runs their servers. And that's why we're seeing that weird thing there. 

Well, let's do this once more. Let's go ahead and do a trace route to our friend Professor Nick Parlante at Stanford who has a server called nifty.stanfor.edu. Enter. And now, we'll see probably a slightly longer path that goes through a few more cities. So here these nameless Harvard servers here. We're in the core of Harvard, the border gateway of Harvard, the northern crossroads, wherever this is. And now, it's getting a little more interesting. I'm guessing that router number eight is in what city? AUDIENCE: [INTERPOSING VOICES] DAVID MALAN: Chicago probably, based on this, based on this thing here. And now we have Salt Lake City maybe, maybe Los Angeles here, and then LAX, yep, this probably is LA by the bottom. Until finally, it goes from southern California all the way up to northern California to where Stanford is in Palo Alto. So pretty cool. And let's take this one step further. It apparently would take you 82 milliseconds to send a message to Dan if you were in California instead of New York. Let's do something like trace routes, one attempt to www.cnn.co.jp for the Japanese version of CNN's website. And now, we're still in Boston it seems at the moment. 

A couple servers six and eight aren't responding because they're being a little private. But eventually, there seems to be something interesting going on between, let's say, step seven and nine. What is probably between seven and nine, and certainly between seven and step 17? There's a huge jump in the amount of time it's taking for data to go from one of these hops, one of these routers to another. 

So odds are, somewhere in here, there's probably, especially right here, there's probably a very large body of water that has some trans Pacific or trans Atlantic cable that actually requires even more time for data to get from one point to another. But again, imagine the hours it would take the fly to Japan. Here, in some 200 milliseconds, boom, your message is actually there. So you can play around with this on the appliance or even in Windows or Mac OS with slightly different commands. Sometimes, you will get these stars, like in rows six and eight, which just means the routers are configured not to give you an answer for privacy's sake. But generally, this technique would, in fact, work. 

So it turns out too there's other juicy information lurking in tools that you take for granted every day. So for instance, if you receive an email, frankly as some of you may have recently, of questionable origins, if you've never looked at Gmail interface before, whether it's for the college interface or your personal one, you might see your inbox looking like this. 

And in fact, this is an email I sent, malan@harvard.edu, to jharvard@cs50.harvard.edu this morning just so I could take a screenshot. But it turns out, all this time in Gmail, there's that little triangle toward the top right there next to the Harvard crest that if you click, you can click Show Original. And if you do that, you'll actually see a bunch of very esoteric information like timestamps, and IP addresses, and domain names. 

But you'll see, in short, the headers that all this time have been hit in each and every email you send and receive. And it's these headers that people can use, computer scientist or otherwise, to actually infer with some probability where and from whom an email actually came. 

In fact, we'll talk in later weeks about how email itself can be generated programmatically which is a very good thing for a website that wants to send emails to users. But we'll see, too, just how trivial it is to forge emails from someone to someone else, unless you actually know how to verify the headers. And even that is a losing proposition these days. 

So with that said, let's go one layer up. We started with IP which addresses packets for us, gives them unique addresses. TCP, which, in short, guarantees delivery or at least increases the probability thereof by adding things like segments, 1 or 4, 2 of 4, 3 of 4, and 4 of 4. 

And now, let's layer on top of that another protocol. All of these things are protocols, computer conventions that dictate how two computers talk to one another. HTTP, finally today, is hypertext transfer protocol. And this is the protocol that web browsers use when speaking to web servers. 

So when you pull up a browser like Chrome, or IE, or Firefox, or Safari, or whatever, and you type in something like facebook.com and hit Enter, not only does your computer first translate facebook.com into what? An IP address. It then converts-- it then sends a message to that IP address saying, give me today's homepage or give me the login screen of Facebook. 

Or if you're already logged in, give me the default view of my timeline. So that's what HTTP says. And more colloquially, if I am a web server and you are-- what's your name, again? 

AUDIENCE: Margot. 

DAVID MALAN: Margot is a web server, and I'm a web browser, and I simply want to retrieve my timeline from Margot, margot.com, I would say, hello, I'm David. 

AUDIENCE: Hi, I'm Margot. 

DAVID MALAN: And you would then respond with additional information to me. So we have this stupid human convention for instance-- thank you. --of shaking each other's hands. And computers have that same idea where a client, like a browser, asks a server to do something on his or her behalf. 

And so here's a picture, for instance. On the left is a computer laptop, desktop, whatever, or even a phone. And on the right is a very dated view of a server. They typically looks smaller and sexier these days. But the point is simply that there's some kind of communication between client and server. 

And clients in the sense of someone in a restaurant and the waiter or waitress, same idea with computers. Clients and servers, one asks for information, one responds with information. Now, how does that information come back? Well, consider this. Get is sort of the default way-- and it's a super simple term. --that just dictates how a browser gets information from a server. 

In other words, rather than just goof-ily extending my hand to Margot, if I really were a browser, I would stuff inside of an envelope, as I did with Rob's photo before, a textual message that literally says something like this, get/http/1.1hostwww.google.com or margot.com or whatever the server's name might happen to be. And then, dot dot dot, some other stuff. 

But literally, inside of an envelope would be fairly simple textual message like that. That upon receipt, Margot would open up, read the content, and respond accordingly. Now, it's a little non-obvious with this example. But get/, what is the slash probably referring to, just based on your familiarity with browsing the web in daily life? What's the slash? 

AUDIENCE: [INAUDIBLE]. DAVID MALAN: An escape sequence. Not a bad idea but generally escape sequences go the other way. That would be a backslash usually. But not a bad thought. Yeah? A pointer. Also good thought but even simpler than that. The home directory. The root of a hard drive, so to speak. Most of us don't type this. But technically, if you wanted to be super proper these days, you would go to something like http://www.facebook.com/. 

Now, I said most of us wouldn't bother typing the slash. And frankly, most browsers, Chrome included, don't even bother showing us the slash these days just because they like to be simple and succinct. But the slash just means go to www.facebook.com and get slash, the root of the hard drive, the default page in facebook.com. Using what protocol? Well, using version 1.1 of this thing known as HTTP. 

The server, or Margot-- and by the way, do you mind that I'm using you in these? OK. So we're good now. So Margot response now with an envelope of her own, inside of which is a similarly textual message. The first line of which is, yep, I speak HTTP version 1.1. 200 is the status code which just means all is OK. I have the page you're looking for. 

Meanwhile, Content-Type: text/html, this is Margot's semi-arcane way of saying, what you have requested is a web page. And it's type, so to speak-- almost like a variable sense, but this is much higher level now. Its data type is text but specifically HTML. The language we'll soon see. 

And then, there's some other stuff. So other stuff is literally what Facebook is responding with. So let's see this, too. Let me go ahead and open up Chrome on my laptop which you can do on your own computer as well. And I'm going to go ahead and open up www.facebook.com. Enter. And I get this familiar screen here. But now, I'm going to do something else. I'm going to go ahead and go to View, Developer. And go to Developer Tools, which you should have within Chrome on your computer, at least within your appliance. I'm going to scroll this thing up here, and you're going to see a whole bunch of cryptic text here. 

It turns out that what Margot put inside of that envelope in response to me is a language called HTML, HyperText Markup Language. It's not a programming language because you can't, it doesn't have loops, and conditions, and functions, and things like that. It's a markup language. In that, it has special syntax called tags and attributes that tells a browser what to display on the screen and how to display it. Should be centered? Should it be bold-faced? Red, green, blue? It's a markup language. In that, it tells a browser what to show on the screen. So this is, literally, all of the HTML and more that Facebook server is spitting out and that Chrome, and IE, and Firefox have been designed by their respective authors to understand. 

And in fact, it's a little messier than that. If you, instead, go to View, Developer, View Source, this is actually what Facebook is out putting. Sort of zero for five for style, right, if we infer that this probably isn't the best. But frankly, they can get away with it because if you're serving up billions of web pages per day, you really don't want to waste time, and bytes, and money ultimately in transmitting things like new line characters, and spaces, and tabs because you're spending for bandwidth unnecessarily with your ISP. 

So indeed, this is meant to be minified in this way. But what Chrome is doing for us is, it's taking this HTML, which completely looks like a mess and unintelligible to human, and it's just formatting it. It's pretty printing it so that we can wrap our minds around it a little more readily. But more interesting is this. If I now click in Chrome, not elements but network, I'm going to see a little logging screen that's going to show me all of the HTTP requests that are actually going back and forth between me and Facebook or me and Margot if I make more than one request. 

So I'm going to go ahead and click the reload icon up here in Chrome. And now, a whole bunch of stuff flew past at the bottom. I'm going to scroll back up to the very top. And now, notice this, the very first request my browser made was to www.facebook.com. 

It's using the get mechanism which just means it's speaking the textual language that we saw an example of a moment ago. And moreover, it turns out that the response that Facebook gave me is 200 OK, which means I found the web page in question. 

If I click on this row, I can actually see those headers a little more clearly. These will make more sense before long. But notice that my browser sends a whole lot of information like host, and method, and cookies. We'll come back to those before long. And you'll finally understand what a cookie actually is and how you soon will be sending them. 

And you can see what Facebook is sending back, including the content type of text HTML, the current date time, its privacy policy, or lack thereof, and then, finally, a number of cookies that are being set on your computer as well. But we'll tease those apart before long. 

But in short, every time you visited a web page, now for years, you've been sending messages to the one I sent in an envelope to Margot and to Dan. And you've been getting back responses like this from Facebook. But moreover, guess what's being disclosed to Facebook, and Google, and everyone else every time you visit a web page? What is on the outside of every envelope your computer has been sending? Your IP address, right? Maybe not your name per se, but your IP address. And just, let's connect the dots later, if you're using services like the web, or BitTorrent, and the life, and you've registered a computer at a place like Harvard, someone somewhere knows that John Harvard's IP addresses this, dot this, dot this, dot this. 

And indeed, logs can he kept both on a campus like this, on a Comcast network, on Verizon, or frankly, at the NSA as we've recently learned, that logs pretty much everything that you are doing on the internet. And we'll come back to this the future class on the implications of these design decisions and security. 

But the truth is, you really don't have all that much privacy. Every time you've been visiting anywhere on the web, you been showing your hand and revealing at least your IP address. So scary note aside, what can we do to embed things like cats in a web page? 

So we have a bunch of responses that might come back from the server. And we won't see all of these today. But 200 is good. And you're probably not seen all of these as a human before. But you've probably seen at least one of these. Which one of these might look familiar? AUDIENCE: 404 DAVID MALAN: So 404. File not found. And indeed, you're going to see this programmatically yourself. 404 just means the file you requested, slash or slash something, simply doesn't exist. And a web server typically responds with 404 as a result 

Meanwhile, we'll soon see that the contents of that message are this language known as HTML. And this is a super simple snippet of HTML that does nothing other than display hello world on the screen. Indeed, you see at the top of this something called a document type declaration which just says, hey, world. This file contains HTML. And then, the next bit of HTML that you're going to write, it has an open bracket, and then the word HTML, then a closed bracket, and then open head, and close bracket. So in short, let's actually do this more mechanically. Let me go into my appliance, but you can do this anywhere that you have a text editor to. 

I'm going to go ahead and save a file called hello.html. I'm going to put it on my desktop to keep things super simple right now. And I'm going to do exactly what I just saw. So doc type HTML, open bracket HTML. And now, notice, I'm going to do the opposite preemptively. And by opposite, I mean the same tag, so to speak, but it starts with a forward slash. And then, over here, I'm going to say, head, because it turns out that every web page has a so-called head which is stuff that goes in the title bar, at the very top of the page. In the title is just going to be hello here. And now, I'm going to have a body to this web page. So every web page has both a head up top and a body which is the guts of the page. And here, I'm just going to say something like hello world. And I'm going to save this file. If I now minimize gedit, look, there's a little file on my desktop called hello.html. Now, that's not on a server yet, per se, Indeed, it's just on my own personal desktop here. But if I open up Chrome and hit Control O-- there's the cat in question. --and I go to my desktop. 

And I open up hello.html, there, in fact, is my super simple web page. The body of my page and this white window here is the body with hello world. And the title in the head of the page is in the tab there. And we're going to see soon that it's super simple to open up other pages as well. For instance, I'm going to go into some of the distribution code for this week, source seven, and I'm going to open up not the JPEG which this guy is here. But I'm going to open up image.html, which ultimately looks like this. But let me now open this up in gedit, and go into Dropbox source seven, and image.html. 

Most of this is just comments as we'll soon see. But if I want to put Grumpy Cat inside of this web page, it suffices to put another open bracket, and then the keyword image or img for short, and then alternative text for accessibility reasons if someone has a screen reader or something like that. Source which is, what's the name of the file, cat.jpeg. 

And then, because this tag's a little special, we put the forward slash, as we'll see, inside of the tag. But the end result is a web page that looks like this. So in short, what we're going to be doing now over time is using the web and creating web pages to ultimately be containers not only for silly things like images, and links, and tables, and bulleted lists, and the like, but also to give us ourselves a graphical user interface, a GUI, not unlike what we did we Breakout. 

But within this environment, we're going to start using languages like PHP, and JavaScript, the database language called SQL, a client-side scripting language called JavaScript to actually create all the more dynamic interfaces but in a much, much more familiar context. But before then, let's conclude today with a look, as promised, of what's really going on underneath the hood with the internet itself. 

Stipulate for today that the internet can be used to transfer things like web pages over HTTP much like I shook Margot's hand earlier. But there's so many other services that use TCP and IP that we take for granted that work as we'll see here in this film that'll take us to the end today. 

[VIDEO PLAYBACK] 

-For the first time in history, people and machinery are working together, realizing a dream. A uniting force that knows no geographical boundaries. Without regard to race, creed, or color. A new era where communication truly brings people together. This is The Dawn of the Net. 

Want to know how it works? Click here to begin your journey into the net. Now, exactly what happened when you clicked on that link? You started a flow of information. This information travels down into your personal mail room when Mr. IP packages it, labels it, and sends it on its way. 

Each packet is limited size. The mail room must decide how to divide the information and how to package it. Now, the package needs a label containing important information, such as sender's address, receiver's address, and the type of packet it is. 

Because this particular packet is going out onto the internet, it also gets an address for the proxy server, which has a special function as we'll see later. The packet is now launched onto your local area network or LAN. This network is used to connect all the local computers, routers printers, et cetera for information exchange within the physical walls of the building. The LAN is a pretty uncontrolled place and, unfortunately, accidents can happen. 

The highway of LAN is packed with all types of information. These are IP packets, Novell packets, Apple Talk packets. They're going against traffic as usual. The local router reads the address and, if necessary, lifts the packet onto another network. Ah, the router. A symbol of control in a seemingly disorganized world. 

There he is, a systematic, uncaring, methodical, conservative, and sometimes not quite up to speed. But at least, he is exact for the most part. 

As the packets leave the router, they make their way into the corporate intranet and head for the router switch. A bit more efficient than the router, the router switch plays fast and loose with IP packets, deftly routing them along the way. A digital Pinball Wizard if you will. 

-Here we go. Here comes another one. And it's another. Watch this, Mom. Here is goes. Whoops. Around the back. Hey. In there. In there. Over to the left. Over to the right. Over to the left. Over to the right. You got it. Here it goes. He shoots. He scores. It's going. Hey, wait. Hey, watch out. Here comes another one. Oh, here we go. 

-As packets arrive at their destination, they're picked up by the network interface, ready to be sent to the next level, in this case, the proxy. The proxy is used by many companies as sort of a middle man in order to lessen the load on their internet connection and for security reasons as well. As you can see, the packets are all of various sizes, depending upon their content. 

The proxy opens the packet and looks for the web address or URL. Depending upon whether the address is acceptable, the packet is sent on to the internet. There are, however, some addresses which do not meet with the approval of the proxy, that is to say, corporate or management guidelines. These are summarily dealt with. We'll have none of that. For those who make it, it's on the road again. 

Next up, the firewall. The corporate firewall serves two purposes. It prevents some rather nasty things on the internet from coming into the intranet. And it can also prevent sensitive corporate information from being sent out onto the internet. 

Once through the firewall, a router picks up the packet and places it onto a much narrower road or bandwidth, as we say. Obviously, the row is not broad enough to take them all. Now, you might wonder, what happens to all those packets which don't make it along the way. Well, when Mr. IP doesn't receive an acknowledgement that a packet has been received in due time, he simply sends a replacement packet. 

We are now ready to enter the world of the internet, a spider web of interconnected networks which span our entire globe. Here, routers and switches establish links between networks. Now, the net is an entirely different environment than you'll find within the protective walls of your LAN. 

Out here, it's the Wild West, plenty of space, plenty of opportunities, plenty of things to explore, and places to go. Thanks to very little control and regulation, new ideas find fertile soil to push the envelope of their possibilities. But because of this freedom, certain dangers also lurk. 

You'll never know when you meet the dreaded ping of death, a special version of a normal request ping which some idiot thought up to mess up unsuspecting hosts. The path our packets take maybe via satellite, telephone lines, wireless, or even transoceanic cable. 

They don't always take the fastest or shortest routes possible, but they will get there, eventually. Maybe that's why it's sometimes called the worldwide wait. But when everything is working smoothly, you could circumvent the globe five times over at the drop of a hat, literally, and all for the cost of a local call or less. 

Near the end of our destination, we'll find another firewall. Depending upon your perspective as a data packet, the firewall could be a bastion of security or dreaded adversary. It all depends on which side you're on, and what your intentions are. 

The firewall is designed to let in only those packets that meet its criteria. This firewall is operating on Ports 80 and 25. All attempts to enter through other ports are closed for business. 

Port 25 is used for mail packets. While Port 80 is the entrance for packets from the internet to the web server. Inside the firewall, packets are screened more thoroughly. Some packets make it easily through customs, while others look just a bit dubious. 

Now, the firewall officer is not easily fooled, such as when this ping of death packet tries to disguise itself as a normal ping packet. -Move along. It's OK. No problem. Have a nice day. Let me outta here. Bye. 

-For those packets lucky enough to make it this far, the journey is almost over. It's just a line up on the interface to be taken up into the web server. Nowadays, a web server can run on many things, from a mainframe, to a webcam, to the computer on your desk. Why not your refrigerator? 

With the proper set up, you could find out if you have the makings for chicken cacciatore or if you have to go shopping. Remember, this is The Dawn of the Net. Almost anything's possible. 

One by one, the packets are received, opened, and unpacked. The information they contain, that is your request for information, is sent on to the web server application. 

The packet itself is recycled. Ready to be used again and filled with your requested information, addressed, and send out on its way back to you. Back past the firewalls, routers, and on through to the internet. Back through your corporate firewall. And onto your interface. Ready to supply your web browser with the information you requested. That is this film. 

Pleased with their efforts and trusting in a better world, our trusty data packets ride off blissfully into the sunset of another day, knowing fully they have served their masters well. Now, isn't that a happy ending. [END VIDEO PLAYBACK] DAVID MALAN: That's it for CS50. We will see you next week. 

[MUSIC - KATY PERRY, "DARK HORSE"] [MUSIC PLAYING] DAVID J MALAN: All right, welcome back. This is CS50. This is the end of week seven. And it's the end of that scavenger hunt from problem set four that you might recall. After recovering all of those JPEGs of staff, you were challenged, if you'd like, to photograph yourself with as many of those folks as you can. We got a whole bunch of submissions over the past few weeks, indeed, quite a few right before noon today, some of which are those here, caught here in-- looks like-- Annenberg Hall at office hours, one here in Lowell House with Nick. Here's Ramon being caught on the phone. This was at a CS50 lunch. This was Jason Skyping with a more creative classmate, who phoned him this way. We don't know what this was. 

[LAUGHTER] 

DAVID J MALAN: But that's worth a gigabyte. Here is Chang, who literally ran off the stage to avoid being photographed one day, but was eventually caught. Here is Nick. Here is Nick. Here is Nick. And here is Alison down by the fields. And Zamyla even was found at a ballroom competition. So we will go through these photos, figure out who submitted the most the earliest, and reward one fabulous prize, as promised in the spec. And we'll also follow up about the space that was involved. 

A couple of announcements-- so lunch is, again, this Friday at 1:15 PM. If you'd like to join us, RSVP at that URL here. Jason appears again here from one of the sections a couple of years back, which happened to fall on Halloween. And indeed, he dressed as a pumpkin that particular year. If you watch this section of his from 2011 section eight, if you are curious, at CS50.tv, I think this was the year in which his air pump was working. 

If you then watch the similar section in 2012, you'll see this Jason much deflated, since the suit no longer functioned, which is only to say this Friday, if you'd like to carve a pumpkin with Daven and Gabe and others, RSVP to the heads at cs50.harvard.edu address. It promises to be great fun. Daven, we're told, has carved pumpkins all of his life. Gabriel from Brazil has never carved a pumpkin for Halloween. So be there with them as he learns. 

Seminars, meanwhile-- so you'll learn soon about what our expectations are for the final project, which essentially will boil down to designing and implementing most any project of interest to you, albeit subject to the approval and guidance from your teaching fellow. Toward the end of the semester, we introduce a number of seminars, which are optional classes led by the teaching fellows and Harvard staff, friends of the course across campus, on various topics that are tangential to the course's underlying syllabus but nonetheless applicable, fun, and different for potential final projects. 

For instance, first, if you'd like to register, head to that URL there. And this is the lineup for this year's seminars alone. But realize we have dozens of seminars from years past, all of which are linked in the Seminars menu option of the course's website. So if you're thinking about going beyond your comfort zone or picking up some new skills, for instance, programming iPhone apps with Swift, a new language from Apple or Objective-C or Android apps or programming [? cue ?] light bulbs, or any of the topics up here and more, due check out the registration page. 

So we began and concluded on Monday with looking at HTTP. So quick refresher-- HTTP, HyperText Transfer Protocol. But what does that really mean? What does that really mean? Is that a hand? I know you're just scratching your head. But you want to propose what HTTP is? 

AUDIENCE: How computers communicate with [INAUDIBLE]. DAVID J MALAN: I missed the last part. How computers communicate with-- 

AUDIENCE: Internet servers. DAVID J MALAN: Good-- with internet servers, and specifically, web servers. Because recall, there's a bunch of services on the internet, some of which you use probably daily between chat and message, chat, and web, and email, and the like. And HTTP is just the protocol that web browsers speak when communicating with web servers, and vice versa. And the analog in the human world might be, I extend my hand to shake some other human's and he or she acknowledges by extending his or her hand as well. So that's just a protocol, a set of conventions. 

And what indeed are those conventions? Well, it just boils down to sending messages back and forth, as we depicted here. And there's a couple of ways in which you can send these messages. And perhaps the most common is known as get. And we'll see a contrast to this before long. 

But a get request from a browser to server just looks like this. It's a bunch of text that it puts inside of a virtual envelope. On the outside of that envelope go a couple pieces of details. What needs to go on the envelope, so to speak, in order to get a request like this from me to a web server? Yeah. 

AUDIENCE: Your IP address. 

DAVID J MALAN: My IP address in the From field, so to speak, and of course, the recipient's IP address. But in the case of a web packet, we need a little more detail It's not sufficient just to send an envelope to a server, because that server might be listening for different types of internet traffic. So what else do we need besides the recipient's IP? Yeah? 

AUDIENCE: Is it TCP? DAVID J MALAN: Good. TCP-- 

AUDIENCE: Address. 

DAVID J MALAN: Address, or port, as it's called. Close, but a TCP port number. And there's a bunch of these. But surely the most familiar should eventually be 80, which is the default one used for web traffic. And another familiar one soon will be 443, which is used for secure web traffic, URLs that start with https. 

So this is what goes inside of that envelope. And get/ just means, give me the default web page. Give me the root of the hard drive on that web server. And hopefully, the web server will respond with, OK and the number 200, which is just a convention saying, yes, all is indeed OK. Here's the page. The type of the web page is going to be text, but more specifically, HTML, which we're about to dive back into. And the dot dot dot just means, here is the HTML. And that's where we pick up the story today, actually writing HTML, HyperText Markup Language, which is the language in which web pages are written. It's not a programming language. There's no functions or loops or conditions. It's a markup language, as well again see today, that allows you to specify how to structure and stylize aesthetically a web page. 

So this was the one and only page we really looked at, if briefly, on Monday. And notice a few salient characteristics. There's a lot of open angled bracket and close angled bracket. In between those angled brackets are words. And we're going to start calling those words tags. So open bracket head and closed bracket head are the open and closed tags, or the start and end tags respectively, of an HTML element, as we'll call it, called head. And the same jargon applies to body in HTML and so forth. 

And what's nice is HTML-- and indeed, we'll spend terribly little time on it, because you'll mostly just figure out what features it has when you actually have a concrete problem to solve-- you'll find that a browser is pretty dumb. It's just going to do-- not unlike a computer-- what you tell it to do. And so when you have open bracket HTML at the very top there, that essentially just means, hey, browser, here comes a web page written in HTML. 

When it sees open bracket head, that just means, hey, browser, here comes the head, or the topmost portion of my web page. When it sees a closed bracket head, that just means, hey, that's it for the head. Standby for something else. And that something else is apparently going to be the body. And when you don't have a tag, like you have just hello, comma, world, that's just going to be raw text that ultimately is displayed in the screen. 

Now, you'll notice too the indentation here. You can probably infer how we're stylizing it. Every time I open a tag, so to speak, I indent. And every time I close a tag, I un-indent, similar in spirit to curly braces. And beyond that, I'm kind of using my judgment. Notice that I didn't bother hitting Enter inside of that title tag. Why? Well, I just decided it looked a little cleaner to me, the human, to just not bother doing that. So again, there's some judgment calls just like there is in C or any language. 

But notice too that this indentation lends itself to a mental model, not to over complicate it. But a tree, right? If you think of a web page, apparently written like this, as being nicely indented that way, you can almost think of the open bracket HTML closed bracket tag is demarcating the root of a node, a family tree style node in the style of the trees we looked at last Friday. 

And indeed, we have on the right here what we'll call a DOM, D-O-M, document object model, a fancy way of saying a tree that represents that HTML. And notice that HTML has, we'll say, like a family tree, two children. On the left is head. On the right is body. 

And just as a mindless thought exercise, head, of course, has how many children according to this structure? So just one, title-- and that's why we have the arrow going from head to the title. So it's as though that person in the family tree had just one offspring. And then title itself can be said to have a child too. 

Recall that the HTML had hello, comma, world beneath it. And I've simply drawn it within an oval instead of a rectangle just to convey semantically that even though it's a node in the tree, so to speak, it's sort of fundamentally different. It's not a tag. Or more properly, it's not an element. It's just a text node, if you will. But these are completely arbitrary human conventions. This is just now my way of representing what I'll as an aggregate call the document. 

And as an aside, the thing at the super top left hand corner, open bracket exclamation point doc type HTML, this looks like a tag, but it's the stupid corner case where that is just there, copied and pasted to indicate the browsers this is HTML version 5. The world keeps changing what the first line of code in a page should be. This just means version 5. So it doesn't quite look like the others. 

All right, so with that said, you'll now appreciate this fairly this stupid tattoo someone got. 

[LAUGHTER] 

DAVID J MALAN: All right, and now let's actually dive into doing something with this. You'll recall that last time I opened up the CS50 Appliance and I did something as simple as opening up gedit. And I saved the file even on my desktop-- nowhere special-- as hello.html. 

So let me do that again-- hello.html Enter. And now in this file, I'm going to go ahead and replicate what we just saw-- doc type html Then I'm going to do open bracket html closed bracket. And then I'm going to preemptively open and close the tag. Why? Just so I don't forget later. It's just good practice, like opening and closing curly braces all at once. 

And then what came next? You can think of the tattoo. 

AUDIENCE: The head. 

DAVID J MALAN: The head. And then in here, I had the title, I think. And the title was arbitrarily, hello, world close title. And then down here, the body, of course-- then we close the body tag. And then just somewhat redundantly, I had the same thing down here. 

So I claim that this is a web page. This is something that could now live on the web, even though of course, it's literally living on my desktop right now. But indeed, if I minimize gedit, I'll see on my desktop its icon. Even though this is the appliance, you could do this on Mac OS without TextEdit or Windows with Notepad even. 

And if I go ahead and double click that even, and select-- well, let's not select that because Chrome's not opening. Let's go ahead and open Chrome. And then do Command-O for open And navigate to my desktop and open that file. That is how a browser interprets HTML, top to bottom, left to right. Hey, browser here's HTML. Here's the head. Here's the title. Here's the body. And indeed, this is how it renders that web page. 

But notice the URL. None of you could pull up this specific page on your laptops right now, even inside of your appliance via that URL, because file:// indicates it's actually on my file system, my hard drive, not yours. So this isn't all that useful. 

Let's now move toward using an actual web server. And it turns out the CS50 Appliance is more than just an environment where you can write C code and compile and run it like you've been doing. It also has been configured by the staff to represent a typical web server that's on the internet, one that you might pay for or one that's in the so-called cloud. 

And it's running standard free open source software, for instance, something called Apache, which is perhaps still the most popular web server software in the world that thousands of websites use today. And it also even has software like MySQL, which is a database server that we'll eventually get to, which is only to say I can start treating my appliance as a full fledged server that I'm not paying for elsewhere. It just lives on my own laptop for development and convenience purposes. 

So let's go ahead and take advantage of this. I'm going to go ahead and open up a terminal window. And I'm going to go ahead and move-- actually, first I'm going to navigate to my desktop. If I do ls, there's hello.html. And I'm going to go ahead and start using a new directory we've not used before today. 

hello.html-- I'm going to move to ../vhosts for virtual hosts-- more on that in the future-- and then into a directory called localhost, which is the nickname given to almost any computer, whether it's a Mac, PC, or Linux computer, and then specifically into a directory that we, the staff already created for you when you downloaded the appliance called public. And as its name suggests, anything I put in this folder, in theory, is going to now be public, at least to people who have a direct connection to my computer. 

So now let me go ahead and do cd to that same directory so I can see what's going on and type ls. And indeed, that's the only thing in there. I claim now that because I have put this file hello.html inside of a directory called public inside of a directory called localhost inside of a directory called vhosts, which thanks to CS50 staff has been pre-configured to be the root of your web server, I can now hopefully do this. 

I'm going to open up a new tab. And I'm going to go not to file://. I'm going to use actual http/localhost, which again, is the nickname for my own server. And then I'm going to go to what file name, just to be clear? Where is this story probably going? hello.html. 

So in other words, I want to now this is my own computer, my own appliance, as though it's an actual server. Its nickname is localhost. But think of localhost as like Facebook.com google.com, whatever. It's just my local name. And then the final I want is in the root of the hard drive, so to speak, or the root of the web server, ergo the forward slash and then the file name hello.html. 

Let me zoom out and hit Enter. And indeed, there is now my web page. So it's slightly different. And it's just as underwhelming. This is the old version. Let me shrink the font back. This is the old. This is the new. But what's fundamentally happening now is that HTTP is being used. 

Let's make this a little more clear or, if you will, a little more complicated. Let me go to the bottom right hand corner of my appliance. And notice that all this time, there's been a number. That is the unique address of your CS50 Appliance. It's a private address, as implied by the 172.16, which just means only you physically can access this web server. Everything is firewalled and nicely protected from the rest of the world because of this addressing. 

And now notice though if I go to this address, not in my appliance, but in Mac OS-- I'm going to go back over here. This is my Mac now. And now I'm going to open up this version of Chrome here. And I'm going to go to http://172.16.25 / and I forget the rest-- 133. 

So I'm going to visit from my Mac that IP address /hello.html Enter. And now I see from my Mac that my CS50 Appliance, who's IP address is that number, is indeed behaving like a web server on the internet. It doesn't have a nice easy to remember name like Facebook.com, but it's using HTTP apparently, even though Chrome is kind of simplifying the world for us but not showing us HTTP. But this is indeed exactly that. Chrome is just saving some keystrokes these days. And that's what we now see. 

So that's all fine and good. But it's a pretty underwhelming page. Let me go in and do something a little different now. So let me go back to gedit. And instead of hello, world, let's put an image. And I claimed from before-- let me go into my localhost directory public. And let me go ahead and copy a whole bunch of files from today from my Dropbox folder into here. 

Now if I type ls, look at all these files that I've distributed by the course's website in advance of today, one of which is still hello.html. So there's that one. And recall this silly one from last time-- cat.jpg . So let me try to embed cat.jpg inside of my web page. 

I'm going to go ahead and do cat.jpg, save. Let me go back to Chrome. And let me zoom in the font and now reload. Oops, where I put this? Standby-- I still have the old version from my desktop open. So let me go into my vhost, my localhost, my public, and hello.html. So now let me go ahead and say cat.jpg inside of the body where I want it to be displayed and reload. Of course, this is not correct. 

So I need to tell the browser a little more deliberately what I want it to do. Simply typing the name is obviously not sufficient. So recall that there was another tag, image, img for short. That's just because humans don't like the type full words. And then we can do source="cat.jpg". 

And now I'm going to do one thing different here. Even though all of our tags thus far have had this notion of a start tag and an end tag, that doesn't really make sense for an image, right? An image is either there or not there. And so the humans have come up with a simpler convention. When you have a tag that can both start and end at the same time-- it can be empty, so to speak-- just put the forward slash inside of the tag at the very end. Now let me go back to my browser. Hit Reload Damn, something's wrong. You've probably seen this occasionally on the web, even if it's not been your fault. It's the web server's fault. What odes this seem to indicate? It's broken. That's where the image belongs. Yeah? 

AUDIENCE: But it doesn't have access to the image. 

DAVID J MALAN: It doesn't have access to the image. That, or even worse, maybe it doesn't even exist. Let's see if we can't diagnose that. Recall from last time that if in Chrome, in the appliance, or even on your Mac or PC, you go to the Developer menu and go to the Developer Tools option, which probably you've not used much or ever. And if I go to Network and reload the page, let's actually look at the HTTP requests that are being made. 

It looks like hello.html is indeed OK, hence the 200. But cat.jpg is a 403. So it's not a 404. File probably exists. 403 means forbidden. So this is a little confusing. I'm going to go back to my terminal window. Let me zoom in up here. And let me do an ls. There's those same files. 

Now let me do a ls-l, which you've probably used before to look at file sizes maybe or timestamps. And we see a whole bunch of overwhelming information. But notice a few details. Here's hello.html in this row here and here's cat.jpg. And it's just the appliance being user friendly by highlighting JPEG's in purple like this. But what else is different beside the file size and the file name? 

AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Yeah, there's two more R's over here. Notice what hello.html has going on. So it turns out that the name of this directory public is important. Anything in this directory is meant to be public. But it's not sufficient just to drop files in there. You also need to change the mode of the files, change the permissions of the file to proactively not be the default setting, which is that only I can read and write it, I being the owner. I want the whole world everybody to be able to read my file, so to speak. Read just means view it. 

And indeed, as you'll see in problem set seven, that's what these R's mean. These two R's mean let everyone else in the world also read it, especially now that it's in this directory. So the simplest way to fix this is to go to my prompt and do chmod for change mode and then do a+r, altogether, everyone, all, plus r for read, and then cat.jpg Enter. Nothing seems to happen, which usually means a good thing. So ls-l again-- now let's look at cat.jpg. And this permission seem to have changed. As an aside, if you make a mistake and you, for instance, just made your-- I don't know-- essay publicly accessible by accident, you can do the opposite, chmod a-r. Though frankly, it shouldn't be in the public directory anyway if that's the concern. 

So now let's go back to my browser and reload. And I'm going to click the little Ghostbusters symbol to clear that part of the screen so we can see new requests. And indeed, here is Grump Cat from before. But more importantly, technically, there is the number 200, which means we got it OK. All right, so that's all fine and good. But we're not making the best of websites, nor are we going to try too hard to make the fanciest of websites today. But let's at least do something super familiar before rattling off a few other tags. So suppose I don't just want a cat here. Suppose I actually want this cat to link to something. 

I might, for instance do something like this. a for anchor href for hyper reference equals-- and let's just do something like www.google.com close quote close bracket. And now search for cats. Close anchor tag. So this has only one sort of fundamentally new detail. The tag of course, is different. It's the name a for anchor href or hyper reference. 

But more importantly, there's this syntactical feature here. This is what we'll start calling not a tag, but an attribute. And an attribute is something that modifies the behavior of a tag. And this attribute, href, means modify the behavior of this anchor so that when it's clicked, it goes to this URL here. And of course, that URL is Google. 

Meanwhile, what is this text here going to be? Well, that's going to be what the human actually sees as the underlined link, as simple as that. So let's try this. Let me save it. I'm still in hello.html. But in the versions online, you'll see the actual file names we pre-prepared. Let me go ahead and reload. And now it's a very underwhelming page still. But if I hover over there-- and it's a little small, but-- you can see in the bottom left hand corner of your screen, it's indeed going to google.com. And if I click that, it will whisk me way to the actual Google. 

But notice here an opportunity for exploitation, just as an aside. And we'll come back to other issues of security before long. Because there's this dichotomy between where you go and what you say, you could do something like this-- http://www.google.com. OK, and now if I reload after saving that page, it looks like I'm going to go to Google. But there's no reason I have to go to Google, right? I could actually go to something like badguy.com, reload the page over here. And notice, it still looks like Google. And only if I'm sharp enough to hover over here do I see it's even going to go to a different location. 

So if you've ever gotten an email, especially one from Paypal, or seemingly from Paypal asking you to log in to your account, this is why you should never ever click links in emails, frankly, any links in emails. If you know you have actual money in Paypal or Bank of America or Fidelity or any website, manually type it in. Because look how easy it is to trick someone into presenting what looks like a link. But it actually could go absolutely anywhere. 

And there's far greater threats than this. In fact, this is a bit of a tangent now, but one of the best ones I ever saw which has since been closed, is someone led people to-- so this might say, click here to log into your account, a bank account. And this was Bank of the West. 

So someone bought this. And it's a little easier to see it in a mono spaced font zoomed in on a 30-foot projector. But when it's small font in an email that you're receiving, this looks like bankofthewest.com, not bankofthevvest.com, which someone had paid $10 to buy. And then this led them to the equivalent of some bad website. 

And you'll see too-- actually we can do this-- if I go to the actual website, bankofthewest.com, again, recall from last time that if this is their web page and you're curious as to how it works, you can certainly go to Chrome's developer tools. And you can see all of the HTML nicely formatted there. 

But more to the point, you cam-- let's close this-- you can go to View Developer View Source. Why don't I just copy all of that And then I can go into my little gedit window here and make my own web page. Save this in hello.html. And probably this is going to break, because it's not this easy usually. But now if I reload my own page on my own CS50 Appliance and hit reload, OK, some stuff broke. But I'm pretty close to having my own banking website, right? All of this HTML-- 

[LAUGHTER] 

DAVID J MALAN: --I didn't actually-- and you know there's someone out there who would actually click these links too. So clearly, some stuff broke. But that's going to lead us into a discussion, unnecessarily right now, as to what CSS, cascading style sheets, are, and how you actually download the other HTML files and JPEG files GIF files that the website might be using. But all of that is accomplishable. But it really boils down to these very simple heuristics. 

So now let's just skim through a couple of other examples of HTML just to give you a sense of what else you can do. For instance, this is list.html. Suppose I wanted to make a web page with a list of houses in the quad. I might use the ul tag for unordered list and then the list item child and then iterate over-- or list, rather-- the houses in question. 

And if I open this up, let's do this. Let's go not to hello.html, but to list.html. Damn it. How do I fix this? It's the same issue as before, right? So let me do chmod-- oops-- chmod a+r of list.html. And now if I go back to my browser and click Reload, there it is. So if you've ever wanted to make a bulleted list, you can do that. If you want to be super fancy and make an ordered list, not an unordered list, change those to ol, reload the page, and now the browser will number it for you. 

What else can we do? Well, a couple of others-- if you've got long paragraphs of text-- for instance, some Latin text like this-- and you want it in separate paragraphs, open p, close p for the paragraph tag. And do it again and again. And if I now open up this file, paragraphs.html, well, this is getting annoying. So now let's just go back to my prompt, chmod a+r r star .html-- a nice little wild card so to speak. It should fix all of these problems for me. Let's reload. There's three paragraphs. 

And now let's go ahead and open up one other. How about table? You'll notice table looks a little more complex. But it's the same idea-- open tag, open tag, open, open, open, close tag, open tag. And these happen to stand for table, whose border is apparently going to be a thickness 1-- whatever that means-- table row, table data, which means a cell. And if I go back to my browser here and go to table.html, you can see something like this, hideous. But we'll get to the point where we can actually make things prettier than that. 

So let me stipulate for now. There's bunches of more tags. And HTML is wonderful to pick up because, frankly, all you need to do is look at existing web pages with which you're familiar. And you're like, oh, that's how they did this aesthetically. 

Or you can look up any online resource as to how HTML works, and you'll see that there's a whole vocabulary of other tags. But with the simple mental model alone that almost any tag you open has to be closed, it really does suffice to teach oneself HTML after understand these basic ideas of tags and attributes and the well-formedness that we've talked about, closing anything that we might open so that we don't confuse a browser. So let's now take this to a more interesting level by going to the actual. And let's go to my Mac here, to google.com. And now notice-- let's do this. I'm gong to go to Settings, Search Settings. I want to turn off this annoying instant results thing where it immediately starts responding to your typing. Let's do this older school so we actually see what's going on. 

So I'm going to save my Google settings here. And now notice-- I'm going to search for something like cats. And it's still doing auto complete here, but based on things people have typed in the past. But notice what's going to happen. 

In the URL at the moment is this, just google.com. And technically, it's slash. Google's just saving a character and not showing us that. They are showing us https, just to be super reassuring that we're at a secure or encrypted page. 

So let me go ahead and search for cats. Now this got really overwhelming quickly. Look at the length of this URL. But it turns out that most of this stuff in the URL is actually pretty useless. I'm going to start deleting things I don't understand. I see cats. I understand cats. I don't know why cats are there again. I really don't know what this nonsense is. So I'm just going to keep highlighting and deleting stuff that I don't understand, distilling the URL into just this. 

Now let me get enter again. It looks like Google still works. So for some reason, they're adding a lot of stuff to their URL's by default. But it's not strictly required. So what is nice about this? Well, let me go ahead and open up Chrome's Inspector. There's a little mouse shortcut for it. 

Go to the Network tab. And now let me reload this page once more. And I'm holding Shift. As an aside, browsers tend to cache or save information just for efficiency's sake. But usually, holding Shift and reloading will force everything to start over from the beginning. And that's what I want to do here. 

And notice all of these rows that just appeared. It turns out that in any given web page, there might be just one file involved-- hello.html-- or there might be 52, as in this case. When I visit google.com, apparently, my browser kicks off 52 separate HTTP requests. Why is that? 

Well, look at what's inside of this web page up top. There's not only text, but there's actual images of cats over to the right. There's a colorful logo up here at left. There's all of these icons for a microphone and so forth. There's a lot of pieces, building blocks, scratch pieces, if you will, to this web page. And what the browser is doing upon getting the very first file, which is this row here, it is essentially iterating over the HTML top to bottom, left to right, looking for things like image tags or other tags that are mentioning other files and when it sees them, goes and fetches them via HTTP, viable whole envelope metaphor, and then displays them in the appropriate location in the web page. 

But notice here if I focus on the first throw, search cats, notice that, indeed it's using HTTP 1.1. And unfortunately, Google Chrome right now in version 39 is kind of dumbing things down and not showing us the actual headers. But what was indeed sent is a request for not slash, but /search?q=cats. 

Now, why is that important? Well, I'm going to infer from this that if you Google supports queries of this form, why don't I implement my own search engine for CS50, but just the front end, just the graphical user interface. And we'll outsource the back end, the actual search results to Google. 

So how can I do this? Well, let me go into gedit over here. And let me go ahead and open up, let's say, a new file. And I'm going to save this temporarily as search-0.html. And then eventually, we'll fast forward to the one I pre-prepared. 

And I'm going to quickly whip up doc type html open bracket html close bracket html. Then I'm going to do head close head open title CS50 Search instead of Google search. Down here I'm going to have the body, down here close body. And now I need CS50 Search. And actually, let's build this incrementally. I'm going to go ahead and close this and actually put it in my public directory. So give me just one moment. search-0.html-- I'm going to temporally call it search.html. I'm going to chmod it a+r search.html. And now I'm going to open it. All right, so that was fast. But the goal simply was to get us to the point of having this text file called search.html. So not much to look at yet. Indeed, if I go to my browser, and go to search.html, that's all it is. But you know what? I can be a little fancier. I read in a book that there's a heading tag called h1. And I'm going to go ahead and use that open h1 and close h1. Reload the page. And now it's bigger and bolder, not all that interesting, but at least it structurally more interesting. But now let me introduce another tag. It turns out there's a form tag. And let me close that tag. And it turns out there's an input tag that has an attribute called type, which is the data type of the field, if you will. And is going to be of type text. And its value is going to be CS50 Search. Close tag. And there's going to be no notion of opening and closing with separate tags. 

Let me go back over here and see what's going on, reload. Getting interesting. It looks like it's a text field. And actually, I didn't want to put a value there yet. Let me go back here and actually get rid of this value to keep it simple. Instead of a value, what I wanted to give this thing was a name. And I don't know what it is, so I'll come back to that. 

But below that, I want to do input type=submit. And this value will be CS50 Search. And we'll see why I moved the value to this. When I reload, I seem to now have the beginnings of my own search engine, super hideous, though frankly, it's not a far throw from what Google's default page looks like. 

If I go here now, I can type in cats and hopefully click Search. But I'm not quite done yet, because I haven't implemented, obviously, a database. I haven't crawled the web for search results. So I need to outsource that to Google. So how do I do this? 

Well, first of all I need to add and action attribute to my form tag that is http://www.google.com/search. And I know that only from having inferred by looking closely at their URL's. And now take a guess. What should this text field probably be called, based on where we came from before? 

AUDIENCE: ?q. 

DAVID J MALAN: ?q. And we don't actually need question mark it turns out, but q is indeed it, q for query probably by default, just because that's what Larry and Sergey came up with years ago. So now let me reload this page. It doesn't look all that different. But now watch what happens. 

If I type in cats and click CS50 Search and let go, notice I get whisked away to actual Google. Now, Google is being a little annoying in that they're appending an additional parameter, if you will, to the URL. That's all happening automatically on Google side. 

The important part is that I seem to have generated this request here. And indeed, that's what happens. When you have HTML that looks like this, this is sort of web developers notation for saying, go ahead and create a form that when it's submitted, it's going to go to this URL. And when the URL has provided values for things like q, don't go just to this URL. Actually, go to question mark and then q=cats. Append the parameter, the HTTP parameter like that. 

And just to be super precise, what's being inferred here-- but I'll be more explicit-- is that the method I want to use is get, instead of something like post, which we'll eventually see. So in short, simply by understanding HTML and using some fairly simple tags, we can now begin to create our own front end user interface with a search engine behind it. 

But this of course, is pretty hideous. So let me actually open up a slightly better version. This is the one I prepared in advance that has some comments. But you'll see that I pretty much recreated it. So this is already available online. And I did happen to preemptively go to https just to keep it simple. 

And now let's open up a next iteration of this. Is version 1 instead of 0. What jumps out at you as slightly different in this example? 

AUDIENCE: [INAUDIBLE]. 

Yeah, there's this text align center. This is a little weird up here. But this is indeed new. And maybe guess what's going to happen. If I go to my browser now and visit search-1.html, it's almost the same thing. But it's a step closer to being a little more pretty. It's still ugly, but prettier in that at least everything's now centered. 

So it turns out that what I'm using is another language altogether called CSS, cascading style sheets. And CSS, frankly, is kind of, in my personal opinion, an atrociously designed language. It is very annoying to remember all the various details. But it is what stylizes the entire worldwide web today. I offended someone. All right. So let's go back here and see how we're actually using this. And it turns out, at least it's actually a pretty simple language. It's just key value pairs, properties and values, properties and values. Indeed, here is one such property and value. 

Simply by using the style attribute on my body tag and giving it a value of a word colon and another word, or a property and a value, I can affect the aesthetics of the web page, not necessarily the structure yet, but the aesthetics of it. And just by Googling around, I realize that CSS, cascading style sheets, supports a property called text-align, whose value can be left, right, or center, for instance. 

So now when I reload this page, what I did get was a centered page, but still pretty ugly. Let's go ahead and open up version 2 of Search. And now notice I've done a little more. Notice that up here inside of the head tag, there can be more than title. In fact, there's a style tag. And this is where it just gets a little messy seeing CSS sometimes. 

Notice that I seem to have something that structurally looks very different. But here is the name of the tag I want to stylized. Here are our old friends curly braces and closed curly brace. And then here is that property and its value. 

If I load this file, search2.html, the end result is identical. But it's a step toward better design. By factoring out this CSS, I've not commingled it with my HTML. And indeed, as we'll see, I could reuse these properties and values. If I wanted to make bunches of parts of my web page centered, I don't have to type style=text-align center all over the place. I can put in one place perhaps, like up at the top. 

But even this isn't the best design. In fact, one of the things you'll learn as you spend more and more time with web programming is that the more you can modularize things and factor things out like .h files let us factor stuff out, like helpers.c let us factor things out a few psets ago. Similarly, might we want to achieve this. 

So notice in version three of search.html I've cleaned up the head of the page and just put in this, a link tag, which contrary to the name, does not give you a hyperlink. It links to another file by way of an href whose value in this case, is search-3.css So I realize we're going quickly. But all I'm doing is kind of moving things around. Let me open search-3.css. There it is, nothing really to it. I just copied and pasted it into a new file, much like we factored stuff out into other files before. And the result-- completely underwhelming-- is going to be exactly the same. But we're moving toward-- no, it's not. Oh, I know why. 

So it seems to be a bug. And it is in some sense. But let me open up my Network tab. Let me reload the page. Ah, why is the CSS not being applied? Well, the CSS file, similarly, has to be world readable, so to speak. And it too is currently forbidden. So let me do a chmod a+r of star dot CSS-- whoops-- we're dot CSS is just the file extension for CSS files. Now let me go back to my browser and reload. OK, a little better. 

Now let me do one last thing. In search-4.html. I have a version that I just thought was way cooler, albeit way more complicated. Let's look at the result first. Close this to give us more room. Change this to search-4, Enter. 

And now a bunch of things are broken. I'm going to go back into my directory here. And now I'm just going to do a chmod of a+r on a file-- because I know it exists-- called logo.gif, which is an image. And now reload. And wow-- so now I'm pretty close, frankly, to like the 1999 version of Google, and frankly, the 2014 version of Google, right? 

So it's now going to their website, ultimately, if I search for cats. And indeed it is. But what did I do differently in this version 4? So we won't dwell too much on it here. You'll see this in problem set seven eventually. But notice I did a few things. 

I introduced a div tag, which is division, similar in spirit to a paragraph tag. But a division is just like, here's a rectangular invisible region of the screen. Let's give it a unique identifier, a footer, just so that we can talk about it in our HTML elsewhere. Here is another div of the page whose ID is going to be content. It's the content of the page. And up here is the header of the page. 

In other words, I've essentially in HTML am mentally viewing this web page as three components, a header up here with this invisible rectangle, the content in the middle, and then the footer down below, even though we don't see those things. Because I want to in my head of page here, or in a .css file, I can use this syntax. 

Header is not a tag. It's an ID so it turns out that by doing #header, I can now apply one or more properties to the header. I can do the same content, the same for content here. 

So for instance, in the footer, notice all of these properties I'm adding. And I know they exist just by reading up on the documentation for CSS. Font size is going to be smaller-- so some relative font size. The weight is going to be bold. Margin-- how many pixels around it-- is 20 pixels. And it's going to be centered. 

But right now, the page looks like this. If I'm not pleased with my copy right there, I could do something like color red. And then I can save this, reload, and now I've stylized the footer. So this is just hinting at the power of what you can do in a web page to change things around. 

And even cooler than this, if you want to poke around with actual websites, you can't permanently change them. But if I open up Chrome's Inspector again and I go not to the left hand side here, which shows Facebook's HTML, but shows on the right hand side all of its CSS, you can either and change things on the fly. So let me go ahead and do this. 

Let me go ahead and control click on this random word here, sign, and click Inspect Element. Chrome very conveniently jumps to the h1 tag that Facebook is using. And notice here Facebook has kind of lazily hard coded font size as a property here. 

So the cool thing though is that if I actually go in here and say, oh, Facebook, I don't like that 64 pixels, we can now change Facebook. Of course, we're only changing it for me personally at the moment. But this is just another tool in our tool kit that's going to allow us to tweak and figure out and also diagnose issues in our own web pages. And we could similarly go over here, which is the same thing. If you really want to get fancy, I mean, now you can really mutate the page and do crazy things. 

So why is this all useful? Well, ultimately, we're going to want to be able to create web pages that are driven by our own back ends, not by just Google and outsourcing the back end there. We actually want the value, for instance, of our search engine's action attribute to go not to someone else, but to something like search.php, where search.php is on our own server, not on someone else's. 

And so to get there, we actually need to introduce a new language. So we've already looked at one new language here, or two really, HTML and CSS. But they really are just structural and aesthetic languages. They're not programming languages per se. And that's about as much formal time as we'll spend on them. Because we'll begin now to transition to PHP. 

So PHP is an actual programming language. It's a scripting language in the sense that it's meant to be lighter weight than something like C. And it's an interpreted language, which means it's not compiled. So in a nutshell, what did it mean when we used a language like c and we had to compile it? What does it mean to compile C source code? AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Say it again? AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Perfect. It turns it into binary. It turns it into zeroes and ones from actual English-like source code. And then we can actually run those zeroes and ones by passing them through the CPU by double clicking an icon or running a command. 

PHP and Python and Ruby and Perl and JavaScript and bunches of other languages are interpreted languages, which is to say you do not compile them. Rather, you feed them as input to a program called an interpreter. And that interpreter, which someone else wrote, reads your source code top to bottom, left to right and just interprets those lines and does what you say. 

So if you encounter a line that says print, it doesn't necessarily convert print to the corresponding zeros and ones. It just has this interpreter like a big if condition that says, if programmer's instruction is print, then do the following. So it interprets it just by kind of reasoning through what you're telling it to do. 

And PHP is one of these languages. And PHP years ago was designed precisely for web programming. And it was initially a very sloppy messy language. And indeed, there's a huge amount of bad PHP code out there. But the language itself has matured over the years, so much so that now it's actually a wonderful next step pedagogically from C because it's so darned familiar to everything you've just seen in the past few weeks. 

The one initial difference we'll see is there's no main function anymore. When you start writing code, it's just going to get executed no matter what, as we'll see in a moment. Meanwhile, here's what a variable looks like in PHP. It's a little different, but only barely. 

In PHP, there's not strong typing. There's week typing, which just means there are data types like strings and numbers and other things. But you don't bother specifying what they are anymore. PHP figures it out for you. The dollar sign is just a decision that the PHP people made years ago such that any variable in PHP just starts with a dollar sign. It's actually kind of useful in that it jumps out at you a little more. 

But after that, this is a condition in PHP. What's different versus C? Trick question-- nothing, which is actually really nice. Boolean expressions in PHP-- the same. Boolean expressions with and versus or, switches, loops, loops, loops-- OK, this one is different. 

So it turns out there's a couple of other features in PHP. One of them is actually this, which is wonderfully convenient. If $numbers is an array that you've declared previously in a program, you have this fancy for each construct that instead of doing all of that annoying I equals 0, I is less than this, [? I++ ?], for each numbers as number, where each of those dollar sign values is just a variable, and the latter you can think of as I. You could call it anything you want. I called it number. This is going to iterate over the array called numbers. And on each iteration, it's going to automatically update for you the dollar sign number variable so that you constantly have access to the variable you want without having to do any square bracket notation or indexing into an array. 

Beyond that, we even have things like arrays, which look almost the same, except it's very common, as we'll see, both in PHP and JavaScript to pre initialize an array using square brackets. C uses curly braces. So it's slightly different, even though we didn't really use that trick much. 

But even more powerfully, PHP has associative arrays, which is a fancy way of saying hash tables. In fact, if you want to declare a hash table in PHP, unlike in C-- how many lines of code did it take to actually implement a hash table in C? Or how many lines of code is it taking to implement a hash table in C? So it's probably a lot, right? It's a few dozen, maybe 100 or 200. It's nontrivial. Or it's about to be, as you'll soon see, nontrivial to implement a hash table [INAUDIBLE] and also a try. But in PHP-- and frankly, I probably shouldn't tell you this until Monday-- in PHP, if you want a table, done. That's a hash table-- so with one line of code. And 

A lot of languages do that. Have fun with pset five. So a lot of languages do this. They give you these abstractions that other people, other programmers, have created for you so that you can stand on their shoulders and start using ideas that are super compelling, like hash tables and trees and tries. But you don't necessarily have to implement those things yourself. 

And so ultimately, what we're going to use PHP for is potentially writing programs of the so-called command line. We could recreate every program we've written this semester thus far, except maybe Breakout which uses SPL, which is specific to C at the moment. But every other problem set, certainly Mario and Caesar and Vigenere and [? Crack ?] and onward, we could re-implement in PHP, and probably a little more easily. 

But what we're ultimately going to use PHP for is web programming. And we're going to introduce next week a mental model, a paradigm called MVC, model view controller, which if you've done programming before in Python or Ruby or elsewhere, you might know of this team with Rails and Django and the like. But if you're new to this too, you'll see that this is actually a very natural extension of the factorization and the sort of design of code that we've been doing in C. We're going to now apply some of those lessons to PHP so that ultimately, we are implementing our own websites. And if you're sort of mesmerized or amazed that we're going to do all of the so quickly, realize that almost every semester, nearly 90% of students CS50, including those who have never programmed before, end up making final projects that are based on web programming. And so you will see that the returns are high in the weeks to come. So we will see you then on Monday. 

SPEAKER 1: And now, Deep Thoughts by Daven Farnham. Hash tables. 

[LAUGHTER] [MUSIC PLAYING] DAVID J MALAN: All right, welcome back. This is CS50. This is the end of week seven. And it's the end of that scavenger hunt from problem set four that you might recall. After recovering all of those JPEGs of staff, you were challenged, if you'd like, to photograph yourself with as many of those folks as you can. We got a whole bunch of submissions over the past few weeks, indeed, quite a few right before noon today, some of which are those here, caught here in-- looks like-- Annenberg Hall at office hours, one here in Lowell House with Nick. Here's Ramon being caught on the phone. This was at a CS50 lunch. This was Jason Skyping with a more creative classmate, who phoned him this way. We don't know what this was. 

[LAUGHTER] 

DAVID J MALAN: But that's worth a gigabyte. Here is Chang, who literally ran off the stage to avoid being photographed one day, but was eventually caught. Here is Nick. Here is Nick. Here is Nick. And here is Alison down by the fields. And Zamyla even was found at a ballroom competition. So we will go through these photos, figure out who submitted the most the earliest, and reward one fabulous prize, as promised in the spec. And we'll also follow up about the space that was involved. 

A couple of announcements-- so lunch is, again, this Friday at 1:15 PM. If you'd like to join us, RSVP at that URL here. Jason appears again here from one of the sections a couple of years back, which happened to fall on Halloween. And indeed, he dressed as a pumpkin that particular year. If you watch this section of his from 2011 section eight, if you are curious, at CS50.tv, I think this was the year in which his air pump was working. 

If you then watch the similar section in 2012, you'll see this Jason much deflated, since the suit no longer functioned, which is only to say this Friday, if you'd like to carve a pumpkin with Daven and Gabe and others, RSVP to the heads at cs50.harvard.edu address. It promises to be great fun. Daven, we're told, has carved pumpkins all of his life. Gabriel from Brazil has never carved a pumpkin for Halloween. So be there with them as he learns. 

Seminars, meanwhile-- so you'll learn soon about what our expectations are for the final project, which essentially will boil down to designing and implementing most any project of interest to you, albeit subject to the approval and guidance from your teaching fellow. Toward the end of the semester, we introduce a number of seminars, which are optional classes led by the teaching fellows and Harvard staff, friends of the course across campus, on various topics that are tangential to the course's underlying syllabus but nonetheless applicable, fun, and different for potential final projects. 

For instance, first, if you'd like to register, head to that URL there. And this is the lineup for this year's seminars alone. But realize we have dozens of seminars from years past, all of which are linked in the Seminars menu option of the course's website. So if you're thinking about going beyond your comfort zone or picking up some new skills, for instance, programming iPhone apps with Swift, a new language from Apple or Objective-C or Android apps or programming [? cue ?] light bulbs, or any of the topics up here and more, due check out the registration page. 

So we began and concluded on Monday with looking at HTTP. So quick refresher-- HTTP, HyperText Transfer Protocol. But what does that really mean? What does that really mean? Is that a hand? I know you're just scratching your head. But you want to propose what HTTP is? 

AUDIENCE: How computers communicate with [INAUDIBLE]. DAVID J MALAN: I missed the last part. How computers communicate with-- 

AUDIENCE: Internet servers. DAVID J MALAN: Good-- with internet servers, and specifically, web servers. Because recall, there's a bunch of services on the internet, some of which you use probably daily between chat and message, chat, and web, and email, and the like. And HTTP is just the protocol that web browsers speak when communicating with web servers, and vice versa. And the analog in the human world might be, I extend my hand to shake some other human's and he or she acknowledges by extending his or her hand as well. So that's just a protocol, a set of conventions. 

And what indeed are those conventions? Well, it just boils down to sending messages back and forth, as we depicted here. And there's a couple of ways in which you can send these messages. And perhaps the most common is known as get. And we'll see a contrast to this before long. 

But a get request from a browser to server just looks like this. It's a bunch of text that it puts inside of a virtual envelope. On the outside of that envelope go a couple pieces of details. What needs to go on the envelope, so to speak, in order to get a request like this from me to a web server? Yeah. 

AUDIENCE: Your IP address. 

DAVID J MALAN: My IP address in the From field, so to speak, and of course, the recipient's IP address. But in the case of a web packet, we need a little more detail It's not sufficient just to send an envelope to a server, because that server might be listening for different types of internet traffic. So what else do we need besides the recipient's IP? Yeah? 

AUDIENCE: Is it TCP? DAVID J MALAN: Good. TCP-- 

AUDIENCE: Address. 

DAVID J MALAN: Address, or port, as it's called. Close, but a TCP port number. And there's a bunch of these. But surely the most familiar should eventually be 80, which is the default one used for web traffic. And another familiar one soon will be 443, which is used for secure web traffic, URLs that start with https. 

So this is what goes inside of that envelope. And get/ just means, give me the default web page. Give me the root of the hard drive on that web server. And hopefully, the web server will respond with, OK and the number 200, which is just a convention saying, yes, all is indeed OK. Here's the page. The type of the web page is going to be text, but more specifically, HTML, which we're about to dive back into. And the dot dot dot just means, here is the HTML. And that's where we pick up the story today, actually writing HTML, HyperText Markup Language, which is the language in which web pages are written. It's not a programming language. There's no functions or loops or conditions. It's a markup language, as well again see today, that allows you to specify how to structure and stylize aesthetically a web page. 

So this was the one and only page we really looked at, if briefly, on Monday. And notice a few salient characteristics. There's a lot of open angled bracket and close angled bracket. In between those angled brackets are words. And we're going to start calling those words tags. So open bracket head and closed bracket head are the open and closed tags, or the start and end tags respectively, of an HTML element, as we'll call it, called head. And the same jargon applies to body in HTML and so forth. 

And what's nice is HTML-- and indeed, we'll spend terribly little time on it, because you'll mostly just figure out what features it has when you actually have a concrete problem to solve-- you'll find that a browser is pretty dumb. It's just going to do-- not unlike a computer-- what you tell it to do. And so when you have open bracket HTML at the very top there, that essentially just means, hey, browser, here comes a web page written in HTML. 

When it sees open bracket head, that just means, hey, browser, here comes the head, or the topmost portion of my web page. When it sees a closed bracket head, that just means, hey, that's it for the head. Standby for something else. And that something else is apparently going to be the body. And when you don't have a tag, like you have just hello, comma, world, that's just going to be raw text that ultimately is displayed in the screen. 

Now, you'll notice too the indentation here. You can probably infer how we're stylizing it. Every time I open a tag, so to speak, I indent. And every time I close a tag, I un-indent, similar in spirit to curly braces. And beyond that, I'm kind of using my judgment. Notice that I didn't bother hitting Enter inside of that title tag. Why? Well, I just decided it looked a little cleaner to me, the human, to just not bother doing that. So again, there's some judgment calls just like there is in C or any language. 

But notice too that this indentation lends itself to a mental model, not to over complicate it. But a tree, right? If you think of a web page, apparently written like this, as being nicely indented that way, you can almost think of the open bracket HTML closed bracket tag is demarcating the root of a node, a family tree style node in the style of the trees we looked at last Friday. 

And indeed, we have on the right here what we'll call a DOM, D-O-M, document object model, a fancy way of saying a tree that represents that HTML. And notice that HTML has, we'll say, like a family tree, two children. On the left is head. On the right is body. 

And just as a mindless thought exercise, head, of course, has how many children according to this structure? So just one, title-- and that's why we have the arrow going from head to the title. So it's as though that person in the family tree had just one offspring. And then title itself can be said to have a child too. 

Recall that the HTML had hello, comma, world beneath it. And I've simply drawn it within an oval instead of a rectangle just to convey semantically that even though it's a node in the tree, so to speak, it's sort of fundamentally different. It's not a tag. Or more properly, it's not an element. It's just a text node, if you will. But these are completely arbitrary human conventions. This is just now my way of representing what I'll as an aggregate call the document. 

And as an aside, the thing at the super top left hand corner, open bracket exclamation point doc type HTML, this looks like a tag, but it's the stupid corner case where that is just there, copied and pasted to indicate the browsers this is HTML version 5. The world keeps changing what the first line of code in a page should be. This just means version 5. So it doesn't quite look like the others. 

All right, so with that said, you'll now appreciate this fairly this stupid tattoo someone got. 

[LAUGHTER] 

DAVID J MALAN: All right, and now let's actually dive into doing something with this. You'll recall that last time I opened up the CS50 Appliance and I did something as simple as opening up gedit. And I saved the file even on my desktop-- nowhere special-- as hello.html. 

So let me do that again-- hello.html Enter. And now in this file, I'm going to go ahead and replicate what we just saw-- doc type html Then I'm going to do open bracket html closed bracket. And then I'm going to preemptively open and close the tag. Why? Just so I don't forget later. It's just good practice, like opening and closing curly braces all at once. 

And then what came next? You can think of the tattoo. 

AUDIENCE: The head. 

DAVID J MALAN: The head. And then in here, I had the title, I think. And the title was arbitrarily, hello, world close title. And then down here, the body, of course-- then we close the body tag. And then just somewhat redundantly, I had the same thing down here. 

So I claim that this is a web page. This is something that could now live on the web, even though of course, it's literally living on my desktop right now. But indeed, if I minimize gedit, I'll see on my desktop its icon. Even though this is the appliance, you could do this on Mac OS without TextEdit or Windows with Notepad even. 

And if I go ahead and double click that even, and select-- well, let's not select that because Chrome's not opening. Let's go ahead and open Chrome. And then do Command-O for open And navigate to my desktop and open that file. That is how a browser interprets HTML, top to bottom, left to right. Hey, browser here's HTML. Here's the head. Here's the title. Here's the body. And indeed, this is how it renders that web page. 

But notice the URL. None of you could pull up this specific page on your laptops right now, even inside of your appliance via that URL, because file:// indicates it's actually on my file system, my hard drive, not yours. So this isn't all that useful. 

Let's now move toward using an actual web server. And it turns out the CS50 Appliance is more than just an environment where you can write C code and compile and run it like you've been doing. It also has been configured by the staff to represent a typical web server that's on the internet, one that you might pay for or one that's in the so-called cloud. 

And it's running standard free open source software, for instance, something called Apache, which is perhaps still the most popular web server software in the world that thousands of websites use today. And it also even has software like MySQL, which is a database server that we'll eventually get to, which is only to say I can start treating my appliance as a full fledged server that I'm not paying for elsewhere. It just lives on my own laptop for development and convenience purposes. 

So let's go ahead and take advantage of this. I'm going to go ahead and open up a terminal window. And I'm going to go ahead and move-- actually, first I'm going to navigate to my desktop. If I do ls, there's hello.html. And I'm going to go ahead and start using a new directory we've not used before today. 

hello.html-- I'm going to move to ../vhosts for virtual hosts-- more on that in the future-- and then into a directory called localhost, which is the nickname given to almost any computer, whether it's a Mac, PC, or Linux computer, and then specifically into a directory that we, the staff already created for you when you downloaded the appliance called public. And as its name suggests, anything I put in this folder, in theory, is going to now be public, at least to people who have a direct connection to my computer. 

So now let me go ahead and do cd to that same directory so I can see what's going on and type ls. And indeed, that's the only thing in there. I claim now that because I have put this file hello.html inside of a directory called public inside of a directory called localhost inside of a directory called vhosts, which thanks to CS50 staff has been pre-configured to be the root of your web server, I can now hopefully do this. 

I'm going to open up a new tab. And I'm going to go not to file://. I'm going to use actual http/localhost, which again, is the nickname for my own server. And then I'm going to go to what file name, just to be clear? Where is this story probably going? hello.html. 

So in other words, I want to now this is my own computer, my own appliance, as though it's an actual server. Its nickname is localhost. But think of localhost as like Facebook.com google.com, whatever. It's just my local name. And then the final I want is in the root of the hard drive, so to speak, or the root of the web server, ergo the forward slash and then the file name hello.html. 

Let me zoom out and hit Enter. And indeed, there is now my web page. So it's slightly different. And it's just as underwhelming. This is the old version. Let me shrink the font back. This is the old. This is the new. But what's fundamentally happening now is that HTTP is being used. 

Let's make this a little more clear or, if you will, a little more complicated. Let me go to the bottom right hand corner of my appliance. And notice that all this time, there's been a number. That is the unique address of your CS50 Appliance. It's a private address, as implied by the 172.16, which just means only you physically can access this web server. Everything is firewalled and nicely protected from the rest of the world because of this addressing. 

And now notice though if I go to this address, not in my appliance, but in Mac OS-- I'm going to go back over here. This is my Mac now. And now I'm going to open up this version of Chrome here. And I'm going to go to http://172.16.25 / and I forget the rest-- 133. 

So I'm going to visit from my Mac that IP address /hello.html Enter. And now I see from my Mac that my CS50 Appliance, who's IP address is that number, is indeed behaving like a web server on the internet. It doesn't have a nice easy to remember name like Facebook.com, but it's using HTTP apparently, even though Chrome is kind of simplifying the world for us but not showing us HTTP. But this is indeed exactly that. Chrome is just saving some keystrokes these days. And that's what we now see. 

So that's all fine and good. But it's a pretty underwhelming page. Let me go in and do something a little different now. So let me go back to gedit. And instead of hello, world, let's put an image. And I claimed from before-- let me go into my localhost directory public. And let me go ahead and copy a whole bunch of files from today from my Dropbox folder into here. 

Now if I type ls, look at all these files that I've distributed by the course's website in advance of today, one of which is still hello.html. So there's that one. And recall this silly one from last time-- cat.jpg . So let me try to embed cat.jpg inside of my web page. 

I'm going to go ahead and do cat.jpg, save. Let me go back to Chrome. And let me zoom in the font and now reload. Oops, where I put this? Standby-- I still have the old version from my desktop open. So let me go into my vhost, my localhost, my public, and hello.html. So now let me go ahead and say cat.jpg inside of the body where I want it to be displayed and reload. Of course, this is not correct. 

So I need to tell the browser a little more deliberately what I want it to do. Simply typing the name is obviously not sufficient. So recall that there was another tag, image, img for short. That's just because humans don't like the type full words. And then we can do source="cat.jpg". 

And now I'm going to do one thing different here. Even though all of our tags thus far have had this notion of a start tag and an end tag, that doesn't really make sense for an image, right? An image is either there or not there. And so the humans have come up with a simpler convention. When you have a tag that can both start and end at the same time-- it can be empty, so to speak-- just put the forward slash inside of the tag at the very end. Now let me go back to my browser. Hit Reload Damn, something's wrong. You've probably seen this occasionally on the web, even if it's not been your fault. It's the web server's fault. What odes this seem to indicate? It's broken. That's where the image belongs. Yeah? 

AUDIENCE: But it doesn't have access to the image. 

DAVID J MALAN: It doesn't have access to the image. That, or even worse, maybe it doesn't even exist. Let's see if we can't diagnose that. Recall from last time that if in Chrome, in the appliance, or even on your Mac or PC, you go to the Developer menu and go to the Developer Tools option, which probably you've not used much or ever. And if I go to Network and reload the page, let's actually look at the HTTP requests that are being made. 

It looks like hello.html is indeed OK, hence the 200. But cat.jpg is a 403. So it's not a 404. File probably exists. 403 means forbidden. So this is a little confusing. I'm going to go back to my terminal window. Let me zoom in up here. And let me do an ls. There's those same files. 

Now let me do a ls-l, which you've probably used before to look at file sizes maybe or timestamps. And we see a whole bunch of overwhelming information. But notice a few details. Here's hello.html in this row here and here's cat.jpg. And it's just the appliance being user friendly by highlighting JPEG's in purple like this. But what else is different beside the file size and the file name? 

AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Yeah, there's two more R's over here. Notice what hello.html has going on. So it turns out that the name of this directory public is important. Anything in this directory is meant to be public. But it's not sufficient just to drop files in there. You also need to change the mode of the files, change the permissions of the file to proactively not be the default setting, which is that only I can read and write it, I being the owner. I want the whole world everybody to be able to read my file, so to speak. Read just means view it. 

And indeed, as you'll see in problem set seven, that's what these R's mean. These two R's mean let everyone else in the world also read it, especially now that it's in this directory. So the simplest way to fix this is to go to my prompt and do chmod for change mode and then do a+r, altogether, everyone, all, plus r for read, and then cat.jpg Enter. Nothing seems to happen, which usually means a good thing. So ls-l again-- now let's look at cat.jpg. And this permission seem to have changed. As an aside, if you make a mistake and you, for instance, just made your-- I don't know-- essay publicly accessible by accident, you can do the opposite, chmod a-r. Though frankly, it shouldn't be in the public directory anyway if that's the concern. 

So now let's go back to my browser and reload. And I'm going to click the little Ghostbusters symbol to clear that part of the screen so we can see new requests. And indeed, here is Grump Cat from before. But more importantly, technically, there is the number 200, which means we got it OK. All right, so that's all fine and good. But we're not making the best of websites, nor are we going to try too hard to make the fanciest of websites today. But let's at least do something super familiar before rattling off a few other tags. So suppose I don't just want a cat here. Suppose I actually want this cat to link to something. 

I might, for instance do something like this. a for anchor href for hyper reference equals-- and let's just do something like www.google.com close quote close bracket. And now search for cats. Close anchor tag. So this has only one sort of fundamentally new detail. The tag of course, is different. It's the name a for anchor href or hyper reference. 

But more importantly, there's this syntactical feature here. This is what we'll start calling not a tag, but an attribute. And an attribute is something that modifies the behavior of a tag. And this attribute, href, means modify the behavior of this anchor so that when it's clicked, it goes to this URL here. And of course, that URL is Google. 

Meanwhile, what is this text here going to be? Well, that's going to be what the human actually sees as the underlined link, as simple as that. So let's try this. Let me save it. I'm still in hello.html. But in the versions online, you'll see the actual file names we pre-prepared. Let me go ahead and reload. And now it's a very underwhelming page still. But if I hover over there-- and it's a little small, but-- you can see in the bottom left hand corner of your screen, it's indeed going to google.com. And if I click that, it will whisk me way to the actual Google. 

But notice here an opportunity for exploitation, just as an aside. And we'll come back to other issues of security before long. Because there's this dichotomy between where you go and what you say, you could do something like this-- http://www.google.com. OK, and now if I reload after saving that page, it looks like I'm going to go to Google. But there's no reason I have to go to Google, right? I could actually go to something like badguy.com, reload the page over here. And notice, it still looks like Google. And only if I'm sharp enough to hover over here do I see it's even going to go to a different location. 

So if you've ever gotten an email, especially one from Paypal, or seemingly from Paypal asking you to log in to your account, this is why you should never ever click links in emails, frankly, any links in emails. If you know you have actual money in Paypal or Bank of America or Fidelity or any website, manually type it in. Because look how easy it is to trick someone into presenting what looks like a link. But it actually could go absolutely anywhere. 

And there's far greater threats than this. In fact, this is a bit of a tangent now, but one of the best ones I ever saw which has since been closed, is someone led people to-- so this might say, click here to log into your account, a bank account. And this was Bank of the West. 

So someone bought this. And it's a little easier to see it in a mono spaced font zoomed in on a 30-foot projector. But when it's small font in an email that you're receiving, this looks like bankofthewest.com, not bankofthevvest.com, which someone had paid $10 to buy. And then this led them to the equivalent of some bad website. 

And you'll see too-- actually we can do this-- if I go to the actual website, bankofthewest.com, again, recall from last time that if this is their web page and you're curious as to how it works, you can certainly go to Chrome's developer tools. And you can see all of the HTML nicely formatted there. 

But more to the point, you cam-- let's close this-- you can go to View Developer View Source. Why don't I just copy all of that And then I can go into my little gedit window here and make my own web page. Save this in hello.html. And probably this is going to break, because it's not this easy usually. But now if I reload my own page on my own CS50 Appliance and hit reload, OK, some stuff broke. But I'm pretty close to having my own banking website, right? All of this HTML-- 

[LAUGHTER] 

DAVID J MALAN: --I didn't actually-- and you know there's someone out there who would actually click these links too. So clearly, some stuff broke. But that's going to lead us into a discussion, unnecessarily right now, as to what CSS, cascading style sheets, are, and how you actually download the other HTML files and JPEG files GIF files that the website might be using. But all of that is accomplishable. But it really boils down to these very simple heuristics. 

So now let's just skim through a couple of other examples of HTML just to give you a sense of what else you can do. For instance, this is list.html. Suppose I wanted to make a web page with a list of houses in the quad. I might use the ul tag for unordered list and then the list item child and then iterate over-- or list, rather-- the houses in question. 

And if I open this up, let's do this. Let's go not to hello.html, but to list.html. Damn it. How do I fix this? It's the same issue as before, right? So let me do chmod-- oops-- chmod a+r of list.html. And now if I go back to my browser and click Reload, there it is. So if you've ever wanted to make a bulleted list, you can do that. If you want to be super fancy and make an ordered list, not an unordered list, change those to ol, reload the page, and now the browser will number it for you. 

What else can we do? Well, a couple of others-- if you've got long paragraphs of text-- for instance, some Latin text like this-- and you want it in separate paragraphs, open p, close p for the paragraph tag. And do it again and again. And if I now open up this file, paragraphs.html, well, this is getting annoying. So now let's just go back to my prompt, chmod a+r r star .html-- a nice little wild card so to speak. It should fix all of these problems for me. Let's reload. There's three paragraphs. 

And now let's go ahead and open up one other. How about table? You'll notice table looks a little more complex. But it's the same idea-- open tag, open tag, open, open, open, close tag, open tag. And these happen to stand for table, whose border is apparently going to be a thickness 1-- whatever that means-- table row, table data, which means a cell. And if I go back to my browser here and go to table.html, you can see something like this, hideous. But we'll get to the point where we can actually make things prettier than that. 

So let me stipulate for now. There's bunches of more tags. And HTML is wonderful to pick up because, frankly, all you need to do is look at existing web pages with which you're familiar. And you're like, oh, that's how they did this aesthetically. 

Or you can look up any online resource as to how HTML works, and you'll see that there's a whole vocabulary of other tags. But with the simple mental model alone that almost any tag you open has to be closed, it really does suffice to teach oneself HTML after understand these basic ideas of tags and attributes and the well-formedness that we've talked about, closing anything that we might open so that we don't confuse a browser. So let's now take this to a more interesting level by going to the actual. And let's go to my Mac here, to google.com. And now notice-- let's do this. I'm gong to go to Settings, Search Settings. I want to turn off this annoying instant results thing where it immediately starts responding to your typing. Let's do this older school so we actually see what's going on. 

So I'm going to save my Google settings here. And now notice-- I'm going to search for something like cats. And it's still doing auto complete here, but based on things people have typed in the past. But notice what's going to happen. 

In the URL at the moment is this, just google.com. And technically, it's slash. Google's just saving a character and not showing us that. They are showing us https, just to be super reassuring that we're at a secure or encrypted page. 

So let me go ahead and search for cats. Now this got really overwhelming quickly. Look at the length of this URL. But it turns out that most of this stuff in the URL is actually pretty useless. I'm going to start deleting things I don't understand. I see cats. I understand cats. I don't know why cats are there again. I really don't know what this nonsense is. So I'm just going to keep highlighting and deleting stuff that I don't understand, distilling the URL into just this. 

Now let me get enter again. It looks like Google still works. So for some reason, they're adding a lot of stuff to their URL's by default. But it's not strictly required. So what is nice about this? Well, let me go ahead and open up Chrome's Inspector. There's a little mouse shortcut for it. 

Go to the Network tab. And now let me reload this page once more. And I'm holding Shift. As an aside, browsers tend to cache or save information just for efficiency's sake. But usually, holding Shift and reloading will force everything to start over from the beginning. And that's what I want to do here. 

And notice all of these rows that just appeared. It turns out that in any given web page, there might be just one file involved-- hello.html-- or there might be 52, as in this case. When I visit google.com, apparently, my browser kicks off 52 separate HTTP requests. Why is that? 

Well, look at what's inside of this web page up top. There's not only text, but there's actual images of cats over to the right. There's a colorful logo up here at left. There's all of these icons for a microphone and so forth. There's a lot of pieces, building blocks, scratch pieces, if you will, to this web page. And what the browser is doing upon getting the very first file, which is this row here, it is essentially iterating over the HTML top to bottom, left to right, looking for things like image tags or other tags that are mentioning other files and when it sees them, goes and fetches them via HTTP, viable whole envelope metaphor, and then displays them in the appropriate location in the web page. 

But notice here if I focus on the first throw, search cats, notice that, indeed it's using HTTP 1.1. And unfortunately, Google Chrome right now in version 39 is kind of dumbing things down and not showing us the actual headers. But what was indeed sent is a request for not slash, but /search?q=cats. 

Now, why is that important? Well, I'm going to infer from this that if you Google supports queries of this form, why don't I implement my own search engine for CS50, but just the front end, just the graphical user interface. And we'll outsource the back end, the actual search results to Google. 

So how can I do this? Well, let me go into gedit over here. And let me go ahead and open up, let's say, a new file. And I'm going to save this temporarily as search-0.html. And then eventually, we'll fast forward to the one I pre-prepared. 

And I'm going to quickly whip up doc type html open bracket html close bracket html. Then I'm going to do head close head open title CS50 Search instead of Google search. Down here I'm going to have the body, down here close body. And now I need CS50 Search. And actually, let's build this incrementally. I'm going to go ahead and close this and actually put it in my public directory. So give me just one moment. search-0.html-- I'm going to temporally call it search.html. I'm going to chmod it a+r search.html. And now I'm going to open it. All right, so that was fast. But the goal simply was to get us to the point of having this text file called search.html. So not much to look at yet. Indeed, if I go to my browser, and go to search.html, that's all it is. But you know what? I can be a little fancier. I read in a book that there's a heading tag called h1. And I'm going to go ahead and use that open h1 and close h1. Reload the page. And now it's bigger and bolder, not all that interesting, but at least it structurally more interesting. But now let me introduce another tag. It turns out there's a form tag. And let me close that tag. And it turns out there's an input tag that has an attribute called type, which is the data type of the field, if you will. And is going to be of type text. And its value is going to be CS50 Search. Close tag. And there's going to be no notion of opening and closing with separate tags. 

Let me go back over here and see what's going on, reload. Getting interesting. It looks like it's a text field. And actually, I didn't want to put a value there yet. Let me go back here and actually get rid of this value to keep it simple. Instead of a value, what I wanted to give this thing was a name. And I don't know what it is, so I'll come back to that. 

But below that, I want to do input type=submit. And this value will be CS50 Search. And we'll see why I moved the value to this. When I reload, I seem to now have the beginnings of my own search engine, super hideous, though frankly, it's not a far throw from what Google's default page looks like. 

If I go here now, I can type in cats and hopefully click Search. But I'm not quite done yet, because I haven't implemented, obviously, a database. I haven't crawled the web for search results. So I need to outsource that to Google. So how do I do this? 

Well, first of all I need to add and action attribute to my form tag that is http://www.google.com/search. And I know that only from having inferred by looking closely at their URL's. And now take a guess. What should this text field probably be called, based on where we came from before? 

AUDIENCE: ?q. 

DAVID J MALAN: ?q. And we don't actually need question mark it turns out, but q is indeed it, q for query probably by default, just because that's what Larry and Sergey came up with years ago. So now let me reload this page. It doesn't look all that different. But now watch what happens. 

If I type in cats and click CS50 Search and let go, notice I get whisked away to actual Google. Now, Google is being a little annoying in that they're appending an additional parameter, if you will, to the URL. That's all happening automatically on Google side. 

The important part is that I seem to have generated this request here. And indeed, that's what happens. When you have HTML that looks like this, this is sort of web developers notation for saying, go ahead and create a form that when it's submitted, it's going to go to this URL. And when the URL has provided values for things like q, don't go just to this URL. Actually, go to question mark and then q=cats. Append the parameter, the HTTP parameter like that. 

And just to be super precise, what's being inferred here-- but I'll be more explicit-- is that the method I want to use is get, instead of something like post, which we'll eventually see. So in short, simply by understanding HTML and using some fairly simple tags, we can now begin to create our own front end user interface with a search engine behind it. 

But this of course, is pretty hideous. So let me actually open up a slightly better version. This is the one I prepared in advance that has some comments. But you'll see that I pretty much recreated it. So this is already available online. And I did happen to preemptively go to https just to keep it simple. 

And now let's open up a next iteration of this. Is version 1 instead of 0. What jumps out at you as slightly different in this example? 

AUDIENCE: [INAUDIBLE]. 

Yeah, there's this text align center. This is a little weird up here. But this is indeed new. And maybe guess what's going to happen. If I go to my browser now and visit search-1.html, it's almost the same thing. But it's a step closer to being a little more pretty. It's still ugly, but prettier in that at least everything's now centered. 

So it turns out that what I'm using is another language altogether called CSS, cascading style sheets. And CSS, frankly, is kind of, in my personal opinion, an atrociously designed language. It is very annoying to remember all the various details. But it is what stylizes the entire worldwide web today. I offended someone. All right. So let's go back here and see how we're actually using this. And it turns out, at least it's actually a pretty simple language. It's just key value pairs, properties and values, properties and values. Indeed, here is one such property and value. 

Simply by using the style attribute on my body tag and giving it a value of a word colon and another word, or a property and a value, I can affect the aesthetics of the web page, not necessarily the structure yet, but the aesthetics of it. And just by Googling around, I realize that CSS, cascading style sheets, supports a property called text-align, whose value can be left, right, or center, for instance. 

So now when I reload this page, what I did get was a centered page, but still pretty ugly. Let's go ahead and open up version 2 of Search. And now notice I've done a little more. Notice that up here inside of the head tag, there can be more than title. In fact, there's a style tag. And this is where it just gets a little messy seeing CSS sometimes. 

Notice that I seem to have something that structurally looks very different. But here is the name of the tag I want to stylized. Here are our old friends curly braces and closed curly brace. And then here is that property and its value. 

If I load this file, search2.html, the end result is identical. But it's a step toward better design. By factoring out this CSS, I've not commingled it with my HTML. And indeed, as we'll see, I could reuse these properties and values. If I wanted to make bunches of parts of my web page centered, I don't have to type style=text-align center all over the place. I can put in one place perhaps, like up at the top. 

But even this isn't the best design. In fact, one of the things you'll learn as you spend more and more time with web programming is that the more you can modularize things and factor things out like .h files let us factor stuff out, like helpers.c let us factor things out a few psets ago. Similarly, might we want to achieve this. 

So notice in version three of search.html I've cleaned up the head of the page and just put in this, a link tag, which contrary to the name, does not give you a hyperlink. It links to another file by way of an href whose value in this case, is search-3.css So I realize we're going quickly. But all I'm doing is kind of moving things around. Let me open search-3.css. There it is, nothing really to it. I just copied and pasted it into a new file, much like we factored stuff out into other files before. And the result-- completely underwhelming-- is going to be exactly the same. But we're moving toward-- no, it's not. Oh, I know why. 

So it seems to be a bug. And it is in some sense. But let me open up my Network tab. Let me reload the page. Ah, why is the CSS not being applied? Well, the CSS file, similarly, has to be world readable, so to speak. And it too is currently forbidden. So let me do a chmod a+r of star dot CSS-- whoops-- we're dot CSS is just the file extension for CSS files. Now let me go back to my browser and reload. OK, a little better. 

Now let me do one last thing. In search-4.html. I have a version that I just thought was way cooler, albeit way more complicated. Let's look at the result first. Close this to give us more room. Change this to search-4, Enter. 

And now a bunch of things are broken. I'm going to go back into my directory here. And now I'm just going to do a chmod of a+r on a file-- because I know it exists-- called logo.gif, which is an image. And now reload. And wow-- so now I'm pretty close, frankly, to like the 1999 version of Google, and frankly, the 2014 version of Google, right? 

So it's now going to their website, ultimately, if I search for cats. And indeed it is. But what did I do differently in this version 4? So we won't dwell too much on it here. You'll see this in problem set seven eventually. But notice I did a few things. 

I introduced a div tag, which is division, similar in spirit to a paragraph tag. But a division is just like, here's a rectangular invisible region of the screen. Let's give it a unique identifier, a footer, just so that we can talk about it in our HTML elsewhere. Here is another div of the page whose ID is going to be content. It's the content of the page. And up here is the header of the page. 

In other words, I've essentially in HTML am mentally viewing this web page as three components, a header up here with this invisible rectangle, the content in the middle, and then the footer down below, even though we don't see those things. Because I want to in my head of page here, or in a .css file, I can use this syntax. 

Header is not a tag. It's an ID so it turns out that by doing #header, I can now apply one or more properties to the header. I can do the same content, the same for content here. 

So for instance, in the footer, notice all of these properties I'm adding. And I know they exist just by reading up on the documentation for CSS. Font size is going to be smaller-- so some relative font size. The weight is going to be bold. Margin-- how many pixels around it-- is 20 pixels. And it's going to be centered. 

But right now, the page looks like this. If I'm not pleased with my copy right there, I could do something like color red. And then I can save this, reload, and now I've stylized the footer. So this is just hinting at the power of what you can do in a web page to change things around. 

And even cooler than this, if you want to poke around with actual websites, you can't permanently change them. But if I open up Chrome's Inspector again and I go not to the left hand side here, which shows Facebook's HTML, but shows on the right hand side all of its CSS, you can either and change things on the fly. So let me go ahead and do this. 

Let me go ahead and control click on this random word here, sign, and click Inspect Element. Chrome very conveniently jumps to the h1 tag that Facebook is using. And notice here Facebook has kind of lazily hard coded font size as a property here. 

So the cool thing though is that if I actually go in here and say, oh, Facebook, I don't like that 64 pixels, we can now change Facebook. Of course, we're only changing it for me personally at the moment. But this is just another tool in our tool kit that's going to allow us to tweak and figure out and also diagnose issues in our own web pages. And we could similarly go over here, which is the same thing. If you really want to get fancy, I mean, now you can really mutate the page and do crazy things. 

So why is this all useful? Well, ultimately, we're going to want to be able to create web pages that are driven by our own back ends, not by just Google and outsourcing the back end there. We actually want the value, for instance, of our search engine's action attribute to go not to someone else, but to something like search.php, where search.php is on our own server, not on someone else's. 

And so to get there, we actually need to introduce a new language. So we've already looked at one new language here, or two really, HTML and CSS. But they really are just structural and aesthetic languages. They're not programming languages per se. And that's about as much formal time as we'll spend on them. Because we'll begin now to transition to PHP. 

So PHP is an actual programming language. It's a scripting language in the sense that it's meant to be lighter weight than something like C. And it's an interpreted language, which means it's not compiled. So in a nutshell, what did it mean when we used a language like c and we had to compile it? What does it mean to compile C source code? AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Say it again? AUDIENCE: [INAUDIBLE]. DAVID J MALAN: Perfect. It turns it into binary. It turns it into zeroes and ones from actual English-like source code. And then we can actually run those zeroes and ones by passing them through the CPU by double clicking an icon or running a command. 

PHP and Python and Ruby and Perl and JavaScript and bunches of other languages are interpreted languages, which is to say you do not compile them. Rather, you feed them as input to a program called an interpreter. And that interpreter, which someone else wrote, reads your source code top to bottom, left to right and just interprets those lines and does what you say. 

So if you encounter a line that says print, it doesn't necessarily convert print to the corresponding zeros and ones. It just has this interpreter like a big if condition that says, if programmer's instruction is print, then do the following. So it interprets it just by kind of reasoning through what you're telling it to do. 

And PHP is one of these languages. And PHP years ago was designed precisely for web programming. And it was initially a very sloppy messy language. And indeed, there's a huge amount of bad PHP code out there. But the language itself has matured over the years, so much so that now it's actually a wonderful next step pedagogically from C because it's so darned familiar to everything you've just seen in the past few weeks. 

The one initial difference we'll see is there's no main function anymore. When you start writing code, it's just going to get executed no matter what, as we'll see in a moment. Meanwhile, here's what a variable looks like in PHP. It's a little different, but only barely. 

In PHP, there's not strong typing. There's week typing, which just means there are data types like strings and numbers and other things. But you don't bother specifying what they are anymore. PHP figures it out for you. The dollar sign is just a decision that the PHP people made years ago such that any variable in PHP just starts with a dollar sign. It's actually kind of useful in that it jumps out at you a little more. 

But after that, this is a condition in PHP. What's different versus C? Trick question-- nothing, which is actually really nice. Boolean expressions in PHP-- the same. Boolean expressions with and versus or, switches, loops, loops, loops-- OK, this one is different. 

So it turns out there's a couple of other features in PHP. One of them is actually this, which is wonderfully convenient. If $numbers is an array that you've declared previously in a program, you have this fancy for each construct that instead of doing all of that annoying I equals 0, I is less than this, [? I++ ?], for each numbers as number, where each of those dollar sign values is just a variable, and the latter you can think of as I. You could call it anything you want. I called it number. This is going to iterate over the array called numbers. And on each iteration, it's going to automatically update for you the dollar sign number variable so that you constantly have access to the variable you want without having to do any square bracket notation or indexing into an array. 

Beyond that, we even have things like arrays, which look almost the same, except it's very common, as we'll see, both in PHP and JavaScript to pre initialize an array using square brackets. C uses curly braces. So it's slightly different, even though we didn't really use that trick much. 

But even more powerfully, PHP has associative arrays, which is a fancy way of saying hash tables. In fact, if you want to declare a hash table in PHP, unlike in C-- how many lines of code did it take to actually implement a hash table in C? Or how many lines of code is it taking to implement a hash table in C? So it's probably a lot, right? It's a few dozen, maybe 100 or 200. It's nontrivial. Or it's about to be, as you'll soon see, nontrivial to implement a hash table [INAUDIBLE] and also a try. But in PHP-- and frankly, I probably shouldn't tell you this until Monday-- in PHP, if you want a table, done. That's a hash table-- so with one line of code. And 

A lot of languages do that. Have fun with pset five. So a lot of languages do this. They give you these abstractions that other people, other programmers, have created for you so that you can stand on their shoulders and start using ideas that are super compelling, like hash tables and trees and tries. But you don't necessarily have to implement those things yourself. 

And so ultimately, what we're going to use PHP for is potentially writing programs of the so-called command line. We could recreate every program we've written this semester thus far, except maybe Breakout which uses SPL, which is specific to C at the moment. But every other problem set, certainly Mario and Caesar and Vigenere and [? Crack ?] and onward, we could re-implement in PHP, and probably a little more easily. 

But what we're ultimately going to use PHP for is web programming. And we're going to introduce next week a mental model, a paradigm called MVC, model view controller, which if you've done programming before in Python or Ruby or elsewhere, you might know of this team with Rails and Django and the like. But if you're new to this too, you'll see that this is actually a very natural extension of the factorization and the sort of design of code that we've been doing in C. We're going to now apply some of those lessons to PHP so that ultimately, we are implementing our own websites. And if you're sort of mesmerized or amazed that we're going to do all of the so quickly, realize that almost every semester, nearly 90% of students CS50, including those who have never programmed before, end up making final projects that are based on web programming. And so you will see that the returns are high in the weeks to come. So we will see you then on Monday. 

SPEAKER 1: And now, Deep Thoughts by Daven Farnham. Hash tables. 

[LAUGHTER] [MUSIC PLAYING] 

DAVID J. MALAN: All right. This is CS50. This is the start of week eight. And you may recall that we left off last time looking at a new language altogether. In fact, one that's fairly lightweight and it's not even a programming language. It's a markup language that lets us actually structure and make web pages. And when you something else in conjunction with this-- or you soon will, if you haven't already. We're going to use Cascading Style Sheets, or CSS, which is another type of language with properties and values that's going to let us do things like change the color and change the position and these kinds of tweaks. But today and onward, we start to focus on more powerful languages, actual programming languages like PHP. 

So PHP has been around for some time. And as you'll see, it was designed primarily early on for actual use in web development and actually generating web pages. So what kinds of features does a language need in order to make web pages dynamically with it? 

In other words, if you want to generate content dynamically-- like Facebook's Newsfeed, which changes constantly, or instant messages that pop up from time to time-- like what's the key piece of functionality you need in a programming language that would let you dynamically print new information to the screen? 

STUDENT: Code. DAVID J. MALAN: Code. OK. We'll take that. A little more precise. I mean, we could do this with C, frankly. It would be a pain in the neck. But-- is this commitment? 

STUDENT: Yeah. Variables, maybe? DAVID J. MALAN: Variables. OK, sure. Variables can certainly help us out. And even something simpler. We used it in the very first program of the very first day when we actually said "hello world." 

STUDENT: Print. 

DAVID J. MALAN: Print, right? Print, or printf in the world of C. So all this time, we've had at our disposal a language-- C, in particular-- and even Scratch for that matter that can generate strings of text. 

Well, if HTML, as we saw last week, is just a whole bunch of strings of text albeit with open brackets and closed brackets and some kind of rhyme and reason behind it, well then we could really start generating web pages either manually by typing them out in gedit or in Microsoft Word, for that matter-- we just need a text editor. 

Or we could write code, to your suggestion earlier, that would let us dynamically generate HTML, and that's what we're going to start doing with PHP and ultimately even with a language called JavaScript, is use one language to generate another. And indeed, this is what Facebook and many, many other sites do to actually dynamically display new information to you. 

So let's begin with this-- a cryptic looking line, but one that's actually pretty powerful. Thus far, we've been using C, which is a compiled language. And just a quick recap-- a compiled language has what characteristic? You obviously need to compile it, but what does that mean? Yeah? 

STUDENT: It needs to be assembled into machine code. 

DAVID J. MALAN: OK. It needs to be assembled into machine code. So you take your source code, which is sort of English-like. You convert that to something lower level, which is ultimately called object code-- 0's and 1's. And it's those 0's and 1's that a CPU, like those made by Intel, actually understand. 

Now, PHP and Python and Ruby and JavaScript and bunches of other languages are not compiled languages but interpreted languages, which means you just type them and then you don't turn them into 0's and 1's. You instead just provide then as input to someone else's program, called an interpreter. And that person's program has been designed to understand what each and every symbol in Python or PHP or Ruby or any number of other languages means. 

And so all we need is something like this. So in fact, I'm going to go over to the appliance here, just into any old window, and we're going to go ahead and open a file called, say, hello. Now previously, I might have saved this even with a file extension, but I'm going to do something even simpler here. I'm going to go ahead and start this file with this cryptic syntax. So "user, bin, env, for environment, php." 

This is simply one line of code that's going to tell my operating system, go find in your local environment whatever that is, wherever PHP is-- the interpreter-- and go ahead and use that interpreter to interpret the following code. Now, this is kind of an ugly feature of PHP. But in this language, any time you write PHP code, you need to have one of these ugly PHP tags demarcating the beginning of your code-- <?php. 

But below here, I can now do something quite simple, like printf hello comma world backslash n close quote, close parenthesis. And then just for good measure, I'm going to go ahead and close my php tag over here so that everything looks nicely pretty printed. 

And as soon as I click Save, gedit is actually smart enough to look at that very first line and realize, oh, you're writing PHP code. Let me syntax highlight it with the colors here so that it stands out a little more. But now I'm going to go down to my terminal window. I'll zoom in. 

This program was called "hello," so I'm going to do dot slash hello, but permission denied. And bash. We actually heard of that thing a couple weeks ago in the context of Shellshock, one of those bugs. 

But permission denied we've seen before, maybe in a different context. Does anyone recall how you might fix something where permission is denied like this? What's the command, at least? 

STUDENT: Chmod. DAVID J. MALAN: Yeah, chmod, for changing the mode of a file. And you'll get all the more used to this next week with a subsequent problem set. But for now, I'm going to change the mode not to be readable, but to give everyone executeability privileges, the ability to run this file. And I'm going to assign that to the file hello. 

If I now do dot slash hello enter, you see, in fact, my program, hello world. And what step did I clearly skip altogether? Compiling. So I just ran this program quite simply. 

And it turns out you can do this with a lot of syntax reminiscent of C. Let me go in to today's code, which I put into my vhost directory here, for real reasons we'll come back to. And I'm going to go into, let's say, conditions 1. 

And you'll see here, first and foremost, a whole bunch of comments. But this is actually a re-creation in PHP of a program we did in week one called conditions 1.c where the purpose in life of this program is apparently to ask the user for an integer and then do some fluffy analysis on it whereby you say if it's positive or negative or equal to zero. And I bring this up only because, except for maybe one little detail, it's indistinguishable so far from C. 

What's the one characteristic here that maybe jumps out at you as a little different? Maybe two things. Yeah? 

STUDENT: Dollar sign n? 

DAVID J. MALAN: Yeah. So dollar sign n is present. And dollar signs, as we'll see, are going to be a fix to the beginning of any variable in PHP. It's both good and bad-- good in that it's sort of obvious what's a variable, bad in that it's yet another thing to type. And there's one other thing we haven't quite seen, at least by this spelling. yeah? 

STUDENT: Readline. 

DAVID J. MALAN: Readline. Readline we didn't see, per se, in C, even though there exists something similar, but we've used getstring, and this is its counterpart. So if I go into this directory, which happens to be, as I'll explain in a bit in my vhost directory and my source A directory, and I go ahead and do dot slash conditions-- whoops-- dot slash conditions 1, you'll see, again, the same issue-- permission denied. 

So let me zoom in and do chmod a plus x on conditions, dot slash conditions. I'd like an integer, please, 50. And we could play this game all day long. It's going to behave exactly as it did in week one. 

OK so not all that different, except not just that slight bit of syntax, but at the top, I again had this line which allowed me to create something that looks like a C program called hello, called conditions 1. But it's not 0's and ones I'm executing directly. It's instead running this interpreter whose name happens to be identical to the language. The program is called PHP, and my code below line one is being passed into it. 

We can do another fairly simple example reminiscent of something we did weeks ago. Again, this is a sort of arbitrary chunk of code that apparently does what when you run it? What's this going to print, presumably? 

So initially on line 16, it's going to say x is now 2, probably. %d is the same as $i for printf. So then it's cubing, dot, dot, dot, in line 17. And then line 18 appears to call a function Cubed. And where is Cubed defined? 

Well, it looks like in line 25, so that's not all that different. I've got some comments above it, but for the most part, it's a fairly straightforward porting or conversion from the C program to the PHP version. But there are now a couple of differences that maybe should jump out. What else is different about how you might write this same program in C? 

STUDENT: [INAUDIBLE]. 

DAVID J. MALAN: There's no prototype up top. So PHP-- and frankly, a lot of modern languages-- are a lot smarter and more helpful than C compilers in that you can put the function up here, you can put a function down here, and the interpreter is going to do you the favor of reading the whole file before it decides that some function doesn't exist. So nice improvements years later. But there's also something else different or absent here. Yeah? 

STUDENT: [INAUDIBLE]. DAVID J. MALAN: We don't have to declare the types of variables, so we'll see before long that there are different types in PHP, but you don't need to specify them, which also is both good and bad. And there's one other thing missing. 

STUDENT: There's no libraries. 

DAVID J. MALAN: There is no libraries. OK, so that's nice. We get a lot more out of the box. So there's actually a lot more things than I thought were different. How about way in back? What's that? Say it once more? 

STUDENT: Pointer. 

DAVID J. MALAN: No pointers. OK, at least in this example, no. That's fair. So there are not pointers in PHP actually in general. There are something called references, but we won't spend too much time there. And what else? 

STUDENT: Main. DAVID J. MALAN: Main. So this was the biggie I was thinking of. Notice there's no main entry point. You simply start writing your code. And this is actually going to be advantageous when we transition momentarily to actually using this same language for web-based programming, for which we don't want to have just one entry point. We might want to have a bunch of URLs, a bunch of different files all taking in user input and producing output. 

But here is the very disheartening example that I promised last time, namely in this folder here, misspellings. So in this file speller, which we won't spend too much time on, there is essentially a porting-- P-O-R-T. It's just the word given when, say, you convert from one language to another manually usually. 

This is a porting of PC version of speller from PSET 5. And I essentially tried to convert it line by line as closely as I can. So if you like this kind of thing, it actually is worth at some point pulling them both up side by side and seeing what's the same and what's different. But they're pretty darn similar. If you remember what speller even looked like, even though you didn't have to change this file, it's pretty similar structurally with just a couple of changes here and there. 

So this is only to say that it's pretty straightforward to convert speller from C to PHP. But in dictionary, there's something even more compelling. Let me go ahead and create my own dictionary.php file. So slightly different in that we'll call it .php instead of .c. Because this is a PHP file, I do-- slightly annoyingly-- have to start the file with a php tag like that. And I'm going to go ahead and define a few functions. Function called check, which is going to take in a word like before. But this argument's going to have a dollar sign because we're, again, using PHP. Another function from dictionary.c was load and it took in the name of a dictionary, so I'll get that function ready to go. 

Another one in dictionary.c was what? Size was one of the nicest ones, at least if you kept some variable around. so size just has to return a variable. And then there was unload. 

So there were these four functions in problem set 5 that you needed to implement with some data structure or structures. So I promised that in PHP, we can declare a hash table, for instance, all that more easily. In fact, if I want a hash table, I'm just going to go like that and there's my hash table. And that's the note, disheartening, that we left off on last time. And you know what, if I wanted a variable for size, well, this one's not all that different from C, but I'm going to go ahead and do that. And notice no data type. And I'll go back later and actually add some comments here. But what about load? 

If dollar sign dictionary is the name of my file and I actually want to load words into this table now, I can actually do something fairly simple. One-- and this is minorly annoying-- in PHP, you have to specify inside of a function if you want to access some global variable that's defined outside. 

But that's not particularly interesting right now. What's more interesting is this for each construct that I mentioned last time. And it turns out that PHP has a function called file whose purpose in life is to open a file and read in all of its lines into an array and hand them back to. 

Which is to say I can do dictionary so that now effectively when I call file, this is going to hand me back an array of words from the file. It's not all that good. It's still going to be a line of words, something linear. But I can go ahead and iterate over each of these words using that syntax we saw briefly last time. And you'll see it more in the upcoming PSET. 

But now I have a loop iterating over each word in the dictionary. And on each iteration, recall I'm calling the current word "word." And all it's going to take to put a word into the dictionary is going to be word guess "true." That's my insert function. That's my load function for my dictionary. Now it's a bit of a cheat because, you know what, there's actually backslash n's at the end of the words that I should probably get rid of, but that's not a problem because PHP has a function called chop which literally chops off one character at the very end. So no problem there. We've gone ahead and actually shortened that to just this. And now I should probably keep track of size, so let's at least do this-- size++. I can do that as before. And then this is probably going to work just fine, so that's return true. Done. PSET 5. 

[LAUGHTER] 

DAVID J. MALAN: OK. We're going to do that again with the next PSET, too. So what about size? Well, this one hopefully is about as you would expect last time, although I have to do this stupid global thing. It's just an artifact from the language's design. 

But check is a little more interesting. So if I passed in dollar sign word, I first want to have access to that global variable table. And now if I want to check if a word is there, I can simply say if it is true that the following is set in the table, then go ahead and return true; else, return false. Done. The other half of PSET 5. 

All right, so again, I'm cutting a few corners. In fairness, I should probably spend a few more seconds on this implementation. And I probably shouldn't mock all the hours you put on the PSET so much. So strtolower is a function. Something similar existentialist in C, at least for characters, but PHP's got a whole string version. 

That's going to force everything to lowercase, which some of you might have done to canonicalize what you were putting in your dictionary. And now you can do this in C, too. This has nothing to do with PHP. 

But any time you have a Boolean condition, like something on line 10 there, which is only going to evaluate to true or false, and your if else clearly is returning true or false, I could simply really make this sexier and just do something like this. So that there's my check function. Right, if the Boolean returns a true or a false, let's just return it straight away. 

And there's a few other tweaks I could make here and there. Load-- unload, by the way, that's done. Nothing to do there. Since all of the memory in PHP and many other languages is actually managed for you. So whereas in C, as you've learned painfully, anything you malloc or calloc or realloc, you have to free yourself. Anything you fopen, you have to fclose, so that resources are ultimately freed and tools like Valgrind don't notice and don't complain, which is a good thing to run on them. 

But surely, there must be some catch, right? Otherwise, we kind of wasted a whole bunch of weeks. So there's any number of reasons why we sort of take this trajectory, but there is a trade-off. Right, this has been thematic. 

So what might a trade-off here moving, from C to PHP? Feels like all win so far other than a bit of ugliness here or there. Yeah. What's that? 

STUDENT: [INAUDIBLE] memory. DAVID J. MALAN: Speed. OK. Well, my speed was pretty fast. Right? But speed of execution of the program? OK, so that's a fair point. 

So as it would happen, I in advance cued up both my try solution, the one I had on the big board was a try-based solution, and I have that in this directory here. So I in a moment, I can go ahead and run this on the King James Bible, hitting Enter. And this is hopefully correct implementation at the end, gives me time in total of 0.38 seconds for that one somewhat arbitrary example. 

And if I now go into this second terminal window here where I first opened gedit, let me go into today's code-- which, again, is in this directory here-- and let me go ahead and run speller. So just to be clear, this is the PHP version. I'm just showing the top of it here. 

So if I do speller of tilde CS50 PSET 5 texts, King James, enter. It's still faster than writing it in C, but the total time is, notice, 0.93, whereas my C-based implementation was 0.38. So it's a non-trivial difference. 

And this is just on one file. If you were to run the two programs versus the big board and have a whole bunch of inputs tested, this would surely add up. And if we had even larger data sets, this, too, would add up all the more. So yes, paying some price of speed is indeed the case. What else? Yeah? 

STUDENT: Amount of RAM use. 

DAVID J. MALAN: Amount of RAM use. So I didn't give one second thought when writing this PHP version as to how much memory I was using. I'm completely deferring that to PHP itself and whoever wrote that program. And that might be OK, but if I actually really care about squeezing as much performance out of my program or out of my website or out of whatever tool I'm building, maybe PHP, indeed, is not the right language. 

And in fact, that is why, for instance, many web servers-- the actual programs that serve up web content-- are not written in PHP or in Python or Ruby. They are written, like you'll now do with PSEt 6, in C so that you can squeeze every bit of performance out of it and really exercise fine-grain control over what's going on underneath the hood and not just take it for granted some higher level data structure. 

Consider, after all, whoever in PHP implemented that notion of a hash table-- it's actually more properly called an associative array-- does he or she have any idea what kind of inputs you are going to be putting into the structure? So obviously not, right? It's a generic tool in the toolkit that's provided to anyone who wants to use it, and so surely it can't be optimized ultimately for exactly what you want to do. 

So trade-offs-- development time might differ, performance might differ, complexity or memory usage might differ. And so what you'll find increasingly is that there's going to be different tools for the trade. And in fact for a super majority of people's final projects in this class, believe it or not, C is not going to be the right language to use. 

And in fact, one of the takeaways ultimately for any class like this is to get you thinking about, well, what should you pull off the shelf when you want to solve some problem. And indeed, we'll cross this bridge even more as we look at more languages even beyond today. 

So let's transition now to perhaps a more familiar context for using a language like PHP. It's somewhat common to use at the command line, writing scripts like I did, but it's much, much more common. And it was intended to be used in the form of files that typically end in .php-- but that's not a prerequisite-- that themselves generate web content. 

So let me go ahead and open a few examples I prepared in advance. And these are actually sort of true stories in that one of the first things I ever did myself after finishing CS50 and maybe, I think, CS51 years ago is my roommate and I were helping to run the freshman intramural sports program, which, at the time, had freshman registering for various sports by filling out a piece of paper, as it was called, walking across the yard to Wigglesworth, and dropping it in some proctor's door drop. And then he or she would go through them and then actually email us manually that we were registered for some sport. 

So clearly, an opportunity for improvement. These days, you might turn to just Google Forms, but back in the day, we had to actually reach for-- this wasn't even that long ago-- reach for a programming language that wasn't PHP. At the time, it was something called Perl, which has gone out of vogue since. But the idea is the same. 

And I essentially sat down to try to port goes Perl versions to PHP, but in full disclaimer, did not give any thought to the aesthetics just yet. So here is a web page. This is a file. If I zoom in, its apparently called froshim0.php just because it's our first example in this series. And notice that it has what appears to be a very ugly HTML form, but a form is interesting because it allows me to provide user input to the browser. 

Now last time when we had a form, to whom did we submit our query parameter, the queue parameter as it was called? So to Google, right? We totally punted on the idea of doing anything with that input. 

But today, we start producing output. And the behavior I'm going to see here initially is pretty trivial. David, I'll check off gender here, say Matthews here. I won't be captain. I'm going to click Register. And notice that the URL has changed to register-0.php, and then there's this ugly text here. I gave no thought to the formatting of this. 

But what is interesting is that three values were apparently passed in. This is PHP's sort of equivalent to printf-- we'll see what it's really called in a bit-- that just prints out what you passed into it. So this suggests that that form had at least three fields to it, and you saw me type them in. One was my name, one was gender, one was dormitory. And captain didn't even get sent to the server because I didn't check it. 

So this is to say apparently, when you submit things on the web, not only does the URL sometimes change-- sometimes it doesn't. In fact, the file name changed, but what is absent from the URL that we did see last time with Google. Yeah? 

STUDENT: No query string 

DAVID J. MALAN: There's no query string. There's no question mark something. There's no question mark q equals cats, as we did last time. And there's certainly no question mark name equals David or dorm equals Matthews, so where is that all going? 

Well, let me go back to gedit here and open up the first of those files in my vhost, local host, public directory here and go into froshim0. So it turns out that almost all of this page is just HTML. And this might be unfamiliar to you, but it soon will be more so with PSET 6 and PSET 7 and PSET 8. But this is just an HTML page. 

And the interesting stuff seems to be over here. A form tag whose action attribute has a value of register 0. That's why when I submit this, it goes to that file. But method is different today-- post. So it turns out there's at least two methods on the web used to send information from browser to server. Get puts it in the URL. Post puts it elsewhere. And when and why might you actually want a website to use post then instead of get, just intuitively? Any website. What kind of data should be passed just by inference now via post as opposed to get, if we've seen the two differences? STUDENT: [INAUDIBLE] secure. DAVID J. MALAN: If you want something to be secure. So you might type a password into a website, a credit card into a website would kind of these suboptimal if the browser put that value inside of the URL. Why? You see it, which doesn't seem to be such a big deal, but odds are you pretty frequently walk away from your computer or use computer labs, and so someone else or even a roommate could easily walk up and see that private information. When you send an email via the web, you probably don't want that data ending up in the URL as well. And so there's any number of reasons why we might want to put it here. And photos-- right, I can't even quite imagine how you would take a graphic, like a JPEG, and put it into a URL. You could do it. There's ways of encoding it, but it's just not straightforward like that. 

So register 0 is actually very underwhelming. All it says literally is this. It prints out inside of some HTML tags the following. I've got a PHP tag here nested inside of a pre tag. "Pre" just means pre-formatted text, mono-spaced, like a typewriter. 

Printr is a print recursive function. And then there's this interesting thing here. And we'll come back to this because there's others, but dollar sign underscore post appears to be a variable in PHP in which anything you send from browser to server gets stored for you. And we'll see how to get at that information before long. 

But first, let's go back to a slightly different example. Going into register-- or rather, froshims1.php, which looks a little different. I took a little more effort with formatting, even though it's still pretty ugly. But I'm going to go ahead and type in "David" now. Male. We'll check "captain" this time. We'll do Matthews. And register. 

And this time it says, hm, not really. All right, so what's register 1? Let me go into open register 1 and-- hm. All right, so this is interesting, and this is a stepping stone now toward more interesting programs. 

Notice the top of this file has a PHP tag as well as some comments. And these are, for now, a distraction so let's just get rid of those comments just like they're in C. And I claim with this chunk of code with a comment that this code is validating the submission. 

Well, it turns out that variables like dollar sign underscore post are called super globals. They're like these special global variables that are just omni-presently available within your program. And you can use square bracket notation to index into them not using numbers like 0, 1, 2, 3, but actual words. 

So you can think of dollar sign underscore post as sort of a hash table that you could pass a key into, a lookup word in-between the square brackets, and it's going to give you back the value that the user actually provided. PHP has a function called empty that just says yes or no, this variable is empty or not. We have these double bars, which just means or, like in C. 

So in effect, this line 4 is just saying if the user didn't give a name or didn't give a gender or didn't give a dorm, go ahead and redirect him or her via this line here. So this is a little cryptic, but this just means literally go back to this location, so it punts the user back to wherever he or she came from. But it's a little inelegant in that I hard coded it. 

But what if this if condition does not evaluate to true? What if the user did give me his or her name and dorm and gender? That if condition's not going to evaluate to true, so I don't hit the exit in line 7. So what happens? And this is what's interesting about PHP. 

You can drop into and out of PHP mode, so to speak. If you want some code to execute, you can open and close a PHP tag and put code there like I've done here. As soon as you close the PHP tag, the server is just going to spit out whatever you put there. And indeed, this was part of the original design of PHP, for better for worse, was this commingling of code and markup language. And we'll see that this very quickly devolves into a mess. And so we'll do better than this ultimately, but just notice the ease with which I'm actually able to execute some logic. 

But still a bit underwhelming. Let's open up version two of Frosh IMs, which apparently submits to register2.php. So this file's actually going to look almost the same. I'm going to go to Frosh IMs 2 . But in Frosh IMs 2, let's see what happens. 

David, click the radio button, as it's called; Matthews, no captain. Register. You are registered. Not really. Oh wait, we just did that example, didn't we? All right, stand by. We'll do the three. Clearly something's about to happen with Gmail. We'll get there. 

So Frosh IMs 3 looks like this. No different. But when I do David, male, Matthews, and register, this third and final version claims, quite simply, you are registered really. That's sort of immaterial. But I claim with this third and final version I have now recreated exactly what my roommate and I built for the Frosh IMs program years ago. And it was simple. There was no database, no Excel spreadsheet. But more importantly, there was no more paper because what we did with this program was to actually email the proctor, who was previously receiving these things via forms. 

And apparently we've programmed this in such a way that when someone registers, John Harvard's account emails the proctor-- or himself in this case, John Harvard-- with the following text-- "This person just registered." Name is David, captain is blank; gender, male; and dorm, Matthews. 

So what happened there? Well, the file in question here is apparently register3.php. And if I open this, you'll see both the power of code like this and also, frankly, the insecurity of a system like email. I have just effectively pretended to be John Harvard in the following way. 

I have the open php tag up top, which just says here comes some PHP code. Down here, turns out there are libraries in PHP. You just don't need to include header files as much. You get more with the kitchen sink, so to speak. 

But this time in line 4, I do want to special library called PHP mailer, which is something you can install for free in many systems. Down here I'm validating the submission just by checking did the user give me a name, a gender, and a dorm. And if so, go ahead and instantiate a mailer. 

You can think of this as being a line of code that just allocates. It's like malloc, but it's a little sexier in that you mention not just malloc and some generic number. You say give me one of these, give me a new one of these. 

And if you've programmed in Java or C++ or other languages, you might have seen this. But the short of it, if unfamiliar, this line puts into dollar sign mail a special struct called an object that has built-in email functionality. And in fact, notice and similar syntax. 

This is not a pointer, per se. PHP just uses the same syntax. This line is saying use SMTP-- Simple Mail Transfer Protocol, which is just the protocol used to send mail. This is specifying use Harvard's SMTP server, which is somewhere here on campus. 

This is saying what TCP port number to talk to, and I just figured that out by googling or by asking the help desk. And then because Harvard uses some system security on the mail server-- at least to encrypt traffic between you and it, even though anyone can send to it-- I'm going to turn on the TLS protocol for keeping this secure. 

But this is where things get a little scary. I can just arbitrarily say that I am jharvard, and I can just arbitrarily email myself here. And then I can specify a subject with this line here. 

And this just looks ugly, but it's just a bunch of concatenation. Turns out PHP has a super useful symbol, like some languages, the dot operator, which just literally concatenates string after string after string, and you don't have to malloc or figure out the total length of the string. You just do it. And indeed, because I'm concatenating in all of these things with these dots, that's why the email I sent looked as it did. 

And then lastly here, I'm sending mail. So if this is false, I'm just going to die, which is a function that just prints to the screen some error message. But it is, in fact, calling the send function. Otherwise, if all of this fails, it redirects me back here. 

And why did I see that I'm registered really? Well, it happened right here. So I bring this up for a couple of reasons. 

One, this is exactly how if you build some website for a final project or for the real world, this is how you send email reminders to your customers or your subscribers. This is how you send password reminders. This is how you send people messages that they have a new Facebook message pending or something like that. 

But it also speaks to the fact that this could have been very well from Davin or anyone else. And I say this kind of with a smile because I'm quite sure what's going through several of your minds at this point. But this is one of those do as I say, not as I do kind of things, because it is trivial to forge emails like this. But as you may have seen or read in the Crimson, of late it's also pretty trivial for people to trace them back to some origin. And ask me some time, perhaps at CS50 lunch, how I first got acquainted very closely almost to the ed board many years ago when I discovered how the internet worked. So in any case-- slightly after the ed board did. 

So in any case, there is a whole bunch of super globals, as they're called here, one of which we saw-- dollar sign underscore post. There's a counterpart called get, which is where stuff from a URL ends up going. And there's a whole bunch of others, too-- session and server and cookie. We'll come back to cookie some other time, but session is kind of cool because right now-- up until now-- everything we've done with a web browser is sort of stateless, so to speak. I can click around, access files on the server, something happens on the screen, but then the connection closes. The Internet Explorer or the Firefox icon stops spinning and you just see what that web page contains. 

So HTTP is stateless in that once it makes a connection, gets some data, that's it. No more connection, unlike Skype, unlike Facetime, unlike GChat, which maintains a constant connection to the server. The web is fundamentally disconnected, though we'll see before long how we can simulate things like Facebook chat and GChat, which maintain the illusion-- or actually do maintain a constant connection using more modern technology. 

But if I go to, say, counter.php, this is another simple example, as we'll see, that currently thinks I visited the site zero time. But if I simply reload the page, it somehow knows I was here before. If I reload again, it knows I was here before. And again and again and again and again. 

So there's some plus-plussing going on, but notice the little thing spins ever so briefly up top and then disconnects, so it's not like I have a constant connection to my appliance. Well, if I go into counter.php, notice how simple it is. I first call this special function that we'll soon start taking for granted called session start. Start a session. 

And a session henceforth is just going to be a bucket, like a shopping cart in which you can put values and kind of trust as a programmer that they're going to be here when that user comes back-- a second later, an hour later, even a year later, so long as he or she doesn't clear their cookies, as we'll eventually see. And now I just have an if condition here. So if the following key, called counter, is set inside of this super global-- this hash table, if you will-- called session, then go ahead and grab the value from the session-- think of this as a shopping cart-- and store it in a temporary variable called counter. 

Otherwise, if that value counter was not set in the so-called shopping cart, just initialize it to 0. Lastly, down here, go and put back into the shopping carts or the session the value of counter +1. So it turns out that this special container here-- which, again, is one of these associated arrays, an array that you can index into words instead of numbers-- persists even after the user goes away. Again, I'll go back to the page now. It's been a minute or so. But it remembers that I've been here 19 times before. This is my 20th visit. 

And so this is going to be key to implementing any website that remembers that you're logged in, that you put something literal in your shopping cart to buy or that you have some number of messages pending. Anytime you want to remember information, we'll see that PHP, like several other languages, provides us with this illusion of state even though, as you'll see in PSET 6, as you're making HTTP requests from client to server, that's it. Once you get back that response, there's nothing more coming back from the server by default. But we'll see how to work around that. 

Well now, let's try to clean this up a little bit. We've seen a few different examples there. Oh, and as an aside, for those familiar or unfamiliar, the reason that the Frosh IMs example went from looking really ugly to slightly-- well, still ugly-- to slightly less ugly though still ugly is because if we look at the source code here, it turns out that I have this at the very top of the file. 

Turns out that bootstrap is one of many freely available libraries out there that exist not for programming languages always, but for CSS or for JavaScript or HTML or any number of languages. 

And these folks here-- originally came out of Twitter-- just have a whole bunch of styles. It's a massive file here that someone wrote, or someone's wrote, over time that specifies colors and formatting and whatnot so that I can kind of borrow their syntax and not have to figure out how to lay out my form. This is also minified so that a computer can understand it but not necessarily a human. So that's just why the stylization there changed. 

But let's now do better in terms of design, because if we stay down this road too long, our code's going to get messy and messier. So let's focus on these examples here. The last for today. 

So here is a super simple version 1.0 of CS50's website. It only has links to lectures and syllabus, and it's using that unordered list tag-- the UL tag that we used last time. And if in fact, if I open up View Page Source, you'll see that this is really, really simple HTML. And in fact, even though this is a PHP file underneath the hood, it's still just spitting out only HTML for now. 

So if I click on Lectures, we see this happen. And if I click on week zero, we see this. And if I click on Wednesday, we see this. And this apparently was the PDF of the slides from that day. All I've done is link with an anchor tag to this URL here. 

So this is only to say this is a pretty simple version of CS50's website. Let's see how it's implemented. If I go into the mvc0 directory, we'll see a few files. One is a README, so if some of this is too fast, you can just poke around more leisurely later. And notice in here is an index.php file. It turns out that if you yourself, the human, don't specify a final name in a URL, the web server usually infers some default name for you. An index dot something is generally the default. 

So that's why a moment ago when I visited this URL here, no file name, no file extension, no period in the URL. It just knew somehow magically to look for index.php. It's just a convention. Could be called anything. 

So if I now go into index.php, you'll see that, indeed-- let's get rid of the comments here because there's really nothing interesting to it-- this is just hard coded HTML. So that's consistent, though, with my claim that you can commingle HTML and PHP. There's no actual programming logic in here. 

And the other files are pretty much just as uninteresting. It's just hard-coded week one here to week one m and week one w, for Monday and Wednesday. And then if I open up week zero, notice it's almost identical. 

And that's kind of a key takeaway. Notice just how redundant this is. These files barely change, and yet I pulled one of these copy/paste jobs where I took one file-- presumably in week zero-- copied it when week one came around, and tweaked a few values. We should probably be able to do better than this. 

So let's go back up to mvc and go into version one. And notice I've got a few files, because what was common to all of those files just a moment ago-- if I go back to version 0, let's go back into index, and just postulate-- once I get rid of the comments-- what part of this page is presumably in every one of my files? Just call it out. Which lines are duplicated probably across all of these pages? Yeah? 

STUDENT: [INAUDIBLE]. 

DAVID J. MALAN: 1 through 9. Yeah, absolutely. 1 through 9, except maybe 8 changes a little bit because CS50 becomes lectures or week zero or something. But almost identical. So all this stuff is just kind of copied and pasted. And there's a couple other lines I can think of that are probably identical across all the files. 

STUDENT: 12 and 13. DAVID J. MALAN: Yeah. Sure, 12, 13, and 14 probably, just because the interesting stuff is happening on lines 11 and 10, so it would seem. So let's look at version 1, which tries to improve on this. In version 1 of this mvc example-- we'll explain what mvc means in a moment-- if I go into index, it kind of looks a little confusing now. It's not quite as simple as before. 

But once you start to read it carefully, it's pretty straightforward what it's doing. Apparently line 1 and line 8 have replaced all of the stuff you just identified-- though just for good measure, I left the ULs there just in case some days didn't have a list of things. And so require is kind of like pound include in C. It copies and pastes the contents effectively right here into this file. 

So in header.php, as you might infer from its name, is going to be the header of the page. It's kind of orphaned here. It only has the top to it, but there's no more content below. 

And if I look at footer meanwhile, which was the other file mentioned-- this one's even less interesting, but again, it's common to everything. So this is the footer. This is the header. This is the file that's changing, so why not try to factor out the commonality with these two lines here? 

But we can clean this up a little further. I'm going to go ahead and open up version two where we'll see that there's a new file, helpers.php. We'll see what that is in a moment. Let's go to index, as the entry point as before. 

And now notice I'm requiring helpers.php, not header or footer. But helpers is kind of like helpers.c and helpers.h from PSET 2 or PSET 3 long ago when you actually did search and find for that PSET, and you had all of your code for sorting and searching in a separate file. That's what's going on here. 

And now line 3 looks a little different. And it's just one line. To make this even more clear, I could just do this to be stylistically consistent with everything else we've done. But that's not really changing the functionality. It's just one line of real code. 

Apparently, there's a function somewhere called render header, and this is where things get pretty powerful. Notice that inside of its parentheses is what other piece of syntax? It's probably a little hard to say, but notice there's-- I'll put some white space. There's square brackets. 

And square brackets we saw a bit ago in the context of associative arrays, which are, again, like hash tables. And if you think now to C, the order of arguments into a function has to always be the same. You have to remember what the order is-- x, y, z or z, y, x-- and you have to always provide them in the same order or look them up if you've forgotten. 

But this seems to be a clever way of passing an arbitrary key value pairs whereby title is the name of an argument in this case and CS50 is its value. And the fact that I have these square brackets here means that I could also pass in something like a week is 1 or 0 or 2 or 3. So we've parameterized this function in such a way that it can take multiple inputs, but for now it's just the one. 

If I now go into helpers.php, notice what it's doing. This is a little bit of new functionality, but for now just take on faith that this is the syntax with which you define a function in PHP. You literally say function. You don't specify a return type, and that's consistent with the variable detail earlier where you don't really strongly type. 

This just specifies that, by default, this takes an associative array as an argument. And you know what? If the user doesn't pass one in, assume a default value. 

This is a feature that C doesn't have for us, which is nice, because now data, even if you don't give it anything, is going to be an array but an empty one. And as an aside, extract just does something funky where it takes all of the keys from this associative array, all of the things you could put in square brackets, and creates variables out of them so that we can ultimately have access to them in footet.php and header.php. That's a little abstract, so let me point this out. 

In index.php, notice that I'm passing in a key value pair of title with a value of CS50. If I now look at helpers.php, notice that RenderHeader is extracting that data that I'm passing in, and then requiring header.php. What I've done is sort of a poor man's implementation now of the following. 

If I open up header.php, notice that I've no longer hard coded the word CS50 in this header file. I've put this admittedly atrociously named function, HTML special chars, in there. But notice what I've done. I've got open HTML. I then have open head and open title. 

And then inside of the title's open and close tags, I have a bit of PHP code. And this is a nice but of syntax, which just means echo out. It literally means this-- echo the following-- but this is sexier to write. Echo out the title that's been passed in. 

But what do you think HTML special char is all about, especially if you have some prior HTML experience? What characters might be dangerous to pass in to a page where you're dynamically generating the web page with code like this? Let me go to this file, version two, and see if I can't induce this. 

Version two is this. And notice everything is fine, working well. But suppose I go into index.php and I specified that the title of my page is not CS50. It is open bracket script alert hello world, close single quote, close parenthesis, semicolon, open bracket, slash script. 

Script, as we'll eventually see, is a tag that you can use to use of another programming language called JavaScript inside of a web page. And now notice the logic here. Here is a key called title. Here is it's crazy long value now. 

But if I go to the helpers page- or rather, the header page, I'm calling this function on that title first. So if I now reload this page, I see this, which looks ridiculous, but it's safe. It just looks stupid. 

But suppose instead I had forgotten this. And mark my words, a nonzero number of you will forget to do this and you'll get some industrious student or friend coming up to you at the CS50 fair or anonymously at night poking around on your website and essentially injecting code unbeknownst to you into your site somehow. 

Because if I simply spit out title here and title there-- well, if title literally looks like this and PHP as a language that can spit out other languages text, this is literally going to replace this tag with, of course, what I put elsewhere. 

So if I now go here and reload after undoing those safety mechanisms, now I have hello world here. Now that's not all that big of a deal, but you could do something a little more malicious here, like there's other tags-- as we'll see once we spend more time in JavaScript-- like location dot href gets, quote, unquote, HTTP business.com, but the opposite of that from the other day. And now you can induce a web page to actually go immediately to this web page here. 

And actually, I don't want to even go to business.com because I don't want to know what that is. But this, too, will trigger code to be injected into this page. So this is only to say that even though we're introducing super early on some of these more complex structures, it's all toward an end of making sure that your code is not exploitable. 

So now a third version here. It's getting a little fancier. I didn't really like-- the anal side of me was getting a little annoyed by the fact that I had a function called RenderHeader and RenderFooter that were almost identical. So it occurred to me, why don't I parameterize these functions into just one called render, have it take a second argument like the name of the template, the final to render-- either header or footer? And then optionally, if I want to pass in some key value pairs like I do for the title for the header but not for the footer, I could do that. 

And so now if I go into helpers.php, it's a little more complex. And I'll wave my hands at the details, but it's just one function. So that's a step toward a better design. 

We can take this one step further. If I go into my fourth version of this, notice now that I'm doing something even more kind of cryptic. And I know this is a lot to absorb at once, but we're just kind of cleaning things up. Now I'm putting my helpers file into a folder called includes-- just an arbitrary name where I want to put stuff that I want to include-- and then the rest of this is the same. 

But if I look now in gedit, notice that I've gotten rid of all of those other files and I've moved them, for instance, into here. And then in templates, I have this here, too. And so this is all now toward a step of using a much better design pattern. And we're very quickly going to move away from PHP's default functionality, which we started here with, where you just commingle PHP, and your HTML, and your CSS, and you just spit it out and you go about your way. It's not going to be very maintainable. Just like in C, we started using multiple files and multiple functions and factoring things that out. We'll do the same here. And in fact, in the fifth and final version here, I did one other thing. You can even use dot dot, which, again, is just the parent directory. To be even more security conscious, because if I look at the listening here for fifth and final version, notice that I have one directory here called public, and then on the same level, so to speak, I've got includes and templates and then that text file readme. 

And the reason I've structured it like this-- and so many web hosts, especially those $5 a month ones or $10 month ones, if you've ever had one of these services-- what so many of them do is they just expect you to dump all of your files into one directory, like we did already with this very first example. 

But as soon as you start building more sophisticated sites that just store data you care about and files you care about, actually organizing things correctly and with more security consciousness in mind can we start to defend against all of the friends that you have either in or outside of this class who, as soon as you start making programs yourself on the web, are going to start picking on you and on them. 

And so we'll look ultimately at this design. This is just a picture that depicts the following. We're going to put all of our programming logic in one or more files, and we're going to just start calling those controllers. It's where the brains of our websites actually are. Then we're going to have views, and views are as simple as just separate files-- called templates, often. They just have the aesthetics of my page, what I want the page to look like-- the colors and the layout and the positions of all of the variables. 

And then more interesting that we'll eventually get to is the model, which is going to be just the word we slap on other technologies that we bring into the picture, like actual databases, so that when you want to save information, you don't just send an email to your proctor or to yourself, you actually store it in a database using another language known as SQL. And so we'll leave here today and pick up with this on Wednesday and introduce databases then. 

[MUSIC PLAYING] [MUSIC PLAYING] 

DAVID J. MALAN: All right. This is CS50. This is the start of week eight. And you may recall that we left off last time looking at a new language altogether. In fact, one that's fairly lightweight and it's not even a programming language. It's a markup language that lets us actually structure and make web pages. And when you something else in conjunction with this-- or you soon will, if you haven't already. We're going to use Cascading Style Sheets, or CSS, which is another type of language with properties and values that's going to let us do things like change the color and change the position and these kinds of tweaks. But today and onward, we start to focus on more powerful languages, actual programming languages like PHP. 

So PHP has been around for some time. And as you'll see, it was designed primarily early on for actual use in web development and actually generating web pages. So what kinds of features does a language need in order to make web pages dynamically with it? 

In other words, if you want to generate content dynamically-- like Facebook's Newsfeed, which changes constantly, or instant messages that pop up from time to time-- like what's the key piece of functionality you need in a programming language that would let you dynamically print new information to the screen? 

STUDENT: Code. DAVID J. MALAN: Code. OK. We'll take that. A little more precise. I mean, we could do this with C, frankly. It would be a pain in the neck. But-- is this commitment? 

STUDENT: Yeah. Variables, maybe? DAVID J. MALAN: Variables. OK, sure. Variables can certainly help us out. And even something simpler. We used it in the very first program of the very first day when we actually said "hello world." 

STUDENT: Print. 

DAVID J. MALAN: Print, right? Print, or printf in the world of C. So all this time, we've had at our disposal a language-- C, in particular-- and even Scratch for that matter that can generate strings of text. 

Well, if HTML, as we saw last week, is just a whole bunch of strings of text albeit with open brackets and closed brackets and some kind of rhyme and reason behind it, well then we could really start generating web pages either manually by typing them out in gedit or in Microsoft Word, for that matter-- we just need a text editor. 

Or we could write code, to your suggestion earlier, that would let us dynamically generate HTML, and that's what we're going to start doing with PHP and ultimately even with a language called JavaScript, is use one language to generate another. And indeed, this is what Facebook and many, many other sites do to actually dynamically display new information to you. 

So let's begin with this-- a cryptic looking line, but one that's actually pretty powerful. Thus far, we've been using C, which is a compiled language. And just a quick recap-- a compiled language has what characteristic? You obviously need to compile it, but what does that mean? Yeah? 

STUDENT: It needs to be assembled into machine code. 

DAVID J. MALAN: OK. It needs to be assembled into machine code. So you take your source code, which is sort of English-like. You convert that to something lower level, which is ultimately called object code-- 0's and 1's. And it's those 0's and 1's that a CPU, like those made by Intel, actually understand. 

Now, PHP and Python and Ruby and JavaScript and bunches of other languages are not compiled languages but interpreted languages, which means you just type them and then you don't turn them into 0's and 1's. You instead just provide then as input to someone else's program, called an interpreter. And that person's program has been designed to understand what each and every symbol in Python or PHP or Ruby or any number of other languages means. 

And so all we need is something like this. So in fact, I'm going to go over to the appliance here, just into any old window, and we're going to go ahead and open a file called, say, hello. Now previously, I might have saved this even with a file extension, but I'm going to do something even simpler here. I'm going to go ahead and start this file with this cryptic syntax. So "user, bin, env, for environment, php." 

This is simply one line of code that's going to tell my operating system, go find in your local environment whatever that is, wherever PHP is-- the interpreter-- and go ahead and use that interpreter to interpret the following code. Now, this is kind of an ugly feature of PHP. But in this language, any time you write PHP code, you need to have one of these ugly PHP tags demarcating the beginning of your code-- <?php. 

But below here, I can now do something quite simple, like printf hello comma world backslash n close quote, close parenthesis. And then just for good measure, I'm going to go ahead and close my php tag over here so that everything looks nicely pretty printed. 

And as soon as I click Save, gedit is actually smart enough to look at that very first line and realize, oh, you're writing PHP code. Let me syntax highlight it with the colors here so that it stands out a little more. But now I'm going to go down to my terminal window. I'll zoom in. 

This program was called "hello," so I'm going to do dot slash hello, but permission denied. And bash. We actually heard of that thing a couple weeks ago in the context of Shellshock, one of those bugs. 

But permission denied we've seen before, maybe in a different context. Does anyone recall how you might fix something where permission is denied like this? What's the command, at least? 

STUDENT: Chmod. DAVID J. MALAN: Yeah, chmod, for changing the mode of a file. And you'll get all the more used to this next week with a subsequent problem set. But for now, I'm going to change the mode not to be readable, but to give everyone executeability privileges, the ability to run this file. And I'm going to assign that to the file hello. 

If I now do dot slash hello enter, you see, in fact, my program, hello world. And what step did I clearly skip altogether? Compiling. So I just ran this program quite simply. 

And it turns out you can do this with a lot of syntax reminiscent of C. Let me go in to today's code, which I put into my vhost directory here, for real reasons we'll come back to. And I'm going to go into, let's say, conditions 1. 

And you'll see here, first and foremost, a whole bunch of comments. But this is actually a re-creation in PHP of a program we did in week one called conditions 1.c where the purpose in life of this program is apparently to ask the user for an integer and then do some fluffy analysis on it whereby you say if it's positive or negative or equal to zero. And I bring this up only because, except for maybe one little detail, it's indistinguishable so far from C. 

What's the one characteristic here that maybe jumps out at you as a little different? Maybe two things. Yeah? 

STUDENT: Dollar sign n? 

DAVID J. MALAN: Yeah. So dollar sign n is present. And dollar signs, as we'll see, are going to be a fix to the beginning of any variable in PHP. It's both good and bad-- good in that it's sort of obvious what's a variable, bad in that it's yet another thing to type. And there's one other thing we haven't quite seen, at least by this spelling. yeah? 

STUDENT: Readline. 

DAVID J. MALAN: Readline. Readline we didn't see, per se, in C, even though there exists something similar, but we've used getstring, and this is its counterpart. So if I go into this directory, which happens to be, as I'll explain in a bit in my vhost directory and my source A directory, and I go ahead and do dot slash conditions-- whoops-- dot slash conditions 1, you'll see, again, the same issue-- permission denied. 

So let me zoom in and do chmod a plus x on conditions, dot slash conditions. I'd like an integer, please, 50. And we could play this game all day long. It's going to behave exactly as it did in week one. 

OK so not all that different, except not just that slight bit of syntax, but at the top, I again had this line which allowed me to create something that looks like a C program called hello, called conditions 1. But it's not 0's and ones I'm executing directly. It's instead running this interpreter whose name happens to be identical to the language. The program is called PHP, and my code below line one is being passed into it. 

We can do another fairly simple example reminiscent of something we did weeks ago. Again, this is a sort of arbitrary chunk of code that apparently does what when you run it? What's this going to print, presumably? 

So initially on line 16, it's going to say x is now 2, probably. %d is the same as $i for printf. So then it's cubing, dot, dot, dot, in line 17. And then line 18 appears to call a function Cubed. And where is Cubed defined? 

Well, it looks like in line 25, so that's not all that different. I've got some comments above it, but for the most part, it's a fairly straightforward porting or conversion from the C program to the PHP version. But there are now a couple of differences that maybe should jump out. What else is different about how you might write this same program in C? 

STUDENT: [INAUDIBLE]. 

DAVID J. MALAN: There's no prototype up top. So PHP-- and frankly, a lot of modern languages-- are a lot smarter and more helpful than C compilers in that you can put the function up here, you can put a function down here, and the interpreter is going to do you the favor of reading the whole file before it decides that some function doesn't exist. So nice improvements years later. But there's also something else different or absent here. Yeah? 

STUDENT: [INAUDIBLE]. DAVID J. MALAN: We don't have to declare the types of variables, so we'll see before long that there are different types in PHP, but you don't need to specify them, which also is both good and bad. And there's one other thing missing. 

STUDENT: There's no libraries. 

DAVID J. MALAN: There is no libraries. OK, so that's nice. We get a lot more out of the box. So there's actually a lot more things than I thought were different. How about way in back? What's that? Say it once more? 

STUDENT: Pointer. 

DAVID J. MALAN: No pointers. OK, at least in this example, no. That's fair. So there are not pointers in PHP actually in general. There are something called references, but we won't spend too much time there. And what else? 

STUDENT: Main. DAVID J. MALAN: Main. So this was the biggie I was thinking of. Notice there's no main entry point. You simply start writing your code. And this is actually going to be advantageous when we transition momentarily to actually using this same language for web-based programming, for which we don't want to have just one entry point. We might want to have a bunch of URLs, a bunch of different files all taking in user input and producing output. 

But here is the very disheartening example that I promised last time, namely in this folder here, misspellings. So in this file speller, which we won't spend too much time on, there is essentially a porting-- P-O-R-T. It's just the word given when, say, you convert from one language to another manually usually. 

This is a porting of PC version of speller from PSET 5. And I essentially tried to convert it line by line as closely as I can. So if you like this kind of thing, it actually is worth at some point pulling them both up side by side and seeing what's the same and what's different. But they're pretty darn similar. If you remember what speller even looked like, even though you didn't have to change this file, it's pretty similar structurally with just a couple of changes here and there. 

So this is only to say that it's pretty straightforward to convert speller from C to PHP. But in dictionary, there's something even more compelling. Let me go ahead and create my own dictionary.php file. So slightly different in that we'll call it .php instead of .c. Because this is a PHP file, I do-- slightly annoyingly-- have to start the file with a php tag like that. And I'm going to go ahead and define a few functions. Function called check, which is going to take in a word like before. But this argument's going to have a dollar sign because we're, again, using PHP. Another function from dictionary.c was load and it took in the name of a dictionary, so I'll get that function ready to go. 

Another one in dictionary.c was what? Size was one of the nicest ones, at least if you kept some variable around. so size just has to return a variable. And then there was unload. 

So there were these four functions in problem set 5 that you needed to implement with some data structure or structures. So I promised that in PHP, we can declare a hash table, for instance, all that more easily. In fact, if I want a hash table, I'm just going to go like that and there's my hash table. And that's the note, disheartening, that we left off on last time. And you know what, if I wanted a variable for size, well, this one's not all that different from C, but I'm going to go ahead and do that. And notice no data type. And I'll go back later and actually add some comments here. But what about load? 

If dollar sign dictionary is the name of my file and I actually want to load words into this table now, I can actually do something fairly simple. One-- and this is minorly annoying-- in PHP, you have to specify inside of a function if you want to access some global variable that's defined outside. 

But that's not particularly interesting right now. What's more interesting is this for each construct that I mentioned last time. And it turns out that PHP has a function called file whose purpose in life is to open a file and read in all of its lines into an array and hand them back to. 

Which is to say I can do dictionary so that now effectively when I call file, this is going to hand me back an array of words from the file. It's not all that good. It's still going to be a line of words, something linear. But I can go ahead and iterate over each of these words using that syntax we saw briefly last time. And you'll see it more in the upcoming PSET. 

But now I have a loop iterating over each word in the dictionary. And on each iteration, recall I'm calling the current word "word." And all it's going to take to put a word into the dictionary is going to be word guess "true." That's my insert function. That's my load function for my dictionary. Now it's a bit of a cheat because, you know what, there's actually backslash n's at the end of the words that I should probably get rid of, but that's not a problem because PHP has a function called chop which literally chops off one character at the very end. So no problem there. We've gone ahead and actually shortened that to just this. And now I should probably keep track of size, so let's at least do this-- size++. I can do that as before. And then this is probably going to work just fine, so that's return true. Done. PSET 5. 

[LAUGHTER] 

DAVID J. MALAN: OK. We're going to do that again with the next PSET, too. So what about size? Well, this one hopefully is about as you would expect last time, although I have to do this stupid global thing. It's just an artifact from the language's design. 

But check is a little more interesting. So if I passed in dollar sign word, I first want to have access to that global variable table. And now if I want to check if a word is there, I can simply say if it is true that the following is set in the table, then go ahead and return true; else, return false. Done. The other half of PSET 5. 

All right, so again, I'm cutting a few corners. In fairness, I should probably spend a few more seconds on this implementation. And I probably shouldn't mock all the hours you put on the PSET so much. So strtolower is a function. Something similar existentialist in C, at least for characters, but PHP's got a whole string version. 

That's going to force everything to lowercase, which some of you might have done to canonicalize what you were putting in your dictionary. And now you can do this in C, too. This has nothing to do with PHP. 

But any time you have a Boolean condition, like something on line 10 there, which is only going to evaluate to true or false, and your if else clearly is returning true or false, I could simply really make this sexier and just do something like this. So that there's my check function. Right, if the Boolean returns a true or a false, let's just return it straight away. 

And there's a few other tweaks I could make here and there. Load-- unload, by the way, that's done. Nothing to do there. Since all of the memory in PHP and many other languages is actually managed for you. So whereas in C, as you've learned painfully, anything you malloc or calloc or realloc, you have to free yourself. Anything you fopen, you have to fclose, so that resources are ultimately freed and tools like Valgrind don't notice and don't complain, which is a good thing to run on them. 

But surely, there must be some catch, right? Otherwise, we kind of wasted a whole bunch of weeks. So there's any number of reasons why we sort of take this trajectory, but there is a trade-off. Right, this has been thematic. 

So what might a trade-off here moving, from C to PHP? Feels like all win so far other than a bit of ugliness here or there. Yeah. What's that? 

STUDENT: [INAUDIBLE] memory. DAVID J. MALAN: Speed. OK. Well, my speed was pretty fast. Right? But speed of execution of the program? OK, so that's a fair point. 

So as it would happen, I in advance cued up both my try solution, the one I had on the big board was a try-based solution, and I have that in this directory here. So I in a moment, I can go ahead and run this on the King James Bible, hitting Enter. And this is hopefully correct implementation at the end, gives me time in total of 0.38 seconds for that one somewhat arbitrary example. 

And if I now go into this second terminal window here where I first opened gedit, let me go into today's code-- which, again, is in this directory here-- and let me go ahead and run speller. So just to be clear, this is the PHP version. I'm just showing the top of it here. 

So if I do speller of tilde CS50 PSET 5 texts, King James, enter. It's still faster than writing it in C, but the total time is, notice, 0.93, whereas my C-based implementation was 0.38. So it's a non-trivial difference. 

And this is just on one file. If you were to run the two programs versus the big board and have a whole bunch of inputs tested, this would surely add up. And if we had even larger data sets, this, too, would add up all the more. So yes, paying some price of speed is indeed the case. What else? Yeah? 

STUDENT: Amount of RAM use. 

DAVID J. MALAN: Amount of RAM use. So I didn't give one second thought when writing this PHP version as to how much memory I was using. I'm completely deferring that to PHP itself and whoever wrote that program. And that might be OK, but if I actually really care about squeezing as much performance out of my program or out of my website or out of whatever tool I'm building, maybe PHP, indeed, is not the right language. 

And in fact, that is why, for instance, many web servers-- the actual programs that serve up web content-- are not written in PHP or in Python or Ruby. They are written, like you'll now do with PSEt 6, in C so that you can squeeze every bit of performance out of it and really exercise fine-grain control over what's going on underneath the hood and not just take it for granted some higher level data structure. 

Consider, after all, whoever in PHP implemented that notion of a hash table-- it's actually more properly called an associative array-- does he or she have any idea what kind of inputs you are going to be putting into the structure? So obviously not, right? It's a generic tool in the toolkit that's provided to anyone who wants to use it, and so surely it can't be optimized ultimately for exactly what you want to do. 

So trade-offs-- development time might differ, performance might differ, complexity or memory usage might differ. And so what you'll find increasingly is that there's going to be different tools for the trade. And in fact for a super majority of people's final projects in this class, believe it or not, C is not going to be the right language to use. 

And in fact, one of the takeaways ultimately for any class like this is to get you thinking about, well, what should you pull off the shelf when you want to solve some problem. And indeed, we'll cross this bridge even more as we look at more languages even beyond today. 

So let's transition now to perhaps a more familiar context for using a language like PHP. It's somewhat common to use at the command line, writing scripts like I did, but it's much, much more common. And it was intended to be used in the form of files that typically end in .php-- but that's not a prerequisite-- that themselves generate web content. 

So let me go ahead and open a few examples I prepared in advance. And these are actually sort of true stories in that one of the first things I ever did myself after finishing CS50 and maybe, I think, CS51 years ago is my roommate and I were helping to run the freshman intramural sports program, which, at the time, had freshman registering for various sports by filling out a piece of paper, as it was called, walking across the yard to Wigglesworth, and dropping it in some proctor's door drop. And then he or she would go through them and then actually email us manually that we were registered for some sport. 

So clearly, an opportunity for improvement. These days, you might turn to just Google Forms, but back in the day, we had to actually reach for-- this wasn't even that long ago-- reach for a programming language that wasn't PHP. At the time, it was something called Perl, which has gone out of vogue since. But the idea is the same. 

And I essentially sat down to try to port goes Perl versions to PHP, but in full disclaimer, did not give any thought to the aesthetics just yet. So here is a web page. This is a file. If I zoom in, its apparently called froshim0.php just because it's our first example in this series. And notice that it has what appears to be a very ugly HTML form, but a form is interesting because it allows me to provide user input to the browser. 

Now last time when we had a form, to whom did we submit our query parameter, the queue parameter as it was called? So to Google, right? We totally punted on the idea of doing anything with that input. 

But today, we start producing output. And the behavior I'm going to see here initially is pretty trivial. David, I'll check off gender here, say Matthews here. I won't be captain. I'm going to click Register. And notice that the URL has changed to register-0.php, and then there's this ugly text here. I gave no thought to the formatting of this. 

But what is interesting is that three values were apparently passed in. This is PHP's sort of equivalent to printf-- we'll see what it's really called in a bit-- that just prints out what you passed into it. So this suggests that that form had at least three fields to it, and you saw me type them in. One was my name, one was gender, one was dormitory. And captain didn't even get sent to the server because I didn't check it. 

So this is to say apparently, when you submit things on the web, not only does the URL sometimes change-- sometimes it doesn't. In fact, the file name changed, but what is absent from the URL that we did see last time with Google. Yeah? 

STUDENT: No query string 

DAVID J. MALAN: There's no query string. There's no question mark something. There's no question mark q equals cats, as we did last time. And there's certainly no question mark name equals David or dorm equals Matthews, so where is that all going? 

Well, let me go back to gedit here and open up the first of those files in my vhost, local host, public directory here and go into froshim0. So it turns out that almost all of this page is just HTML. And this might be unfamiliar to you, but it soon will be more so with PSET 6 and PSET 7 and PSET 8. But this is just an HTML page. 

And the interesting stuff seems to be over here. A form tag whose action attribute has a value of register 0. That's why when I submit this, it goes to that file. But method is different today-- post. So it turns out there's at least two methods on the web used to send information from browser to server. Get puts it in the URL. Post puts it elsewhere. And when and why might you actually want a website to use post then instead of get, just intuitively? Any website. What kind of data should be passed just by inference now via post as opposed to get, if we've seen the two differences? STUDENT: [INAUDIBLE] secure. DAVID J. MALAN: If you want something to be secure. So you might type a password into a website, a credit card into a website would kind of these suboptimal if the browser put that value inside of the URL. Why? You see it, which doesn't seem to be such a big deal, but odds are you pretty frequently walk away from your computer or use computer labs, and so someone else or even a roommate could easily walk up and see that private information. When you send an email via the web, you probably don't want that data ending up in the URL as well. And so there's any number of reasons why we might want to put it here. And photos-- right, I can't even quite imagine how you would take a graphic, like a JPEG, and put it into a URL. You could do it. There's ways of encoding it, but it's just not straightforward like that. 

So register 0 is actually very underwhelming. All it says literally is this. It prints out inside of some HTML tags the following. I've got a PHP tag here nested inside of a pre tag. "Pre" just means pre-formatted text, mono-spaced, like a typewriter. 

Printr is a print recursive function. And then there's this interesting thing here. And we'll come back to this because there's others, but dollar sign underscore post appears to be a variable in PHP in which anything you send from browser to server gets stored for you. And we'll see how to get at that information before long. 

But first, let's go back to a slightly different example. Going into register-- or rather, froshims1.php, which looks a little different. I took a little more effort with formatting, even though it's still pretty ugly. But I'm going to go ahead and type in "David" now. Male. We'll check "captain" this time. We'll do Matthews. And register. 

And this time it says, hm, not really. All right, so what's register 1? Let me go into open register 1 and-- hm. All right, so this is interesting, and this is a stepping stone now toward more interesting programs. 

Notice the top of this file has a PHP tag as well as some comments. And these are, for now, a distraction so let's just get rid of those comments just like they're in C. And I claim with this chunk of code with a comment that this code is validating the submission. 

Well, it turns out that variables like dollar sign underscore post are called super globals. They're like these special global variables that are just omni-presently available within your program. And you can use square bracket notation to index into them not using numbers like 0, 1, 2, 3, but actual words. 

So you can think of dollar sign underscore post as sort of a hash table that you could pass a key into, a lookup word in-between the square brackets, and it's going to give you back the value that the user actually provided. PHP has a function called empty that just says yes or no, this variable is empty or not. We have these double bars, which just means or, like in C. 

So in effect, this line 4 is just saying if the user didn't give a name or didn't give a gender or didn't give a dorm, go ahead and redirect him or her via this line here. So this is a little cryptic, but this just means literally go back to this location, so it punts the user back to wherever he or she came from. But it's a little inelegant in that I hard coded it. 

But what if this if condition does not evaluate to true? What if the user did give me his or her name and dorm and gender? That if condition's not going to evaluate to true, so I don't hit the exit in line 7. So what happens? And this is what's interesting about PHP. 

You can drop into and out of PHP mode, so to speak. If you want some code to execute, you can open and close a PHP tag and put code there like I've done here. As soon as you close the PHP tag, the server is just going to spit out whatever you put there. And indeed, this was part of the original design of PHP, for better for worse, was this commingling of code and markup language. And we'll see that this very quickly devolves into a mess. And so we'll do better than this ultimately, but just notice the ease with which I'm actually able to execute some logic. 

But still a bit underwhelming. Let's open up version two of Frosh IMs, which apparently submits to register2.php. So this file's actually going to look almost the same. I'm going to go to Frosh IMs 2 . But in Frosh IMs 2, let's see what happens. 

David, click the radio button, as it's called; Matthews, no captain. Register. You are registered. Not really. Oh wait, we just did that example, didn't we? All right, stand by. We'll do the three. Clearly something's about to happen with Gmail. We'll get there. 

So Frosh IMs 3 looks like this. No different. But when I do David, male, Matthews, and register, this third and final version claims, quite simply, you are registered really. That's sort of immaterial. But I claim with this third and final version I have now recreated exactly what my roommate and I built for the Frosh IMs program years ago. And it was simple. There was no database, no Excel spreadsheet. But more importantly, there was no more paper because what we did with this program was to actually email the proctor, who was previously receiving these things via forms. 

And apparently we've programmed this in such a way that when someone registers, John Harvard's account emails the proctor-- or himself in this case, John Harvard-- with the following text-- "This person just registered." Name is David, captain is blank; gender, male; and dorm, Matthews. 

So what happened there? Well, the file in question here is apparently register3.php. And if I open this, you'll see both the power of code like this and also, frankly, the insecurity of a system like email. I have just effectively pretended to be John Harvard in the following way. 

I have the open php tag up top, which just says here comes some PHP code. Down here, turns out there are libraries in PHP. You just don't need to include header files as much. You get more with the kitchen sink, so to speak. 

But this time in line 4, I do want to special library called PHP mailer, which is something you can install for free in many systems. Down here I'm validating the submission just by checking did the user give me a name, a gender, and a dorm. And if so, go ahead and instantiate a mailer. 

You can think of this as being a line of code that just allocates. It's like malloc, but it's a little sexier in that you mention not just malloc and some generic number. You say give me one of these, give me a new one of these. 

And if you've programmed in Java or C++ or other languages, you might have seen this. But the short of it, if unfamiliar, this line puts into dollar sign mail a special struct called an object that has built-in email functionality. And in fact, notice and similar syntax. 

This is not a pointer, per se. PHP just uses the same syntax. This line is saying use SMTP-- Simple Mail Transfer Protocol, which is just the protocol used to send mail. This is specifying use Harvard's SMTP server, which is somewhere here on campus. 

This is saying what TCP port number to talk to, and I just figured that out by googling or by asking the help desk. And then because Harvard uses some system security on the mail server-- at least to encrypt traffic between you and it, even though anyone can send to it-- I'm going to turn on the TLS protocol for keeping this secure. 

But this is where things get a little scary. I can just arbitrarily say that I am jharvard, and I can just arbitrarily email myself here. And then I can specify a subject with this line here. 

And this just looks ugly, but it's just a bunch of concatenation. Turns out PHP has a super useful symbol, like some languages, the dot operator, which just literally concatenates string after string after string, and you don't have to malloc or figure out the total length of the string. You just do it. And indeed, because I'm concatenating in all of these things with these dots, that's why the email I sent looked as it did. 

And then lastly here, I'm sending mail. So if this is false, I'm just going to die, which is a function that just prints to the screen some error message. But it is, in fact, calling the send function. Otherwise, if all of this fails, it redirects me back here. 

And why did I see that I'm registered really? Well, it happened right here. So I bring this up for a couple of reasons. 

One, this is exactly how if you build some website for a final project or for the real world, this is how you send email reminders to your customers or your subscribers. This is how you send password reminders. This is how you send people messages that they have a new Facebook message pending or something like that. 

But it also speaks to the fact that this could have been very well from Davin or anyone else. And I say this kind of with a smile because I'm quite sure what's going through several of your minds at this point. But this is one of those do as I say, not as I do kind of things, because it is trivial to forge emails like this. But as you may have seen or read in the Crimson, of late it's also pretty trivial for people to trace them back to some origin. And ask me some time, perhaps at CS50 lunch, how I first got acquainted very closely almost to the ed board many years ago when I discovered how the internet worked. So in any case-- slightly after the ed board did. 

So in any case, there is a whole bunch of super globals, as they're called here, one of which we saw-- dollar sign underscore post. There's a counterpart called get, which is where stuff from a URL ends up going. And there's a whole bunch of others, too-- session and server and cookie. We'll come back to cookie some other time, but session is kind of cool because right now-- up until now-- everything we've done with a web browser is sort of stateless, so to speak. I can click around, access files on the server, something happens on the screen, but then the connection closes. The Internet Explorer or the Firefox icon stops spinning and you just see what that web page contains. 

So HTTP is stateless in that once it makes a connection, gets some data, that's it. No more connection, unlike Skype, unlike Facetime, unlike GChat, which maintains a constant connection to the server. The web is fundamentally disconnected, though we'll see before long how we can simulate things like Facebook chat and GChat, which maintain the illusion-- or actually do maintain a constant connection using more modern technology. 

But if I go to, say, counter.php, this is another simple example, as we'll see, that currently thinks I visited the site zero time. But if I simply reload the page, it somehow knows I was here before. If I reload again, it knows I was here before. And again and again and again and again. 

So there's some plus-plussing going on, but notice the little thing spins ever so briefly up top and then disconnects, so it's not like I have a constant connection to my appliance. Well, if I go into counter.php, notice how simple it is. I first call this special function that we'll soon start taking for granted called session start. Start a session. 

And a session henceforth is just going to be a bucket, like a shopping cart in which you can put values and kind of trust as a programmer that they're going to be here when that user comes back-- a second later, an hour later, even a year later, so long as he or she doesn't clear their cookies, as we'll eventually see. And now I just have an if condition here. So if the following key, called counter, is set inside of this super global-- this hash table, if you will-- called session, then go ahead and grab the value from the session-- think of this as a shopping cart-- and store it in a temporary variable called counter. 

Otherwise, if that value counter was not set in the so-called shopping cart, just initialize it to 0. Lastly, down here, go and put back into the shopping carts or the session the value of counter +1. So it turns out that this special container here-- which, again, is one of these associated arrays, an array that you can index into words instead of numbers-- persists even after the user goes away. Again, I'll go back to the page now. It's been a minute or so. But it remembers that I've been here 19 times before. This is my 20th visit. 

And so this is going to be key to implementing any website that remembers that you're logged in, that you put something literal in your shopping cart to buy or that you have some number of messages pending. Anytime you want to remember information, we'll see that PHP, like several other languages, provides us with this illusion of state even though, as you'll see in PSET 6, as you're making HTTP requests from client to server, that's it. Once you get back that response, there's nothing more coming back from the server by default. But we'll see how to work around that. 

Well now, let's try to clean this up a little bit. We've seen a few different examples there. Oh, and as an aside, for those familiar or unfamiliar, the reason that the Frosh IMs example went from looking really ugly to slightly-- well, still ugly-- to slightly less ugly though still ugly is because if we look at the source code here, it turns out that I have this at the very top of the file. 

Turns out that bootstrap is one of many freely available libraries out there that exist not for programming languages always, but for CSS or for JavaScript or HTML or any number of languages. 

And these folks here-- originally came out of Twitter-- just have a whole bunch of styles. It's a massive file here that someone wrote, or someone's wrote, over time that specifies colors and formatting and whatnot so that I can kind of borrow their syntax and not have to figure out how to lay out my form. This is also minified so that a computer can understand it but not necessarily a human. So that's just why the stylization there changed. 

But let's now do better in terms of design, because if we stay down this road too long, our code's going to get messy and messier. So let's focus on these examples here. The last for today. 

So here is a super simple version 1.0 of CS50's website. It only has links to lectures and syllabus, and it's using that unordered list tag-- the UL tag that we used last time. And if in fact, if I open up View Page Source, you'll see that this is really, really simple HTML. And in fact, even though this is a PHP file underneath the hood, it's still just spitting out only HTML for now. 

So if I click on Lectures, we see this happen. And if I click on week zero, we see this. And if I click on Wednesday, we see this. And this apparently was the PDF of the slides from that day. All I've done is link with an anchor tag to this URL here. 

So this is only to say this is a pretty simple version of CS50's website. Let's see how it's implemented. If I go into the mvc0 directory, we'll see a few files. One is a README, so if some of this is too fast, you can just poke around more leisurely later. And notice in here is an index.php file. It turns out that if you yourself, the human, don't specify a final name in a URL, the web server usually infers some default name for you. An index dot something is generally the default. 

So that's why a moment ago when I visited this URL here, no file name, no file extension, no period in the URL. It just knew somehow magically to look for index.php. It's just a convention. Could be called anything. 

So if I now go into index.php, you'll see that, indeed-- let's get rid of the comments here because there's really nothing interesting to it-- this is just hard coded HTML. So that's consistent, though, with my claim that you can commingle HTML and PHP. There's no actual programming logic in here. 

And the other files are pretty much just as uninteresting. It's just hard-coded week one here to week one m and week one w, for Monday and Wednesday. And then if I open up week zero, notice it's almost identical. 

And that's kind of a key takeaway. Notice just how redundant this is. These files barely change, and yet I pulled one of these copy/paste jobs where I took one file-- presumably in week zero-- copied it when week one came around, and tweaked a few values. We should probably be able to do better than this. 

So let's go back up to mvc and go into version one. And notice I've got a few files, because what was common to all of those files just a moment ago-- if I go back to version 0, let's go back into index, and just postulate-- once I get rid of the comments-- what part of this page is presumably in every one of my files? Just call it out. Which lines are duplicated probably across all of these pages? Yeah? 

STUDENT: [INAUDIBLE]. 

DAVID J. MALAN: 1 through 9. Yeah, absolutely. 1 through 9, except maybe 8 changes a little bit because CS50 becomes lectures or week zero or something. But almost identical. So all this stuff is just kind of copied and pasted. And there's a couple other lines I can think of that are probably identical across all the files. 

STUDENT: 12 and 13. DAVID J. MALAN: Yeah. Sure, 12, 13, and 14 probably, just because the interesting stuff is happening on lines 11 and 10, so it would seem. So let's look at version 1, which tries to improve on this. In version 1 of this mvc example-- we'll explain what mvc means in a moment-- if I go into index, it kind of looks a little confusing now. It's not quite as simple as before. 

But once you start to read it carefully, it's pretty straightforward what it's doing. Apparently line 1 and line 8 have replaced all of the stuff you just identified-- though just for good measure, I left the ULs there just in case some days didn't have a list of things. And so require is kind of like pound include in C. It copies and pastes the contents effectively right here into this file. 

So in header.php, as you might infer from its name, is going to be the header of the page. It's kind of orphaned here. It only has the top to it, but there's no more content below. 

And if I look at footer meanwhile, which was the other file mentioned-- this one's even less interesting, but again, it's common to everything. So this is the footer. This is the header. This is the file that's changing, so why not try to factor out the commonality with these two lines here? 

But we can clean this up a little further. I'm going to go ahead and open up version two where we'll see that there's a new file, helpers.php. We'll see what that is in a moment. Let's go to index, as the entry point as before. 

And now notice I'm requiring helpers.php, not header or footer. But helpers is kind of like helpers.c and helpers.h from PSET 2 or PSET 3 long ago when you actually did search and find for that PSET, and you had all of your code for sorting and searching in a separate file. That's what's going on here. 

And now line 3 looks a little different. And it's just one line. To make this even more clear, I could just do this to be stylistically consistent with everything else we've done. But that's not really changing the functionality. It's just one line of real code. 

Apparently, there's a function somewhere called render header, and this is where things get pretty powerful. Notice that inside of its parentheses is what other piece of syntax? It's probably a little hard to say, but notice there's-- I'll put some white space. There's square brackets. 

And square brackets we saw a bit ago in the context of associative arrays, which are, again, like hash tables. And if you think now to C, the order of arguments into a function has to always be the same. You have to remember what the order is-- x, y, z or z, y, x-- and you have to always provide them in the same order or look them up if you've forgotten. 

But this seems to be a clever way of passing an arbitrary key value pairs whereby title is the name of an argument in this case and CS50 is its value. And the fact that I have these square brackets here means that I could also pass in something like a week is 1 or 0 or 2 or 3. So we've parameterized this function in such a way that it can take multiple inputs, but for now it's just the one. 

If I now go into helpers.php, notice what it's doing. This is a little bit of new functionality, but for now just take on faith that this is the syntax with which you define a function in PHP. You literally say function. You don't specify a return type, and that's consistent with the variable detail earlier where you don't really strongly type. 

This just specifies that, by default, this takes an associative array as an argument. And you know what? If the user doesn't pass one in, assume a default value. 

This is a feature that C doesn't have for us, which is nice, because now data, even if you don't give it anything, is going to be an array but an empty one. And as an aside, extract just does something funky where it takes all of the keys from this associative array, all of the things you could put in square brackets, and creates variables out of them so that we can ultimately have access to them in footet.php and header.php. That's a little abstract, so let me point this out. 

In index.php, notice that I'm passing in a key value pair of title with a value of CS50. If I now look at helpers.php, notice that RenderHeader is extracting that data that I'm passing in, and then requiring header.php. What I've done is sort of a poor man's implementation now of the following. 

If I open up header.php, notice that I've no longer hard coded the word CS50 in this header file. I've put this admittedly atrociously named function, HTML special chars, in there. But notice what I've done. I've got open HTML. I then have open head and open title. 

And then inside of the title's open and close tags, I have a bit of PHP code. And this is a nice but of syntax, which just means echo out. It literally means this-- echo the following-- but this is sexier to write. Echo out the title that's been passed in. 

But what do you think HTML special char is all about, especially if you have some prior HTML experience? What characters might be dangerous to pass in to a page where you're dynamically generating the web page with code like this? Let me go to this file, version two, and see if I can't induce this. 

Version two is this. And notice everything is fine, working well. But suppose I go into index.php and I specified that the title of my page is not CS50. It is open bracket script alert hello world, close single quote, close parenthesis, semicolon, open bracket, slash script. 

Script, as we'll eventually see, is a tag that you can use to use of another programming language called JavaScript inside of a web page. And now notice the logic here. Here is a key called title. Here is it's crazy long value now. 

But if I go to the helpers page- or rather, the header page, I'm calling this function on that title first. So if I now reload this page, I see this, which looks ridiculous, but it's safe. It just looks stupid. 

But suppose instead I had forgotten this. And mark my words, a nonzero number of you will forget to do this and you'll get some industrious student or friend coming up to you at the CS50 fair or anonymously at night poking around on your website and essentially injecting code unbeknownst to you into your site somehow. 

Because if I simply spit out title here and title there-- well, if title literally looks like this and PHP as a language that can spit out other languages text, this is literally going to replace this tag with, of course, what I put elsewhere. 

So if I now go here and reload after undoing those safety mechanisms, now I have hello world here. Now that's not all that big of a deal, but you could do something a little more malicious here, like there's other tags-- as we'll see once we spend more time in JavaScript-- like location dot href gets, quote, unquote, HTTP business.com, but the opposite of that from the other day. And now you can induce a web page to actually go immediately to this web page here. 

And actually, I don't want to even go to business.com because I don't want to know what that is. But this, too, will trigger code to be injected into this page. So this is only to say that even though we're introducing super early on some of these more complex structures, it's all toward an end of making sure that your code is not exploitable. 

So now a third version here. It's getting a little fancier. I didn't really like-- the anal side of me was getting a little annoyed by the fact that I had a function called RenderHeader and RenderFooter that were almost identical. So it occurred to me, why don't I parameterize these functions into just one called render, have it take a second argument like the name of the template, the final to render-- either header or footer? And then optionally, if I want to pass in some key value pairs like I do for the title for the header but not for the footer, I could do that. 

And so now if I go into helpers.php, it's a little more complex. And I'll wave my hands at the details, but it's just one function. So that's a step toward a better design. 

We can take this one step further. If I go into my fourth version of this, notice now that I'm doing something even more kind of cryptic. And I know this is a lot to absorb at once, but we're just kind of cleaning things up. Now I'm putting my helpers file into a folder called includes-- just an arbitrary name where I want to put stuff that I want to include-- and then the rest of this is the same. 

But if I look now in gedit, notice that I've gotten rid of all of those other files and I've moved them, for instance, into here. And then in templates, I have this here, too. And so this is all now toward a step of using a much better design pattern. And we're very quickly going to move away from PHP's default functionality, which we started here with, where you just commingle PHP, and your HTML, and your CSS, and you just spit it out and you go about your way. It's not going to be very maintainable. Just like in C, we started using multiple files and multiple functions and factoring things that out. We'll do the same here. And in fact, in the fifth and final version here, I did one other thing. You can even use dot dot, which, again, is just the parent directory. To be even more security conscious, because if I look at the listening here for fifth and final version, notice that I have one directory here called public, and then on the same level, so to speak, I've got includes and templates and then that text file readme. 

And the reason I've structured it like this-- and so many web hosts, especially those $5 a month ones or $10 month ones, if you've ever had one of these services-- what so many of them do is they just expect you to dump all of your files into one directory, like we did already with this very first example. 

But as soon as you start building more sophisticated sites that just store data you care about and files you care about, actually organizing things correctly and with more security consciousness in mind can we start to defend against all of the friends that you have either in or outside of this class who, as soon as you start making programs yourself on the web, are going to start picking on you and on them. 

And so we'll look ultimately at this design. This is just a picture that depicts the following. We're going to put all of our programming logic in one or more files, and we're going to just start calling those controllers. It's where the brains of our websites actually are. Then we're going to have views, and views are as simple as just separate files-- called templates, often. They just have the aesthetics of my page, what I want the page to look like-- the colors and the layout and the positions of all of the variables. 

And then more interesting that we'll eventually get to is the model, which is going to be just the word we slap on other technologies that we bring into the picture, like actual databases, so that when you want to save information, you don't just send an email to your proctor or to yourself, you actually store it in a database using another language known as SQL. And so we'll leave here today and pick up with this on Wednesday and introduce databases then. 

[MUSIC PLAYING] [MUSIC PLAYING] DAVID J. MALAN: All right. Welcome back. This is CS50. This is the end of week 8. And as you know, we have pretty regular office hours in a few of the dining halls, including Annenberg. And some of the team kindly took some photos lately. And in honor of Halloween, we thought we'd share one that rather caught us by surprise here in Annenberg Hall just the other night. Your classmate Jacob posed for this photo, but was more amusing was on Facebook, the ensuing conversation that happened afterward. 

His first post in response to his photo was this. A few minutes later, he decided to one up himself with this. It went on then to go to this, and then, even more amusingly is when his mom chimed in. And then ultimately, it seems this was just a wonderful ruse for a play that's going on. 

So, if you would like to see Jacob and others, among them Cynthia Meng, who's behind the scenes of CS50 zone staff, head to this URL and this play here. So without further ado, today we continue this look at web programming, and the actual creation of programs that don't run at your command line, but instead run inside of a browser. 

Presumably now, or very shortly, you're going to be in the midst of implementing your own web server, which is different from web programming. The web server in pset6 is all about writing software that knows how to take HTTP requests from a browser, or even from you, a human, with a program called Telnet, and then respond to those requests either by spitting out an HTML file, or a jpeg, or a gif, or even a .php file. 

But with a web server, it's not supposed to just open a PHP file, something ending in .php, and then spit out the contents. It's supposed to do what to that file first? So to speak. Not compile it, we said on Monday, but rather-- So, interpret it. 

PHP's an interpreted language, and so one of the key features in your web server, albeit implemented by us, is this ability for your web server to notice, oh. This is a file ending in .php. Let me not just send it to the user like it's static content, but rather let me read it line by line, left to right, and interpret it. 

And to do, that you guys will essentially punt to a program in the appliance, and on a lot of computer systems, just called PHP. That is the name of PHP the language's own interpreter. So, that piece we implement for you, and what's left for you, ultimately, is a number of pieces, among which is implementing support for static content. 

But now, and with problem set seven, you're going to start to transition to actually writing the PHP code that gets interpreted in talking to a back end database that stores information. So let's better understand first a couple of these superglobals and just how much power you get out of the box for free with a language like PHP. Things you don't have to implement yourself. 

So, we saw on Monday $_GET, which is a superglobal, which is just PHP speak for a global variable you can access anywhere. And what's inside of $_GET? What's inside of this superglobal that we see? Surely statistically at least one person knows. What's inside of $_GET? Yeah? 

AUDIENCE: It's the variables you put in the query string. 

DAVID J. MALAN: Perfect. It's the variables you put in the query string. So, in our older example of reimplementing Google when we had a URL, and then question mark, which demarcates the start of HTTP parameters, then we had q equal something, like q equals cats, what would automatically go inside of that $_GET super global for you, because of PHP, is a key of Q, and of value thereof of cats. 

In other words, $_GET and all of these things are associative arrays, hash tables of sorts, that store keys and values. Now, back in pset5, the hash table you might have implemented, or the try you might have implemented, really was effectively an associative array, a data structure whereby you can associate keys with values. 

But in pset5, the values were trivial. The value was essentially true or false. Is the word in the dictionary? So, when you hashed a word like apple to see if apple is in the dictionary, your check function presumably returned true or false. So, that's effectively the value we're getting back. 

But we saw on Monday briefly, you can certainly associate more interesting values than just true or false with keys, like apple. You could actually return an arbitrary string, and indeed, that's what $_GET and these other variables let you do. 

So $_POST is similar in spirit, but if you submit a form via post, a different HTTP method that's used for things like credit cards, and private information, and even binary information like photos, those things end up inside of $_POST. And actually for files like jpegs and whatnot, there's even another that's not up here called $_FILES as well. 

So, server we won't dwell on too much, but it gives you access to sort of lower level details about the server itself that you're using. Cookie and session, though, we'll effectively see now. The last is what we use to implement the notion of a shopping cart. A super simple one, but recall that we had this example here, counting how many times you had visited this page before. 

But today, rather than just look at the effect of this, let's open up Chrome's Inspector, which you can usually do by right clicking or Control clicking anywhere on a web page, and then choose inspect element. Or you can go through the menus that we describe in pset6's spec. And I'm going to the Network tab here, and let's watch for a moment the HTTP traffic that's going back and forth. 

Let me first go ahead and clear Chrome's cache. So some of you might be familiar with this technique already, and we're going to use it for debugging purposes here. Now we as computer scientists are going to start doing this for debugging purposes, whereby we will clear the cache, typically, so that we can get rid of things called cookies. So you're probably generally familiar with what cookies are, or at least that they exist, but what's your understanding of them, as just a user of computers, what is a cookie? Yeah. 

AUDIENCE: It's a bit of-- well, not bit in a term of computer science. It's a piece of data that a website sends to you in order to be able to record statistics on you. DAVID J. MALAN: OK, good. So it's a piece of data that a server, puts onto your computer, and let's generalize it even more, it's a key value-- well, that's getting more precise. It is a piece of information, a piece of data, that a server is able to put on your computer and very often, the server does this so as to remember who you are. So for instance, odds are you're probably logged into sites like Facebook, or Gmail, or others before, and you log in with your username and password, and then after that, for some number of minutes or hours or even days, the server remembers that you are, in fact, logged in. Now, how is that actually happening? Because you're certainly not retyping your username and password every time you navigate to a different page on Facebook. So it turns out the cookies are the answer. 

A cookie you can think of as, sort of like, a digital hand stamp that you might get at an amusement park or a club that essentially indicates you have been here before, and you've already shown your ID to the bouncer, for instance, and that the club or the park should now assume that you have authenticated already. You have already been identified by it. 

So with that in mind, let's open up counter here. Let me go ahead, I just did, and clear all of my cookies. And now what I'm going to do is hold Shift, just for good measure, and forcibly reload the page. Shift just make sure that nothing gets cached. And here's the request that went back and forth. So over here we have a request, and let me zoom in down here, and a lot of this is sort of uninteresting details for now that the browser has automatically sent, but let's click View Source to see the raw headers. 

And if you've dived into pset6 already, you'll certainly recognize things like this, and maybe some of these other lines here, but what's more interesting for today if I scroll down, not to the request but to the so-called response, this line probably looks familiar. That's a good thing when you see a 200 OK. Apparently this is the date and time on the server and there's a bunch of stuff. Oh, this is interesting. 

Turns out whenever you use PHP, at least in this server, the server spits out what version of PHP you're using. Which, actually, for security purposes, is not a good thing. But, we'll come back to that some other time perhaps. But now this is the juicy line today, and we saw briefly some of these, I think with Facebook when we poked around the Inspector at that time, set cookie is what is planting that little piece of information onto your computer. 

This is an HTTP header that's effectively telling your browser, Chrome, IE, whatever, hey browser store on the user's hard drive, or in the user's RAM, a key called PHPSESSID, which is a shorthand notation for session ID, and give it a value of 0vlk8t, dot, dot, dot. A really long pseudo random alphanumeric string. It's just a really big number, but it's encoded with letters and numbers so that the size of it can be even larger than numbers alone. And then, by the way, Path=/, that just means that this cookie should be associated with the entirety of the website, not just a specific page the whole thing. So this is that virtual hand stamp. It's as though the server, Facebook, or in our case the appliance, has literally written 0vlk8t and so forth, on your hand. Notice what the server's, not doing is it's not storing my username, certainly not storing my password. 

Instead, it appears to be storing pseudo random information so that no one can guess what my hand stamp is. On the server side, meanwhile, the server is going to remember, probably in a database or something, that the user, who in the future presents a hand stamp of 0vlk8t, dot, dot, dot, should be associated with this particular shopping cart, so to speak. In other words, if I now go back here and reload this page, how does the server know that I visited one time? 

Or if I do it again, how does the server know that I've visited it two times? Well if I go down to this most recent request, which is now the third that I've sent in total, notice my request now. There is still this request up here, same as before, there's still a whole bunch of stuff that we've ignored as before, but the very last header, this time, because I've been here before, is a presentation of this virtual hand stamp. 

Whereby this line here, not set cookie but cookie colon PHPSESSI= 0vlk8t, that's just my browser's automatic presentation of this hand stamp so that now the server, as soon as it realizes, ooh, this is user 0vlk8t dot, dot, dot, I can now remember who he or she is and reassociate with that user whatever information I want to, and all of that information can be stored by you, the programmer, in $_SESSION. 

So to be clear, if I open up real quick in gedit that actual file, counter.php, in my local host public directory as before, notice that, indeed, I'm ultimately storing in $_SESSION quote unquote "counter," the value of the previous counter which I get from these lines up here that we looked at last time plus one. So underneath the hood, that's all cookies are. It's just the sort of digital hand stamp going back and forth, and frankly if you open Chrome's Inspector on any website you visit today, with super high probability, you're going to see maybe one, maybe half a dozen cookies being remembered by you. 

And worse yet, if those website you're visiting all have advertisements, which is certainly quite common today, and if those advertisements are coming from some central party, someone like Google or AdWords as they call one of their products or other such vendors that sell ads, what's interesting, and frankly what's a little worrisome, about how HTTP works, is that if you have an ad embedded in Facebook.com, and Google.com, and Harvard.edu, any number of websites, so it's such that there's a middle man who is serving up ads for all three of those websites, it turns out that the cookies are per domain. 

So if you have an ad coming from the same company on different websites, that company can effectively track who you are across all of those websites. Harvard might not know you're visiting Facebook. Facebook might not know and you're visiting Harvard. But whatever ad service they're using if that domain is present in both Harvard.edu web pages and Facebook.com webpages, this middle man surely knows who you are because of these cookies being shared across, or rather to, that so-called middleman. 

So we'll come back to this in security implications thereof, but there's a lot of information being stored about you any time you visit most any web page on the internet and it really reduces to this very simple mechanism. What happens, then, if you're super paranoid and you decide to go into Chrome or IE or whatever and turn off your cookies? What happens? Yeah? You really-- you've done this right? OK. No, go ahead. 

AUDIENCE: Certain websites don't have a function without it like Facebook. DAVID J. MALAN: Yeah! So certain websites will just stop working. And in most websites these days that fundamentally rely on cookies, especially if they have you log in, they're just going to break. Because consider the alternative, if the website has no way of remembering who you are, and therefore your web browser is not representing with every HTTP request of this hand stamp, effectively a website like Facebook's going to have to prompt you to log in every darn time you change pages, or click a link, which is surely not a particularly good user experience. 

So that there, too, is among the trade offs. So without further ado, let's take for granted that with web programming, in languages like PHP, you can remember information like that in problem set seven when you implement your own E*Trade-like website with which to buy and sell stocks, you'll remember exactly what the user has bought and sold and who he or she is by way of this session. But we're going to need a fancier way than email to start keeping information around. Right? 

On Monday, we talked about Frosh IMs and how in version one of that website, years ago, all we did was email the Proctor who's in charge of the intramural sports program, the name, and the gender, and whether or not they're a captain, and the dorm of someone who's registering for an intramural sport. So it's not bad, but he or she then had to troll through their email, make a spreadsheet or something like that, to keep everything organized. So surely we as programmers can do this for that proctor. And so enter in SQL, Structured Query Language, which is going to look pretty different to both C and PHP, and you'll dive in much more hands on PHP and problem set seven but also SQL, or SQL, this is a language that you use to talk to a database. 

But what's a database? Well you think of a database, at least for now, as just being like an Excel file, or if you're a Mac user a numbers file, or if you're a Google Apps user a Google spreadsheet, it's effectively a database, or really specifically a relational database. A relational database is just something that has rows and columns, and you can store any kind of information in these rows or columns. 

But what's nice about SQL, and about actual databases, not just spreadsheets or Google spreadsheets, is that you can use a language to actually execute queries to insert data, to remove data, to look for data, even most importantly, and you don't have to use it fairly manually as you might typically a Google spreadsheet like this. 

So in SQL, there's a bunch of fundamental statements or pieces of functionality built in. There's many more than these, but you can go a huge distance just by knowing that this language called SQL has at least four statements you can leverage. 

Delete, for removing data, Insert, for adding rows, Update, for changing rows, and Selecting, for getting back rows and that's indeed what SQL does. It operates entirely on rows so that when you insert, or remove, or update, or select what you're getting back as a so-called result set, like an array of rows. A bunch of rows from a table. 

So back in the day, and even to this day, you can interact with the database using a command line, but it's not particularly fun to use this black and white style window and actually execute commands and poke around your database. A graphical user interface, or GUI, is much more preferable, arguably, and so the tool we recommend and preinstalled for you on the appliance is called phpMyAdmin. It's a total coincidence that the name of this thing has PHP in it, it just means that the people who wrote this program themselves wrote it in PHP. 

But it's ultimately about administering a database server, like a MYSQL server that you might have, as you do, in the CS50 appliance. So there's more detail here than we need to care about today, but what's key is that on the left hand side is a list of the databases that you have on your computer, on your CS50 appliance, or come final projects that you might have on a third party, a company's website or web server, that you might be paying for space. So on the left is the databases, one of which is pset7 which I borrowed from next weeks pset, and then on the top there notice there's a bunch of tabs, one of which is databases, SQL, status, users, export and so forth. So you can go a long way just by realizing that most of the user interface is in the top left column and across the top right up there. So what can we actually do with this? Well, let's start creating a bit of information as follows. 

Suppose the following is the case, as will be in just a few days, you want to implement a website, called CS50 Finance, and this website lets you buy quote unquote and sell stocks. And it's going to figure out the price of those stocks, ultimately as you'll see, by talking to Yahoo Finance. Which, wonderfully, has a free service whereby you can pass in a stock ticker like GOOG for Google, and it will give you back Google's current stock price within the past few minutes at least. 

So you'll use that, ultimately, to pretend for the user to buy and sell actual stocks using virtual money, but the very first thing the user's going to see is this login screen which asks them for their username and password. And so, one of the first challenges for you in pset7 is going to be to implement the back end database, the spreadsheet if you will, that's going to store users names and passwords and ultimately what stocks they own, and how many, and how much cash they have, so a bunch of other things in other tables, or spreadsheets. 

So let's take a look at how this might appear at first glance. I'm going to go back to the appliance and I'm going to go to this URL here phpMyAdmin localhost/phpmyadmin and you'll see that it takes me to an interface exactly as we saw on the screen shot, and here I have an additional database called lecture for today and let me go ahead first and click on pset7. 

I seem to have a couple of options, one for new , for creating a new table, and a link to users, which is a table I already created. So what's a table? So if you used Excel before, and if you've used numbers or Google Spreadsheets, you open up a window and you get a whole bunch of rows and columns, but then you usually have worksheets along the bottom, or separate tabs. You can think of each worksheet as a table so that database, ultimately, is a combination of one or more tables, one or more worksheets, in the world of a normal spreadsheet. So let me go ahead and click on this worksheet that I premade, called users, a.k.a. Database table. And if I scroll down here, let me zoom out a bit, this is what phpMyAdmin is telling us is inside of this table right now. It's a little confusing at first glance because the UI is not the prettiest thing in the world, but what is interesting is this part here. ID, username, and hash. 

In advance, and you'll be handed this in problem set seven, we give you a file containing a super small database table, borrowed actually from the hacker edition of problem set two, inside of which there are six rows. One for Belinda all the way down to one for Zamyla, and notice to the left of those usernames are unique IDs like one, two, three, four, five, six, integers, and then to the right are hashes. 

And if, odds are, you didn't do the hacker edition problem set two, but a hash is just like an encrypted password with a few caveats. And so, what you see here are the encrypted versions of all six of our passwords from problem set two's hacker edition. Now to the left is just some GUI stuff, editing this row, copying this row, deleting this row. 

But what's interesting now is the following. I can actually start experimenting with this table. So if I go and click the SQL tab, I get this big text box. And this is not how we're going to do it when actually writing code. To be clear, phpMyAdmin is just a tool that's going to let us poke around the database and let us experiment with queries. 

So for instance, suppose I execute exactly this. Select, which is one of those keywords I mentioned earlier, star, which represents all the columns in a table. From what table? Well, users. And notice there's this weird convention in SQL where you actually use back ticks, typically, not single quotes and not double quotes when you talk about tables names, so the back quote is the thing on the top left hand of your keyboard most likely. 

So let me go ahead now and just leave that alone and scroll down and click Go, and we're actually going to see the same thing. We have just executed a SQL query saying select everything star from table called users, and what you get back is this. Ultimately, we'll be able to do that same thing in code, but for now all I wanted to do was see it in my browser. Well let's do something a little different. Let me go back to the SQL tab, and let's just say that what? Zamyla has lost all of her money, and therefore it's time for us to delete her as a user. She's no longer logging in. 

So I'm going to say delete from-- well, maintain capitalization for consistency, delete from users where. And so, we can have these predicates, or these qualifiers, at the end of my statement where and how could I delete Zamyla? By her name Zamyla, so the column, one of the columns was named, so where name = "Zamyla". And here I use double quotes or single quotes, you only use the back ticks when talking about the names, for instance, of tables or fields. And let me click Go here. And now, the web page is being a little uptight. 

Or, do you really want to execute delete from users where name equals Zamyla? Yes. So now, if we go back to my table by clicking users, notice that Hm. I goofed. And in fact, I kind of clicked away so fast you didn't even see the red error message, perhaps. What did I do wrong? AUDIENCE: You didn't need to capitalize her name. DAVID J. MALAN: Yeah I capitalized her name, but her username-- actually I made a couple mistakes, right? One, her username is zamyla, lowercase Z, and the column name is username, not name, so let's do this again. Let me go ahead and delete from users where username equals quote unquote "Zamyla". All right? So this looks a little better, let me go scroll down and click Go. It's still going to yell at me to be sure. I click Yes, and now we see, frankly this happened, really fast, less than one second certainly, this is exactly the query that got executed. To confirm, let me click users and indeed now Zamyla is gone. Now let's do the opposite. Suppose that Gabe wants to register for the website. What's the SQL query, what's the command I could type to add Gabe? Well it's pretty straightforward. Insert into users, and now it gets a little cryptic. I need to specify, to the server, what fields I want to assign. I don't really care what Gabe's ID number is, so I'm going to skip that. I'm instead going to say username, hash, and then the values I want to put there is going to be Gabe. And then his hash, I don't know. So for now, I'm going to leave that as a big to do. We'll come back to that in the problem set spec as to how you actually do that. 

So notice, again, the syntax. Insert into table name, then a parenthesized list of the fields, the columns you want to add values to, and then just the same exact ordering left to right of the values you want to add, and it's just wrapping because the text is a little long. So now let me click Go. One row inserted. And now if I go back to users, what's interesting is that not only is Gabe now in the database, what is apparently his ID? 

Well it's seven. Why is it seven when I didn't add it? So this, too, is one of the features you get of the database. A lot of built in functionality. It turns out that when created this table, I preconfigured it's automatically assign an ID in such a way that it increments. So if you've ever poked around, and looked at what your Facebook ID number is, these days it's not really a thing to do, but Facebook as an API, Application Programming Interface, whereby you can get back a whole bunch of data about yourself, about your friends, and your connections. And what used to be kind of cool, back in the day, was to look up what your Facebook ID number was. Mark Zuckerberg's, for instance, is three since he was the author of the site. And as the story goes, he created two test accounts, users one and two, which he then deleted. And so, Zuck, as is his username on Facebook, is ID number three, and all of us have numbers much larger than three these days. In fact, at some point Facebook moved away from even using an int, which is a 32-bit value, to using the next step up, essentially a long long so that they could accommodate even more users registering. So a fun little historical fact. 

So that's just the basic syntax with which we might execute a couple of queries, but we can actually do a bunch more things with SQL. And you'll see, ultimately, in the problem set seven that you have to make a number of design decisions, among them is going to be what data types to use. So just like in C, there are data types in a database, like MySQL, and the data types you have to choose from include these fields here. Char, varchar, Int, big int, decimal and date time, and many others. So let's actually do this. Let's pretend that we didn't hand you this user's table and let me go ahead and create, for myself, in the lectures database-- actually let me go ahead and delete the table I have in here already so that we can actually create this. Whoops. I'm going to drop this table, and now I'm going to go again to the lecture database over here, I'm going to create a table called users and let's just do three columns initially and click Go. 

Now, for the most part, again, this is just using this graphical tool called phpMyAdmin, and what we're doing now is creating a table. So this is like going File, New, and creating a new Excel file. So it's asking me a few questions, from left to right, what's the name of the first column, and then the name of the second column, and the name of the third. So let's recreate this. ID, and then username was one, and then hash was another. So what should the data type be now for a field like ID? 

Here is the whole list of data types available to you in a database, and for now let's just go with int. 32-bit value, I don't think realistically I'm going to have more than 4 billion users in my account, in my service, so I'm going to keep moving on to the next question. I'm not going to specify a length or values, it's not applicable here for an int, per se. And now I can specify, apparently, a default value, which I'm not going to specify. A collation, I don't know what that is. An attribute. Now we actually do have a design decision. So there's a few fields here, not all of which are applicable, but unsigned just means what? That the int must be? Just non-negative. So it has to be 0 on up. No, I'm not going to check because I want every user to have an ID, it cannot be null. And then, we get to some more interesting design decisions like this. We'll come back to this in a moment, but what another feature of database is, is that you can tell the database server go ahead and optimize yourself, your RAM and your hard disk space, so that selects, and inserts, and deletes, and updates are really fast. Contrast this with pset5. 

If you wanted to look up something in your hash table, which you think of as a database, who had to do all the work for making your hash table fast. It's like, obviously, you. Right? You had to put in all the time fine tuning things, getting a hash function right, figuring out how many buckets to have. 

But what's nice, again, about a database is you just punt all of this to other people who have thought this through for you, and what I'm going to say here under index is that my ID field is going to be the primary way of identifying users in this database. I'm not going to think of Zamyla as Zamyla, I'm going to think of her as the number 6. 

Why is it, perhaps, better intuitively to think of and model each of your individual rows using a number instead of something like a string, like the Zamyla or Gabe or longer string still? Yeah? 

AUDIENCE: An ID is unique? DAVID J. MALAN: Say again? AUDIENCE: An ID is unique? DAVID J. MALAN: An ID is unique, but suppose-- as the case in general with usernames, suppose I also said there can only be one Zamyla in the world, and only one Gabe. I could impose the uniqueness constraint on strings, too, if I wanted. So not a bad thought. 

AUDIENCE: More secure. 

DAVID J. MALAN: More secure, why? AUDIENCE: You can't tell which is which, as in the user. DAVID J. MALAN: OK, you can't tell which user is which so there's a privacy aspect to it, especially if the IDs maybe appearing in the URLs. So sure, that could kind of work, too. Other thoughts? Yeah? 

AUDIENCE: It's easier to perform operations on an int. DAVID J. MALAN: That's the real kicker. It's just more efficient, or easier for the computer, to perform operations on an integer. Right? An int is guaranteed to be 32-bit, whereas Zamyla is a few characters long, Gabriel is a few more characters long, Davenport is really long, and so it's not particularly efficient to use strings to compare values and look for fields, and update fields, if you can get away with just one integer. Just 32 bits. So usernames, too, this way, don't have to be unique, although they probably should be, and even in this way too a user could be allowed to change his or her username. 

So let's now leave this as the primary means of identifying the user. This is telling the database go ahead and optimize yourself so that look ups on ID are super fast. AI, horribly named, just means Auto Increment, and this is the check box we need to check to specify that the ID field to be automatically updated for me, and then I'm going to scroll to the right here and frankly I'm not really interested in any more of these fields. Certainly not today. 

So I'm going to go back here, to the first column, where I need to specify username and hash, and let's at least focus on the second one for now. Int is probably not the right call, so what makes more sense perhaps? 

AUDIENCE: Text. DAVID J. MALAN: Say again? AUDIENCE: Text. DAVID J. MALAN: Text? OK, I heard text. What else? We kind of have a bunch of choices that are textual in nature. So when, and why, do you use some of these? Well char, contrary to what you might think, is not a single character. It's a specific number of characters. So if we know that all usernames must be like eight characters, as used to be common in older computer systems, I could say char and then I could say 8 here. That's when the third column becomes applicable when creating a table. 

But that's kind of annoying because some people might want to have a longer username than eight characters, some people might want to have a shorter username, so why commit myself to a specific number? Why not have a variable number of chars and just say that the maximum length of a name is, I don't know, like 64 characters. I can't think of any friends who have names longer than 64 characters, and even if that's too short you could certainly bump it up arbitrarily. 

So varchar is a variable number of chars. Text is not a bad instinct, and frankly that sort of does what it says, but a text field can be like 65,000 bytes at least. That's probably overkill for a field, and in fact, yup, 65,535. That's probably overkill for a name, so we'll stick, typically, with varchars for textual field and hash, too. Hash, it turns out, we could do a varchar as well or something like that, but we won't focus today on the cryptography there and the numbers that we might actually want to use for its length. 

But let me scroll down to the right. You can only have one primary index for a table, but do I want to apply any of these, now, to username, would you say? What should username be based on a vague understanding of these four options? Just by their names? 

AUDIENCE: Unique. 

DAVID J. MALAN: So unique, right? So it turns out that not only could you tell a database, in advance, this is the primary way of identifying fields. You can also say this is going to be a unique field. It's not going to be the thing I rely on, but I would like the database to essentially have that if condition, so that if I ever tried to register two users with the same name, the database flat out is not going to let me. I might have some additional code in PHP that prevents as much, but the database, too, can ensure that that's never going to happen. 

Now, as an aside, especially as you think about final projects, keep in mind it index and full text are actually quite useful. If you have a larger database, not with dozens, but with hundreds or thousands or even millions of fields, you can also tell the database in advance this is a field I'm going to be searching on a lot. Maybe its username, maybe it's bio, if you're making a Facebook-like website that has paragraphs that the user's allowed to save, and if you want to tell the database in advance I'm going to be searching on this field a lot, but it's not necessarily unique, you can specify create me an index. Or, you can say also allow me to do sort of arbitrary searches like Command or Control F, like you might in a Word Processor, so you could look arbitrary strings or substrings in this field. In other words, we're getting to the point in the semester where you don't have to worry about how to implement things efficiently. You just need to know about what design decisions to make so that you're using the right tools for the trade in order to leverage features that other people have built for you. So to recap, primary should only have one, you can only have one, and it's the thing you're committing to using to identifying fields uniquely. Unique is just similar in spirit, but you might only occasionally use it, but you want the database to impose it. Index just means preemptively speed things up in the future so that I can search for things in this field. And then full text is generally for paragraphs, or essays, or large bodies of text where you might also want to have wild cards like the equivalent of star. Right. 

So that was kind of a lot to all at once. Let's see if we can't distill a couple of these features and then build something fairly simple, but powerful. So among the other design decisions you're ultimately going to have is along the lines of storage engines. And let me just make mention of this in anticipation of final projects, and anticipation of let's say-- no let's do this. Let's build this little application first. I'm going to go into my terminal window, and in here is not only counter.php, which we're now going to get rid of as no longer germane, but we have a whole bunch of directories and this is going to be very similar in spirit to what you'll see in problem set seven. 

So we have three directories includes public and templates, which is exactly where we left off on Monday with our whole MVC paradigm. And to recap, in public is going to go any file that I want users to actually v be able to visit in their browser via URL. Template. What did we put in templates? What kind of stuff? There wasn't much but a couple files at least on Monday. Yeah. 

AUDIENCE: Header and Footer? 

DAVID J. MALAN: Header and Footer. So we have something similar today, too. We've got a few more files but Footer I see, Header I see, and then a bunch of other files. So this is the equivalent of the V MVC view, which, again, will be a bit more clear in problem set seven, but this is just a folder I'm putting a lot of my aesthetics. A lot of my HTML, a lot of my forms. Meanwhile, includes, is another directory that has these three files and let's take a quick look at these. 

I'm going to go ahead and open up config.php. As it turns out, much like earlier in the term, you sharp included CS50 dot h with pset7. In today's example, you're going to do the equivalent of that with a require statement that effectively includes these several lines. So to be clear, this is a file called config.php. And notice what it's doing. It's apparently doing something cryptic, turning on error messages so that you can see them in the browser. It's, then, apparently requiring two other files so this is like #include in C, and then this one we did see, and we've relied on, this turns on that shopping cart like functionality. 

This means a cookie will be sent back and forth. So why is this interesting? Well, if we go back to this directory and open up, for instance, constance.php. Notice that PHP does support constants, it's not quite like #define in C. Instead, you literally say defined, and notice that I've stored in advance four constants in this file. One for today's database, for my password, for my username, and for the name of the server. So these are actually going to be pretty similar in problem set seven. And lastly, and this is where I'm going to get some nice functionality from the staff, in functions.php is a bunch of code we've written, and I stole some of this from problem set seven for today, that does a bunch of things and let's just look at one of them in particular. This function here, query, is going to be the PHP function we call in order to execute SQL. A moment ago we were using phpMyAdmin, but that's just for sort of learning purposes and diagnostic purposes and forgetting your database set. When you actually use your database, you, the human, are obviously not going to be pulling up a web page every time someone registers. You're going to write code that inserts and deletes users on demand, and we're going to do this by way of the query function. If I now scroll down, there's going to be a few more features. Redirect is going to be a function we wrote for you that allows you to send the user to another URL, and render is a function, quite like we saw on Monday, that actually renders a template, but more on these in the form of pset7's own walk through. For now, let's go ahead and do this. 

Let me go into my lectures table and see that there's currently nothing here just yet, and let me also go into my public directory, where there's just one file, index.php. This file appears to be super simple at the moment, it looks just like this. Very much like how we left off on Monday. I'm requiring this file, config.php, which is in an includes directory, which is in dot dot, my parents, and then it's just rendering this file. So what is this file? 

Let's open up in my templates form.php, and we'll see this. Super simple, apparently this form is going to submit by a $_GET or $_POST. Quick sanity check. Literally visually search the file. Method equals post. So it's not going to use the URL, like Google does, it's going to sort of hide the information behind the scenes and it's going to submit to a file called register.php, and that's the file we haven't yet written but what this is going to look like is this. 

If I go to a separate page This is what localhost/index.php looks like. And again, the server's just assuming index.php. Enter. So that's where we're at, and what I want to do is be able to type things like David, and then my phone number, which will say 617-555-1212 for now, register and now register.php was not found. So I need to implement this. So let's quickly whip something like this up. Let me go into my public directory and do gedit of register.php, and now I'm going to go ahead and start PHP mode, like we did on Monday, and close PHP's tag, and let's do a couple of things. 

So one, I know, from having written that form, that I want to check for the following. If it is empty, whatever the user typed in to the name field, then I'm going to say something like apologize missing name. Apologize, meanwhile, is not a built in PHP thing, it's a function we wrote in functions.php for pset7 so that you have access to it. Else if the other field is empty, number, then I'm going to apologize to the user and say missing number. Save this file. 

Now let's go back to my browser, go back to the forum try again. Register. OK. Nothing happened, which is good. I didn't get an error message. But if instead, let's reload this page, and not provide anything. Damn it. Do that. Register. What did I do wrong? If empty, $_POST name. Say again? 

Oh, of course. I forgot the most important part, which is require("../includes/config.php."). I need to have access to the apologize function, which is why nothing was happening. The function doesn't actually exist. So let's try this again. Let's reload the page, click Register. OK. There it is. So, the output we're seeing here is the result of calling an apologize function, super simple, and it just prints out whatever I give it as an argument. 

All right, so let's cooperate. Let's provide my name like David, register, missing number OK let's provide that, too. 617-555-1212. Register. OK. So all is well now, just nothing interesting is happening. So now let's make something more interesting happen like this. Let me go into phpMyAdmin, and let's actually create a table called users, I'm going to give it three columns, and I'll quickly create ID, and then name, and then number, and the ID field I'm going to leave as an int. The name field I'm going to leave as a varchar, and we'll say 64, somewhat arbitrarily. The number I'm going to make, you know what? We're going into support US numbers here, so I'm going to do something like char and then 10 characters max for an area code and then seven digits. And then over here, I'm going to specify auto increment this field, make this a primary key, and I'm going to go ahead and not check any of these other boxes. 

So when I now finally click Save, and I go back to my users table, this is what it looks like if I now click a New Tab structure. So this, to be clear, is just phpMyAdmin's way of saying your database table has an ID, a name, and a number with those particular configurations and we'll ignore the rest of the fields there for now. 

So now what do I want to do? So if I go now into my source code, if all is well I want to execute the following query. Insert into, and I can just say users I don't strictly need those back ticks if it's not a dangerous word like users. I'm going to say name, number, and then here I'm not going to hard code the digit of the values yet. I'm going to put two question marks. And this is a convention in many languages whereby if you want to have a placeholder for a string you're going to use the question marks, for reasons we'll come back to chat about security, and here I'm going to pass in those two fields post name, and then post number, and now save the file. 

And now I'm going to go down here is a super simply say rendersuccess.php, which is going to be another template. I'm going to create really fast. Geditsuccess.php and I'm just going to say H1 success in that file. All right. So now, let's go back to the browser, where I visited before. Let's go ahead and confirm I wrote in David, I wrote in a phone number, register. Damn it. What did I do wrong? So I'm seeing an error here, you have an error in your SQL syntax. Let me jump back to gedit, let me go back to register.php, and what did I omit that was important last time? I need this. You want to know that other than from having noticed before, but I need this. 

So now let's go back, and this was helpful to see in the browser and that's why in config.php we spit out errors. Let's go ahead and reload, click Continue, success. So now let me go over to my database here and click on Users, and browse, and notice I now have David in my database here. Now technically this website is not yet on the public internet, so I can't have other people in putting here, but if I now wanted to, for instance, send myself a text message. Let's go out on a limb here and see if this actually works. I'm going to go ahead and delete this row and we'll blur this out in the video later so we don't have the entire internet texting me, and we will now go up to the browser and we'll go over to lecture and we'll type in different number here, register, success. 

So now, my own number's presumably in the database, and now the fun part. Let's actually use PHP to do something programmatically, either from the command line or from somewhere else, and for now I'm just going to keep it simple and I'm going to go into my directory here and do the following. Gedit script let's say, we'll call it text, #!/user/bin/env PHP, like we saw last time. PHP. 

Now I'm going to do require includes config.php, even though this might induce a slight error. And now I'm going to go ahead and say rows, query, select star from users, and now here I'm going to do a technique from last time for each rows as row. And I'm going to do something simple. Printf let's say name is this, and number is this, backslash n. And now I'm going to pass in row quote unquote name, and row quote unquote number, and now let's go ahead and my terminal window chmod this a + x to make this script called text executable. And now let's run text. 

OK, so progress. So I've now written a command line script, in a language called PHP, that, because of that require line, has access to all those configuration constants that I specified. The name of the database and so forth. In fact, just to be clear that this isn't a fluke, let me go ahead and register, really fast, someone else like Rob and will give him the 555-1212 number. 

And now, if I run the script again, notice the power of what we're doing with the database. Now I've immediately seen what the other two rows are in my database. So now let's try to do something even fancier inside of, and this is the part we've not tested in advance, so the last time I did this things went horribly awry, we have video to that effect. 

Actually, yeah, funny aside. So the last time, in a lecture like two years ago, we decided, I decided, to be all this would be a great idea to dynamically generate emails in class, using the entire database CS50 students, who had given us their numbers and their cellphone carriers which you might recall from pset0, how to reason, it turns out I had a minor bug in my program and did a couple mistakes in 2012, I think. 

Whereby, one I had for loop that did exactly this kind of thing, iterating over the database, getting a name from the database, name from the database, and then on each iteration of that loop I sent an email. But instead of sending one email, I sent one email the first iteration, and two emails a second iteration, sent three emails a second iteration, which as you might recall from our discussion of asymptotic notation this big O of bad, like n squared is how many messages I sent, but it wasn't even emails it was text messages. 

And as you know, attendance isn't super high toward the end the semester and so I thought it would be cute at the time to say, "Why aren't you class?" In the text message I sent to the whole class, and it was funny to like 50% of the class, but the other 50%, some of whom freaked out, i sent incredibly apologetic sweet notes to the staff apologizing for having missed the lecture just this once, right? 

So that would horribly awry. So in that spirit, let's try this again but just with my number. In advance, in functions.php, I've written this function here. It's called text, and it takes in three arguments. A number, a carrier, and a message. 

I'm using a switch statement, which wonderfully PHP take strings, not just integers, and I didn't implement all the support for this yet, I've just done AT&T and Verizon. Because it turns out that with these carriers they have email to SMS gateways, whereby you can actually send an email to an address like phone number at vtext.com and if the user hasn't blocked the messages, it'll go through is a text message. 

Now to do this, I'm going to have to add one field really fast to my database. I'm going to go into my structure, and I'm going to go ahead and add a field at the end of the table. Let's click Go, and I'm going to call this carrier and for now I'm going to leave this as a bar text, but we can be fancier in the future. I'm going to quickly go into my table, and I'm going to get rid of Rob, because that's a fake number, I'm going to go into edit here and I'm going to change my carrier manually to be Verizon, which it is, and now over here. 

Let's do a quick sanity check. Let's open up our text script, which looks like this, carrier is %s. We're doing a lot more error checking than I did in 2012, carrier. And now, I'm going to go ahead and re-run the script. OK. Carrier is Verizon, which means now hopefully I can do just this. Correctly this year, hopefully, here we go. 

So inside of this for loop, I'm going to not only have this printf, I'm also going to call text and the usage of this function recall was it takes a number, a carrier, and a message. So let's see, number is going to be row quote unquote "number," row quote unquote "carrier," and the last one was message. Don't screw up this year, semicolon. 

OK. Fingers crossed. Let's see if this works. All right, so. Here we go. Let's unlock the phone, cross your fingers, damn it. Undefined variable may-- oh wait, wait, wait, real fast. Real fast, real fast. This is totally worth it. Let me grab, let me grab, uh-oh. Thank you, the texts have started from someone else. Let me go ahead and open up real fast, dropbox.php/mail in here. Standby. Totally worth it. Downloads. OK, source src8m. OK. 

Need one more line here. Oh there it is, it's in Frosh IMs, it's in register at three. Oh hello, Margo, thank you very much. OK, and I was missing this line here. So let me quickly grab this line of code, which includes the mail or library that I actually want to use, I'm going to quickly go back into functions, I'm going to go to the top of this file and require this file as well, and now I'm going to really cross my fingers when I go back to the command line script, which is inside of today's local host directory. Run text. Enter. Mail. Standby. Standby. Mail. Oh, OK. Here we go. 

Mail gets new PHP mailer. Did I do this right? Damn it. To-- oh, wait, wait, wait. Stand by. I promise, this is going to be so worth it. Address. This is why I don't make the examples right before class. Ugh. The following recipients failed. Let's try one last thing. SMTP set from, add address, the address is indeed that. Let's try this last part in address. Aw, I'm really sad right now. Thank you. But I really appreciate all the texts you've been sending. You've got this David. You're blowing it. Let's leave it there and we will fix on Monday. See you then. 

DAVEN FARNHAM: And now Deep Thoughts by Daven Farnham. If a binary tree falls in a forest and no one is around to C it-- [CHUCKLING]. [MUSIC PLAYING] DAVID J. MALAN: All right. Welcome back. This is CS50. This is the end of week 8. And as you know, we have pretty regular office hours in a few of the dining halls, including Annenberg. And some of the team kindly took some photos lately. And in honor of Halloween, we thought we'd share one that rather caught us by surprise here in Annenberg Hall just the other night. Your classmate Jacob posed for this photo, but was more amusing was on Facebook, the ensuing conversation that happened afterward. 

His first post in response to his photo was this. A few minutes later, he decided to one up himself with this. It went on then to go to this, and then, even more amusingly is when his mom chimed in. And then ultimately, it seems this was just a wonderful ruse for a play that's going on. 

So, if you would like to see Jacob and others, among them Cynthia Meng, who's behind the scenes of CS50 zone staff, head to this URL and this play here. So without further ado, today we continue this look at web programming, and the actual creation of programs that don't run at your command line, but instead run inside of a browser. 

Presumably now, or very shortly, you're going to be in the midst of implementing your own web server, which is different from web programming. The web server in pset6 is all about writing software that knows how to take HTTP requests from a browser, or even from you, a human, with a program called Telnet, and then respond to those requests either by spitting out an HTML file, or a jpeg, or a gif, or even a .php file. 

But with a web server, it's not supposed to just open a PHP file, something ending in .php, and then spit out the contents. It's supposed to do what to that file first? So to speak. Not compile it, we said on Monday, but rather-- So, interpret it. 

PHP's an interpreted language, and so one of the key features in your web server, albeit implemented by us, is this ability for your web server to notice, oh. This is a file ending in .php. Let me not just send it to the user like it's static content, but rather let me read it line by line, left to right, and interpret it. 

And to do, that you guys will essentially punt to a program in the appliance, and on a lot of computer systems, just called PHP. That is the name of PHP the language's own interpreter. So, that piece we implement for you, and what's left for you, ultimately, is a number of pieces, among which is implementing support for static content. 

But now, and with problem set seven, you're going to start to transition to actually writing the PHP code that gets interpreted in talking to a back end database that stores information. So let's better understand first a couple of these superglobals and just how much power you get out of the box for free with a language like PHP. Things you don't have to implement yourself. 

So, we saw on Monday $_GET, which is a superglobal, which is just PHP speak for a global variable you can access anywhere. And what's inside of $_GET? What's inside of this superglobal that we see? Surely statistically at least one person knows. What's inside of $_GET? Yeah? 

AUDIENCE: It's the variables you put in the query string. 

DAVID J. MALAN: Perfect. It's the variables you put in the query string. So, in our older example of reimplementing Google when we had a URL, and then question mark, which demarcates the start of HTTP parameters, then we had q equal something, like q equals cats, what would automatically go inside of that $_GET super global for you, because of PHP, is a key of Q, and of value thereof of cats. 

In other words, $_GET and all of these things are associative arrays, hash tables of sorts, that store keys and values. Now, back in pset5, the hash table you might have implemented, or the try you might have implemented, really was effectively an associative array, a data structure whereby you can associate keys with values. 

But in pset5, the values were trivial. The value was essentially true or false. Is the word in the dictionary? So, when you hashed a word like apple to see if apple is in the dictionary, your check function presumably returned true or false. So, that's effectively the value we're getting back. 

But we saw on Monday briefly, you can certainly associate more interesting values than just true or false with keys, like apple. You could actually return an arbitrary string, and indeed, that's what $_GET and these other variables let you do. 

So $_POST is similar in spirit, but if you submit a form via post, a different HTTP method that's used for things like credit cards, and private information, and even binary information like photos, those things end up inside of $_POST. And actually for files like jpegs and whatnot, there's even another that's not up here called $_FILES as well. 

So, server we won't dwell on too much, but it gives you access to sort of lower level details about the server itself that you're using. Cookie and session, though, we'll effectively see now. The last is what we use to implement the notion of a shopping cart. A super simple one, but recall that we had this example here, counting how many times you had visited this page before. 

But today, rather than just look at the effect of this, let's open up Chrome's Inspector, which you can usually do by right clicking or Control clicking anywhere on a web page, and then choose inspect element. Or you can go through the menus that we describe in pset6's spec. And I'm going to the Network tab here, and let's watch for a moment the HTTP traffic that's going back and forth. 

Let me first go ahead and clear Chrome's cache. So some of you might be familiar with this technique already, and we're going to use it for debugging purposes here. Now we as computer scientists are going to start doing this for debugging purposes, whereby we will clear the cache, typically, so that we can get rid of things called cookies. So you're probably generally familiar with what cookies are, or at least that they exist, but what's your understanding of them, as just a user of computers, what is a cookie? Yeah. 

AUDIENCE: It's a bit of-- well, not bit in a term of computer science. It's a piece of data that a website sends to you in order to be able to record statistics on you. DAVID J. MALAN: OK, good. So it's a piece of data that a server, puts onto your computer, and let's generalize it even more, it's a key value-- well, that's getting more precise. It is a piece of information, a piece of data, that a server is able to put on your computer and very often, the server does this so as to remember who you are. So for instance, odds are you're probably logged into sites like Facebook, or Gmail, or others before, and you log in with your username and password, and then after that, for some number of minutes or hours or even days, the server remembers that you are, in fact, logged in. Now, how is that actually happening? Because you're certainly not retyping your username and password every time you navigate to a different page on Facebook. So it turns out the cookies are the answer. 

A cookie you can think of as, sort of like, a digital hand stamp that you might get at an amusement park or a club that essentially indicates you have been here before, and you've already shown your ID to the bouncer, for instance, and that the club or the park should now assume that you have authenticated already. You have already been identified by it. 

So with that in mind, let's open up counter here. Let me go ahead, I just did, and clear all of my cookies. And now what I'm going to do is hold Shift, just for good measure, and forcibly reload the page. Shift just make sure that nothing gets cached. And here's the request that went back and forth. So over here we have a request, and let me zoom in down here, and a lot of this is sort of uninteresting details for now that the browser has automatically sent, but let's click View Source to see the raw headers. 

And if you've dived into pset6 already, you'll certainly recognize things like this, and maybe some of these other lines here, but what's more interesting for today if I scroll down, not to the request but to the so-called response, this line probably looks familiar. That's a good thing when you see a 200 OK. Apparently this is the date and time on the server and there's a bunch of stuff. Oh, this is interesting. 

Turns out whenever you use PHP, at least in this server, the server spits out what version of PHP you're using. Which, actually, for security purposes, is not a good thing. But, we'll come back to that some other time perhaps. But now this is the juicy line today, and we saw briefly some of these, I think with Facebook when we poked around the Inspector at that time, set cookie is what is planting that little piece of information onto your computer. 

This is an HTTP header that's effectively telling your browser, Chrome, IE, whatever, hey browser store on the user's hard drive, or in the user's RAM, a key called PHPSESSID, which is a shorthand notation for session ID, and give it a value of 0vlk8t, dot, dot, dot. A really long pseudo random alphanumeric string. It's just a really big number, but it's encoded with letters and numbers so that the size of it can be even larger than numbers alone. And then, by the way, Path=/, that just means that this cookie should be associated with the entirety of the website, not just a specific page the whole thing. So this is that virtual hand stamp. It's as though the server, Facebook, or in our case the appliance, has literally written 0vlk8t and so forth, on your hand. Notice what the server's, not doing is it's not storing my username, certainly not storing my password. 

Instead, it appears to be storing pseudo random information so that no one can guess what my hand stamp is. On the server side, meanwhile, the server is going to remember, probably in a database or something, that the user, who in the future presents a hand stamp of 0vlk8t, dot, dot, dot, should be associated with this particular shopping cart, so to speak. In other words, if I now go back here and reload this page, how does the server know that I visited one time? 

Or if I do it again, how does the server know that I've visited it two times? Well if I go down to this most recent request, which is now the third that I've sent in total, notice my request now. There is still this request up here, same as before, there's still a whole bunch of stuff that we've ignored as before, but the very last header, this time, because I've been here before, is a presentation of this virtual hand stamp. 

Whereby this line here, not set cookie but cookie colon PHPSESSI= 0vlk8t, that's just my browser's automatic presentation of this hand stamp so that now the server, as soon as it realizes, ooh, this is user 0vlk8t dot, dot, dot, I can now remember who he or she is and reassociate with that user whatever information I want to, and all of that information can be stored by you, the programmer, in $_SESSION. 

So to be clear, if I open up real quick in gedit that actual file, counter.php, in my local host public directory as before, notice that, indeed, I'm ultimately storing in $_SESSION quote unquote "counter," the value of the previous counter which I get from these lines up here that we looked at last time plus one. So underneath the hood, that's all cookies are. It's just the sort of digital hand stamp going back and forth, and frankly if you open Chrome's Inspector on any website you visit today, with super high probability, you're going to see maybe one, maybe half a dozen cookies being remembered by you. 

And worse yet, if those website you're visiting all have advertisements, which is certainly quite common today, and if those advertisements are coming from some central party, someone like Google or AdWords as they call one of their products or other such vendors that sell ads, what's interesting, and frankly what's a little worrisome, about how HTTP works, is that if you have an ad embedded in Facebook.com, and Google.com, and Harvard.edu, any number of websites, so it's such that there's a middle man who is serving up ads for all three of those websites, it turns out that the cookies are per domain. 

So if you have an ad coming from the same company on different websites, that company can effectively track who you are across all of those websites. Harvard might not know you're visiting Facebook. Facebook might not know and you're visiting Harvard. But whatever ad service they're using if that domain is present in both Harvard.edu web pages and Facebook.com webpages, this middle man surely knows who you are because of these cookies being shared across, or rather to, that so-called middleman. 

So we'll come back to this in security implications thereof, but there's a lot of information being stored about you any time you visit most any web page on the internet and it really reduces to this very simple mechanism. What happens, then, if you're super paranoid and you decide to go into Chrome or IE or whatever and turn off your cookies? What happens? Yeah? You really-- you've done this right? OK. No, go ahead. 

AUDIENCE: Certain websites don't have a function without it like Facebook. DAVID J. MALAN: Yeah! So certain websites will just stop working. And in most websites these days that fundamentally rely on cookies, especially if they have you log in, they're just going to break. Because consider the alternative, if the website has no way of remembering who you are, and therefore your web browser is not representing with every HTTP request of this hand stamp, effectively a website like Facebook's going to have to prompt you to log in every darn time you change pages, or click a link, which is surely not a particularly good user experience. 

So that there, too, is among the trade offs. So without further ado, let's take for granted that with web programming, in languages like PHP, you can remember information like that in problem set seven when you implement your own E*Trade-like website with which to buy and sell stocks, you'll remember exactly what the user has bought and sold and who he or she is by way of this session. But we're going to need a fancier way than email to start keeping information around. Right? 

On Monday, we talked about Frosh IMs and how in version one of that website, years ago, all we did was email the Proctor who's in charge of the intramural sports program, the name, and the gender, and whether or not they're a captain, and the dorm of someone who's registering for an intramural sport. So it's not bad, but he or she then had to troll through their email, make a spreadsheet or something like that, to keep everything organized. So surely we as programmers can do this for that proctor. And so enter in SQL, Structured Query Language, which is going to look pretty different to both C and PHP, and you'll dive in much more hands on PHP and problem set seven but also SQL, or SQL, this is a language that you use to talk to a database. 

But what's a database? Well you think of a database, at least for now, as just being like an Excel file, or if you're a Mac user a numbers file, or if you're a Google Apps user a Google spreadsheet, it's effectively a database, or really specifically a relational database. A relational database is just something that has rows and columns, and you can store any kind of information in these rows or columns. 

But what's nice about SQL, and about actual databases, not just spreadsheets or Google spreadsheets, is that you can use a language to actually execute queries to insert data, to remove data, to look for data, even most importantly, and you don't have to use it fairly manually as you might typically a Google spreadsheet like this. 

So in SQL, there's a bunch of fundamental statements or pieces of functionality built in. There's many more than these, but you can go a huge distance just by knowing that this language called SQL has at least four statements you can leverage. 

Delete, for removing data, Insert, for adding rows, Update, for changing rows, and Selecting, for getting back rows and that's indeed what SQL does. It operates entirely on rows so that when you insert, or remove, or update, or select what you're getting back as a so-called result set, like an array of rows. A bunch of rows from a table. 

So back in the day, and even to this day, you can interact with the database using a command line, but it's not particularly fun to use this black and white style window and actually execute commands and poke around your database. A graphical user interface, or GUI, is much more preferable, arguably, and so the tool we recommend and preinstalled for you on the appliance is called phpMyAdmin. It's a total coincidence that the name of this thing has PHP in it, it just means that the people who wrote this program themselves wrote it in PHP. 

But it's ultimately about administering a database server, like a MYSQL server that you might have, as you do, in the CS50 appliance. So there's more detail here than we need to care about today, but what's key is that on the left hand side is a list of the databases that you have on your computer, on your CS50 appliance, or come final projects that you might have on a third party, a company's website or web server, that you might be paying for space. So on the left is the databases, one of which is pset7 which I borrowed from next weeks pset, and then on the top there notice there's a bunch of tabs, one of which is databases, SQL, status, users, export and so forth. So you can go a long way just by realizing that most of the user interface is in the top left column and across the top right up there. So what can we actually do with this? Well, let's start creating a bit of information as follows. 

Suppose the following is the case, as will be in just a few days, you want to implement a website, called CS50 Finance, and this website lets you buy quote unquote and sell stocks. And it's going to figure out the price of those stocks, ultimately as you'll see, by talking to Yahoo Finance. Which, wonderfully, has a free service whereby you can pass in a stock ticker like GOOG for Google, and it will give you back Google's current stock price within the past few minutes at least. 

So you'll use that, ultimately, to pretend for the user to buy and sell actual stocks using virtual money, but the very first thing the user's going to see is this login screen which asks them for their username and password. And so, one of the first challenges for you in pset7 is going to be to implement the back end database, the spreadsheet if you will, that's going to store users names and passwords and ultimately what stocks they own, and how many, and how much cash they have, so a bunch of other things in other tables, or spreadsheets. 

So let's take a look at how this might appear at first glance. I'm going to go back to the appliance and I'm going to go to this URL here phpMyAdmin localhost/phpmyadmin and you'll see that it takes me to an interface exactly as we saw on the screen shot, and here I have an additional database called lecture for today and let me go ahead first and click on pset7. 

I seem to have a couple of options, one for new , for creating a new table, and a link to users, which is a table I already created. So what's a table? So if you used Excel before, and if you've used numbers or Google Spreadsheets, you open up a window and you get a whole bunch of rows and columns, but then you usually have worksheets along the bottom, or separate tabs. You can think of each worksheet as a table so that database, ultimately, is a combination of one or more tables, one or more worksheets, in the world of a normal spreadsheet. So let me go ahead and click on this worksheet that I premade, called users, a.k.a. Database table. And if I scroll down here, let me zoom out a bit, this is what phpMyAdmin is telling us is inside of this table right now. It's a little confusing at first glance because the UI is not the prettiest thing in the world, but what is interesting is this part here. ID, username, and hash. 

In advance, and you'll be handed this in problem set seven, we give you a file containing a super small database table, borrowed actually from the hacker edition of problem set two, inside of which there are six rows. One for Belinda all the way down to one for Zamyla, and notice to the left of those usernames are unique IDs like one, two, three, four, five, six, integers, and then to the right are hashes. 

And if, odds are, you didn't do the hacker edition problem set two, but a hash is just like an encrypted password with a few caveats. And so, what you see here are the encrypted versions of all six of our passwords from problem set two's hacker edition. Now to the left is just some GUI stuff, editing this row, copying this row, deleting this row. 

But what's interesting now is the following. I can actually start experimenting with this table. So if I go and click the SQL tab, I get this big text box. And this is not how we're going to do it when actually writing code. To be clear, phpMyAdmin is just a tool that's going to let us poke around the database and let us experiment with queries. 

So for instance, suppose I execute exactly this. Select, which is one of those keywords I mentioned earlier, star, which represents all the columns in a table. From what table? Well, users. And notice there's this weird convention in SQL where you actually use back ticks, typically, not single quotes and not double quotes when you talk about tables names, so the back quote is the thing on the top left hand of your keyboard most likely. 

So let me go ahead now and just leave that alone and scroll down and click Go, and we're actually going to see the same thing. We have just executed a SQL query saying select everything star from table called users, and what you get back is this. Ultimately, we'll be able to do that same thing in code, but for now all I wanted to do was see it in my browser. Well let's do something a little different. Let me go back to the SQL tab, and let's just say that what? Zamyla has lost all of her money, and therefore it's time for us to delete her as a user. She's no longer logging in. 

So I'm going to say delete from-- well, maintain capitalization for consistency, delete from users where. And so, we can have these predicates, or these qualifiers, at the end of my statement where and how could I delete Zamyla? By her name Zamyla, so the column, one of the columns was named, so where name = "Zamyla". And here I use double quotes or single quotes, you only use the back ticks when talking about the names, for instance, of tables or fields. And let me click Go here. And now, the web page is being a little uptight. 

Or, do you really want to execute delete from users where name equals Zamyla? Yes. So now, if we go back to my table by clicking users, notice that Hm. I goofed. And in fact, I kind of clicked away so fast you didn't even see the red error message, perhaps. What did I do wrong? AUDIENCE: You didn't need to capitalize her name. DAVID J. MALAN: Yeah I capitalized her name, but her username-- actually I made a couple mistakes, right? One, her username is zamyla, lowercase Z, and the column name is username, not name, so let's do this again. Let me go ahead and delete from users where username equals quote unquote "Zamyla". All right? So this looks a little better, let me go scroll down and click Go. It's still going to yell at me to be sure. I click Yes, and now we see, frankly this happened, really fast, less than one second certainly, this is exactly the query that got executed. To confirm, let me click users and indeed now Zamyla is gone. Now let's do the opposite. Suppose that Gabe wants to register for the website. What's the SQL query, what's the command I could type to add Gabe? Well it's pretty straightforward. Insert into users, and now it gets a little cryptic. I need to specify, to the server, what fields I want to assign. I don't really care what Gabe's ID number is, so I'm going to skip that. I'm instead going to say username, hash, and then the values I want to put there is going to be Gabe. And then his hash, I don't know. So for now, I'm going to leave that as a big to do. We'll come back to that in the problem set spec as to how you actually do that. 

So notice, again, the syntax. Insert into table name, then a parenthesized list of the fields, the columns you want to add values to, and then just the same exact ordering left to right of the values you want to add, and it's just wrapping because the text is a little long. So now let me click Go. One row inserted. And now if I go back to users, what's interesting is that not only is Gabe now in the database, what is apparently his ID? 

Well it's seven. Why is it seven when I didn't add it? So this, too, is one of the features you get of the database. A lot of built in functionality. It turns out that when created this table, I preconfigured it's automatically assign an ID in such a way that it increments. So if you've ever poked around, and looked at what your Facebook ID number is, these days it's not really a thing to do, but Facebook as an API, Application Programming Interface, whereby you can get back a whole bunch of data about yourself, about your friends, and your connections. And what used to be kind of cool, back in the day, was to look up what your Facebook ID number was. Mark Zuckerberg's, for instance, is three since he was the author of the site. And as the story goes, he created two test accounts, users one and two, which he then deleted. And so, Zuck, as is his username on Facebook, is ID number three, and all of us have numbers much larger than three these days. In fact, at some point Facebook moved away from even using an int, which is a 32-bit value, to using the next step up, essentially a long long so that they could accommodate even more users registering. So a fun little historical fact. 

So that's just the basic syntax with which we might execute a couple of queries, but we can actually do a bunch more things with SQL. And you'll see, ultimately, in the problem set seven that you have to make a number of design decisions, among them is going to be what data types to use. So just like in C, there are data types in a database, like MySQL, and the data types you have to choose from include these fields here. Char, varchar, Int, big int, decimal and date time, and many others. So let's actually do this. Let's pretend that we didn't hand you this user's table and let me go ahead and create, for myself, in the lectures database-- actually let me go ahead and delete the table I have in here already so that we can actually create this. Whoops. I'm going to drop this table, and now I'm going to go again to the lecture database over here, I'm going to create a table called users and let's just do three columns initially and click Go. 

Now, for the most part, again, this is just using this graphical tool called phpMyAdmin, and what we're doing now is creating a table. So this is like going File, New, and creating a new Excel file. So it's asking me a few questions, from left to right, what's the name of the first column, and then the name of the second column, and the name of the third. So let's recreate this. ID, and then username was one, and then hash was another. So what should the data type be now for a field like ID? 

Here is the whole list of data types available to you in a database, and for now let's just go with int. 32-bit value, I don't think realistically I'm going to have more than 4 billion users in my account, in my service, so I'm going to keep moving on to the next question. I'm not going to specify a length or values, it's not applicable here for an int, per se. And now I can specify, apparently, a default value, which I'm not going to specify. A collation, I don't know what that is. An attribute. Now we actually do have a design decision. So there's a few fields here, not all of which are applicable, but unsigned just means what? That the int must be? Just non-negative. So it has to be 0 on up. No, I'm not going to check because I want every user to have an ID, it cannot be null. And then, we get to some more interesting design decisions like this. We'll come back to this in a moment, but what another feature of database is, is that you can tell the database server go ahead and optimize yourself, your RAM and your hard disk space, so that selects, and inserts, and deletes, and updates are really fast. Contrast this with pset5. 

If you wanted to look up something in your hash table, which you think of as a database, who had to do all the work for making your hash table fast. It's like, obviously, you. Right? You had to put in all the time fine tuning things, getting a hash function right, figuring out how many buckets to have. 

But what's nice, again, about a database is you just punt all of this to other people who have thought this through for you, and what I'm going to say here under index is that my ID field is going to be the primary way of identifying users in this database. I'm not going to think of Zamyla as Zamyla, I'm going to think of her as the number 6. 

Why is it, perhaps, better intuitively to think of and model each of your individual rows using a number instead of something like a string, like the Zamyla or Gabe or longer string still? Yeah? 

AUDIENCE: An ID is unique? DAVID J. MALAN: Say again? AUDIENCE: An ID is unique? DAVID J. MALAN: An ID is unique, but suppose-- as the case in general with usernames, suppose I also said there can only be one Zamyla in the world, and only one Gabe. I could impose the uniqueness constraint on strings, too, if I wanted. So not a bad thought. 

AUDIENCE: More secure. 

DAVID J. MALAN: More secure, why? AUDIENCE: You can't tell which is which, as in the user. DAVID J. MALAN: OK, you can't tell which user is which so there's a privacy aspect to it, especially if the IDs maybe appearing in the URLs. So sure, that could kind of work, too. Other thoughts? Yeah? 

AUDIENCE: It's easier to perform operations on an int. DAVID J. MALAN: That's the real kicker. It's just more efficient, or easier for the computer, to perform operations on an integer. Right? An int is guaranteed to be 32-bit, whereas Zamyla is a few characters long, Gabriel is a few more characters long, Davenport is really long, and so it's not particularly efficient to use strings to compare values and look for fields, and update fields, if you can get away with just one integer. Just 32 bits. So usernames, too, this way, don't have to be unique, although they probably should be, and even in this way too a user could be allowed to change his or her username. 

So let's now leave this as the primary means of identifying the user. This is telling the database go ahead and optimize yourself so that look ups on ID are super fast. AI, horribly named, just means Auto Increment, and this is the check box we need to check to specify that the ID field to be automatically updated for me, and then I'm going to scroll to the right here and frankly I'm not really interested in any more of these fields. Certainly not today. 

So I'm going to go back here, to the first column, where I need to specify username and hash, and let's at least focus on the second one for now. Int is probably not the right call, so what makes more sense perhaps? 

AUDIENCE: Text. DAVID J. MALAN: Say again? AUDIENCE: Text. DAVID J. MALAN: Text? OK, I heard text. What else? We kind of have a bunch of choices that are textual in nature. So when, and why, do you use some of these? Well char, contrary to what you might think, is not a single character. It's a specific number of characters. So if we know that all usernames must be like eight characters, as used to be common in older computer systems, I could say char and then I could say 8 here. That's when the third column becomes applicable when creating a table. 

But that's kind of annoying because some people might want to have a longer username than eight characters, some people might want to have a shorter username, so why commit myself to a specific number? Why not have a variable number of chars and just say that the maximum length of a name is, I don't know, like 64 characters. I can't think of any friends who have names longer than 64 characters, and even if that's too short you could certainly bump it up arbitrarily. 

So varchar is a variable number of chars. Text is not a bad instinct, and frankly that sort of does what it says, but a text field can be like 65,000 bytes at least. That's probably overkill for a field, and in fact, yup, 65,535. That's probably overkill for a name, so we'll stick, typically, with varchars for textual field and hash, too. Hash, it turns out, we could do a varchar as well or something like that, but we won't focus today on the cryptography there and the numbers that we might actually want to use for its length. 

But let me scroll down to the right. You can only have one primary index for a table, but do I want to apply any of these, now, to username, would you say? What should username be based on a vague understanding of these four options? Just by their names? 

AUDIENCE: Unique. 

DAVID J. MALAN: So unique, right? So it turns out that not only could you tell a database, in advance, this is the primary way of identifying fields. You can also say this is going to be a unique field. It's not going to be the thing I rely on, but I would like the database to essentially have that if condition, so that if I ever tried to register two users with the same name, the database flat out is not going to let me. I might have some additional code in PHP that prevents as much, but the database, too, can ensure that that's never going to happen. 

Now, as an aside, especially as you think about final projects, keep in mind it index and full text are actually quite useful. If you have a larger database, not with dozens, but with hundreds or thousands or even millions of fields, you can also tell the database in advance this is a field I'm going to be searching on a lot. Maybe its username, maybe it's bio, if you're making a Facebook-like website that has paragraphs that the user's allowed to save, and if you want to tell the database in advance I'm going to be searching on this field a lot, but it's not necessarily unique, you can specify create me an index. Or, you can say also allow me to do sort of arbitrary searches like Command or Control F, like you might in a Word Processor, so you could look arbitrary strings or substrings in this field. In other words, we're getting to the point in the semester where you don't have to worry about how to implement things efficiently. You just need to know about what design decisions to make so that you're using the right tools for the trade in order to leverage features that other people have built for you. So to recap, primary should only have one, you can only have one, and it's the thing you're committing to using to identifying fields uniquely. Unique is just similar in spirit, but you might only occasionally use it, but you want the database to impose it. Index just means preemptively speed things up in the future so that I can search for things in this field. And then full text is generally for paragraphs, or essays, or large bodies of text where you might also want to have wild cards like the equivalent of star. Right. 

So that was kind of a lot to all at once. Let's see if we can't distill a couple of these features and then build something fairly simple, but powerful. So among the other design decisions you're ultimately going to have is along the lines of storage engines. And let me just make mention of this in anticipation of final projects, and anticipation of let's say-- no let's do this. Let's build this little application first. I'm going to go into my terminal window, and in here is not only counter.php, which we're now going to get rid of as no longer germane, but we have a whole bunch of directories and this is going to be very similar in spirit to what you'll see in problem set seven. 

So we have three directories includes public and templates, which is exactly where we left off on Monday with our whole MVC paradigm. And to recap, in public is going to go any file that I want users to actually v be able to visit in their browser via URL. Template. What did we put in templates? What kind of stuff? There wasn't much but a couple files at least on Monday. Yeah. 

AUDIENCE: Header and Footer? 

DAVID J. MALAN: Header and Footer. So we have something similar today, too. We've got a few more files but Footer I see, Header I see, and then a bunch of other files. So this is the equivalent of the V MVC view, which, again, will be a bit more clear in problem set seven, but this is just a folder I'm putting a lot of my aesthetics. A lot of my HTML, a lot of my forms. Meanwhile, includes, is another directory that has these three files and let's take a quick look at these. 

I'm going to go ahead and open up config.php. As it turns out, much like earlier in the term, you sharp included CS50 dot h with pset7. In today's example, you're going to do the equivalent of that with a require statement that effectively includes these several lines. So to be clear, this is a file called config.php. And notice what it's doing. It's apparently doing something cryptic, turning on error messages so that you can see them in the browser. It's, then, apparently requiring two other files so this is like #include in C, and then this one we did see, and we've relied on, this turns on that shopping cart like functionality. 

This means a cookie will be sent back and forth. So why is this interesting? Well, if we go back to this directory and open up, for instance, constance.php. Notice that PHP does support constants, it's not quite like #define in C. Instead, you literally say defined, and notice that I've stored in advance four constants in this file. One for today's database, for my password, for my username, and for the name of the server. So these are actually going to be pretty similar in problem set seven. And lastly, and this is where I'm going to get some nice functionality from the staff, in functions.php is a bunch of code we've written, and I stole some of this from problem set seven for today, that does a bunch of things and let's just look at one of them in particular. This function here, query, is going to be the PHP function we call in order to execute SQL. A moment ago we were using phpMyAdmin, but that's just for sort of learning purposes and diagnostic purposes and forgetting your database set. When you actually use your database, you, the human, are obviously not going to be pulling up a web page every time someone registers. You're going to write code that inserts and deletes users on demand, and we're going to do this by way of the query function. If I now scroll down, there's going to be a few more features. Redirect is going to be a function we wrote for you that allows you to send the user to another URL, and render is a function, quite like we saw on Monday, that actually renders a template, but more on these in the form of pset7's own walk through. For now, let's go ahead and do this. 

Let me go into my lectures table and see that there's currently nothing here just yet, and let me also go into my public directory, where there's just one file, index.php. This file appears to be super simple at the moment, it looks just like this. Very much like how we left off on Monday. I'm requiring this file, config.php, which is in an includes directory, which is in dot dot, my parents, and then it's just rendering this file. So what is this file? 

Let's open up in my templates form.php, and we'll see this. Super simple, apparently this form is going to submit by a $_GET or $_POST. Quick sanity check. Literally visually search the file. Method equals post. So it's not going to use the URL, like Google does, it's going to sort of hide the information behind the scenes and it's going to submit to a file called register.php, and that's the file we haven't yet written but what this is going to look like is this. 

If I go to a separate page This is what localhost/index.php looks like. And again, the server's just assuming index.php. Enter. So that's where we're at, and what I want to do is be able to type things like David, and then my phone number, which will say 617-555-1212 for now, register and now register.php was not found. So I need to implement this. So let's quickly whip something like this up. Let me go into my public directory and do gedit of register.php, and now I'm going to go ahead and start PHP mode, like we did on Monday, and close PHP's tag, and let's do a couple of things. 

So one, I know, from having written that form, that I want to check for the following. If it is empty, whatever the user typed in to the name field, then I'm going to say something like apologize missing name. Apologize, meanwhile, is not a built in PHP thing, it's a function we wrote in functions.php for pset7 so that you have access to it. Else if the other field is empty, number, then I'm going to apologize to the user and say missing number. Save this file. 

Now let's go back to my browser, go back to the forum try again. Register. OK. Nothing happened, which is good. I didn't get an error message. But if instead, let's reload this page, and not provide anything. Damn it. Do that. Register. What did I do wrong? If empty, $_POST name. Say again? 

Oh, of course. I forgot the most important part, which is require("../includes/config.php."). I need to have access to the apologize function, which is why nothing was happening. The function doesn't actually exist. So let's try this again. Let's reload the page, click Register. OK. There it is. So, the output we're seeing here is the result of calling an apologize function, super simple, and it just prints out whatever I give it as an argument. 

All right, so let's cooperate. Let's provide my name like David, register, missing number OK let's provide that, too. 617-555-1212. Register. OK. So all is well now, just nothing interesting is happening. So now let's make something more interesting happen like this. Let me go into phpMyAdmin, and let's actually create a table called users, I'm going to give it three columns, and I'll quickly create ID, and then name, and then number, and the ID field I'm going to leave as an int. The name field I'm going to leave as a varchar, and we'll say 64, somewhat arbitrarily. The number I'm going to make, you know what? We're going into support US numbers here, so I'm going to do something like char and then 10 characters max for an area code and then seven digits. And then over here, I'm going to specify auto increment this field, make this a primary key, and I'm going to go ahead and not check any of these other boxes. 

So when I now finally click Save, and I go back to my users table, this is what it looks like if I now click a New Tab structure. So this, to be clear, is just phpMyAdmin's way of saying your database table has an ID, a name, and a number with those particular configurations and we'll ignore the rest of the fields there for now. 

So now what do I want to do? So if I go now into my source code, if all is well I want to execute the following query. Insert into, and I can just say users I don't strictly need those back ticks if it's not a dangerous word like users. I'm going to say name, number, and then here I'm not going to hard code the digit of the values yet. I'm going to put two question marks. And this is a convention in many languages whereby if you want to have a placeholder for a string you're going to use the question marks, for reasons we'll come back to chat about security, and here I'm going to pass in those two fields post name, and then post number, and now save the file. 

And now I'm going to go down here is a super simply say rendersuccess.php, which is going to be another template. I'm going to create really fast. Geditsuccess.php and I'm just going to say H1 success in that file. All right. So now, let's go back to the browser, where I visited before. Let's go ahead and confirm I wrote in David, I wrote in a phone number, register. Damn it. What did I do wrong? So I'm seeing an error here, you have an error in your SQL syntax. Let me jump back to gedit, let me go back to register.php, and what did I omit that was important last time? I need this. You want to know that other than from having noticed before, but I need this. 

So now let's go back, and this was helpful to see in the browser and that's why in config.php we spit out errors. Let's go ahead and reload, click Continue, success. So now let me go over to my database here and click on Users, and browse, and notice I now have David in my database here. Now technically this website is not yet on the public internet, so I can't have other people in putting here, but if I now wanted to, for instance, send myself a text message. Let's go out on a limb here and see if this actually works. I'm going to go ahead and delete this row and we'll blur this out in the video later so we don't have the entire internet texting me, and we will now go up to the browser and we'll go over to lecture and we'll type in different number here, register, success. 

So now, my own number's presumably in the database, and now the fun part. Let's actually use PHP to do something programmatically, either from the command line or from somewhere else, and for now I'm just going to keep it simple and I'm going to go into my directory here and do the following. Gedit script let's say, we'll call it text, #!/user/bin/env PHP, like we saw last time. PHP. 

Now I'm going to do require includes config.php, even though this might induce a slight error. And now I'm going to go ahead and say rows, query, select star from users, and now here I'm going to do a technique from last time for each rows as row. And I'm going to do something simple. Printf let's say name is this, and number is this, backslash n. And now I'm going to pass in row quote unquote name, and row quote unquote number, and now let's go ahead and my terminal window chmod this a + x to make this script called text executable. And now let's run text. 

OK, so progress. So I've now written a command line script, in a language called PHP, that, because of that require line, has access to all those configuration constants that I specified. The name of the database and so forth. In fact, just to be clear that this isn't a fluke, let me go ahead and register, really fast, someone else like Rob and will give him the 555-1212 number. 

And now, if I run the script again, notice the power of what we're doing with the database. Now I've immediately seen what the other two rows are in my database. So now let's try to do something even fancier inside of, and this is the part we've not tested in advance, so the last time I did this things went horribly awry, we have video to that effect. 

Actually, yeah, funny aside. So the last time, in a lecture like two years ago, we decided, I decided, to be all this would be a great idea to dynamically generate emails in class, using the entire database CS50 students, who had given us their numbers and their cellphone carriers which you might recall from pset0, how to reason, it turns out I had a minor bug in my program and did a couple mistakes in 2012, I think. 

Whereby, one I had for loop that did exactly this kind of thing, iterating over the database, getting a name from the database, name from the database, and then on each iteration of that loop I sent an email. But instead of sending one email, I sent one email the first iteration, and two emails a second iteration, sent three emails a second iteration, which as you might recall from our discussion of asymptotic notation this big O of bad, like n squared is how many messages I sent, but it wasn't even emails it was text messages. 

And as you know, attendance isn't super high toward the end the semester and so I thought it would be cute at the time to say, "Why aren't you class?" In the text message I sent to the whole class, and it was funny to like 50% of the class, but the other 50%, some of whom freaked out, i sent incredibly apologetic sweet notes to the staff apologizing for having missed the lecture just this once, right? 

So that would horribly awry. So in that spirit, let's try this again but just with my number. In advance, in functions.php, I've written this function here. It's called text, and it takes in three arguments. A number, a carrier, and a message. 

I'm using a switch statement, which wonderfully PHP take strings, not just integers, and I didn't implement all the support for this yet, I've just done AT&T and Verizon. Because it turns out that with these carriers they have email to SMS gateways, whereby you can actually send an email to an address like phone number at vtext.com and if the user hasn't blocked the messages, it'll go through is a text message. 

Now to do this, I'm going to have to add one field really fast to my database. I'm going to go into my structure, and I'm going to go ahead and add a field at the end of the table. Let's click Go, and I'm going to call this carrier and for now I'm going to leave this as a bar text, but we can be fancier in the future. I'm going to quickly go into my table, and I'm going to get rid of Rob, because that's a fake number, I'm going to go into edit here and I'm going to change my carrier manually to be Verizon, which it is, and now over here. 

Let's do a quick sanity check. Let's open up our text script, which looks like this, carrier is %s. We're doing a lot more error checking than I did in 2012, carrier. And now, I'm going to go ahead and re-run the script. OK. Carrier is Verizon, which means now hopefully I can do just this. Correctly this year, hopefully, here we go. 

So inside of this for loop, I'm going to not only have this printf, I'm also going to call text and the usage of this function recall was it takes a number, a carrier, and a message. So let's see, number is going to be row quote unquote "number," row quote unquote "carrier," and the last one was message. Don't screw up this year, semicolon. 

OK. Fingers crossed. Let's see if this works. All right, so. Here we go. Let's unlock the phone, cross your fingers, damn it. Undefined variable may-- oh wait, wait, wait, real fast. Real fast, real fast. This is totally worth it. Let me grab, let me grab, uh-oh. Thank you, the texts have started from someone else. Let me go ahead and open up real fast, dropbox.php/mail in here. Standby. Totally worth it. Downloads. OK, source src8m. OK. 

Need one more line here. Oh there it is, it's in Frosh IMs, it's in register at three. Oh hello, Margo, thank you very much. OK, and I was missing this line here. So let me quickly grab this line of code, which includes the mail or library that I actually want to use, I'm going to quickly go back into functions, I'm going to go to the top of this file and require this file as well, and now I'm going to really cross my fingers when I go back to the command line script, which is inside of today's local host directory. Run text. Enter. Mail. Standby. Standby. Mail. Oh, OK. Here we go. 

Mail gets new PHP mailer. Did I do this right? Damn it. To-- oh, wait, wait, wait. Stand by. I promise, this is going to be so worth it. Address. This is why I don't make the examples right before class. Ugh. The following recipients failed. Let's try one last thing. SMTP set from, add address, the address is indeed that. Let's try this last part in address. Aw, I'm really sad right now. Thank you. But I really appreciate all the texts you've been sending. You've got this David. You're blowing it. Let's leave it there and we will fix on Monday. See you then. 

DAVEN FARNHAM: And now Deep Thoughts by Daven Farnham. If a binary tree falls in a forest and no one is around to C it-- [CHUCKLING]. [MUSIC PLAYING] DAVID J. MALAN: All right. Welcome back. This is CS50. This is the end of week 8. And as you know, we have pretty regular office hours in a few of the dining halls, including Annenberg. And some of the team kindly took some photos lately. And in honor of Halloween, we thought we'd share one that rather caught us by surprise here in Annenberg Hall just the other night. Your classmate Jacob posed for this photo, but was more amusing was on Facebook, the ensuing conversation that happened afterward. 

His first post in response to his photo was this. A few minutes later, he decided to one up himself with this. It went on then to go to this, and then, even more amusingly is when his mom chimed in. And then ultimately, it seems this was just a wonderful ruse for a play that's going on. 

So, if you would like to see Jacob and others, among them Cynthia Meng, who's behind the scenes of CS50 zone staff, head to this URL and this play here. So without further ado, today we continue this look at web programming, and the actual creation of programs that don't run at your command line, but instead run inside of a browser. 

Presumably now, or very shortly, you're going to be in the midst of implementing your own web server, which is different from web programming. The web server in pset6 is all about writing software that knows how to take HTTP requests from a browser, or even from you, a human, with a program called Telnet, and then respond to those requests either by spitting out an HTML file, or a jpeg, or a gif, or even a .php file. 

But with a web server, it's not supposed to just open a PHP file, something ending in .php, and then spit out the contents. It's supposed to do what to that file first? So to speak. Not compile it, we said on Monday, but rather-- So, interpret it. 

PHP's an interpreted language, and so one of the key features in your web server, albeit implemented by us, is this ability for your web server to notice, oh. This is a file ending in .php. Let me not just send it to the user like it's static content, but rather let me read it line by line, left to right, and interpret it. 

And to do, that you guys will essentially punt to a program in the appliance, and on a lot of computer systems, just called PHP. That is the name of PHP the language's own interpreter. So, that piece we implement for you, and what's left for you, ultimately, is a number of pieces, among which is implementing support for static content. 

But now, and with problem set seven, you're going to start to transition to actually writing the PHP code that gets interpreted in talking to a back end database that stores information. So let's better understand first a couple of these superglobals and just how much power you get out of the box for free with a language like PHP. Things you don't have to implement yourself. 

So, we saw on Monday $_GET, which is a superglobal, which is just PHP speak for a global variable you can access anywhere. And what's inside of $_GET? What's inside of this superglobal that we see? Surely statistically at least one person knows. What's inside of $_GET? Yeah? 

AUDIENCE: It's the variables you put in the query string. 

DAVID J. MALAN: Perfect. It's the variables you put in the query string. So, in our older example of reimplementing Google when we had a URL, and then question mark, which demarcates the start of HTTP parameters, then we had q equal something, like q equals cats, what would automatically go inside of that $_GET super global for you, because of PHP, is a key of Q, and of value thereof of cats. 

In other words, $_GET and all of these things are associative arrays, hash tables of sorts, that store keys and values. Now, back in pset5, the hash table you might have implemented, or the try you might have implemented, really was effectively an associative array, a data structure whereby you can associate keys with values. 

But in pset5, the values were trivial. The value was essentially true or false. Is the word in the dictionary? So, when you hashed a word like apple to see if apple is in the dictionary, your check function presumably returned true or false. So, that's effectively the value we're getting back. 

But we saw on Monday briefly, you can certainly associate more interesting values than just true or false with keys, like apple. You could actually return an arbitrary string, and indeed, that's what $_GET and these other variables let you do. 

So $_POST is similar in spirit, but if you submit a form via post, a different HTTP method that's used for things like credit cards, and private information, and even binary information like photos, those things end up inside of $_POST. And actually for files like jpegs and whatnot, there's even another that's not up here called $_FILES as well. 

So, server we won't dwell on too much, but it gives you access to sort of lower level details about the server itself that you're using. Cookie and session, though, we'll effectively see now. The last is what we use to implement the notion of a shopping cart. A super simple one, but recall that we had this example here, counting how many times you had visited this page before. 

But today, rather than just look at the effect of this, let's open up Chrome's Inspector, which you can usually do by right clicking or Control clicking anywhere on a web page, and then choose inspect element. Or you can go through the menus that we describe in pset6's spec. And I'm going to the Network tab here, and let's watch for a moment the HTTP traffic that's going back and forth. 

Let me first go ahead and clear Chrome's cache. So some of you might be familiar with this technique already, and we're going to use it for debugging purposes here. Now we as computer scientists are going to start doing this for debugging purposes, whereby we will clear the cache, typically, so that we can get rid of things called cookies. So you're probably generally familiar with what cookies are, or at least that they exist, but what's your understanding of them, as just a user of computers, what is a cookie? Yeah. 

AUDIENCE: It's a bit of-- well, not bit in a term of computer science. It's a piece of data that a website sends to you in order to be able to record statistics on you. DAVID J. MALAN: OK, good. So it's a piece of data that a server, puts onto your computer, and let's generalize it even more, it's a key value-- well, that's getting more precise. It is a piece of information, a piece of data, that a server is able to put on your computer and very often, the server does this so as to remember who you are. So for instance, odds are you're probably logged into sites like Facebook, or Gmail, or others before, and you log in with your username and password, and then after that, for some number of minutes or hours or even days, the server remembers that you are, in fact, logged in. Now, how is that actually happening? Because you're certainly not retyping your username and password every time you navigate to a different page on Facebook. So it turns out the cookies are the answer. 

A cookie you can think of as, sort of like, a digital hand stamp that you might get at an amusement park or a club that essentially indicates you have been here before, and you've already shown your ID to the bouncer, for instance, and that the club or the park should now assume that you have authenticated already. You have already been identified by it. 

So with that in mind, let's open up counter here. Let me go ahead, I just did, and clear all of my cookies. And now what I'm going to do is hold Shift, just for good measure, and forcibly reload the page. Shift just make sure that nothing gets cached. And here's the request that went back and forth. So over here we have a request, and let me zoom in down here, and a lot of this is sort of uninteresting details for now that the browser has automatically sent, but let's click View Source to see the raw headers. 

And if you've dived into pset6 already, you'll certainly recognize things like this, and maybe some of these other lines here, but what's more interesting for today if I scroll down, not to the request but to the so-called response, this line probably looks familiar. That's a good thing when you see a 200 OK. Apparently this is the date and time on the server and there's a bunch of stuff. Oh, this is interesting. 

Turns out whenever you use PHP, at least in this server, the server spits out what version of PHP you're using. Which, actually, for security purposes, is not a good thing. But, we'll come back to that some other time perhaps. But now this is the juicy line today, and we saw briefly some of these, I think with Facebook when we poked around the Inspector at that time, set cookie is what is planting that little piece of information onto your computer. 

This is an HTTP header that's effectively telling your browser, Chrome, IE, whatever, hey browser store on the user's hard drive, or in the user's RAM, a key called PHPSESSID, which is a shorthand notation for session ID, and give it a value of 0vlk8t, dot, dot, dot. A really long pseudo random alphanumeric string. It's just a really big number, but it's encoded with letters and numbers so that the size of it can be even larger than numbers alone. And then, by the way, Path=/, that just means that this cookie should be associated with the entirety of the website, not just a specific page the whole thing. So this is that virtual hand stamp. It's as though the server, Facebook, or in our case the appliance, has literally written 0vlk8t and so forth, on your hand. Notice what the server's, not doing is it's not storing my username, certainly not storing my password. 

Instead, it appears to be storing pseudo random information so that no one can guess what my hand stamp is. On the server side, meanwhile, the server is going to remember, probably in a database or something, that the user, who in the future presents a hand stamp of 0vlk8t, dot, dot, dot, should be associated with this particular shopping cart, so to speak. In other words, if I now go back here and reload this page, how does the server know that I visited one time? 

Or if I do it again, how does the server know that I've visited it two times? Well if I go down to this most recent request, which is now the third that I've sent in total, notice my request now. There is still this request up here, same as before, there's still a whole bunch of stuff that we've ignored as before, but the very last header, this time, because I've been here before, is a presentation of this virtual hand stamp. 

Whereby this line here, not set cookie but cookie colon PHPSESSI= 0vlk8t, that's just my browser's automatic presentation of this hand stamp so that now the server, as soon as it realizes, ooh, this is user 0vlk8t dot, dot, dot, I can now remember who he or she is and reassociate with that user whatever information I want to, and all of that information can be stored by you, the programmer, in $_SESSION. 

So to be clear, if I open up real quick in gedit that actual file, counter.php, in my local host public directory as before, notice that, indeed, I'm ultimately storing in $_SESSION quote unquote "counter," the value of the previous counter which I get from these lines up here that we looked at last time plus one. So underneath the hood, that's all cookies are. It's just the sort of digital hand stamp going back and forth, and frankly if you open Chrome's Inspector on any website you visit today, with super high probability, you're going to see maybe one, maybe half a dozen cookies being remembered by you. 

And worse yet, if those website you're visiting all have advertisements, which is certainly quite common today, and if those advertisements are coming from some central party, someone like Google or AdWords as they call one of their products or other such vendors that sell ads, what's interesting, and frankly what's a little worrisome, about how HTTP works, is that if you have an ad embedded in Facebook.com, and Google.com, and Harvard.edu, any number of websites, so it's such that there's a middle man who is serving up ads for all three of those websites, it turns out that the cookies are per domain. 

So if you have an ad coming from the same company on different websites, that company can effectively track who you are across all of those websites. Harvard might not know you're visiting Facebook. Facebook might not know and you're visiting Harvard. But whatever ad service they're using if that domain is present in both Harvard.edu web pages and Facebook.com webpages, this middle man surely knows who you are because of these cookies being shared across, or rather to, that so-called middleman. 

So we'll come back to this in security implications thereof, but there's a lot of information being stored about you any time you visit most any web page on the internet and it really reduces to this very simple mechanism. What happens, then, if you're super paranoid and you decide to go into Chrome or IE or whatever and turn off your cookies? What happens? Yeah? You really-- you've done this right? OK. No, go ahead. 

AUDIENCE: Certain websites don't have a function without it like Facebook. DAVID J. MALAN: Yeah! So certain websites will just stop working. And in most websites these days that fundamentally rely on cookies, especially if they have you log in, they're just going to break. Because consider the alternative, if the website has no way of remembering who you are, and therefore your web browser is not representing with every HTTP request of this hand stamp, effectively a website like Facebook's going to have to prompt you to log in every darn time you change pages, or click a link, which is surely not a particularly good user experience. 

So that there, too, is among the trade offs. So without further ado, let's take for granted that with web programming, in languages like PHP, you can remember information like that in problem set seven when you implement your own E*Trade-like website with which to buy and sell stocks, you'll remember exactly what the user has bought and sold and who he or she is by way of this session. But we're going to need a fancier way than email to start keeping information around. Right? 

On Monday, we talked about Frosh IMs and how in version one of that website, years ago, all we did was email the Proctor who's in charge of the intramural sports program, the name, and the gender, and whether or not they're a captain, and the dorm of someone who's registering for an intramural sport. So it's not bad, but he or she then had to troll through their email, make a spreadsheet or something like that, to keep everything organized. So surely we as programmers can do this for that proctor. And so enter in SQL, Structured Query Language, which is going to look pretty different to both C and PHP, and you'll dive in much more hands on PHP and problem set seven but also SQL, or SQL, this is a language that you use to talk to a database. 

But what's a database? Well you think of a database, at least for now, as just being like an Excel file, or if you're a Mac user a numbers file, or if you're a Google Apps user a Google spreadsheet, it's effectively a database, or really specifically a relational database. A relational database is just something that has rows and columns, and you can store any kind of information in these rows or columns. 

But what's nice about SQL, and about actual databases, not just spreadsheets or Google spreadsheets, is that you can use a language to actually execute queries to insert data, to remove data, to look for data, even most importantly, and you don't have to use it fairly manually as you might typically a Google spreadsheet like this. 

So in SQL, there's a bunch of fundamental statements or pieces of functionality built in. There's many more than these, but you can go a huge distance just by knowing that this language called SQL has at least four statements you can leverage. 

Delete, for removing data, Insert, for adding rows, Update, for changing rows, and Selecting, for getting back rows and that's indeed what SQL does. It operates entirely on rows so that when you insert, or remove, or update, or select what you're getting back as a so-called result set, like an array of rows. A bunch of rows from a table. 

So back in the day, and even to this day, you can interact with the database using a command line, but it's not particularly fun to use this black and white style window and actually execute commands and poke around your database. A graphical user interface, or GUI, is much more preferable, arguably, and so the tool we recommend and preinstalled for you on the appliance is called phpMyAdmin. It's a total coincidence that the name of this thing has PHP in it, it just means that the people who wrote this program themselves wrote it in PHP. 

But it's ultimately about administering a database server, like a MYSQL server that you might have, as you do, in the CS50 appliance. So there's more detail here than we need to care about today, but what's key is that on the left hand side is a list of the databases that you have on your computer, on your CS50 appliance, or come final projects that you might have on a third party, a company's website or web server, that you might be paying for space. So on the left is the databases, one of which is pset7 which I borrowed from next weeks pset, and then on the top there notice there's a bunch of tabs, one of which is databases, SQL, status, users, export and so forth. So you can go a long way just by realizing that most of the user interface is in the top left column and across the top right up there. So what can we actually do with this? Well, let's start creating a bit of information as follows. 

Suppose the following is the case, as will be in just a few days, you want to implement a website, called CS50 Finance, and this website lets you buy quote unquote and sell stocks. And it's going to figure out the price of those stocks, ultimately as you'll see, by talking to Yahoo Finance. Which, wonderfully, has a free service whereby you can pass in a stock ticker like GOOG for Google, and it will give you back Google's current stock price within the past few minutes at least. 

So you'll use that, ultimately, to pretend for the user to buy and sell actual stocks using virtual money, but the very first thing the user's going to see is this login screen which asks them for their username and password. And so, one of the first challenges for you in pset7 is going to be to implement the back end database, the spreadsheet if you will, that's going to store users names and passwords and ultimately what stocks they own, and how many, and how much cash they have, so a bunch of other things in other tables, or spreadsheets. 

So let's take a look at how this might appear at first glance. I'm going to go back to the appliance and I'm going to go to this URL here phpMyAdmin localhost/phpmyadmin and you'll see that it takes me to an interface exactly as we saw on the screen shot, and here I have an additional database called lecture for today and let me go ahead first and click on pset7. 

I seem to have a couple of options, one for new , for creating a new table, and a link to users, which is a table I already created. So what's a table? So if you used Excel before, and if you've used numbers or Google Spreadsheets, you open up a window and you get a whole bunch of rows and columns, but then you usually have worksheets along the bottom, or separate tabs. You can think of each worksheet as a table so that database, ultimately, is a combination of one or more tables, one or more worksheets, in the world of a normal spreadsheet. So let me go ahead and click on this worksheet that I premade, called users, a.k.a. Database table. And if I scroll down here, let me zoom out a bit, this is what phpMyAdmin is telling us is inside of this table right now. It's a little confusing at first glance because the UI is not the prettiest thing in the world, but what is interesting is this part here. ID, username, and hash. 

In advance, and you'll be handed this in problem set seven, we give you a file containing a super small database table, borrowed actually from the hacker edition of problem set two, inside of which there are six rows. One for Belinda all the way down to one for Zamyla, and notice to the left of those usernames are unique IDs like one, two, three, four, five, six, integers, and then to the right are hashes. 

And if, odds are, you didn't do the hacker edition problem set two, but a hash is just like an encrypted password with a few caveats. And so, what you see here are the encrypted versions of all six of our passwords from problem set two's hacker edition. Now to the left is just some GUI stuff, editing this row, copying this row, deleting this row. 

But what's interesting now is the following. I can actually start experimenting with this table. So if I go and click the SQL tab, I get this big text box. And this is not how we're going to do it when actually writing code. To be clear, phpMyAdmin is just a tool that's going to let us poke around the database and let us experiment with queries. 

So for instance, suppose I execute exactly this. Select, which is one of those keywords I mentioned earlier, star, which represents all the columns in a table. From what table? Well, users. And notice there's this weird convention in SQL where you actually use back ticks, typically, not single quotes and not double quotes when you talk about tables names, so the back quote is the thing on the top left hand of your keyboard most likely. 

So let me go ahead now and just leave that alone and scroll down and click Go, and we're actually going to see the same thing. We have just executed a SQL query saying select everything star from table called users, and what you get back is this. Ultimately, we'll be able to do that same thing in code, but for now all I wanted to do was see it in my browser. Well let's do something a little different. Let me go back to the SQL tab, and let's just say that what? Zamyla has lost all of her money, and therefore it's time for us to delete her as a user. She's no longer logging in. 

So I'm going to say delete from-- well, maintain capitalization for consistency, delete from users where. And so, we can have these predicates, or these qualifiers, at the end of my statement where and how could I delete Zamyla? By her name Zamyla, so the column, one of the columns was named, so where name = "Zamyla". And here I use double quotes or single quotes, you only use the back ticks when talking about the names, for instance, of tables or fields. And let me click Go here. And now, the web page is being a little uptight. 

Or, do you really want to execute delete from users where name equals Zamyla? Yes. So now, if we go back to my table by clicking users, notice that Hm. I goofed. And in fact, I kind of clicked away so fast you didn't even see the red error message, perhaps. What did I do wrong? AUDIENCE: You didn't need to capitalize her name. DAVID J. MALAN: Yeah I capitalized her name, but her username-- actually I made a couple mistakes, right? One, her username is zamyla, lowercase Z, and the column name is username, not name, so let's do this again. Let me go ahead and delete from users where username equals quote unquote "Zamyla". All right? So this looks a little better, let me go scroll down and click Go. It's still going to yell at me to be sure. I click Yes, and now we see, frankly this happened, really fast, less than one second certainly, this is exactly the query that got executed. To confirm, let me click users and indeed now Zamyla is gone. Now let's do the opposite. Suppose that Gabe wants to register for the website. What's the SQL query, what's the command I could type to add Gabe? Well it's pretty straightforward. Insert into users, and now it gets a little cryptic. I need to specify, to the server, what fields I want to assign. I don't really care what Gabe's ID number is, so I'm going to skip that. I'm instead going to say username, hash, and then the values I want to put there is going to be Gabe. And then his hash, I don't know. So for now, I'm going to leave that as a big to do. We'll come back to that in the problem set spec as to how you actually do that. 

So notice, again, the syntax. Insert into table name, then a parenthesized list of the fields, the columns you want to add values to, and then just the same exact ordering left to right of the values you want to add, and it's just wrapping because the text is a little long. So now let me click Go. One row inserted. And now if I go back to users, what's interesting is that not only is Gabe now in the database, what is apparently his ID? 

Well it's seven. Why is it seven when I didn't add it? So this, too, is one of the features you get of the database. A lot of built in functionality. It turns out that when created this table, I preconfigured it's automatically assign an ID in such a way that it increments. So if you've ever poked around, and looked at what your Facebook ID number is, these days it's not really a thing to do, but Facebook as an API, Application Programming Interface, whereby you can get back a whole bunch of data about yourself, about your friends, and your connections. And what used to be kind of cool, back in the day, was to look up what your Facebook ID number was. Mark Zuckerberg's, for instance, is three since he was the author of the site. And as the story goes, he created two test accounts, users one and two, which he then deleted. And so, Zuck, as is his username on Facebook, is ID number three, and all of us have numbers much larger than three these days. In fact, at some point Facebook moved away from even using an int, which is a 32-bit value, to using the next step up, essentially a long long so that they could accommodate even more users registering. So a fun little historical fact. 

So that's just the basic syntax with which we might execute a couple of queries, but we can actually do a bunch more things with SQL. And you'll see, ultimately, in the problem set seven that you have to make a number of design decisions, among them is going to be what data types to use. So just like in C, there are data types in a database, like MySQL, and the data types you have to choose from include these fields here. Char, varchar, Int, big int, decimal and date time, and many others. So let's actually do this. Let's pretend that we didn't hand you this user's table and let me go ahead and create, for myself, in the lectures database-- actually let me go ahead and delete the table I have in here already so that we can actually create this. Whoops. I'm going to drop this table, and now I'm going to go again to the lecture database over here, I'm going to create a table called users and let's just do three columns initially and click Go. 

Now, for the most part, again, this is just using this graphical tool called phpMyAdmin, and what we're doing now is creating a table. So this is like going File, New, and creating a new Excel file. So it's asking me a few questions, from left to right, what's the name of the first column, and then the name of the second column, and the name of the third. So let's recreate this. ID, and then username was one, and then hash was another. So what should the data type be now for a field like ID? 

Here is the whole list of data types available to you in a database, and for now let's just go with int. 32-bit value, I don't think realistically I'm going to have more than 4 billion users in my account, in my service, so I'm going to keep moving on to the next question. I'm not going to specify a length or values, it's not applicable here for an int, per se. And now I can specify, apparently, a default value, which I'm not going to specify. A collation, I don't know what that is. An attribute. Now we actually do have a design decision. So there's a few fields here, not all of which are applicable, but unsigned just means what? That the int must be? Just non-negative. So it has to be 0 on up. No, I'm not going to check because I want every user to have an ID, it cannot be null. And then, we get to some more interesting design decisions like this. We'll come back to this in a moment, but what another feature of database is, is that you can tell the database server go ahead and optimize yourself, your RAM and your hard disk space, so that selects, and inserts, and deletes, and updates are really fast. Contrast this with pset5. 

If you wanted to look up something in your hash table, which you think of as a database, who had to do all the work for making your hash table fast. It's like, obviously, you. Right? You had to put in all the time fine tuning things, getting a hash function right, figuring out how many buckets to have. 

But what's nice, again, about a database is you just punt all of this to other people who have thought this through for you, and what I'm going to say here under index is that my ID field is going to be the primary way of identifying users in this database. I'm not going to think of Zamyla as Zamyla, I'm going to think of her as the number 6. 

Why is it, perhaps, better intuitively to think of and model each of your individual rows using a number instead of something like a string, like the Zamyla or Gabe or longer string still? Yeah? 

AUDIENCE: An ID is unique? DAVID J. MALAN: Say again? AUDIENCE: An ID is unique? DAVID J. MALAN: An ID is unique, but suppose-- as the case in general with usernames, suppose I also said there can only be one Zamyla in the world, and only one Gabe. I could impose the uniqueness constraint on strings, too, if I wanted. So not a bad thought. 

AUDIENCE: More secure. 

DAVID J. MALAN: More secure, why? AUDIENCE: You can't tell which is which, as in the user. DAVID J. MALAN: OK, you can't tell which user is which so there's a privacy aspect to it, especially if the IDs maybe appearing in the URLs. So sure, that could kind of work, too. Other thoughts? Yeah? 

AUDIENCE: It's easier to perform operations on an int. DAVID J. MALAN: That's the real kicker. It's just more efficient, or easier for the computer, to perform operations on an integer. Right? An int is guaranteed to be 32-bit, whereas Zamyla is a few characters long, Gabriel is a few more characters long, Davenport is really long, and so it's not particularly efficient to use strings to compare values and look for fields, and update fields, if you can get away with just one integer. Just 32 bits. So usernames, too, this way, don't have to be unique, although they probably should be, and even in this way too a user could be allowed to change his or her username. 

So let's now leave this as the primary means of identifying the user. This is telling the database go ahead and optimize yourself so that look ups on ID are super fast. AI, horribly named, just means Auto Increment, and this is the check box we need to check to specify that the ID field to be automatically updated for me, and then I'm going to scroll to the right here and frankly I'm not really interested in any more of these fields. Certainly not today. 

So I'm going to go back here, to the first column, where I need to specify username and hash, and let's at least focus on the second one for now. Int is probably not the right call, so what makes more sense perhaps? 

AUDIENCE: Text. DAVID J. MALAN: Say again? AUDIENCE: Text. DAVID J. MALAN: Text? OK, I heard text. What else? We kind of have a bunch of choices that are textual in nature. So when, and why, do you use some of these? Well char, contrary to what you might think, is not a single character. It's a specific number of characters. So if we know that all usernames must be like eight characters, as used to be common in older computer systems, I could say char and then I could say 8 here. That's when the third column becomes applicable when creating a table. 

But that's kind of annoying because some people might want to have a longer username than eight characters, some people might want to have a shorter username, so why commit myself to a specific number? Why not have a variable number of chars and just say that the maximum length of a name is, I don't know, like 64 characters. I can't think of any friends who have names longer than 64 characters, and even if that's too short you could certainly bump it up arbitrarily. 

So varchar is a variable number of chars. Text is not a bad instinct, and frankly that sort of does what it says, but a text field can be like 65,000 bytes at least. That's probably overkill for a field, and in fact, yup, 65,535. That's probably overkill for a name, so we'll stick, typically, with varchars for textual field and hash, too. Hash, it turns out, we could do a varchar as well or something like that, but we won't focus today on the cryptography there and the numbers that we might actually want to use for its length. 

But let me scroll down to the right. You can only have one primary index for a table, but do I want to apply any of these, now, to username, would you say? What should username be based on a vague understanding of these four options? Just by their names? 

AUDIENCE: Unique. 

DAVID J. MALAN: So unique, right? So it turns out that not only could you tell a database, in advance, this is the primary way of identifying fields. You can also say this is going to be a unique field. It's not going to be the thing I rely on, but I would like the database to essentially have that if condition, so that if I ever tried to register two users with the same name, the database flat out is not going to let me. I might have some additional code in PHP that prevents as much, but the database, too, can ensure that that's never going to happen. 

Now, as an aside, especially as you think about final projects, keep in mind it index and full text are actually quite useful. If you have a larger database, not with dozens, but with hundreds or thousands or even millions of fields, you can also tell the database in advance this is a field I'm going to be searching on a lot. Maybe its username, maybe it's bio, if you're making a Facebook-like website that has paragraphs that the user's allowed to save, and if you want to tell the database in advance I'm going to be searching on this field a lot, but it's not necessarily unique, you can specify create me an index. Or, you can say also allow me to do sort of arbitrary searches like Command or Control F, like you might in a Word Processor, so you could look arbitrary strings or substrings in this field. In other words, we're getting to the point in the semester where you don't have to worry about how to implement things efficiently. You just need to know about what design decisions to make so that you're using the right tools for the trade in order to leverage features that other people have built for you. So to recap, primary should only have one, you can only have one, and it's the thing you're committing to using to identifying fields uniquely. Unique is just similar in spirit, but you might only occasionally use it, but you want the database to impose it. Index just means preemptively speed things up in the future so that I can search for things in this field. And then full text is generally for paragraphs, or essays, or large bodies of text where you might also want to have wild cards like the equivalent of star. Right. 

So that was kind of a lot to all at once. Let's see if we can't distill a couple of these features and then build something fairly simple, but powerful. So among the other design decisions you're ultimately going to have is along the lines of storage engines. And let me just make mention of this in anticipation of final projects, and anticipation of let's say-- no let's do this. Let's build this little application first. I'm going to go into my terminal window, and in here is not only counter.php, which we're now going to get rid of as no longer germane, but we have a whole bunch of directories and this is going to be very similar in spirit to what you'll see in problem set seven. 

So we have three directories includes public and templates, which is exactly where we left off on Monday with our whole MVC paradigm. And to recap, in public is going to go any file that I want users to actually v be able to visit in their browser via URL. Template. What did we put in templates? What kind of stuff? There wasn't much but a couple files at least on Monday. Yeah. 

AUDIENCE: Header and Footer? 

DAVID J. MALAN: Header and Footer. So we have something similar today, too. We've got a few more files but Footer I see, Header I see, and then a bunch of other files. So this is the equivalent of the V MVC view, which, again, will be a bit more clear in problem set seven, but this is just a folder I'm putting a lot of my aesthetics. A lot of my HTML, a lot of my forms. Meanwhile, includes, is another directory that has these three files and let's take a quick look at these. 

I'm going to go ahead and open up config.php. As it turns out, much like earlier in the term, you sharp included CS50 dot h with pset7. In today's example, you're going to do the equivalent of that with a require statement that effectively includes these several lines. So to be clear, this is a file called config.php. And notice what it's doing. It's apparently doing something cryptic, turning on error messages so that you can see them in the browser. It's, then, apparently requiring two other files so this is like #include in C, and then this one we did see, and we've relied on, this turns on that shopping cart like functionality. 

This means a cookie will be sent back and forth. So why is this interesting? Well, if we go back to this directory and open up, for instance, constance.php. Notice that PHP does support constants, it's not quite like #define in C. Instead, you literally say defined, and notice that I've stored in advance four constants in this file. One for today's database, for my password, for my username, and for the name of the server. So these are actually going to be pretty similar in problem set seven. And lastly, and this is where I'm going to get some nice functionality from the staff, in functions.php is a bunch of code we've written, and I stole some of this from problem set seven for today, that does a bunch of things and let's just look at one of them in particular. This function here, query, is going to be the PHP function we call in order to execute SQL. A moment ago we were using phpMyAdmin, but that's just for sort of learning purposes and diagnostic purposes and forgetting your database set. When you actually use your database, you, the human, are obviously not going to be pulling up a web page every time someone registers. You're going to write code that inserts and deletes users on demand, and we're going to do this by way of the query function. If I now scroll down, there's going to be a few more features. Redirect is going to be a function we wrote for you that allows you to send the user to another URL, and render is a function, quite like we saw on Monday, that actually renders a template, but more on these in the form of pset7's own walk through. For now, let's go ahead and do this. 

Let me go into my lectures table and see that there's currently nothing here just yet, and let me also go into my public directory, where there's just one file, index.php. This file appears to be super simple at the moment, it looks just like this. Very much like how we left off on Monday. I'm requiring this file, config.php, which is in an includes directory, which is in dot dot, my parents, and then it's just rendering this file. So what is this file? 

Let's open up in my templates form.php, and we'll see this. Super simple, apparently this form is going to submit by a $_GET or $_POST. Quick sanity check. Literally visually search the file. Method equals post. So it's not going to use the URL, like Google does, it's going to sort of hide the information behind the scenes and it's going to submit to a file called register.php, and that's the file we haven't yet written but what this is going to look like is this. 

If I go to a separate page This is what localhost/index.php looks like. And again, the server's just assuming index.php. Enter. So that's where we're at, and what I want to do is be able to type things like David, and then my phone number, which will say 617-555-1212 for now, register and now register.php was not found. So I need to implement this. So let's quickly whip something like this up. Let me go into my public directory and do gedit of register.php, and now I'm going to go ahead and start PHP mode, like we did on Monday, and close PHP's tag, and let's do a couple of things. 

So one, I know, from having written that form, that I want to check for the following. If it is empty, whatever the user typed in to the name field, then I'm going to say something like apologize missing name. Apologize, meanwhile, is not a built in PHP thing, it's a function we wrote in functions.php for pset7 so that you have access to it. Else if the other field is empty, number, then I'm going to apologize to the user and say missing number. Save this file. 

Now let's go back to my browser, go back to the forum try again. Register. OK. Nothing happened, which is good. I didn't get an error message. But if instead, let's reload this page, and not provide anything. Damn it. Do that. Register. What did I do wrong? If empty, $_POST name. Say again? 

Oh, of course. I forgot the most important part, which is require("../includes/config.php."). I need to have access to the apologize function, which is why nothing was happening. The function doesn't actually exist. So let's try this again. Let's reload the page, click Register. OK. There it is. So, the output we're seeing here is the result of calling an apologize function, super simple, and it just prints out whatever I give it as an argument. 

All right, so let's cooperate. Let's provide my name like David, register, missing number OK let's provide that, too. 617-555-1212. Register. OK. So all is well now, just nothing interesting is happening. So now let's make something more interesting happen like this. Let me go into phpMyAdmin, and let's actually create a table called users, I'm going to give it three columns, and I'll quickly create ID, and then name, and then number, and the ID field I'm going to leave as an int. The name field I'm going to leave as a varchar, and we'll say 64, somewhat arbitrarily. The number I'm going to make, you know what? We're going into support US numbers here, so I'm going to do something like char and then 10 characters max for an area code and then seven digits. And then over here, I'm going to specify auto increment this field, make this a primary key, and I'm going to go ahead and not check any of these other boxes. 

So when I now finally click Save, and I go back to my users table, this is what it looks like if I now click a New Tab structure. So this, to be clear, is just phpMyAdmin's way of saying your database table has an ID, a name, and a number with those particular configurations and we'll ignore the rest of the fields there for now. 

So now what do I want to do? So if I go now into my source code, if all is well I want to execute the following query. Insert into, and I can just say users I don't strictly need those back ticks if it's not a dangerous word like users. I'm going to say name, number, and then here I'm not going to hard code the digit of the values yet. I'm going to put two question marks. And this is a convention in many languages whereby if you want to have a placeholder for a string you're going to use the question marks, for reasons we'll come back to chat about security, and here I'm going to pass in those two fields post name, and then post number, and now save the file. 

And now I'm going to go down here is a super simply say rendersuccess.php, which is going to be another template. I'm going to create really fast. Geditsuccess.php and I'm just going to say H1 success in that file. All right. So now, let's go back to the browser, where I visited before. Let's go ahead and confirm I wrote in David, I wrote in a phone number, register. Damn it. What did I do wrong? So I'm seeing an error here, you have an error in your SQL syntax. Let me jump back to gedit, let me go back to register.php, and what did I omit that was important last time? I need this. You want to know that other than from having noticed before, but I need this. 

So now let's go back, and this was helpful to see in the browser and that's why in config.php we spit out errors. Let's go ahead and reload, click Continue, success. So now let me go over to my database here and click on Users, and browse, and notice I now have David in my database here. Now technically this website is not yet on the public internet, so I can't have other people in putting here, but if I now wanted to, for instance, send myself a text message. Let's go out on a limb here and see if this actually works. I'm going to go ahead and delete this row and we'll blur this out in the video later so we don't have the entire internet texting me, and we will now go up to the browser and we'll go over to lecture and we'll type in different number here, register, success. 

So now, my own number's presumably in the database, and now the fun part. Let's actually use PHP to do something programmatically, either from the command line or from somewhere else, and for now I'm just going to keep it simple and I'm going to go into my directory here and do the following. Gedit script let's say, we'll call it text, #!/user/bin/env PHP, like we saw last time. PHP. 

Now I'm going to do require includes config.php, even though this might induce a slight error. And now I'm going to go ahead and say rows, query, select star from users, and now here I'm going to do a technique from last time for each rows as row. And I'm going to do something simple. Printf let's say name is this, and number is this, backslash n. And now I'm going to pass in row quote unquote name, and row quote unquote number, and now let's go ahead and my terminal window chmod this a + x to make this script called text executable. And now let's run text. 

OK, so progress. So I've now written a command line script, in a language called PHP, that, because of that require line, has access to all those configuration constants that I specified. The name of the database and so forth. In fact, just to be clear that this isn't a fluke, let me go ahead and register, really fast, someone else like Rob and will give him the 555-1212 number. 

And now, if I run the script again, notice the power of what we're doing with the database. Now I've immediately seen what the other two rows are in my database. So now let's try to do something even fancier inside of, and this is the part we've not tested in advance, so the last time I did this things went horribly awry, we have video to that effect. 

Actually, yeah, funny aside. So the last time, in a lecture like two years ago, we decided, I decided, to be all this would be a great idea to dynamically generate emails in class, using the entire database CS50 students, who had given us their numbers and their cellphone carriers which you might recall from pset0, how to reason, it turns out I had a minor bug in my program and did a couple mistakes in 2012, I think. 

Whereby, one I had for loop that did exactly this kind of thing, iterating over the database, getting a name from the database, name from the database, and then on each iteration of that loop I sent an email. But instead of sending one email, I sent one email the first iteration, and two emails a second iteration, sent three emails a second iteration, which as you might recall from our discussion of asymptotic notation this big O of bad, like n squared is how many messages I sent, but it wasn't even emails it was text messages. 

And as you know, attendance isn't super high toward the end the semester and so I thought it would be cute at the time to say, "Why aren't you class?" In the text message I sent to the whole class, and it was funny to like 50% of the class, but the other 50%, some of whom freaked out, i sent incredibly apologetic sweet notes to the staff apologizing for having missed the lecture just this once, right? 

So that would horribly awry. So in that spirit, let's try this again but just with my number. In advance, in functions.php, I've written this function here. It's called text, and it takes in three arguments. A number, a carrier, and a message. 

I'm using a switch statement, which wonderfully PHP take strings, not just integers, and I didn't implement all the support for this yet, I've just done AT&T and Verizon. Because it turns out that with these carriers they have email to SMS gateways, whereby you can actually send an email to an address like phone number at vtext.com and if the user hasn't blocked the messages, it'll go through is a text message. 

Now to do this, I'm going to have to add one field really fast to my database. I'm going to go into my structure, and I'm going to go ahead and add a field at the end of the table. Let's click Go, and I'm going to call this carrier and for now I'm going to leave this as a bar text, but we can be fancier in the future. I'm going to quickly go into my table, and I'm going to get rid of Rob, because that's a fake number, I'm going to go into edit here and I'm going to change my carrier manually to be Verizon, which it is, and now over here. 

Let's do a quick sanity check. Let's open up our text script, which looks like this, carrier is %s. We're doing a lot more error checking than I did in 2012, carrier. And now, I'm going to go ahead and re-run the script. OK. Carrier is Verizon, which means now hopefully I can do just this. Correctly this year, hopefully, here we go. 

So inside of this for loop, I'm going to not only have this printf, I'm also going to call text and the usage of this function recall was it takes a number, a carrier, and a message. So let's see, number is going to be row quote unquote "number," row quote unquote "carrier," and the last one was message. Don't screw up this year, semicolon. 

OK. Fingers crossed. Let's see if this works. All right, so. Here we go. Let's unlock the phone, cross your fingers, damn it. Undefined variable may-- oh wait, wait, wait, real fast. Real fast, real fast. This is totally worth it. Let me grab, let me grab, uh-oh. Thank you, the texts have started from someone else. Let me go ahead and open up real fast, dropbox.php/mail in here. Standby. Totally worth it. Downloads. OK, source src8m. OK. 

Need one more line here. Oh there it is, it's in Frosh IMs, it's in register at three. Oh hello, Margo, thank you very much. OK, and I was missing this line here. So let me quickly grab this line of code, which includes the mail or library that I actually want to use, I'm going to quickly go back into functions, I'm going to go to the top of this file and require this file as well, and now I'm going to really cross my fingers when I go back to the command line script, which is inside of today's local host directory. Run text. Enter. Mail. Standby. Standby. Mail. Oh, OK. Here we go. 

Mail gets new PHP mailer. Did I do this right? Damn it. To-- oh, wait, wait, wait. Stand by. I promise, this is going to be so worth it. Address. This is why I don't make the examples right before class. Ugh. The following recipients failed. Let's try one last thing. SMTP set from, add address, the address is indeed that. Let's try this last part in address. Aw, I'm really sad right now. Thank you. But I really appreciate all the texts you've been sending. You've got this David. You're blowing it. Let's leave it there and we will fix on Monday. See you then. 

DAVEN FARNHAM: And now Deep Thoughts by Daven Farnham. If a binary tree falls in a forest and no one is around to C it-- [CHUCKLING]. [MUSIC PLAYING] 

DAVID MALAN: This is CS 50, and this is the start of week nine. And what we thought we'd do today is not only close the chapter on last week's material where we focused on server side web programming with PHP and SQL, some database stuff. We'll talk about a bit of security today and then transition to a client side programming language known as JavaScript. But first, some redemption. 

You may recall that on Wednesday, I set out to write a website that took in user's input by an HTML form that then stored that user input names, phone numbers, and cellphone carriers in the database. And then I had a little command line script written in PHP that was supposed to iterate over the rows in the database and send out text messages. Despite several, several attempts, we didn't get that working by the end. 

So I spent this entire week working on that code to get us past the point where we left off, whereby all I got by the end of Wednesday was this text message from Margo as I struggled, followed by a text message from another classmate, You've got this David. Followed by this one, wonderfully encouraging. Kept on going, very heartening. I almost got it until then-- and that's the note we ended on Wednesday. And then actually perhaps my favorite, a moment later, this came in. Damn Live Stream. 

So today, we fix this with a quick look at what I've done since. So all of this code is available online from last week's, week eight, source code. And you'll see that I went through, and I actually cleaned up things a bit. I introduced a couple other features of an SQL database. For instance, rather than just make carrier of var char as I think I did on the fly last week. I instead defined it as what's called an enum. 

And some of you might have seen this as we explored C. Enum is actually a feature of C where you can enumerate a whole bunch of constants and assign them automatic values, like one, two, three, four without having to hard code numbers. So SQL supports the same, whereby if you have a database field that you only want to take on one of finite values, you can literally specify it as I have done there for four popular US cellphone carriers. 

So I did that. And I made a number of changes as well, the most important of which was to get email working because recall, that this program relied on which generally called an email to SMS gateway, which is just a fancy way of saying that Verizon, and AT&T, and other folks support a server, whereby if it receives email, it converts it to SMS and sends out a text message to someone's phone. So if I did this correctly, here is a new and improved form that is going to talk to new and improved code, which you can play with online. And it will hopefully make my phone beep in just a moment. 

So first, I'm going to type in my name. Second, I'm not going to do this this time. I'm going to do Inspect Element. And this is just a little thing so I don't create hours of post production work as I did last time. There now is my phone number. 

I'll select Verizon. And here, let's turn on this microphone here, and aim this at my phone here. I'm going to click Register, which should hopefully put it into the database. Now I'm going to go to the command line program, which recall was called dot slash text, and cross your fingers. Here we go. 

[PHONE DINGS] 

[APPLAUSE] DAVID MALAN: So more fun than this-- it's fun, of course, if I get into it. But it's more fun, I thought, if we created one of those movie moments where like something really bad has happened in the world, and like all the NSA people's cellphones start beeping with text messages alerting them to this fact. So I thought we would try to recreate the same here, whereby not using a database, I instead in advance wrote a program that looks like this. 

This is an index.php-- and I put this code online as well-- that apparently just renders form.php, using an MVC style paradigm that we talk about in more detail in problem set seven. That form is pretty simple. It's going to submit to a file called here.php via post. And it's apparently going to ask for a name, and a phone number, and then via of so-called Select menu, it's going to give you at least four popular US cellphone carriers, and then allow you to effectively take attendance by clicking here. 

And here, meanwhile, is going to borrow some of the code from last time. And if you just skim this, you'll see that there's a whole bunch of error checking. But the beauty at the end is that we're not writing to a database today. We're keeping it simple and just sending out hopefully a text message via function I wrote over the past few days call Text, which is in Functions. php, which is again available online. 

So if you would like to partake in this. We're not going to be storing anything. Go to this URL here in real time. Don't submit it just yet, but let's see if we can have one of these movie moments where everyone's cellphone starts beeping, hopefully just once this year unlike in 2011 where this went horribly awry. And once you go to that address, you should see a super simple form that if you have a name, a cell phone number, and a cellphone carrier that matches the list there, go ahead and fill out the form. But don't hit submit just yet. 

The form's going to look like this. Go ahead and type in your name, phone number. Oop, someone's going ahead of the curve. It's OK. OK, everyone's filled out the form. This should work on a phone, too, if you want. All right, on your marks, get set, go. Hit Here. What? No. I swear to God, I tested this multiple times today. You got it? 

[INTERPOSING VOICES] 

DAVID MALAN: OK, user error perhaps. That's two. It worked for two out of a few hundred, three, four. OK, that's good. Four out of five for correctness how about. 

So what just happened? So presumably, without seeing your screens, why might it have errored? It's probably that we were just trying to make too many connections to Harvard's mail server all at once from the same IP address. I'm just guessing since I didn't have the luxury of testing this code with some 300 people in advance but for now realize that that at least should have gotten the job done this time. 

All right, so why is this all the more germane to what's going on? Well first, a quick couple of announcements. So one, if you'd like to join Chang, and Nick, and others at lunch this Friday, do RSVP at the usual URL there. If you are thinking of concentrating in or doing a secondary in CS, whether you're a sophomore, or freshman, or even junior or senior at this point and can still squeeze in the courses, realize that the engineering school is gathering for free Ben and Jerry's ice cream and advice this Wednesday shortly after class at 4:00 PM in the CS building at Maxwell Dworkin. If this is too fast on the screen, just go to cs50.harvard.edu for a link to the Facebook event where you can see more details. 

Meanwhile, I thought I would correct one other thing I goofed on Wednesday. Turns out that Mark's ID on Facebook wasn't three. It was four. Turns out he had more test accounts than I recall. But what this felt like an opportunity to do is to pull up a URL like this. 

So it turns out that Facebook has an API, Application Programming Interface, which is a mechanism whereby you can request data programmatically at Facebook and get back machine readable information, not web pages but just raw text, something called JavaScript Object Notation. And in fact, if I visit this URL, and zoom in, by default, this is Mark's publicly accessible information. 

And the interesting detail here is just that his ID is indeed, number four, which I realized as soon as I did this. You can do this yourself if you know your Facebook username if you have one. Just type it up top there. And none of this is private. I'm just doing this even in the incognito mode. So I'm not even logged in. And you're seeing that I apparently was user number 6,454 on Facebook, which isn't too bad these days. So anyhow, you'll also see additional information there. 

And the useful aspect of that is that you could write your own software that somehow integrates data like this into your own application. You can empower users to log into your website, not using their own custom username and password but maybe their Facebook login and get information even about their friends, if they approve such, or similar. So note that CS50, too, has some of its own APIs, one for the course catalog data, some for the hugs menus in the dining halls, all of the buildings and locations on campus we have an API for as well that you can query similarly and get back textual data that you can integrate into a PHP, or JavaScript, or even, though less commonly, a C based final project. 

Indeed ahead for the final project are a few milestones. You got an email from us the other day. Realize that the proposal is due this coming Monday. It's not necessarily binding, but you do need to receive your teaching fellows approval before making any changes thereafter. And then ahead are a number of other milestones. 

So to tease you, too, with some possibilities, we have a bunch of these hue light bulbs. And some of you guys now have some of these in your dorm room as well. And they too have an API. So recall those binary bulbs weeks ago that Dan Bradley and Ansel Duff created for us. They used a software interface to this light bulb, which at the moment is plugged into electricity and then via wireless is connected to a little thing called the Bridge down here, like a little router proprietary to this particular device. 

But it turns out if I know how to send HTTP messages, as we all now do, I can send a message like this to this light bulb to turn it on or off or do any number of other operations on it. Notice that it's not get, it's not post. There's another one called put. There's actually a few other such verbs. But notice there's a path there, slash API, slash new developer, slash light, slash one, slash state. 

That's apparently just the path that the company, Philips, decided you have to hit with an HTTP request if you want to change the state of the bulb using HTTP 1.1. Then notice the blank line. And then lastly what looks like kind of an array of some sort, this again is going to be called JavaScript Object Notation, or Jason. And what you see here is that there are three key value pairs. 

One key is called on. And its value apparently is going to be true. Brightness is 128, which is some kind of int. And then transition time is zero, which is apparently how long it's going to take to turn this thing on. 

So right now this light bulb is off. But if I do exactly this-- let me go to a little cheat sheet that Dan set up in advance-- and I'm going to go ahead and copy the following command. Curl, as some of you might have gleaned on CS50 Discuss is a utility like Telnet such that you can simulate HTTP requests, specifically puts. I can send this data, specifically what we just saw a moment ago specifically to this URL over here. And then Curl is going to handle all of the requisite headers and parsing there of. 

So all I have to do is copy this into a terminal window and then hit Enter. And the light bulb goes on. And this is all going through my computer wirelessly somehow down to the bridge, which is then talking to this light bulb. I can do something else. I can make this thing go red for instance. I can for instance make this thing go green. I can make it go blue. 

And notice in each of these instances, all that I'm changing is the so-called hue value to actually give it some color. So let me paste this one in as well. Now it's blue. 

And you can do even fancier things where-- let's go to green. And I could do this of course with my own code. But even the API itself supports funky operations like this, which will now bother us for the next 30 seconds. 

So that's one taste of what you might do with an API, this one involving light bulbs. Note that CS50 has a couple pairs of Google Glass if you'd like to tackle something along those lines, Arduino Unos, which are tiny little computers, essentially, on a little circuit board that you can connect wires and other things to and actually control your real world environment. And then there are a couple of new toys that we have. This one literally just arrived the other day by mail, a Myo Armband. And I thought it's a way to get you excited about projects that you might use with this hardware would be to play this short clip that they use to tease folks that we're now living in the future. 

[MUSIC PLAYING] 

DAVID MALAN: So in just a few weeks, you too can be that cool at the CS50 fair. Another device that we have a bunch of that we're happy to loan out for projects is called a motion controller. This is a little USB device you connect to a computer that allows you to interact with your laptop, Mac or PC, as though you had like an Xbox Kinect and actually make physical motions much like we see in this vision of the future. 

[MUSIC PLAYING] 

DAVID MALAN: So even if you have no idea how something like that could possibly be invented or work on a hardware level, no matter. Even after just a few months of CS50, and an understanding of programming more generally, and web programming more recently, and then also APIs, and HTTP, you'll have access via software APIs if you do want to borrow one of these devices to actually talk to it and not have to worry about the underlying implementation details, which is completely consistent with this notion of layering an abstraction that we've seen throughout the semester. 

So also over the weekend, saw a couple pieces of news. Go first, go to seminars if you would like to learn something more on any number of topics. See the URL there. And this one was sent to me by Chang, who you know, who's printing our army of elephants. And it was a headline as follows. I'm terrified of my new TV. Why I'm scared to turn this thing on and you'd be too. So we're now at the point in the semester, too, where even if you have the slightest of understanding of how the web works, and HTTP, and security, things like this should start to catch your eye. But also, you'll understand whether these things are or are not actual threats. 

So I took a few excerpts from this article here. And the story is as follows. I'm now the owner of a new smart TV, which promises to deliver streaming multimedia content, games, app, social media, and internet browsing, oh and TV too. The only problem is that I'm now afraid to use it, says the author. You would be, too, if you read through the 46 page privacy policy for your TV. The amount of data this thing collects is staggering. It logs where, when, how, and for how long you use the TV. It sets tracking cookies, as we've discussed, and beacons designed to detect when you have viewed particular content or a particular email message if you want to check email on your TV. It records the apps you use, the websites you visit, and how you interact with content, doing all of that via your smart TV. It also, creepier yet-- that's my addition-- has a built in camera with facial recognition. 

The purpose is to provide gesture control for the TV and enable you to log in to personalized account using your face. On the upside, the images are saved on the TV instead of uploaded to a corporate server. On the downside, the internet connection makes the whole TV vulnerable to hackers who have demonstrated the ability to take complete control of the machine. 

More troubling, as if that wasn't smart enough, is the microphone. The TV boasts a voice recognition feature that allows viewers to control the screen with voice commands. But the service comes with a rather ominous warning. Please be aware that if your spoken words include personal or other sensitive information, that information will be among the data captured and transmitted to a third party. Got that? Don't say personal or sensitive stuff in front of your TV. 

So this is actually for real. And it's hard not to see if you go to Best Buy or the like for TVs these days. They're all smart in some way. And they're getting smarter and creepier. And they're simply collecting data in ways that we've talked about and then uploading it via HTTP or some other protocol to some server. 

So this was of a fun article in this online website here, which talked about a particular bug or mistaken code that we can actually tie into last week's discussion. So this headline was as follows, the story goes here, Josh Breckman worked for a company that landed a contract to develop a content management system, or CMS as they're called, for a fairly large government website. Much of the project involved developing a content management system so that employees would be able to build and maintain the ever changing content for their site. Things went pretty well for a few days after going live. But on day six, things went not so well. All of the content on the website had completely vanished. And all pages led to the default, please enter content web page. Whoops. Josh was called in to investigate and noticed that one particularly troublesome external IP address had gone in and deleted all of the content on the system. 

The IP address did not belong to some overseas hacker bent on destroying helpful government information. It resolved to googlebot.com, Google's very own web crawling spider. Whoops. After a bit of research and scrambling around to find a noncorrupt backup, Josh found the problem. 

A user had copied and pasted some content from one page to another, including an Edit Hyperlink to edit the content on the page. Normally this wouldn't be an issue since an outside user would need to enter a name and password, but the CMS authentication system, the login system, didn't take into account sophisticated hacking techniques of Google Spider. Whoops. 

As it turns out, Google Spider doesn't use cookies, which means that it can easily bypass a check for the is logged on cookie set to be false. It also doesn't pay attention to JavaScript, which would normally prompt and redirect users who are not logged in. It does however follow every hyperlink on every page it finds, including those with Delete Page in the title. Whoops. 

So what does this mean in more technical but fairly accessible terms? It just means that throughout their website, they had URLs not unlike this one that you might see in problem set seven. Recall in problem set seven or know in problem set seven that you're challenged, among other things, to sell stocks on behalf of users. But implementing that feature by way of get via hyperlinks in your user interface, probably not the smartest idea because if your site is somehow accessible either by a human who's clicking around or buy a bot like Google's or a Spider as they're called that's just crawling the web trying to index the web as a search engine, they could very easily hit via get this kind of URL. And that's functionally equivalent to, in this case, selling all shares of Google. 

Now frankly, it's completely asinine that the CMS used JavaScript and cookies to implement its login system and not doing that server side, as you guys do and will in PSet 7-- there's a login.php file-- always, always, always security should be done on the server side, not on the client side because, as this article suggests and you might yourself see at some point, it is trivial for a user, good or bad, to just turn off JavaScript not to mention cookies. So that is your daily WTF. 

There's one more, which is just kind of scary, so I'll mention it if only as a life lesson. Whenever you use an application called like Snapchat or the like that says these photos only last for five seconds, ten seconds, or whatnot. They're ephemeral That is absolutely not the case. Like there is no way, digitally, to implement some form of video, or image, or textual sharing such that a recipient on the other end can't somehow save the data. 

In the most naive way, someone could take their phone. And they have a 10 second window while looking at some snap to just take some other phone and photograph it, obviously. So you can preserve something digitally that way. Some of you know how to take screenshots on your phone. In fact, if you don't know this, realize that at least Snapchat, and I think other applications these days, at least tell you if the recipient has actually taken a screenshot of your image. 

But worse yet, this was the snappening, as someone coined it recently, where some 100,000 snaps had been released in what's called a torrent file on various websites ultimately. And these contained a whole bunch of private messages and posts. It turns out most of them benign, so not what you might expect. But because people had used a third party website, logging in with their Snapchat username and password and then saving all of their snaps on this third party website. And it was that third party website that was hacked, which just meant someone figured out how to get all 100,000 plus of those images into their own hard drive for subsequent sharing. Frankly, here too, it's sort of asinine that Snapchat is implemented in such a way that a third party can sort of intercept the data and that it's not tied to your own application running on the phone. But here, too, realize that these things should not catch you by surprise, or at least there should be a life lesson in here. If you'd like the technical details, go to that URL there that's in today's slides. All right, any questions on today's life lessons in CS? Turn that off. Anything at all? Anything at all? I've got a lot of people checking their Snapchat or something now. 

All right, so SQL, Structured Query Language. Let's wrap this. And also, even though we're just scratching the surface of this language, we'll give you enough of the language in the form of PSet 7 so that you can tackle some fairly common functionality. But realize there are a couple things we don't require of you, but they're going to be important come final projects and certainly come making actual websites with actual users is this design decision. 

It turns out that in a MySQL database, you have bunches of choices like the data types for your columns and other things, but you also have the choice of a so-called storage engine for all of your data, the sort of file system, if you're familiar, for all of your data. What format is it ultimately stored in? And the most common, perhaps, has been MyiSAM and InnoDB, technical terms that we'll care about only to the extent that one has and one doesn't have the following feature. 

Suppose that you have a little dorm fridge. And suppose that you and your roommate, who share this fridge, are really fond of say milk. And this is, in fact, how the story was told to me way back in the day when I took a course called CS 161 Operating Systems, which similarly explores this topic. So you've got this fridge. You're out of milk. And you come home, your roommate's still at class or whatever, and you decide I'm going to go out and get some milk. So you close the fridge, lockup the dorm room, go across the street to CVS or wherever, and get in line to buy some milk. 

Meanwhile, your roommate gets home from class, gets into the dorm room, opens the fridge, also realizes ooph, we're out of milk. So he or she closes the fridge and then happens to go to the other CVS, which happens to be one block away from the other CVS in the square, and gets in line there to get some milk. Now, of course, a few minutes later, you both get back, and the worst of all possible outcomes has happened. Both of you have milk. And you don't really like milk that much. So one of them is just going to sour at some point. So now you have an excessive amount of milk in the fridge all because why? 

[INAUDIBLE] DAVID MALAN: Yeah, you didn't somehow communicate with each other that you were getting milk. So in the simplest of ways in the human world, how might you avoid this silly scenario from happening such that you only end up with one. Text them, yes good. But how else? Post-it notes. DAVID MALAN: A Post-it note. Any form of communication that tells your roommate don't go into the fridge for milk. I'm going to go restock on my own. So you somehow need to lock this resource. So we can make this-- we can kind of ruin the story and turn into a CS story whereby think of this as just like a variable, which is storing some value. And right now, the value of milk is zero, which you don't want your roommate to inspect that variable and then make a decision him or herself based on the state of that variable if you're in the process of changing the state of that variable. 

So one of the lines of SQL that we give you in PSet 7 specification is this one here. And we don't spend a huge amount of time talking about it. But it turns out, if you are trying to buy some stock in CS50 finance that you already have some shares of, you want to be able to do a number of things instantly together. You want to be able to effectively, on a high level, check all right, if I want to buy more shares of Free, the penny stock we talk about in the spec, I want to first check how many shares I have. And suppose it's five. And suppose I want to buy 10 more, I ultimately want to have 15 shares of stock. So I have to ask two questions. What's the state of the variable? What's the state of the row? How many shares do I currently have? Then you want to go ahead and update it. So that's the analog to the milk in that you check the row, and then you want to update it because if you want to buy 10 shares, you don't want to change the row to 10, you want to change it to 5 plus 10 or, of course, 15. 

This line of code ensures that those two conceptual ideas happen together or not at all. No one, including some other user who's logged into the same website, can somehow interrupt the checking of the row and the updating of the row, the select and the update if you will. And the syntax isn't super obvious, but this one line, long is it is, ensures that those two operations check the variable or check the row and update the row happen atomically. 

Oh here we go again. Text message on my phone. So let's make this a little more concrete. Suppose that you're not implementing a refrigerator, and you're not implementing PSet 7 but an actual bank, or an ATM, an Automated Teller Machine, whereby you somehow want to be able to empower users to transfer money from one account to another. OK, hang on. I'm going to mute this now, thank you. So we want to move money from one account number into a different account number, specifically $100. So this is kind of an arbitrary example, whereby you, the ATM, might want to execute two SQL queries, subtract from one account, and add to the other account. But you want to ensure that these two lines both happen or not at all. You don't want something getting interrupted. You don't some smart bad guy somehow standing at Bank of America with two ATMs in front of him and somehow sort of typing in the commands at the same time, hopefully trying to deduct $200 instead of $100 and only having $100 credited. In short, you want this to behave exactly as you expect. 

And the way you do this in SQL database is you wrap it in what's called a transaction. Literally in SQL, you can call CS50's query function with quote unquote start transaction. Then you can execute any number of subsequent SQL queries, but none of them take effect on the database until you call query quote unquote commit, if again using PHP. And in this way, you can ensure that even if you have 1,000 users all hitting your database at the same time, SQL will promise that these two queries will be implemented one right after the other. So you don't end up with excess of milk or the wrong amount, ultimately, of money. 

So keep this in mind, not so much for PSet 7 but for final projects if you're actually trying to move data around across tables as you might here. But perhaps even simpler and more obvious to understand with an example is this one here. And someone emailed us about this just the other day when he saw something similar online. 

So to my knowledge, the pin system is not vulnerable to this attack. And I have no idea if it even uses the SQL database underneath the hood. But let's use it for the sake of discussion. Here's the screen that Harvard folks tend to see when logging in with their Harvard ID number and their pin. And suppose that the pin system were implemented in PHP and with a MySQL database, the code that someone might have written years ago might look like this. First, declare a variable called username. And just get that from the POST superglobal. Then get another variable called password and do the same. And then just execute this long query here, select star from users where username equals such and such and password equals such and such. 

Notice that the curly braces I've used here just mean to PHP, go ahead and substitute the value of those two variables right there. They're not strictly necessary, but they tend to avoid subtle syntax errors. So this looks completely correct at first glance. And it is. You could implement the pin system in this way. 

But suppose that a super smart and malicious student input this as his or her pin. So I've removed the bullet signs here in the mock up, and I've actually revealed what he or she might be typing. And it's a little strange. But what jumps out at you at potentially worrisome about the user's input, even if you have no idea what a SQL injection attack means. Why does this look a little fishy? What's that? [INAUDIBLE] DAVID MALAN: The or is a little suspicious. In fact, that's a keyword from SQL. So that doesn't bode well. The fact that there's all these single quotes there-- in fact, one of the easiest ways to break some databases is by typing in a name like O'Reilly that has an apostrophe in it because if the human who wrote the code behind the scenes doesn't take into account that there might be single quotes in a user's input, and he or she is using single quotes in their code, bad things can happen. 

In fact, worse yet, consider this. If this was again the code that someone at Harvard years ago wrote for the pin system, notice what's about to get substituted for username and password if the user types in again skroob as their username and then one, two, three, four, five, quote or quote unquote one equals quote one. And notice what's key here is the user has not started their password or their pin with a quote. And they haven't ended it with a quote because he or she is assuming that if the programmer wasn't so sharp, they are going to have those single quotes in their code. 

So here's the code. And the substitution that might now happen is this. And I've underlined what the user has typed in. So before, after. And notice what's mildly worrisome now about the right half of this SQL code? It's a little more complex, admittedly, than the queries we've seen. But this can't possibly be a good thing if you're saying select star, which is select everything from the user's table where username equals skroob and password equals one, two, three, four, five or one equals one. What's the logical implication of that last clause presumably? It's just always true. 

And because we have sort of guessed or figured out by trial and error that the programmer who wrote this code did not anticipate a human or bad person typing in single quotes as well, we can syntactically complete the SQL query with something nonsensical but something that is syntactically incorrect that always evaluates to true. So if this code is being used to answer the question true or false should this user be allowed to pass, the answer is always apparently going to be true because this is always going to select something from the database because one of course always equals one. 

So what's the solution? Well in PSet 7, we actually avoid this all together. We give you a query function, and we encourage you to use question marks as placeholders, similar in spirit to printf's %s, but what's key about the question marks here is if you actually read through functions.php, where our query function is implemented, those question marks are escaped, whereby anything potentially dangerous like a single quote is turned into an escaped single quote. 

So this is what's really happening if you use CS50's query function or any number of third party free libraries that do the same. Doesn't matter in this case, in green, if the user has typed in a single quote because the query function that we wrote is going to add backslashes before any such dangerous quote. So this is not, in fact, going to be legit. This is like typing in a crazy looking password that's, of course, not going to be skroob's actual password. 

So the takeaway for CS50 is one, absolutely always use something like CS50's query function or the underlying library, which happens to be called PDO. But never, never, never do code like this without escaping or scrubbing as they say your inputs. And you will at some point probably come across some website like this. In fact, it seems to be the case like at airports and hotels in places where they have free Wi-Fi access that you have to login to, these websites are always horribly implemented. And so a sort of fun at home exercise, not for malicious purposes or more of a fun on the road exercise, is to just type an apostrophe, a single quote, into a form on some website and see what happens. And if the server crashes or gives you some kind of error message, it may very well be that someone hasn't anticipated this. And then you should alert the proper authorities and proceed no further. 

So now you guys should hopefully understand a bit more geek humor here. 

[LAUGHTER] DAVID MALAN: You know you're a geek. For the next several years, you will remember who little Bobby Tables is because of this cartoon here. So keep that in mind as we context switch one last time today to JavaScript. We've spent relatively little time on the syntax of PHP because it's actually super similar to C. And nicely enough, JavaScript too is super similar to C's syntax as well as we'll see in just a moment and as we'll see later this week in particular. What you can do with this language, though, is all the more powerful, especially with APIs. 

But first a quick tour. So one, in JavaScript, there's no main function, which is nice. As with PHP, you can just write code. Conditions look like this. And Boolean expressions might look like this or like this. Switches exist, and they might look like this. Four loops look like this. While loops look like this. Do whiles look like this. And then arrays look like this, very similar to PHP. But notice, that in JavaScript you declare a variable not with a dollar sign, not with a data type but literally by saying var for variable before it. It too is loosely typed in that it has types, but you don't explicitly declare them. And then a string, for instance, might look like this, that string being called s in this case. And then an object. And these we'll see more before long. And an object is perhaps one of the most commonly seen data structures in a JavaScript based program because it allows you to associate arbitrary key value pairs just like PHP's associative arrays and just like your own hash table or try as we implemented a few weeks back. So let's actually see what we can do with JavaScript. And in particular, this is a laundry list of features that browsers have that allow us to hook JavaScript into a website in the following way. JavaScript is often used as a client side scripting language. It's not compiled. It too is interpreted. But unlike PHP, which has been running on the server, in the web server, or deep inside of the clients, JavaScript is different in that it usually runs in the browser. 

So any JavaScript code you start writing for PSet 8, or your final project, or in the real world is generally going to be saved on the server, absolutely in a dot HTML or dot JS for JavaScript file. But the browser is going to download that JavaScript code to your own instance of Chrome, or IE, or Firefox, or whatever. And the code is actually going to get executed inside of your own browser. Just to make this more real, let's see this in concrete form. 

We have no idea what this code does without really reading through it. But let me go to Facebook.com without logging in. Let me go to Inspect Element and go to, let's say, Network and Reload the Page. And we'll see-- let me shift Reload the Page to get all the requests to new. And the very first file I see is CSS, CSS. Here's the first JavaScript file, and I have no idea what this does, but here is some of the JavaScript code that drives Facebook. It's not even really that revealing to zoom in. It's still just as nonsensical. 

But you'll see even down below, there's even more of these JavaScript files. Whoops. That's a ping. Let's go down a little further, further, further. There's one. There's one. There's one. 

So even though Facebook, behind the scenes, is written in part in PHP and Facebook's own version thereof, there's a huge amount of JavaScript. In fact, any of the chatting you do on Facebook, any of the inline timeline updates that happen in real time, all of that is driven by JavaScript. Yeah? 

AUDIENCE: I'm not sure if this is Facebook, but I thought that Facebook developed their own in-house code language? DAVID MALAN: They did. So that's why I say a variance of PHP called Hip Hop that they actually added features to such that when Mark first implemented Facebook, it was written in PHP. And that sort of has remained the sort of front end language that they use for much of their coding, but it hasn't been a language that's scales particularly well to billions of people. And so they have added their own improvements behind the scenes. And they use any number of other languages for various pieces of their infrastructure. So yes, it's a variance of what we now know as PHP. 

So let's take a look at a couple of examples of how we might use JavaScript here. In today's source code, we have a bunch of files, the first of which, let's called DOM zero. So DOM zero looks as follows. Let me go into this directory and open up domzero.html, the top of which has a doc type declaration, saying here comes HTML 5. And now here's an HTML tag. Here's the head tag. And here's what's new today. 

We now have a script tag inside of the head of the page. And this apparently does very little, but notice that I've defined a script, a JavaScript. And as an aside, since this is a common misconception, JavaScript has absolutely nothing to do with Java, the language that some of you might have learned in APCS. It was more of a marketing thing than anything, riding the coattails of Java years ago. But JavaScript, nothing to do with Java, just similarly, and annoyingly, confusingly named. 

So here is how you declare a function in JavaScript, literally say function, then the name of the function, then any arguments it might take, just like in PHP. Turns out in JavaScript, one of the most annoying functions that exist is Alert. This is a little window that will pop up and alert you to some piece of information. It's generally frowned upon. But we'll use it as our first exercise here. 

Notice a few features of JavaScript. Single quotes and double quotes don't actually matter anymore. Single quotes and double quotes can be interchanged, whereas in C, you have to use double quotes for strings, and you have two single quotes for chars. In the JavaScript world, many people, most people use single quotes around strings just because it's a stylistic thing. But what's the plus operator here, which we haven't seen before? 

AUDIENCE: Concatenation. DAVID MALAN: Concatenation. So C does not even have this. PHP has the dot operator, which does this. JavaScript has the plus operator, which confusingly is just like Java. Now what's going on here? 

So here's where a basic understanding of that picture we threw up a couple days ago comes into play. Remember when we had a simple version of an HTML page-- it just said, hello world. And then we drew a tree to the right, which had a bunch of rectangles and lines connecting them like a family tree. So that's the so-called DOM or Document Object Model. And it turns out that you can access rectangles in that tree with syntax like the following. You literally say document, which is a special global variable in a JavaScript program that has a function associated with it that you can access similar to a struct, but you simply say dot and then the function's name, get element by ID. 

The element I want to get is apparently quote unquote name. And then I want to get its value. Now we're getting ahead of ourselves. I'm not even sure what all this is about. Let's fast forward to the HTML on the page, which is super simple. 

Notice that I've defined a form down here. Notice I've given it a unique ID, even though we've not used this attribute before. But this exists in HTML. You can uniquely identify some chunk of HTML with an identifier like this. 

Notice now this-- turns out HTML supports, per that laundry list a moment ago, a whole bunch of event handlers. And this event handler says on submit. On the user submission of this form, call the following code. And the code that's going to be called or executed is exactly this, the Greek function followed by return false. Everything else should be pretty familiar. 

Here is an input of type text, whose ID, in this case, is going to be name. We don't have an actual name attribute this time-- and a submit button. So the resulting page looks like this. And the resulting behavior, you'll see, looks like this. The page it local hosts says, hello David, hardly an aesthetically pleasing way to greet a user. But what's actually going on? 

Well, consider what this is. This is a text field. And according to the HTML here, I've given it a unique identifier called quote unquote name. Meanwhile, I've said when the user submits this form by hitting Enter or clicking the Submit button, call the function called Greet and then return False. Let's consider those in reverse. Notice when I click Submit, the URL of this page does not change. The browser's icon didn't start spinning. I didn't go anywhere, and that's literally because I said return False. Return False short circuits or stops the default behavior of a form. So that then leaves us with this one final question. What does Greet do? Well, Greet apparently calls a function called Alert, passes in one long argument that's the result of concatenating together a bunch of substrings, hello comma space, then whatever this returns. So document is like a global variable to that root of that tree, calling a special function, otherwise now known as a method. A function that's inside of a variable is called a method instead of a function. 

So get element by ID. What element do you want to get by its ID? Quote unquote name and then specifically value. So in other words, that code simply finds the text field whose ID is name and then gets its value. So if I were to change this and say Davin instead of David, and click Submit, now we have a greeting for Davin. 

All right, so all fine and good. But let's see if we can make this a little cleaner since just writing code like this is generally going to be frowned upon. This is going to look scarier. But what's the first difference that you note here in this version besides the name changing to DOM one? What structurally looks different about this versus the other? Yeah? AUDIENCE: Is the form on top of the script now? DAVID MALAN: Yeah, the form is on top of the script for some curious reason. So that's the first thing that jumps out at me, too. And thankfully at least, this part is identical. So the only thing that seems to be different is this. 

So here's what's neat about JavaScript 2. And it makes it hard to understand at first glance, especially for final projects if you're looking at sample code online, but it boils down to some basic syntactic features. Here again is that global variable document. Here again is that method or function that says get the element by ID. This time I want to get the ID called demo. Where is that? That's apparently right here, the form itself. 

And now notice that apparently if I get back that node from the tree that represents the form itself, not a text field, it turns out that form, that node or rectangle from the tree, has what we'll call a property, very, very, very similar in spirit to a struct in C. It's just a data member inside of this rectangle. 

So I've got the form here, and I'm attaching, or I'm assigning, to its On Submit handler or rather On Submit property the following function. And this is, by far, the craziest thing thus far syntactically. It turns out in JavaScript and in PHP, and frankly for that matter in C, even though we don't do it, you can add nameless, anonymous, or AKA lambda functions that don't have a name but can be called nonetheless. 

So what I'm doing here is I'm assigning this On Submit property, which is inside of this node of my DOM tree, a function, function pointer if you will. That function has no name, but that doesn't matter because we'll see in a moment how to call it. When this function is called, this code gets executed, then false is returned just like before. 

But notice what I've done. At this point in the story, I have a form. It's got a unique ID called demo. Down here, I have a script tag that executes the following code. It attaches to that node in the tree to it's On Submit property this function here. And just by nature of how browsers work, when I now click Submit or hit Enter, that function is going to get called. It doesn't need a name because who the heck cares what it's called. The only time it's ever going to get called is when I submit the form. There's no need for me, the human developer, to actually call it anywhere else. 

Now just as a teaser, as if that weren't mind bending enough, we can even make this look more cryptic using a super popular library called jQuery. In fact jQuery and JavaScript are often conflated. And what we'll do on Wednesday is start using this language and these libraries to build increasingly asynchronous and dynamic applications like map getting applications, applications that update the webpage in real time, much like Facebook or Gchat do, and no longer confine ourselves to hitting Submit by a get or just post alone. So I will see you on Wednesday. 

[MUSIC PLAYING] [MUSIC PLAYING] 

DAVID MALAN: This is CS 50, and this is the start of week nine. And what we thought we'd do today is not only close the chapter on last week's material where we focused on server side web programming with PHP and SQL, some database stuff. We'll talk about a bit of security today and then transition to a client side programming language known as JavaScript. But first, some redemption. 

You may recall that on Wednesday, I set out to write a website that took in user's input by an HTML form that then stored that user input names, phone numbers, and cellphone carriers in the database. And then I had a little command line script written in PHP that was supposed to iterate over the rows in the database and send out text messages. Despite several, several attempts, we didn't get that working by the end. 

So I spent this entire week working on that code to get us past the point where we left off, whereby all I got by the end of Wednesday was this text message from Margo as I struggled, followed by a text message from another classmate, You've got this David. Followed by this one, wonderfully encouraging. Kept on going, very heartening. I almost got it until then-- and that's the note we ended on Wednesday. And then actually perhaps my favorite, a moment later, this came in. Damn Live Stream. 

So today, we fix this with a quick look at what I've done since. So all of this code is available online from last week's, week eight, source code. And you'll see that I went through, and I actually cleaned up things a bit. I introduced a couple other features of an SQL database. For instance, rather than just make carrier of var char as I think I did on the fly last week. I instead defined it as what's called an enum. 

And some of you might have seen this as we explored C. Enum is actually a feature of C where you can enumerate a whole bunch of constants and assign them automatic values, like one, two, three, four without having to hard code numbers. So SQL supports the same, whereby if you have a database field that you only want to take on one of finite values, you can literally specify it as I have done there for four popular US cellphone carriers. 

So I did that. And I made a number of changes as well, the most important of which was to get email working because recall, that this program relied on which generally called an email to SMS gateway, which is just a fancy way of saying that Verizon, and AT&T, and other folks support a server, whereby if it receives email, it converts it to SMS and sends out a text message to someone's phone. So if I did this correctly, here is a new and improved form that is going to talk to new and improved code, which you can play with online. And it will hopefully make my phone beep in just a moment. 

So first, I'm going to type in my name. Second, I'm not going to do this this time. I'm going to do Inspect Element. And this is just a little thing so I don't create hours of post production work as I did last time. There now is my phone number. 

I'll select Verizon. And here, let's turn on this microphone here, and aim this at my phone here. I'm going to click Register, which should hopefully put it into the database. Now I'm going to go to the command line program, which recall was called dot slash text, and cross your fingers. Here we go. 

[PHONE DINGS] 

[APPLAUSE] DAVID MALAN: So more fun than this-- it's fun, of course, if I get into it. But it's more fun, I thought, if we created one of those movie moments where like something really bad has happened in the world, and like all the NSA people's cellphones start beeping with text messages alerting them to this fact. So I thought we would try to recreate the same here, whereby not using a database, I instead in advance wrote a program that looks like this. 

This is an index.php-- and I put this code online as well-- that apparently just renders form.php, using an MVC style paradigm that we talk about in more detail in problem set seven. That form is pretty simple. It's going to submit to a file called here.php via post. And it's apparently going to ask for a name, and a phone number, and then via of so-called Select menu, it's going to give you at least four popular US cellphone carriers, and then allow you to effectively take attendance by clicking here. 

And here, meanwhile, is going to borrow some of the code from last time. And if you just skim this, you'll see that there's a whole bunch of error checking. But the beauty at the end is that we're not writing to a database today. We're keeping it simple and just sending out hopefully a text message via function I wrote over the past few days call Text, which is in Functions. php, which is again available online. 

So if you would like to partake in this. We're not going to be storing anything. Go to this URL here in real time. Don't submit it just yet, but let's see if we can have one of these movie moments where everyone's cellphone starts beeping, hopefully just once this year unlike in 2011 where this went horribly awry. And once you go to that address, you should see a super simple form that if you have a name, a cell phone number, and a cellphone carrier that matches the list there, go ahead and fill out the form. But don't hit submit just yet. 

The form's going to look like this. Go ahead and type in your name, phone number. Oop, someone's going ahead of the curve. It's OK. OK, everyone's filled out the form. This should work on a phone, too, if you want. All right, on your marks, get set, go. Hit Here. What? No. I swear to God, I tested this multiple times today. You got it? 

[INTERPOSING VOICES] 

DAVID MALAN: OK, user error perhaps. That's two. It worked for two out of a few hundred, three, four. OK, that's good. Four out of five for correctness how about. 

So what just happened? So presumably, without seeing your screens, why might it have errored? It's probably that we were just trying to make too many connections to Harvard's mail server all at once from the same IP address. I'm just guessing since I didn't have the luxury of testing this code with some 300 people in advance but for now realize that that at least should have gotten the job done this time. 

All right, so why is this all the more germane to what's going on? Well first, a quick couple of announcements. So one, if you'd like to join Chang, and Nick, and others at lunch this Friday, do RSVP at the usual URL there. If you are thinking of concentrating in or doing a secondary in CS, whether you're a sophomore, or freshman, or even junior or senior at this point and can still squeeze in the courses, realize that the engineering school is gathering for free Ben and Jerry's ice cream and advice this Wednesday shortly after class at 4:00 PM in the CS building at Maxwell Dworkin. If this is too fast on the screen, just go to cs50.harvard.edu for a link to the Facebook event where you can see more details. 

Meanwhile, I thought I would correct one other thing I goofed on Wednesday. Turns out that Mark's ID on Facebook wasn't three. It was four. Turns out he had more test accounts than I recall. But what this felt like an opportunity to do is to pull up a URL like this. 

So it turns out that Facebook has an API, Application Programming Interface, which is a mechanism whereby you can request data programmatically at Facebook and get back machine readable information, not web pages but just raw text, something called JavaScript Object Notation. And in fact, if I visit this URL, and zoom in, by default, this is Mark's publicly accessible information. 

And the interesting detail here is just that his ID is indeed, number four, which I realized as soon as I did this. You can do this yourself if you know your Facebook username if you have one. Just type it up top there. And none of this is private. I'm just doing this even in the incognito mode. So I'm not even logged in. And you're seeing that I apparently was user number 6,454 on Facebook, which isn't too bad these days. So anyhow, you'll also see additional information there. 

And the useful aspect of that is that you could write your own software that somehow integrates data like this into your own application. You can empower users to log into your website, not using their own custom username and password but maybe their Facebook login and get information even about their friends, if they approve such, or similar. So note that CS50, too, has some of its own APIs, one for the course catalog data, some for the hugs menus in the dining halls, all of the buildings and locations on campus we have an API for as well that you can query similarly and get back textual data that you can integrate into a PHP, or JavaScript, or even, though less commonly, a C based final project. 

Indeed ahead for the final project are a few milestones. You got an email from us the other day. Realize that the proposal is due this coming Monday. It's not necessarily binding, but you do need to receive your teaching fellows approval before making any changes thereafter. And then ahead are a number of other milestones. 

So to tease you, too, with some possibilities, we have a bunch of these hue light bulbs. And some of you guys now have some of these in your dorm room as well. And they too have an API. So recall those binary bulbs weeks ago that Dan Bradley and Ansel Duff created for us. They used a software interface to this light bulb, which at the moment is plugged into electricity and then via wireless is connected to a little thing called the Bridge down here, like a little router proprietary to this particular device. 

But it turns out if I know how to send HTTP messages, as we all now do, I can send a message like this to this light bulb to turn it on or off or do any number of other operations on it. Notice that it's not get, it's not post. There's another one called put. There's actually a few other such verbs. But notice there's a path there, slash API, slash new developer, slash light, slash one, slash state. 

That's apparently just the path that the company, Philips, decided you have to hit with an HTTP request if you want to change the state of the bulb using HTTP 1.1. Then notice the blank line. And then lastly what looks like kind of an array of some sort, this again is going to be called JavaScript Object Notation, or Jason. And what you see here is that there are three key value pairs. 

One key is called on. And its value apparently is going to be true. Brightness is 128, which is some kind of int. And then transition time is zero, which is apparently how long it's going to take to turn this thing on. 

So right now this light bulb is off. But if I do exactly this-- let me go to a little cheat sheet that Dan set up in advance-- and I'm going to go ahead and copy the following command. Curl, as some of you might have gleaned on CS50 Discuss is a utility like Telnet such that you can simulate HTTP requests, specifically puts. I can send this data, specifically what we just saw a moment ago specifically to this URL over here. And then Curl is going to handle all of the requisite headers and parsing there of. 

So all I have to do is copy this into a terminal window and then hit Enter. And the light bulb goes on. And this is all going through my computer wirelessly somehow down to the bridge, which is then talking to this light bulb. I can do something else. I can make this thing go red for instance. I can for instance make this thing go green. I can make it go blue. 

And notice in each of these instances, all that I'm changing is the so-called hue value to actually give it some color. So let me paste this one in as well. Now it's blue. 

And you can do even fancier things where-- let's go to green. And I could do this of course with my own code. But even the API itself supports funky operations like this, which will now bother us for the next 30 seconds. 

So that's one taste of what you might do with an API, this one involving light bulbs. Note that CS50 has a couple pairs of Google Glass if you'd like to tackle something along those lines, Arduino Unos, which are tiny little computers, essentially, on a little circuit board that you can connect wires and other things to and actually control your real world environment. And then there are a couple of new toys that we have. This one literally just arrived the other day by mail, a Myo Armband. And I thought it's a way to get you excited about projects that you might use with this hardware would be to play this short clip that they use to tease folks that we're now living in the future. 

[MUSIC PLAYING] 

DAVID MALAN: So in just a few weeks, you too can be that cool at the CS50 fair. Another device that we have a bunch of that we're happy to loan out for projects is called a motion controller. This is a little USB device you connect to a computer that allows you to interact with your laptop, Mac or PC, as though you had like an Xbox Kinect and actually make physical motions much like we see in this vision of the future. 

[MUSIC PLAYING] 

DAVID MALAN: So even if you have no idea how something like that could possibly be invented or work on a hardware level, no matter. Even after just a few months of CS50, and an understanding of programming more generally, and web programming more recently, and then also APIs, and HTTP, you'll have access via software APIs if you do want to borrow one of these devices to actually talk to it and not have to worry about the underlying implementation details, which is completely consistent with this notion of layering an abstraction that we've seen throughout the semester. 

So also over the weekend, saw a couple pieces of news. Go first, go to seminars if you would like to learn something more on any number of topics. See the URL there. And this one was sent to me by Chang, who you know, who's printing our army of elephants. And it was a headline as follows. I'm terrified of my new TV. Why I'm scared to turn this thing on and you'd be too. So we're now at the point in the semester, too, where even if you have the slightest of understanding of how the web works, and HTTP, and security, things like this should start to catch your eye. But also, you'll understand whether these things are or are not actual threats. 

So I took a few excerpts from this article here. And the story is as follows. I'm now the owner of a new smart TV, which promises to deliver streaming multimedia content, games, app, social media, and internet browsing, oh and TV too. The only problem is that I'm now afraid to use it, says the author. You would be, too, if you read through the 46 page privacy policy for your TV. The amount of data this thing collects is staggering. It logs where, when, how, and for how long you use the TV. It sets tracking cookies, as we've discussed, and beacons designed to detect when you have viewed particular content or a particular email message if you want to check email on your TV. It records the apps you use, the websites you visit, and how you interact with content, doing all of that via your smart TV. It also, creepier yet-- that's my addition-- has a built in camera with facial recognition. 

The purpose is to provide gesture control for the TV and enable you to log in to personalized account using your face. On the upside, the images are saved on the TV instead of uploaded to a corporate server. On the downside, the internet connection makes the whole TV vulnerable to hackers who have demonstrated the ability to take complete control of the machine. 

More troubling, as if that wasn't smart enough, is the microphone. The TV boasts a voice recognition feature that allows viewers to control the screen with voice commands. But the service comes with a rather ominous warning. Please be aware that if your spoken words include personal or other sensitive information, that information will be among the data captured and transmitted to a third party. Got that? Don't say personal or sensitive stuff in front of your TV. 

So this is actually for real. And it's hard not to see if you go to Best Buy or the like for TVs these days. They're all smart in some way. And they're getting smarter and creepier. And they're simply collecting data in ways that we've talked about and then uploading it via HTTP or some other protocol to some server. 

So this was of a fun article in this online website here, which talked about a particular bug or mistaken code that we can actually tie into last week's discussion. So this headline was as follows, the story goes here, Josh Breckman worked for a company that landed a contract to develop a content management system, or CMS as they're called, for a fairly large government website. Much of the project involved developing a content management system so that employees would be able to build and maintain the ever changing content for their site. Things went pretty well for a few days after going live. But on day six, things went not so well. All of the content on the website had completely vanished. And all pages led to the default, please enter content web page. Whoops. Josh was called in to investigate and noticed that one particularly troublesome external IP address had gone in and deleted all of the content on the system. 

The IP address did not belong to some overseas hacker bent on destroying helpful government information. It resolved to googlebot.com, Google's very own web crawling spider. Whoops. After a bit of research and scrambling around to find a noncorrupt backup, Josh found the problem. 

A user had copied and pasted some content from one page to another, including an Edit Hyperlink to edit the content on the page. Normally this wouldn't be an issue since an outside user would need to enter a name and password, but the CMS authentication system, the login system, didn't take into account sophisticated hacking techniques of Google Spider. Whoops. 

As it turns out, Google Spider doesn't use cookies, which means that it can easily bypass a check for the is logged on cookie set to be false. It also doesn't pay attention to JavaScript, which would normally prompt and redirect users who are not logged in. It does however follow every hyperlink on every page it finds, including those with Delete Page in the title. Whoops. 

So what does this mean in more technical but fairly accessible terms? It just means that throughout their website, they had URLs not unlike this one that you might see in problem set seven. Recall in problem set seven or know in problem set seven that you're challenged, among other things, to sell stocks on behalf of users. But implementing that feature by way of get via hyperlinks in your user interface, probably not the smartest idea because if your site is somehow accessible either by a human who's clicking around or buy a bot like Google's or a Spider as they're called that's just crawling the web trying to index the web as a search engine, they could very easily hit via get this kind of URL. And that's functionally equivalent to, in this case, selling all shares of Google. 

Now frankly, it's completely asinine that the CMS used JavaScript and cookies to implement its login system and not doing that server side, as you guys do and will in PSet 7-- there's a login.php file-- always, always, always security should be done on the server side, not on the client side because, as this article suggests and you might yourself see at some point, it is trivial for a user, good or bad, to just turn off JavaScript not to mention cookies. So that is your daily WTF. 

There's one more, which is just kind of scary, so I'll mention it if only as a life lesson. Whenever you use an application called like Snapchat or the like that says these photos only last for five seconds, ten seconds, or whatnot. They're ephemeral That is absolutely not the case. Like there is no way, digitally, to implement some form of video, or image, or textual sharing such that a recipient on the other end can't somehow save the data. 

In the most naive way, someone could take their phone. And they have a 10 second window while looking at some snap to just take some other phone and photograph it, obviously. So you can preserve something digitally that way. Some of you know how to take screenshots on your phone. In fact, if you don't know this, realize that at least Snapchat, and I think other applications these days, at least tell you if the recipient has actually taken a screenshot of your image. 

But worse yet, this was the snappening, as someone coined it recently, where some 100,000 snaps had been released in what's called a torrent file on various websites ultimately. And these contained a whole bunch of private messages and posts. It turns out most of them benign, so not what you might expect. But because people had used a third party website, logging in with their Snapchat username and password and then saving all of their snaps on this third party website. And it was that third party website that was hacked, which just meant someone figured out how to get all 100,000 plus of those images into their own hard drive for subsequent sharing. Frankly, here too, it's sort of asinine that Snapchat is implemented in such a way that a third party can sort of intercept the data and that it's not tied to your own application running on the phone. But here, too, realize that these things should not catch you by surprise, or at least there should be a life lesson in here. If you'd like the technical details, go to that URL there that's in today's slides. All right, any questions on today's life lessons in CS? Turn that off. Anything at all? Anything at all? I've got a lot of people checking their Snapchat or something now. 

All right, so SQL, Structured Query Language. Let's wrap this. And also, even though we're just scratching the surface of this language, we'll give you enough of the language in the form of PSet 7 so that you can tackle some fairly common functionality. But realize there are a couple things we don't require of you, but they're going to be important come final projects and certainly come making actual websites with actual users is this design decision. 

It turns out that in a MySQL database, you have bunches of choices like the data types for your columns and other things, but you also have the choice of a so-called storage engine for all of your data, the sort of file system, if you're familiar, for all of your data. What format is it ultimately stored in? And the most common, perhaps, has been MyiSAM and InnoDB, technical terms that we'll care about only to the extent that one has and one doesn't have the following feature. 

Suppose that you have a little dorm fridge. And suppose that you and your roommate, who share this fridge, are really fond of say milk. And this is, in fact, how the story was told to me way back in the day when I took a course called CS 161 Operating Systems, which similarly explores this topic. So you've got this fridge. You're out of milk. And you come home, your roommate's still at class or whatever, and you decide I'm going to go out and get some milk. So you close the fridge, lockup the dorm room, go across the street to CVS or wherever, and get in line to buy some milk. 

Meanwhile, your roommate gets home from class, gets into the dorm room, opens the fridge, also realizes ooph, we're out of milk. So he or she closes the fridge and then happens to go to the other CVS, which happens to be one block away from the other CVS in the square, and gets in line there to get some milk. Now, of course, a few minutes later, you both get back, and the worst of all possible outcomes has happened. Both of you have milk. And you don't really like milk that much. So one of them is just going to sour at some point. So now you have an excessive amount of milk in the fridge all because why? 

[INAUDIBLE] DAVID MALAN: Yeah, you didn't somehow communicate with each other that you were getting milk. So in the simplest of ways in the human world, how might you avoid this silly scenario from happening such that you only end up with one. Text them, yes good. But how else? Post-it notes. DAVID MALAN: A Post-it note. Any form of communication that tells your roommate don't go into the fridge for milk. I'm going to go restock on my own. So you somehow need to lock this resource. So we can make this-- we can kind of ruin the story and turn into a CS story whereby think of this as just like a variable, which is storing some value. And right now, the value of milk is zero, which you don't want your roommate to inspect that variable and then make a decision him or herself based on the state of that variable if you're in the process of changing the state of that variable. 

So one of the lines of SQL that we give you in PSet 7 specification is this one here. And we don't spend a huge amount of time talking about it. But it turns out, if you are trying to buy some stock in CS50 finance that you already have some shares of, you want to be able to do a number of things instantly together. You want to be able to effectively, on a high level, check all right, if I want to buy more shares of Free, the penny stock we talk about in the spec, I want to first check how many shares I have. And suppose it's five. And suppose I want to buy 10 more, I ultimately want to have 15 shares of stock. So I have to ask two questions. What's the state of the variable? What's the state of the row? How many shares do I currently have? Then you want to go ahead and update it. So that's the analog to the milk in that you check the row, and then you want to update it because if you want to buy 10 shares, you don't want to change the row to 10, you want to change it to 5 plus 10 or, of course, 15. 

This line of code ensures that those two conceptual ideas happen together or not at all. No one, including some other user who's logged into the same website, can somehow interrupt the checking of the row and the updating of the row, the select and the update if you will. And the syntax isn't super obvious, but this one line, long is it is, ensures that those two operations check the variable or check the row and update the row happen atomically. 

Oh here we go again. Text message on my phone. So let's make this a little more concrete. Suppose that you're not implementing a refrigerator, and you're not implementing PSet 7 but an actual bank, or an ATM, an Automated Teller Machine, whereby you somehow want to be able to empower users to transfer money from one account to another. OK, hang on. I'm going to mute this now, thank you. So we want to move money from one account number into a different account number, specifically $100. So this is kind of an arbitrary example, whereby you, the ATM, might want to execute two SQL queries, subtract from one account, and add to the other account. But you want to ensure that these two lines both happen or not at all. You don't want something getting interrupted. You don't some smart bad guy somehow standing at Bank of America with two ATMs in front of him and somehow sort of typing in the commands at the same time, hopefully trying to deduct $200 instead of $100 and only having $100 credited. In short, you want this to behave exactly as you expect. 

And the way you do this in SQL database is you wrap it in what's called a transaction. Literally in SQL, you can call CS50's query function with quote unquote start transaction. Then you can execute any number of subsequent SQL queries, but none of them take effect on the database until you call query quote unquote commit, if again using PHP. And in this way, you can ensure that even if you have 1,000 users all hitting your database at the same time, SQL will promise that these two queries will be implemented one right after the other. So you don't end up with excess of milk or the wrong amount, ultimately, of money. 

So keep this in mind, not so much for PSet 7 but for final projects if you're actually trying to move data around across tables as you might here. But perhaps even simpler and more obvious to understand with an example is this one here. And someone emailed us about this just the other day when he saw something similar online. 

So to my knowledge, the pin system is not vulnerable to this attack. And I have no idea if it even uses the SQL database underneath the hood. But let's use it for the sake of discussion. Here's the screen that Harvard folks tend to see when logging in with their Harvard ID number and their pin. And suppose that the pin system were implemented in PHP and with a MySQL database, the code that someone might have written years ago might look like this. First, declare a variable called username. And just get that from the POST superglobal. Then get another variable called password and do the same. And then just execute this long query here, select star from users where username equals such and such and password equals such and such. 

Notice that the curly braces I've used here just mean to PHP, go ahead and substitute the value of those two variables right there. They're not strictly necessary, but they tend to avoid subtle syntax errors. So this looks completely correct at first glance. And it is. You could implement the pin system in this way. 

But suppose that a super smart and malicious student input this as his or her pin. So I've removed the bullet signs here in the mock up, and I've actually revealed what he or she might be typing. And it's a little strange. But what jumps out at you at potentially worrisome about the user's input, even if you have no idea what a SQL injection attack means. Why does this look a little fishy? What's that? [INAUDIBLE] DAVID MALAN: The or is a little suspicious. In fact, that's a keyword from SQL. So that doesn't bode well. The fact that there's all these single quotes there-- in fact, one of the easiest ways to break some databases is by typing in a name like O'Reilly that has an apostrophe in it because if the human who wrote the code behind the scenes doesn't take into account that there might be single quotes in a user's input, and he or she is using single quotes in their code, bad things can happen. 

In fact, worse yet, consider this. If this was again the code that someone at Harvard years ago wrote for the pin system, notice what's about to get substituted for username and password if the user types in again skroob as their username and then one, two, three, four, five, quote or quote unquote one equals quote one. And notice what's key here is the user has not started their password or their pin with a quote. And they haven't ended it with a quote because he or she is assuming that if the programmer wasn't so sharp, they are going to have those single quotes in their code. 

So here's the code. And the substitution that might now happen is this. And I've underlined what the user has typed in. So before, after. And notice what's mildly worrisome now about the right half of this SQL code? It's a little more complex, admittedly, than the queries we've seen. But this can't possibly be a good thing if you're saying select star, which is select everything from the user's table where username equals skroob and password equals one, two, three, four, five or one equals one. What's the logical implication of that last clause presumably? It's just always true. 

And because we have sort of guessed or figured out by trial and error that the programmer who wrote this code did not anticipate a human or bad person typing in single quotes as well, we can syntactically complete the SQL query with something nonsensical but something that is syntactically incorrect that always evaluates to true. So if this code is being used to answer the question true or false should this user be allowed to pass, the answer is always apparently going to be true because this is always going to select something from the database because one of course always equals one. 

So what's the solution? Well in PSet 7, we actually avoid this all together. We give you a query function, and we encourage you to use question marks as placeholders, similar in spirit to printf's %s, but what's key about the question marks here is if you actually read through functions.php, where our query function is implemented, those question marks are escaped, whereby anything potentially dangerous like a single quote is turned into an escaped single quote. 

So this is what's really happening if you use CS50's query function or any number of third party free libraries that do the same. Doesn't matter in this case, in green, if the user has typed in a single quote because the query function that we wrote is going to add backslashes before any such dangerous quote. So this is not, in fact, going to be legit. This is like typing in a crazy looking password that's, of course, not going to be skroob's actual password. 

So the takeaway for CS50 is one, absolutely always use something like CS50's query function or the underlying library, which happens to be called PDO. But never, never, never do code like this without escaping or scrubbing as they say your inputs. And you will at some point probably come across some website like this. In fact, it seems to be the case like at airports and hotels in places where they have free Wi-Fi access that you have to login to, these websites are always horribly implemented. And so a sort of fun at home exercise, not for malicious purposes or more of a fun on the road exercise, is to just type an apostrophe, a single quote, into a form on some website and see what happens. And if the server crashes or gives you some kind of error message, it may very well be that someone hasn't anticipated this. And then you should alert the proper authorities and proceed no further. 

So now you guys should hopefully understand a bit more geek humor here. 

[LAUGHTER] DAVID MALAN: You know you're a geek. For the next several years, you will remember who little Bobby Tables is because of this cartoon here. So keep that in mind as we context switch one last time today to JavaScript. We've spent relatively little time on the syntax of PHP because it's actually super similar to C. And nicely enough, JavaScript too is super similar to C's syntax as well as we'll see in just a moment and as we'll see later this week in particular. What you can do with this language, though, is all the more powerful, especially with APIs. 

But first a quick tour. So one, in JavaScript, there's no main function, which is nice. As with PHP, you can just write code. Conditions look like this. And Boolean expressions might look like this or like this. Switches exist, and they might look like this. Four loops look like this. While loops look like this. Do whiles look like this. And then arrays look like this, very similar to PHP. But notice, that in JavaScript you declare a variable not with a dollar sign, not with a data type but literally by saying var for variable before it. It too is loosely typed in that it has types, but you don't explicitly declare them. And then a string, for instance, might look like this, that string being called s in this case. And then an object. And these we'll see more before long. And an object is perhaps one of the most commonly seen data structures in a JavaScript based program because it allows you to associate arbitrary key value pairs just like PHP's associative arrays and just like your own hash table or try as we implemented a few weeks back. So let's actually see what we can do with JavaScript. And in particular, this is a laundry list of features that browsers have that allow us to hook JavaScript into a website in the following way. JavaScript is often used as a client side scripting language. It's not compiled. It too is interpreted. But unlike PHP, which has been running on the server, in the web server, or deep inside of the clients, JavaScript is different in that it usually runs in the browser. 

So any JavaScript code you start writing for PSet 8, or your final project, or in the real world is generally going to be saved on the server, absolutely in a dot HTML or dot JS for JavaScript file. But the browser is going to download that JavaScript code to your own instance of Chrome, or IE, or Firefox, or whatever. And the code is actually going to get executed inside of your own browser. Just to make this more real, let's see this in concrete form. 

We have no idea what this code does without really reading through it. But let me go to Facebook.com without logging in. Let me go to Inspect Element and go to, let's say, Network and Reload the Page. And we'll see-- let me shift Reload the Page to get all the requests to new. And the very first file I see is CSS, CSS. Here's the first JavaScript file, and I have no idea what this does, but here is some of the JavaScript code that drives Facebook. It's not even really that revealing to zoom in. It's still just as nonsensical. 

But you'll see even down below, there's even more of these JavaScript files. Whoops. That's a ping. Let's go down a little further, further, further. There's one. There's one. There's one. 

So even though Facebook, behind the scenes, is written in part in PHP and Facebook's own version thereof, there's a huge amount of JavaScript. In fact, any of the chatting you do on Facebook, any of the inline timeline updates that happen in real time, all of that is driven by JavaScript. Yeah? 

AUDIENCE: I'm not sure if this is Facebook, but I thought that Facebook developed their own in-house code language? DAVID MALAN: They did. So that's why I say a variance of PHP called Hip Hop that they actually added features to such that when Mark first implemented Facebook, it was written in PHP. And that sort of has remained the sort of front end language that they use for much of their coding, but it hasn't been a language that's scales particularly well to billions of people. And so they have added their own improvements behind the scenes. And they use any number of other languages for various pieces of their infrastructure. So yes, it's a variance of what we now know as PHP. 

So let's take a look at a couple of examples of how we might use JavaScript here. In today's source code, we have a bunch of files, the first of which, let's called DOM zero. So DOM zero looks as follows. Let me go into this directory and open up domzero.html, the top of which has a doc type declaration, saying here comes HTML 5. And now here's an HTML tag. Here's the head tag. And here's what's new today. 

We now have a script tag inside of the head of the page. And this apparently does very little, but notice that I've defined a script, a JavaScript. And as an aside, since this is a common misconception, JavaScript has absolutely nothing to do with Java, the language that some of you might have learned in APCS. It was more of a marketing thing than anything, riding the coattails of Java years ago. But JavaScript, nothing to do with Java, just similarly, and annoyingly, confusingly named. 

So here is how you declare a function in JavaScript, literally say function, then the name of the function, then any arguments it might take, just like in PHP. Turns out in JavaScript, one of the most annoying functions that exist is Alert. This is a little window that will pop up and alert you to some piece of information. It's generally frowned upon. But we'll use it as our first exercise here. 

Notice a few features of JavaScript. Single quotes and double quotes don't actually matter anymore. Single quotes and double quotes can be interchanged, whereas in C, you have to use double quotes for strings, and you have two single quotes for chars. In the JavaScript world, many people, most people use single quotes around strings just because it's a stylistic thing. But what's the plus operator here, which we haven't seen before? 

AUDIENCE: Concatenation. DAVID MALAN: Concatenation. So C does not even have this. PHP has the dot operator, which does this. JavaScript has the plus operator, which confusingly is just like Java. Now what's going on here? 

So here's where a basic understanding of that picture we threw up a couple days ago comes into play. Remember when we had a simple version of an HTML page-- it just said, hello world. And then we drew a tree to the right, which had a bunch of rectangles and lines connecting them like a family tree. So that's the so-called DOM or Document Object Model. And it turns out that you can access rectangles in that tree with syntax like the following. You literally say document, which is a special global variable in a JavaScript program that has a function associated with it that you can access similar to a struct, but you simply say dot and then the function's name, get element by ID. 

The element I want to get is apparently quote unquote name. And then I want to get its value. Now we're getting ahead of ourselves. I'm not even sure what all this is about. Let's fast forward to the HTML on the page, which is super simple. 

Notice that I've defined a form down here. Notice I've given it a unique ID, even though we've not used this attribute before. But this exists in HTML. You can uniquely identify some chunk of HTML with an identifier like this. 

Notice now this-- turns out HTML supports, per that laundry list a moment ago, a whole bunch of event handlers. And this event handler says on submit. On the user submission of this form, call the following code. And the code that's going to be called or executed is exactly this, the Greek function followed by return false. Everything else should be pretty familiar. 

Here is an input of type text, whose ID, in this case, is going to be name. We don't have an actual name attribute this time-- and a submit button. So the resulting page looks like this. And the resulting behavior, you'll see, looks like this. The page it local hosts says, hello David, hardly an aesthetically pleasing way to greet a user. But what's actually going on? 

Well, consider what this is. This is a text field. And according to the HTML here, I've given it a unique identifier called quote unquote name. Meanwhile, I've said when the user submits this form by hitting Enter or clicking the Submit button, call the function called Greet and then return False. Let's consider those in reverse. Notice when I click Submit, the URL of this page does not change. The browser's icon didn't start spinning. I didn't go anywhere, and that's literally because I said return False. Return False short circuits or stops the default behavior of a form. So that then leaves us with this one final question. What does Greet do? Well, Greet apparently calls a function called Alert, passes in one long argument that's the result of concatenating together a bunch of substrings, hello comma space, then whatever this returns. So document is like a global variable to that root of that tree, calling a special function, otherwise now known as a method. A function that's inside of a variable is called a method instead of a function. 

So get element by ID. What element do you want to get by its ID? Quote unquote name and then specifically value. So in other words, that code simply finds the text field whose ID is name and then gets its value. So if I were to change this and say Davin instead of David, and click Submit, now we have a greeting for Davin. 

All right, so all fine and good. But let's see if we can make this a little cleaner since just writing code like this is generally going to be frowned upon. This is going to look scarier. But what's the first difference that you note here in this version besides the name changing to DOM one? What structurally looks different about this versus the other? Yeah? AUDIENCE: Is the form on top of the script now? DAVID MALAN: Yeah, the form is on top of the script for some curious reason. So that's the first thing that jumps out at me, too. And thankfully at least, this part is identical. So the only thing that seems to be different is this. 

So here's what's neat about JavaScript 2. And it makes it hard to understand at first glance, especially for final projects if you're looking at sample code online, but it boils down to some basic syntactic features. Here again is that global variable document. Here again is that method or function that says get the element by ID. This time I want to get the ID called demo. Where is that? That's apparently right here, the form itself. 

And now notice that apparently if I get back that node from the tree that represents the form itself, not a text field, it turns out that form, that node or rectangle from the tree, has what we'll call a property, very, very, very similar in spirit to a struct in C. It's just a data member inside of this rectangle. 

So I've got the form here, and I'm attaching, or I'm assigning, to its On Submit handler or rather On Submit property the following function. And this is, by far, the craziest thing thus far syntactically. It turns out in JavaScript and in PHP, and frankly for that matter in C, even though we don't do it, you can add nameless, anonymous, or AKA lambda functions that don't have a name but can be called nonetheless. 

So what I'm doing here is I'm assigning this On Submit property, which is inside of this node of my DOM tree, a function, function pointer if you will. That function has no name, but that doesn't matter because we'll see in a moment how to call it. When this function is called, this code gets executed, then false is returned just like before. 

But notice what I've done. At this point in the story, I have a form. It's got a unique ID called demo. Down here, I have a script tag that executes the following code. It attaches to that node in the tree to it's On Submit property this function here. And just by nature of how browsers work, when I now click Submit or hit Enter, that function is going to get called. It doesn't need a name because who the heck cares what it's called. The only time it's ever going to get called is when I submit the form. There's no need for me, the human developer, to actually call it anywhere else. 

Now just as a teaser, as if that weren't mind bending enough, we can even make this look more cryptic using a super popular library called jQuery. In fact jQuery and JavaScript are often conflated. And what we'll do on Wednesday is start using this language and these libraries to build increasingly asynchronous and dynamic applications like map getting applications, applications that update the webpage in real time, much like Facebook or Gchat do, and no longer confine ourselves to hitting Submit by a get or just post alone. So I will see you on Wednesday. 

[MUSIC PLAYING] DAVID J. MALAN: All right, so this here is the Myo arm band, a couple of which we have for CS50 final projects. And that was a demonstration we queued you up in advance where essentially this fairly tight arm band up here listens to your muscular movements that are then mapped in software to Colton's laptop over here which had iTunes and that song already queued up. Rather than me demoing this, Colton's been in the lab clearly all week getting a demonstration ready for one brave volunteer. If someone would like to come on up-- saw your hand first. Come on up. All right. And what is your name? 

AUDIENCE: Uh, Maria. 

DAVID J. MALAN: Maria, nice to see you. Come on over here. Let me introduce you to Colton. Colton, this is Maria. 

COLTON: Hi, nice to meet you. 

DAVID J. MALAN: All right, so step one, we're going to have you put this on to your forearm so that it's pretty tight up near your elbow. And meanwhile, let's have put on our Google Glass and we'll mix technologies today. 

COLTON: First we'll have to hook this into the things. 

DAVID J. MALAN: OK. Actually, let's put your arm as close to this cable as possible so that we can first sync it up. 

COLTON: Let's do this. 

DAVID J. MALAN: And meanwhile, so that everyone can get a closer glance, we'll toss Andrew's camera up on the screen there. So we have a USB cable that's being plugged into Maria's armband. And let me toss Colton's screen up on the projector next. 

So Colton is registering the device now as a Myo connected to this cable. And now what Maria's going to do momentarily is actually walk through the calibration steps and teach the software how her muscles respond when she make certain pre-defined gestures that the software understands. If you'd like to go in front of the screen. OK, keep trying. 

COLTON: Go like this. And like that. And all the way to the right. Go back. 

DAVID J. MALAN: OK. Different perspective. It's not you. It's us. 

MARIA: OK. DAVID J. MALAN: No. Let's move it higher up so it's closer to your elbow, or even tighter. All right. 

Here we go. This would be a good time for CS52X. There we go. 

Very nice. OK. Thumb to pinky. 

Very nice. Spread your fingers. Good. Wave right. It's curiously showing you with the left hand-- 

COLTON: Yeah, that's wierd. DAVID J. MALAN: Wave to the right and move forward. Fast forward to skip or next. That's OK Wave right. 

MARIA: I don't-- wait. 

DAVID J. MALAN: Need some help? 

COLTON: So you're going like this. MARIA: It's turning the other thing, though. COLTON: It is. DAVID J. MALAN: Yeah I don't know why it's showing you a leftie. COLTON: Why don't you try-- just try going like this. 

DAVID J. MALAN: No? Maybe reach your arm out a little straighter and make it more abrupt like this. Yeah, OK, come on. 

MARIA: I'm sorry. DAVID J. MALAN: It's not your fault. COLTON: It's fine. DAVID J. MALAN: All Right. Well-- 

MARIA: Should we skip this, then? DAVID J. MALAN: Yes, let's let you off the hook. So if anyone would like to do a final project using this cutting edge hardware, realize it might just take a little getting used to. And this-- the reality is this is actually very bleeding edge. 

This is what's called the developer kit, which is meant to be essentially a pre-release so that people can do exactly this-- fight with it, figure out how people's bodies work with the technology. So if you want afterwards, after lecture, we can let you come and take another stab at it. But otherwise, a round of applause, if we could, for Maria for coming on up. 

MARIA: Thank you. 

DAVID J. MALAN: Thank you. We'll hang on to this, but we will give you-- how about a stress ball here? Oh, and-- if-- yeah, thanks. All right. So for the curious, if you were unfamiliar with the sound choice that we made there earlier, an amazing TV show that you should absolutely be binge-watching on Netflix is this one here. 

SPEAKER 1: Ladies and gentlemen, a magician named Josh. 

DAVID J. MALAN: And apparently, it's a thing to text me during lecture now. I'm being told that Maria had a birthday yesterday. So happy birthday from CS50 to Maria as well. 

So you may have read in recent month that this gentlemen here, Steve Ballmer, who was actually class of 1977 at the college, recently retired for Microsoft. He was an undergraduate here, then a couple years later found himself at Stanford Business School when he received a phone call from a friend of his who had lived down the hall from him here at Harvard. That friend's name was Bill Gates, and at the time, he was trying to recruit Steve to be the first business person, really, at a small company name Microsoft. 

A long story short, Steve was ultimately won over, joined Microsoft when they had just 30 employees. And by the time he retired quite recently, the company had 100,000 employees over the past few years. And so a website known as The Verge prepared this tribute on video that we thought we'd shared that gives you a sense of just how much energy Steve brings to any presentation he gives. [VIDEO PLAYBACK] -Microsoft's like a fourth child. Children do leave the house. In this case, I guess I'm leaving the house. Hey Bill, whazzap? 

-Wazzap? 

-Hey, wazzap? We've been given an enormous opportunity. And Bill gave us that opportunity. I want to thank Bill for that. I want you to too. The pace of innovation isn't going to slow. 

It's going to get faster and faster. There might be a few competitors that are unfortunately eliminated! 

I love this company. Yes! I am a PC, and I love this company! 

Developers, developers, developers, developers, developers, developers, developers, developers. Yes! Web developers! 

Web developers! Web developers! Listen to what else you get at no extra charge! 

The MS-DOS executive, an appointment calender, a card pile, a note pad, a clock, a control panel. And, can you believe it? Reversie! 

Burn them to CD! Post them to MSN! You mail them to friends! 

All with one click! One Microsoft, one strategy, one team-- focused, disciplined, professional, and expert in all that we do. Let me use a line from an old movie. 

Relationships are like sharks. They move forward or they die. I actually think tech companies are the same. 

[END VIDEO PLAYBACK] DAVID J. MALAN: So we are so pleased to announce that Steve will be joining us here in CS50 next Wednesday at the usual place and time here. Space will likely be limited. And so to join us in person, please head today or shortly thereafter to cs50.harvard.edu/register. 

And we will follow up by Tuesday confirming spots. Look forward to that next Wednesday during lecture in CS50. Now, in other news, I happened to come across this in The Crimson just the other day. 

It turns out that one of CS50's staff and at least one of CS50's students is currently running for UC president and vice president, which brought me back to my own days back when I lost the UC election miserably. But the silver lining in that is I always tell the story is that one of the I'm sure many reasons I lost the election was a complete lack of a talent for public speaking. And so quite honestly, it drove me, that experience I think my junior year, to actually sign up for Harvard Computer Society, which is the group on campus that holds various technical talks and other things. And I took over their teaching seminars and therefore had an opportunity, a wonderful opportunity, to start working on exactly this. But also, I had an opportunity during this experience to teach myself all the more HTML. And so I procrastinated last night by looking through the HTML based website I made in like 1997, '98, for my campaign which looks like this here. I know. 

Because-- and of course, notice this amazing design decision in 1998 or whatnot. The first thing you want users to do upon visiting your website is to have to click another link just to enter your website here with the monk behind like a shrouded curtain where apparently my campaign platform was. And this is all you'll get today is just a screenshot. But I was reading through, like, my campaign posters last night and my platform. 

And I was so angry at the time. My platform was-- it was interesting. So I've calmed down since then. But someday, I will run again and hopefully better off this time. 

So HTML, that language in which I made that in-- you'll soon make much more-- is something we've been talking about of late and largely taking for granted now that we've moved on to other languages. But let's pause for just a moment and put some of these things in context. So in a sentence, what is HTML? 

Or, what is used for? Anyone? Yes. 

AUDIENCE: Markup for websites. DAVID J. MALAN: Markup for website. So it's a markup language that lets you structure a web page. Header goes up here, title goes here, body goes here. This is boldface, this is italics-- that sort of detail. 

OK, good. So CSS lets you-- and I took some liberties there with the bold-facing and italics because that's better implemented with this. CSS is-- what? Say in a sentence. Anyone at all. Yeah. 

AUDIENCE: Embellishments and stuff, like how to design it. DAVID J. MALAN: OK, good. Embellishments that allow you to design it or stylize it with things like boldface and italics and colors and also more fine grained positioning of elements. It sort of lets you take things the last mile so that if, for instance, in Pset7, you might have noticed on your portfolio page if you're at this point already that a default table that you make to show the user's stock holdings and cash probably looks pretty hideous by default with no white space. Everything's kind of crammed together in rows and columns. 

Well, with a bit of CSS, as you may realize, you can actually tweak that and make it something much more familiar and much prettier to look at. So CSS is about the stylization of websites. But then we introduced yet another language, PHP, which lets us do what? 

Let's just do what? Anyone. Got to venture beyond the first couple rows. Yeah. 

AUDIENCE: Generate dynamic content. DAVID J. MALAN: Perfect. Generate dynamic content. And you can do this in any number of languages. We happen to use PHP because it's in part so similar to C syntax. 

But PHP does exactly that. It lets you dynamically generate output. And some of that output could be HTML, as we've typically been doing. And it's also, because it's a programming language, is the mechanism via which we can talk to databases. 

And we can make queries to other servers like Yahoos and programmatically do anything really that you might otherwise want to compel a computer to do. So PHP lets us start dynamically outputting content. So by this logic, I didn't have a dynamic website back in 1998. 

It was just a static web page. My content had to be changed by manually with gedit or some equivalent. But PHP is what we used or could have used, rather, for something like the Frosh IMs website, which was supposed to take registrations and manage a list of users-- things that are actually changing over time, even though we happen to use Perl, a different language at the time. 

And then lastly, we introduced SQL-- Structured Query Language. So yet another language that's used for what? Used for what? Can we venture slight-- OK, we're not going to get much farther than the orchestra here. AUDIENCE: It's a protocol used to talk to databases. DAVID J. MALAN: A protocol used to talk to databases. Let me tweak. It's an natural language used to talk to databases-- selects and inserts and deletes and updates and actually even more features that we haven't even dived into but you may want to explore-- have to explore for, say, a final project. So there are these various pieces. 

And hopefully Pset7, even though its specification is quite long, it's deliberately long to walk you through how these things can all be typed together. Now, on Monday, we introduced our last language that we'll formally introduce in the course-- that is, JavaScript. This, like PHP, is an interpreted language. 

But a key distinction I proposed on Monday is that whereas PHP is executing or being interpreted on the server, which in this case is the CS50 appliance, or might be some commercial web server on the internet, JavaScript generally is a language that runs client side not server side-- so in the browser. Which is to say, just like when I opened up Facebook source code and found all of those .js files, the implication was that when you visit Facebook or most websites these days, you get not only HTML, not only CSS, but a whole bunch of JavaScript code often in the form of .js files. And then it's the browser-- your own Mac or PC-- that executes that code. 

But your browser executes it. You can think in sort of a sandbox. So that JavaScript code shouldn't be able to delete files on your computer. It shouldn't be able to send emails on your behalf. Your browser kind of restricts what you can do with it. 

So in that sense, it's a little less powerful, perhaps, than C. But JavaScript can, as an aside, be used on the server, though we'll tend not to talk about it in that context. So now let's tie these together. A week plus ago, we presented some HTML on the left-- super boring web page. 

Just says hello world. And then I proposed on the right we can kind of steal ideas from our discussion of data structures in C and think about how this hierarchical markup language on the left could be drawn or implemented in memory as an actual tree structure with nodes and pointers and those kinds of details. On the right, we call that a DOM-- Document Object Model-- which is just a fancy way of saying tree. 

Now, why is this useful to think of it in this way? Because now with JavaScript, because we have code that gets to play in this environment, the actual HTML that's been sent to the browser already and has already been loaded into memory by the browser into a tree in your computer's RAM like this, we can use JavaScript to actually traverse or walk or search or change that DOM tree however we want. So in fact, if you think about facebook.com, if you use the chat feature, if you use Gmail and the gchat feature, anything where you have messages coming again and again and again, those messages are probably, like, LI tag, List Item tags, maybe. 

Or maybe they're just divs that keep appearing every time you get an instant message. And so that just means what Facebook or Google is doing is any time you get a message from the server, they are probably using JavaScript to just add another node to this tree-- another node to this tree that then visually just looks like a new line of text on your screen. But they're inserting into this data structure. 

So in classes like CS124 and others, you'll actually write more code against data structures like this. But for now in JavaScript, we'll just assume we get all of this functionality for free from the language itself. So let's look at an example. 

Let me open up a file called form.html. It's super simple. It just looks like this. 

No CSS, no thought to aesthetics. It's purely functional and apparently I'm asking for an email, a password, password again, and then a check to agree to some terms and conditions. What the source code for this looks like is probably something you might guess with a little bit of thought now. I've got a form tag here. 

An action is apparently going to go to a file called register.php. The method I'm going to use is get. And then I've got a text field whose name is email. 

I've got a password field whose name is password. I've got another password field whose name is somewhat arbitrarily confirmation. It's just another HTTP parameter. 

And then we we've not used these except since the Frosh IMs demo in class-- a check box which is just type equals check. And I'll call that agreement. So I've kind of arbitrarily but conveniently named these fields. So that now when this form gets submitted, let's see what happens. If I do malan@harvard.edu, I'll do a password of crimson. I'll do a password of nothing. Let's not cooperate. 

And I won't check the box. Let me click Register. And it says, hm, you're registered. Not really. 

But the URL changed. So this form was clearly allowed to submit to register.php. But presumably, I should be catching some of these errors. Now, in Pset7 and some of our lecture examples, we would generally print out a big red error message here saying, missing name, or missing password. We've done that before and we've done server side error detection. 

But many websites these days do client side error detection where the URL doesn't change. The whole page doesn't refresh. You get instant feedback from the browser. Maybe something goes red. 

Maybe you get a pop up. But you don't waste time sending to the server data that's incomplete. So let's see how we might achieve that feature as well. 

Let me go to form1.html, which looks the same. But if this time I do malan@harvard.edu and I type crimson and I don't cooperate further but click Register, notice now. It's not the sexiest solution. I've at least caught this error. And I've used the alert function in JavaScript-- which we're only using in class. In general, you should not use this because it can very quickly get out of control. But passwords do not match is the error. 

Let me go ahead and click OK. But what the key takeaway here is that the URL did not change. So I've not bothered wasting the server's time asking it a question that I could have figured out the answer to myself. 

And the user, even though been talking about this longer than the user's going to think about this, is going to have instant feedback. There's no latency with the network connectivity. So let's look at this source code. 

Form1.html looks structurally similar up here. The form is in fact the same. But let's see what I did down here. And there's different ways to do this. And I've done the most straight follower but not most elegant way yet. I have a script tag. I then call document.getElementByID('registration'). And I store that value in form, a variable. 

So what have I done? You can think of document.getElementByID as being a special function that JavaScript gives you that literally hands you a pointer to one of the nodes or rectangles in this tree. So now that's what our form variable in JavaScript is actually pointing at. 

So now the syntax is different from C. But we're doing a few things here. One, this one is a little strange looking, certainly versus C. But look at line 35. So on the left form.onsubmit. Recall that onsubmit is like a field in a struct. If you think of the form variable is just being a C struct, it might have some fields. 

Back in the day, we had students names, IDs, houses, those kind of fields. Just think of onsubmit as another field. But it's a special field because the browser is preprogrammed to expect .onsubmit to not be a value like a number or string, but to actually be a function or the address of a function in the computer's memory. 

And indeed, that's what this keyword here does. This says, give me a new function. But what is its name going to be, apparently? 

Thinking back to Monday. What is the name of this function based on this syntax? No, I mean, there's clearly no name associated-- certainly not in what I've highlighted here. 

But that's actually OK. This is an anonymous function, or a lambda function as some might call it. And that just means it's still a function. It's just, you can't call it by name. But that's OK. Because again, the browser has been preprogrammed by companies like Google or Microsoft or Mozilla or others to just know that if the .onsubmit field inside of a form element has the value, treat it as a function-- a function pointer, if you will. And call it when the form is submitted. 

So what code should be executed when the form is submitted? Apparently, everything inside of the curly brace. And this is just stylistic. 

You could do this like we tend to do in CS50. But in JavaScript, most people tend to keep it on the same line just because it more clearly is associated with that keyword function. So now what am I doing? 

If form.email.value equals equals the empty string or nothing, here's an alert where I'm going to say, you must provide your email address, and then return false. And it's that return false that prevents the form from being submitted. Meanwhile, if the password value is blank, I'm going to yell at the user and say, you must provide a password. 

Meanwhile things are getting a little fancier here. If form.password.value does not equal form.confirmation.value, the other field, yell at the user that the passwords don't match as they did not a moment ago. And then this one's a little sexier because I know I knew conceptually that checked is a check box's name. 

So I can just use an exclamation point to say if the check is not checked-- it's the Boolean value, true or false-- I'll yell at the user for that reason. Otherwise, if we get through all of these conditions, let's just return true. Let the form be submitted. And this will then happen. 

Let's type in crimson. Let's check the box, click Register. And now I go through to the destination. Now, there's no database there. There's nothing interesting in register.php. I just needed something to actually talk to. So let me pause, here. Any questions on what we've just done or what some of this new syntax is? OK, yeah? 

AUDIENCE: So any checkbox is automatically a Boolean . You don't have to declare it like that. 

DAVID J. MALAN: Correct. Any checkbox that's sent to you from an HTML form to your JavaScript code will be treated, yes, as a Boolean value-- true or false. It's a good question. Whereas the other values, of course, have been text, AKA strings. 

All right, so let me rewind a bit further. What was the whole point of this? Just to be clear. Like, we already know, even from Pset7 and even from last week's lecture examples, that we can obviously check $_GET $_POST see if the user give us an empty value. Remember the empty function in PHP. 

So just to be clear, what's one reason we might also want to do this error checking inside of the browser? What's the motivation here? Yeah. 

AUDIENCE: Faster, and you don't send useless data to the server. DAVID J. MALAN: Good. It's faster. You don't send useless data to the server. 

So you get back a more immediate response. And overall, the user experience is better. Think about the alternative. 

If for Gmail-- and was the case many years ago. Suppose you got a new email your Gmail account, but the only way through to see that is to, like, reload the whole page. Or suppose you click on a link to read an email. 

Everything has to reload so that you can see the email. Or Facebook-- you get a chat message. You don't see it until you reload the page or click some link. 

Like, this would be an awfully annoying user experience. And this is what it was like, clearly, back when I ran for UC and the web was much less dynamic and JavaScript wasn't as popularized as it is now. And things are getting much more dynamic and much more client side in that sense. 

But there is a catch here, and this is kind of an annoying gotcha. Just because you add client side detection like this does not mean you can or should abandon server side detection. You essentially want to put your error checking in both places. Because what was one of the lesson learned from the article I read some excerpts from with this stupid CMS system-- Content Management System-- that was implementing its authentication system, its login via what mechanism? JavaScript. 

AUDIENCE: JavaScript. DAVID J. MALAN: JavaScript, exactly, right? It was using JavaScript. And literally, you guys have played a little bit probably with Chrome's Inspector. And if I can find it, inspect element. 

Let me go over to do all of Chrome's options. And this is how easy it is to disable JavaScript in a browser. Check, no more JavaScript. 

So in fairness, a lot of the web these days is just going to break because Gmail and other sites-- Facebook-- assume that JavaScript is enabled. But if you're doing something stupid like only validating users input and checking it for errors on the client side, an adversary could easily do this. And then even smarter adversary like you guys now could use Telnet or Curl or just command line commands and actually send messages to the server that similarly are not error checked. 

So this is more of a user interface decision than it is an actual technical improvement-- implementing something client side like this. So now a quick glance, but then I'll defer to the online walk through for this one. In form two, we actually went through and cleaned up the code a little bit. But let me defer to one of the videos we'll likely embed in Pset8 that just shows you a similar syntax using a library called jQuery, which is a super, super popular library in JavaScript that frankly most people just use these days and even confuse as being JavaScript itself. 

And it tends to involve some dollar signs and keywords like document in parentheses here. But again, let me defer to some slower tutorials online rather than get tied up in just syntax. Let's move on to something a little cooler in terms of the applications of this. 

So in particular, let me go ahead and open up this here. Come on. There we go. 

Let me open up this picture here. Unnecessarily complicated looking, but it describes a technique called AJAX-- Asynchronous JavaScript and XML, where the X for XML is actually no longer really used. It tends to use something else called JSON. 

But here is how something like Google Maps or Google Earth works. Let's try this on the fly, actually. Let me go ahead and open up Chrome on my browser. 

And let me go into, say, maps.google.com. And actually, if you're old enough to remember what, like, MapQuest was like back in the day, and maybe they still work like this. When you used to search for something-- 33 Oxford Street, Cambridge, Mass, let's do this-- you would actually, if you wanted to pan up and down, left and right, you would look like a big arrow on top, and it would show you another frame of the map up here. Or you would click left and you would go over here, or another click and you would go over here. But instead these days, we of course just take for granted that we can go around Cambridge pretty quickly just by clicking and dragging. But notice there's some glitches. 

If I do this fast enough, what seems to be happening as I drag a little too fast for the computer to keep up? What do you see? Yeah. 

AUDIENCE: The pixels don't refresh. DAVID J. MALAN: The pixels don't refresh. There's actually-- and you could see this, actually, if you're watching online and pause this or actually slows things down for once-- you'll see that there are tiles, squares, or rectangles that are missing from the map until a split second later, more data, more images actually appear on the screen. And in fact, if we do this by looking up Chrome's-- let's say, Chrome-- let's see. We can't do that. 

Oh, whoops. Let's open up maps.google.com. Let me make the window bigger again. 

Go back to 33 Oxford Street. What was the website I was on recently? I had this, like, private rant to myself that I'd then instant message any friend who was online who wanted to hear it. There's some website. I think it's Comcast-- so a very big American ISP. You can, when signing up for new cable modem service or cable TV service, they have a form very reasonably where they ask you for your address. And have this amazing feature called auto complete, like Google, that starts to fill in the answer to your question. 

The problem is, they do auto complete on the first things that you type. So if you start typing in 33, it will show you literally every house in America that starts with the number 33 before continuing to expect you to type more. So if you type 33 Oxford, then it shows you every street in America that has 33 Oxford in its name, irrespective of the town that you're in. 

And then you continue typing. And finally, it realizes that they don't offer service to your home in Cambridge or something like that. But the point is, this is the most asinine implementation of auto complete ever. 

And I'm just going off on this tangent again. But there are good ways to use JavaScript and bad ways. And that's not necessarily the best one. 

But the point here, before this tirade, was to open up tools down here and open up developer tools, as we've encouraged before, and to watch the Network tab as I click really fast. And notice a whole bunch of get requests happened. All of this happened since I dragged. 

And most likely, indeed a lot of these rows now are image slash JPEG MIME types or content types. That's because what chrome is doing every time I click and drag, click and drag, is it's realizing, oh, I need to go ask Google for the tile on the map that's over here, quickly download it via HTTP, and then add it to the so-called DOM to the web browsers in memory tree representation so that the user, me, sees that updated tile. And this is because of a technique called AJAX. Back in the day, it really was the case that if you wanted to change what's on the screen, you would have to click up, down, left, right. And then a new page would open. But these days, everything is more dynamic. It happens in the way we humans would hope it actually would interactively. And it achieves this by way of a technique called AJAX, which is perhaps best explained by an example. First, let me go ahead and open up a file called quote.php in today's distribution code. 

And then let me do symbol-- whoops. Let me do symbol=GOOG for just some stock. Or actually, let's do the one from the Pset FREE. Enter. 

And now notice what I get back. So this is a really short PHP file that I wrote that simply borrows code from Pset7's lookup function and spits out using this curly brace and quotes and colon notation, apparently, the current stock's price for the company that you pass in via get. So this is different from most of what we've done in that notice I'm literally spitting out what looks like JavaScript code. 

In fact, this is a JavaScript object. In fact, just to be more clear, JavaScript Object Notation-- JSON-- is just a fancy way of saying that you can represent data in JavaScript much like you can in PHP using key value pairs. So if I wanted to declare a variable in JavaScript to represents Zamyla, for instance-- a struct for Zamyla-- and we'll call it student, this variable. Her ID is one, house is Winthrop, and name is Zamyla. 

But I can also have an array of objects. So if I actually wanted to have an array in JavaScript containing multiple such objects, this time representing staff, I might have these three chunks of code back to back to back for these three former staff members. So the syntax, pretty similar to both-- to PHP. But this is particularly JavaScript. It's object notation. So what is this useful for? 

If I write code that spits out JSON-- JavaScript Object Notation-- stuff that looks like this or stuff that looks like Zamyla's structure, I can actually use this in programs I write. Let me go to ajax0.html. And this too-- not much thought given to aesthetics. But watch what happens. 

Let me go ahead and type free here. Click get quote. And notice the URL has not changed. But I did get a pop up with apparently today's penny stock price of $0.15. So not all that bad. But the difference is that somehow, this data came back to me directly. But let's take a step toward something more familiar. In version one of this, let me type free again, click Get quote, and now-- oh, this was actually the jQuery version. So let me-- I didn't fast-forward quite far enough. Let me go to version two, which is where I wanted. Notice what I've done here. I have a web page-- a super simple version of any web page you might use today with a text field here for free and then apparently just text. 

This is not a form here, apparently. But if I click get quote, notice my web page is about to change as though I just got a new instant message or as though I just moved the map and needed to get more data added dynamically to the web page without the URL changing and the user experience getting interrupted. Indeed, I'm still at the exact same place-- ajax2.html. 

So let's look only at this example and see how this is happening. Let me go into ajax2.html. And notice the form first. 

Down here, I'm turning off auto complete. Sometimes it gets annoying if the browser is trying to show you your whole history. So you can do it in HTML by just saying auto complete off. 

I've given this text field a symbol-- rather, an ID of symbol. And now, this is an interesting feature. We haven't talked about span, but you can think about it like a paragraph tag or div tag. It's what's called an in-line element, which means you won't get a paragraph break above and below it. It's just going to stay in-line without hitting the equivalent of enter. So I have given this chunk of HTML to be determined a unique identifier that I arbitrarily called price. And I have a Submit button. 

Because now up here-- and this is actually super amazing how little code you can write to do relatively neat things-- notice what I've done up here if I scroll up to the head of this page. I've included first in my head a script tag that actually references a JavaScript file elsewhere. This is from the organization that writes jQuery, and this is just giving you the latest version of their jQuery library. 

So this is kind of like sharp include in C or require in PHP. You use the script tag with a source attribute. But now my own code is going to be right in here. 

Notice I have a function called Quotes. And it looks a little cryptic at first glance. But let's tease this apart. Give me a variable called URL. Assign it literally this string. So, single quotes, double quotes in JavaScript just gives me a string. What does the plus do? Concatenation. 

So this now is the jQuery syntax which takes a little getting used to. But this just means go get me the DOM node whose unique identifier is symbol. The hashtag there means unique identifier symbol. 

The dollar sign in the parentheses just mean, wrap this in jQuery a sort of secret sauce so you get additional functionality. And then .val is apparently a function, or as we say now, a method inside of this node that just gives you the value. So in short, ugly and confusing as this looks at first glance, this just means get with the user typed in, put it at the end of the string by concatenating it. That's all. 

So now, last three lines. You can squeeze a lot of functionality out of three lines. This dollar sign, as an aside, is just a nickname for a special global variable called literally jQuery. 

Dollar sign just looks cool. So the jQuery community just kind of used it as their special symbol. It does not mean what it means in PHP. In JavaScript, dollar sign is just like a letter of the alphabet or a number for a variable. 

You can just have it as the name. Just looks cool. So the community adopted it as a nickname for their own library called jQuery. 

And it's super popular. So get JSON is exactly that. It's a function that the folks at jQuery wrote that gets JSON from a server-- JavaScript Object Notation. From what URL is it going to get that information? Apparently from this URL here. 

And what should the browser do as soon as it gets back this response? And this is the magic of AJAX, so to speak-- Asynchronous JavaScript in XML. It's hard to see with such a simple example as we had here. 

But this was asynchronous in the sense that my code when executed sent a message to the server to go get me some JSON. And it happened super fast that I got a response. But what's interesting is that this line of code didn't hang my computer. 

I didn't see a spinning icon. I didn't lose the ability to move my mouse. My browser was actually perfectly fine. 

Because the way JavaScript handles the response from the server is as follows. You register what you'd call a callback function, which just means, hey, JavaScript. As soon as the server responds with JSON, please call this anonymous function. 

And please passed into this function whatever string the server spit out as an argument called data. So in other, words, if I'm assembling dynamically a URL quote.php passing in this symbol like FREE or GOOG or whatnot, I'm then telling JavaScript go get that URL. Remember that the browser is going to return something that looks like we saw earlier-- this. 

And what the second argument here to get JSON is saying is call this function when the server gets back whether it's 10 milliseconds from now or 10 seconds from now. And as soon as you do, add the price to the page. This syntax here just means go get the node from the tree whose unique identifier is price-- that span we saw earlier. 

This method called HTML just says, go replace the HTML that's there with data.price. What's data.price? Well, the browser, recall, showed me this coming back. So this is data. 

And so it's a little cryptic to see the commas here. But in fact, let me do this. Let me just paste this real fast into gedit and show this like we showed Zamyla's structure earlier. 

What the server is sending back is a little object that looks like this. And so data.price is just giving me 0.1515. So a lot of moving parts here all at once. 

But the key takeaways is that we have this ability to make additional HTTP requests using JavaScript without having to reload the page. And then we can actually change the web page on the fly. And it turns out that JavaScript and other languages can be used now not only to mutate web pages, but to actually write software in an actual computer, not just confined to Chrome or the like. 

In fact, if-- Colton, would you like to join us back up here with your lab code, and Chang as well? Let's go ahead, having talked about anonymous functions and callbacks and really tempt fate here with a live demo with bleeding edge technology, one of these Elite Motion devices. Now, this device, recall, is a little USB device as well that-- that's beautiful-- that plugs in to your USB ports. 

And then it provides input in the form of human gestures by detecting using infrared beams, essentially, movements from your arm. So whereas what Maria tried on before was muscular, actually feeling what's changing your arm, this is infrared based. So it's looking for movements within the sort of sphere of a foot or so of the device itself. 

So why don't I take a stab at this first? And let's go ahead and throw you up on the overhead here. So let's put Colton's laptop up here. We've got Andrew on the TV. And what would you like me to do first? 

COLTON: Go ahead and just put your hands over this guy and you'll see some fabulous glitter. 

DAVID J. MALAN: Very nice. This is all happening in real time. OK. All right, and yep. So nice. All right, what else can we do? 

COLTON: Go to the next screen and see. 

DAVID J. MALAN: All right. 

COLTON: A fun little game where you get to make robots. 

DAVID J. MALAN: All right, so this is fake hands showing me what to do. COLTON: Yes So go ahead and grab one of the blocks and put it on top of that robot's body. DAVID J. MALAN: Oh, there's my hand. Oh. OK, adorable. Wait a minute, OK. There we go. 

COLTON: I made one on accident. 

DAVID J. MALAN: OK, I'll get this guy. Damn it! When we were practicing this last night, you know what this devolved into? 

Like this. OK. Next one? 

COLTON: Sure. 

DAVID J. MALAN: All right, and there's a third. All right. COLTON: And in this one, you get to-- DAVID J. MALAN: Oh, this one's beautiful. COLTON: --yeah, pick apart this flower. DAVID J. MALAN: OK. No? Missed. 

COLTON: Oh, there you go. 

DAVID J. MALAN: Ah, Look at that. Very nice. Well, why dont' we take out one volunteer here who would like to come on up. How about right there in the green, is it? 

All right, and let's have-- instead of doing that, some of you might know this game here-- cut the rope, perhaps? Let's see. We have our glasses on over here? 

OK. Thank you. What's your name? 

AUDIENCE: Laura. 

DAVID J. MALAN: Laura? Nice to see. If you don't mind putting Google Glass over your glasses. This is Colton. 

COLTON: Hi. Nice to meet you. 

DAVID J. MALAN: OK, come on around. All right, so what you're going to do here, having played this before, is put your hand over the Leap Motion here. And now your arrow should move. Oh, nope. 

AUDIENCE: No. 

DAVID J. MALAN: We don't want to quit yet. OK, wait. Over here. So notice as you hold your finger over something, the mouse starts to go green, which is how you click. 

So hover over Play. And just one finger is fine. And now click on the little green guy on the left. And now hold until it fills up green. Good. Now, like, level one up top. 

AUDIENCE: Yeah, we want level one, here. 

DAVID J. MALAN: Good. OK, so all you have to do is cut the rope. Your cursor's the white one down there. 

Very nice. All right, it's about to get harder. So hold your finger over next now. Good. This one's hard. 

AUDIENCE: Oh crap. OK. It wants to go that way. Oh crap, that-- 

DAVID J. MALAN: Yeah. Secondary goal is to get all the stars. All right, next. 

Let's see if you can get this third one. Good. OK, go over there. 

Sure. Oh, very nice. All right. 

So why don't we adjourn here today? Let anyone come on up who wants to play. Thanks so much to Laura our volunteer. And we will see you on Monday. 

AUDIENCE: You probably want these back. 

SPEAKER 2: At the next CS50-- DAVID J. MALAN: All right, so this here is the Myo arm band, a couple of which we have for CS50 final projects. And that was a demonstration we queued you up in advance where essentially this fairly tight arm band up here listens to your muscular movements that are then mapped in software to Colton's laptop over here which had iTunes and that song already queued up. Rather than me demoing this, Colton's been in the lab clearly all week getting a demonstration ready for one brave volunteer. If someone would like to come on up-- saw your hand first. Come on up. All right. And what is your name? 

AUDIENCE: Uh, Maria. 

DAVID J. MALAN: Maria, nice to see you. Come on over here. Let me introduce you to Colton. Colton, this is Maria. 

COLTON: Hi, nice to meet you. 

DAVID J. MALAN: All right, so step one, we're going to have you put this on to your forearm so that it's pretty tight up near your elbow. And meanwhile, let's have put on our Google Glass and we'll mix technologies today. 

COLTON: First we'll have to hook this into the things. 

DAVID J. MALAN: OK. Actually, let's put your arm as close to this cable as possible so that we can first sync it up. 

COLTON: Let's do this. 

DAVID J. MALAN: And meanwhile, so that everyone can get a closer glance, we'll toss Andrew's camera up on the screen there. So we have a USB cable that's being plugged into Maria's armband. And let me toss Colton's screen up on the projector next. 

So Colton is registering the device now as a Myo connected to this cable. And now what Maria's going to do momentarily is actually walk through the calibration steps and teach the software how her muscles respond when she make certain pre-defined gestures that the software understands. If you'd like to go in front of the screen. OK, keep trying. 

COLTON: Go like this. And like that. And all the way to the right. Go back. 

DAVID J. MALAN: OK. Different perspective. It's not you. It's us. 

MARIA: OK. DAVID J. MALAN: No. Let's move it higher up so it's closer to your elbow, or even tighter. All right. 

Here we go. This would be a good time for CS52X. There we go. 

Very nice. OK. Thumb to pinky. 

Very nice. Spread your fingers. Good. Wave right. It's curiously showing you with the left hand-- 

COLTON: Yeah, that's wierd. DAVID J. MALAN: Wave to the right and move forward. Fast forward to skip or next. That's OK Wave right. 

MARIA: I don't-- wait. 

DAVID J. MALAN: Need some help? 

COLTON: So you're going like this. MARIA: It's turning the other thing, though. COLTON: It is. DAVID J. MALAN: Yeah I don't know why it's showing you a leftie. COLTON: Why don't you try-- just try going like this. 

DAVID J. MALAN: No? Maybe reach your arm out a little straighter and make it more abrupt like this. Yeah, OK, come on. 

MARIA: I'm sorry. DAVID J. MALAN: It's not your fault. COLTON: It's fine. DAVID J. MALAN: All Right. Well-- 

MARIA: Should we skip this, then? DAVID J. MALAN: Yes, let's let you off the hook. So if anyone would like to do a final project using this cutting edge hardware, realize it might just take a little getting used to. And this-- the reality is this is actually very bleeding edge. 

This is what's called the developer kit, which is meant to be essentially a pre-release so that people can do exactly this-- fight with it, figure out how people's bodies work with the technology. So if you want afterwards, after lecture, we can let you come and take another stab at it. But otherwise, a round of applause, if we could, for Maria for coming on up. 

MARIA: Thank you. 

DAVID J. MALAN: Thank you. We'll hang on to this, but we will give you-- how about a stress ball here? Oh, and-- if-- yeah, thanks. All right. So for the curious, if you were unfamiliar with the sound choice that we made there earlier, an amazing TV show that you should absolutely be binge-watching on Netflix is this one here. 

SPEAKER 1: Ladies and gentlemen, a magician named Josh. 

DAVID J. MALAN: And apparently, it's a thing to text me during lecture now. I'm being told that Maria had a birthday yesterday. So happy birthday from CS50 to Maria as well. 

So you may have read in recent month that this gentlemen here, Steve Ballmer, who was actually class of 1977 at the college, recently retired for Microsoft. He was an undergraduate here, then a couple years later found himself at Stanford Business School when he received a phone call from a friend of his who had lived down the hall from him here at Harvard. That friend's name was Bill Gates, and at the time, he was trying to recruit Steve to be the first business person, really, at a small company name Microsoft. 

A long story short, Steve was ultimately won over, joined Microsoft when they had just 30 employees. And by the time he retired quite recently, the company had 100,000 employees over the past few years. And so a website known as The Verge prepared this tribute on video that we thought we'd shared that gives you a sense of just how much energy Steve brings to any presentation he gives. [VIDEO PLAYBACK] -Microsoft's like a fourth child. Children do leave the house. In this case, I guess I'm leaving the house. Hey Bill, whazzap? 

-Wazzap? 

-Hey, wazzap? We've been given an enormous opportunity. And Bill gave us that opportunity. I want to thank Bill for that. I want you to too. The pace of innovation isn't going to slow. 

It's going to get faster and faster. There might be a few competitors that are unfortunately eliminated! 

I love this company. Yes! I am a PC, and I love this company! 

Developers, developers, developers, developers, developers, developers, developers, developers. Yes! Web developers! 

Web developers! Web developers! Listen to what else you get at no extra charge! 

The MS-DOS executive, an appointment calender, a card pile, a note pad, a clock, a control panel. And, can you believe it? Reversie! 

Burn them to CD! Post them to MSN! You mail them to friends! 

All with one click! One Microsoft, one strategy, one team-- focused, disciplined, professional, and expert in all that we do. Let me use a line from an old movie. 

Relationships are like sharks. They move forward or they die. I actually think tech companies are the same. 

[END VIDEO PLAYBACK] DAVID J. MALAN: So we are so pleased to announce that Steve will be joining us here in CS50 next Wednesday at the usual place and time here. Space will likely be limited. And so to join us in person, please head today or shortly thereafter to cs50.harvard.edu/register. 

And we will follow up by Tuesday confirming spots. Look forward to that next Wednesday during lecture in CS50. Now, in other news, I happened to come across this in The Crimson just the other day. 

It turns out that one of CS50's staff and at least one of CS50's students is currently running for UC president and vice president, which brought me back to my own days back when I lost the UC election miserably. But the silver lining in that is I always tell the story is that one of the I'm sure many reasons I lost the election was a complete lack of a talent for public speaking. And so quite honestly, it drove me, that experience I think my junior year, to actually sign up for Harvard Computer Society, which is the group on campus that holds various technical talks and other things. And I took over their teaching seminars and therefore had an opportunity, a wonderful opportunity, to start working on exactly this. But also, I had an opportunity during this experience to teach myself all the more HTML. And so I procrastinated last night by looking through the HTML based website I made in like 1997, '98, for my campaign which looks like this here. I know. 

Because-- and of course, notice this amazing design decision in 1998 or whatnot. The first thing you want users to do upon visiting your website is to have to click another link just to enter your website here with the monk behind like a shrouded curtain where apparently my campaign platform was. And this is all you'll get today is just a screenshot. But I was reading through, like, my campaign posters last night and my platform. 

And I was so angry at the time. My platform was-- it was interesting. So I've calmed down since then. But someday, I will run again and hopefully better off this time. 

So HTML, that language in which I made that in-- you'll soon make much more-- is something we've been talking about of late and largely taking for granted now that we've moved on to other languages. But let's pause for just a moment and put some of these things in context. So in a sentence, what is HTML? 

Or, what is used for? Anyone? Yes. 

AUDIENCE: Markup for websites. DAVID J. MALAN: Markup for website. So it's a markup language that lets you structure a web page. Header goes up here, title goes here, body goes here. This is boldface, this is italics-- that sort of detail. 

OK, good. So CSS lets you-- and I took some liberties there with the bold-facing and italics because that's better implemented with this. CSS is-- what? Say in a sentence. Anyone at all. Yeah. 

AUDIENCE: Embellishments and stuff, like how to design it. DAVID J. MALAN: OK, good. Embellishments that allow you to design it or stylize it with things like boldface and italics and colors and also more fine grained positioning of elements. It sort of lets you take things the last mile so that if, for instance, in Pset7, you might have noticed on your portfolio page if you're at this point already that a default table that you make to show the user's stock holdings and cash probably looks pretty hideous by default with no white space. Everything's kind of crammed together in rows and columns. 

Well, with a bit of CSS, as you may realize, you can actually tweak that and make it something much more familiar and much prettier to look at. So CSS is about the stylization of websites. But then we introduced yet another language, PHP, which lets us do what? 

Let's just do what? Anyone. Got to venture beyond the first couple rows. Yeah. 

AUDIENCE: Generate dynamic content. DAVID J. MALAN: Perfect. Generate dynamic content. And you can do this in any number of languages. We happen to use PHP because it's in part so similar to C syntax. 

But PHP does exactly that. It lets you dynamically generate output. And some of that output could be HTML, as we've typically been doing. And it's also, because it's a programming language, is the mechanism via which we can talk to databases. 

And we can make queries to other servers like Yahoos and programmatically do anything really that you might otherwise want to compel a computer to do. So PHP lets us start dynamically outputting content. So by this logic, I didn't have a dynamic website back in 1998. 

It was just a static web page. My content had to be changed by manually with gedit or some equivalent. But PHP is what we used or could have used, rather, for something like the Frosh IMs website, which was supposed to take registrations and manage a list of users-- things that are actually changing over time, even though we happen to use Perl, a different language at the time. 

And then lastly, we introduced SQL-- Structured Query Language. So yet another language that's used for what? Used for what? Can we venture slight-- OK, we're not going to get much farther than the orchestra here. AUDIENCE: It's a protocol used to talk to databases. DAVID J. MALAN: A protocol used to talk to databases. Let me tweak. It's an natural language used to talk to databases-- selects and inserts and deletes and updates and actually even more features that we haven't even dived into but you may want to explore-- have to explore for, say, a final project. So there are these various pieces. 

And hopefully Pset7, even though its specification is quite long, it's deliberately long to walk you through how these things can all be typed together. Now, on Monday, we introduced our last language that we'll formally introduce in the course-- that is, JavaScript. This, like PHP, is an interpreted language. 

But a key distinction I proposed on Monday is that whereas PHP is executing or being interpreted on the server, which in this case is the CS50 appliance, or might be some commercial web server on the internet, JavaScript generally is a language that runs client side not server side-- so in the browser. Which is to say, just like when I opened up Facebook source code and found all of those .js files, the implication was that when you visit Facebook or most websites these days, you get not only HTML, not only CSS, but a whole bunch of JavaScript code often in the form of .js files. And then it's the browser-- your own Mac or PC-- that executes that code. 

But your browser executes it. You can think in sort of a sandbox. So that JavaScript code shouldn't be able to delete files on your computer. It shouldn't be able to send emails on your behalf. Your browser kind of restricts what you can do with it. 

So in that sense, it's a little less powerful, perhaps, than C. But JavaScript can, as an aside, be used on the server, though we'll tend not to talk about it in that context. So now let's tie these together. A week plus ago, we presented some HTML on the left-- super boring web page. 

Just says hello world. And then I proposed on the right we can kind of steal ideas from our discussion of data structures in C and think about how this hierarchical markup language on the left could be drawn or implemented in memory as an actual tree structure with nodes and pointers and those kinds of details. On the right, we call that a DOM-- Document Object Model-- which is just a fancy way of saying tree. 

Now, why is this useful to think of it in this way? Because now with JavaScript, because we have code that gets to play in this environment, the actual HTML that's been sent to the browser already and has already been loaded into memory by the browser into a tree in your computer's RAM like this, we can use JavaScript to actually traverse or walk or search or change that DOM tree however we want. So in fact, if you think about facebook.com, if you use the chat feature, if you use Gmail and the gchat feature, anything where you have messages coming again and again and again, those messages are probably, like, LI tag, List Item tags, maybe. 

Or maybe they're just divs that keep appearing every time you get an instant message. And so that just means what Facebook or Google is doing is any time you get a message from the server, they are probably using JavaScript to just add another node to this tree-- another node to this tree that then visually just looks like a new line of text on your screen. But they're inserting into this data structure. 

So in classes like CS124 and others, you'll actually write more code against data structures like this. But for now in JavaScript, we'll just assume we get all of this functionality for free from the language itself. So let's look at an example. 

Let me open up a file called form.html. It's super simple. It just looks like this. 

No CSS, no thought to aesthetics. It's purely functional and apparently I'm asking for an email, a password, password again, and then a check to agree to some terms and conditions. What the source code for this looks like is probably something you might guess with a little bit of thought now. I've got a form tag here. 

An action is apparently going to go to a file called register.php. The method I'm going to use is get. And then I've got a text field whose name is email. 

I've got a password field whose name is password. I've got another password field whose name is somewhat arbitrarily confirmation. It's just another HTTP parameter. 

And then we we've not used these except since the Frosh IMs demo in class-- a check box which is just type equals check. And I'll call that agreement. So I've kind of arbitrarily but conveniently named these fields. So that now when this form gets submitted, let's see what happens. If I do malan@harvard.edu, I'll do a password of crimson. I'll do a password of nothing. Let's not cooperate. 

And I won't check the box. Let me click Register. And it says, hm, you're registered. Not really. 

But the URL changed. So this form was clearly allowed to submit to register.php. But presumably, I should be catching some of these errors. Now, in Pset7 and some of our lecture examples, we would generally print out a big red error message here saying, missing name, or missing password. We've done that before and we've done server side error detection. 

But many websites these days do client side error detection where the URL doesn't change. The whole page doesn't refresh. You get instant feedback from the browser. Maybe something goes red. 

Maybe you get a pop up. But you don't waste time sending to the server data that's incomplete. So let's see how we might achieve that feature as well. 

Let me go to form1.html, which looks the same. But if this time I do malan@harvard.edu and I type crimson and I don't cooperate further but click Register, notice now. It's not the sexiest solution. I've at least caught this error. And I've used the alert function in JavaScript-- which we're only using in class. In general, you should not use this because it can very quickly get out of control. But passwords do not match is the error. 

Let me go ahead and click OK. But what the key takeaway here is that the URL did not change. So I've not bothered wasting the server's time asking it a question that I could have figured out the answer to myself. 

And the user, even though been talking about this longer than the user's going to think about this, is going to have instant feedback. There's no latency with the network connectivity. So let's look at this source code. 

Form1.html looks structurally similar up here. The form is in fact the same. But let's see what I did down here. And there's different ways to do this. And I've done the most straight follower but not most elegant way yet. I have a script tag. I then call document.getElementByID('registration'). And I store that value in form, a variable. 

So what have I done? You can think of document.getElementByID as being a special function that JavaScript gives you that literally hands you a pointer to one of the nodes or rectangles in this tree. So now that's what our form variable in JavaScript is actually pointing at. 

So now the syntax is different from C. But we're doing a few things here. One, this one is a little strange looking, certainly versus C. But look at line 35. So on the left form.onsubmit. Recall that onsubmit is like a field in a struct. If you think of the form variable is just being a C struct, it might have some fields. 

Back in the day, we had students names, IDs, houses, those kind of fields. Just think of onsubmit as another field. But it's a special field because the browser is preprogrammed to expect .onsubmit to not be a value like a number or string, but to actually be a function or the address of a function in the computer's memory. 

And indeed, that's what this keyword here does. This says, give me a new function. But what is its name going to be, apparently? 

Thinking back to Monday. What is the name of this function based on this syntax? No, I mean, there's clearly no name associated-- certainly not in what I've highlighted here. 

But that's actually OK. This is an anonymous function, or a lambda function as some might call it. And that just means it's still a function. It's just, you can't call it by name. But that's OK. Because again, the browser has been preprogrammed by companies like Google or Microsoft or Mozilla or others to just know that if the .onsubmit field inside of a form element has the value, treat it as a function-- a function pointer, if you will. And call it when the form is submitted. 

So what code should be executed when the form is submitted? Apparently, everything inside of the curly brace. And this is just stylistic. 

You could do this like we tend to do in CS50. But in JavaScript, most people tend to keep it on the same line just because it more clearly is associated with that keyword function. So now what am I doing? 

If form.email.value equals equals the empty string or nothing, here's an alert where I'm going to say, you must provide your email address, and then return false. And it's that return false that prevents the form from being submitted. Meanwhile, if the password value is blank, I'm going to yell at the user and say, you must provide a password. 

Meanwhile things are getting a little fancier here. If form.password.value does not equal form.confirmation.value, the other field, yell at the user that the passwords don't match as they did not a moment ago. And then this one's a little sexier because I know I knew conceptually that checked is a check box's name. 

So I can just use an exclamation point to say if the check is not checked-- it's the Boolean value, true or false-- I'll yell at the user for that reason. Otherwise, if we get through all of these conditions, let's just return true. Let the form be submitted. And this will then happen. 

Let's type in crimson. Let's check the box, click Register. And now I go through to the destination. Now, there's no database there. There's nothing interesting in register.php. I just needed something to actually talk to. So let me pause, here. Any questions on what we've just done or what some of this new syntax is? OK, yeah? 

AUDIENCE: So any checkbox is automatically a Boolean . You don't have to declare it like that. 

DAVID J. MALAN: Correct. Any checkbox that's sent to you from an HTML form to your JavaScript code will be treated, yes, as a Boolean value-- true or false. It's a good question. Whereas the other values, of course, have been text, AKA strings. 

All right, so let me rewind a bit further. What was the whole point of this? Just to be clear. Like, we already know, even from Pset7 and even from last week's lecture examples, that we can obviously check $_GET $_POST see if the user give us an empty value. Remember the empty function in PHP. 

So just to be clear, what's one reason we might also want to do this error checking inside of the browser? What's the motivation here? Yeah. 

AUDIENCE: Faster, and you don't send useless data to the server. DAVID J. MALAN: Good. It's faster. You don't send useless data to the server. 

So you get back a more immediate response. And overall, the user experience is better. Think about the alternative. 

If for Gmail-- and was the case many years ago. Suppose you got a new email your Gmail account, but the only way through to see that is to, like, reload the whole page. Or suppose you click on a link to read an email. 

Everything has to reload so that you can see the email. Or Facebook-- you get a chat message. You don't see it until you reload the page or click some link. 

Like, this would be an awfully annoying user experience. And this is what it was like, clearly, back when I ran for UC and the web was much less dynamic and JavaScript wasn't as popularized as it is now. And things are getting much more dynamic and much more client side in that sense. 

But there is a catch here, and this is kind of an annoying gotcha. Just because you add client side detection like this does not mean you can or should abandon server side detection. You essentially want to put your error checking in both places. Because what was one of the lesson learned from the article I read some excerpts from with this stupid CMS system-- Content Management System-- that was implementing its authentication system, its login via what mechanism? JavaScript. 

AUDIENCE: JavaScript. DAVID J. MALAN: JavaScript, exactly, right? It was using JavaScript. And literally, you guys have played a little bit probably with Chrome's Inspector. And if I can find it, inspect element. 

Let me go over to do all of Chrome's options. And this is how easy it is to disable JavaScript in a browser. Check, no more JavaScript. 

So in fairness, a lot of the web these days is just going to break because Gmail and other sites-- Facebook-- assume that JavaScript is enabled. But if you're doing something stupid like only validating users input and checking it for errors on the client side, an adversary could easily do this. And then even smarter adversary like you guys now could use Telnet or Curl or just command line commands and actually send messages to the server that similarly are not error checked. 

So this is more of a user interface decision than it is an actual technical improvement-- implementing something client side like this. So now a quick glance, but then I'll defer to the online walk through for this one. In form two, we actually went through and cleaned up the code a little bit. But let me defer to one of the videos we'll likely embed in Pset8 that just shows you a similar syntax using a library called jQuery, which is a super, super popular library in JavaScript that frankly most people just use these days and even confuse as being JavaScript itself. 

And it tends to involve some dollar signs and keywords like document in parentheses here. But again, let me defer to some slower tutorials online rather than get tied up in just syntax. Let's move on to something a little cooler in terms of the applications of this. 

So in particular, let me go ahead and open up this here. Come on. There we go. 

Let me open up this picture here. Unnecessarily complicated looking, but it describes a technique called AJAX-- Asynchronous JavaScript and XML, where the X for XML is actually no longer really used. It tends to use something else called JSON. 

But here is how something like Google Maps or Google Earth works. Let's try this on the fly, actually. Let me go ahead and open up Chrome on my browser. 

And let me go into, say, maps.google.com. And actually, if you're old enough to remember what, like, MapQuest was like back in the day, and maybe they still work like this. When you used to search for something-- 33 Oxford Street, Cambridge, Mass, let's do this-- you would actually, if you wanted to pan up and down, left and right, you would look like a big arrow on top, and it would show you another frame of the map up here. Or you would click left and you would go over here, or another click and you would go over here. But instead these days, we of course just take for granted that we can go around Cambridge pretty quickly just by clicking and dragging. But notice there's some glitches. 

If I do this fast enough, what seems to be happening as I drag a little too fast for the computer to keep up? What do you see? Yeah. 

AUDIENCE: The pixels don't refresh. DAVID J. MALAN: The pixels don't refresh. There's actually-- and you could see this, actually, if you're watching online and pause this or actually slows things down for once-- you'll see that there are tiles, squares, or rectangles that are missing from the map until a split second later, more data, more images actually appear on the screen. And in fact, if we do this by looking up Chrome's-- let's say, Chrome-- let's see. We can't do that. 

Oh, whoops. Let's open up maps.google.com. Let me make the window bigger again. 

Go back to 33 Oxford Street. What was the website I was on recently? I had this, like, private rant to myself that I'd then instant message any friend who was online who wanted to hear it. There's some website. I think it's Comcast-- so a very big American ISP. You can, when signing up for new cable modem service or cable TV service, they have a form very reasonably where they ask you for your address. And have this amazing feature called auto complete, like Google, that starts to fill in the answer to your question. 

The problem is, they do auto complete on the first things that you type. So if you start typing in 33, it will show you literally every house in America that starts with the number 33 before continuing to expect you to type more. So if you type 33 Oxford, then it shows you every street in America that has 33 Oxford in its name, irrespective of the town that you're in. 

And then you continue typing. And finally, it realizes that they don't offer service to your home in Cambridge or something like that. But the point is, this is the most asinine implementation of auto complete ever. 

And I'm just going off on this tangent again. But there are good ways to use JavaScript and bad ways. And that's not necessarily the best one. 

But the point here, before this tirade, was to open up tools down here and open up developer tools, as we've encouraged before, and to watch the Network tab as I click really fast. And notice a whole bunch of get requests happened. All of this happened since I dragged. 

And most likely, indeed a lot of these rows now are image slash JPEG MIME types or content types. That's because what chrome is doing every time I click and drag, click and drag, is it's realizing, oh, I need to go ask Google for the tile on the map that's over here, quickly download it via HTTP, and then add it to the so-called DOM to the web browsers in memory tree representation so that the user, me, sees that updated tile. And this is because of a technique called AJAX. Back in the day, it really was the case that if you wanted to change what's on the screen, you would have to click up, down, left, right. And then a new page would open. But these days, everything is more dynamic. It happens in the way we humans would hope it actually would interactively. And it achieves this by way of a technique called AJAX, which is perhaps best explained by an example. First, let me go ahead and open up a file called quote.php in today's distribution code. 

And then let me do symbol-- whoops. Let me do symbol=GOOG for just some stock. Or actually, let's do the one from the Pset FREE. Enter. 

And now notice what I get back. So this is a really short PHP file that I wrote that simply borrows code from Pset7's lookup function and spits out using this curly brace and quotes and colon notation, apparently, the current stock's price for the company that you pass in via get. So this is different from most of what we've done in that notice I'm literally spitting out what looks like JavaScript code. 

In fact, this is a JavaScript object. In fact, just to be more clear, JavaScript Object Notation-- JSON-- is just a fancy way of saying that you can represent data in JavaScript much like you can in PHP using key value pairs. So if I wanted to declare a variable in JavaScript to represents Zamyla, for instance-- a struct for Zamyla-- and we'll call it student, this variable. Her ID is one, house is Winthrop, and name is Zamyla. 

But I can also have an array of objects. So if I actually wanted to have an array in JavaScript containing multiple such objects, this time representing staff, I might have these three chunks of code back to back to back for these three former staff members. So the syntax, pretty similar to both-- to PHP. But this is particularly JavaScript. It's object notation. So what is this useful for? 

If I write code that spits out JSON-- JavaScript Object Notation-- stuff that looks like this or stuff that looks like Zamyla's structure, I can actually use this in programs I write. Let me go to ajax0.html. And this too-- not much thought given to aesthetics. But watch what happens. 

Let me go ahead and type free here. Click get quote. And notice the URL has not changed. But I did get a pop up with apparently today's penny stock price of $0.15. So not all that bad. But the difference is that somehow, this data came back to me directly. But let's take a step toward something more familiar. In version one of this, let me type free again, click Get quote, and now-- oh, this was actually the jQuery version. So let me-- I didn't fast-forward quite far enough. Let me go to version two, which is where I wanted. Notice what I've done here. I have a web page-- a super simple version of any web page you might use today with a text field here for free and then apparently just text. 

This is not a form here, apparently. But if I click get quote, notice my web page is about to change as though I just got a new instant message or as though I just moved the map and needed to get more data added dynamically to the web page without the URL changing and the user experience getting interrupted. Indeed, I'm still at the exact same place-- ajax2.html. 

So let's look only at this example and see how this is happening. Let me go into ajax2.html. And notice the form first. 

Down here, I'm turning off auto complete. Sometimes it gets annoying if the browser is trying to show you your whole history. So you can do it in HTML by just saying auto complete off. 

I've given this text field a symbol-- rather, an ID of symbol. And now, this is an interesting feature. We haven't talked about span, but you can think about it like a paragraph tag or div tag. It's what's called an in-line element, which means you won't get a paragraph break above and below it. It's just going to stay in-line without hitting the equivalent of enter. So I have given this chunk of HTML to be determined a unique identifier that I arbitrarily called price. And I have a Submit button. 

Because now up here-- and this is actually super amazing how little code you can write to do relatively neat things-- notice what I've done up here if I scroll up to the head of this page. I've included first in my head a script tag that actually references a JavaScript file elsewhere. This is from the organization that writes jQuery, and this is just giving you the latest version of their jQuery library. 

So this is kind of like sharp include in C or require in PHP. You use the script tag with a source attribute. But now my own code is going to be right in here. 

Notice I have a function called Quotes. And it looks a little cryptic at first glance. But let's tease this apart. Give me a variable called URL. Assign it literally this string. So, single quotes, double quotes in JavaScript just gives me a string. What does the plus do? Concatenation. 

So this now is the jQuery syntax which takes a little getting used to. But this just means go get me the DOM node whose unique identifier is symbol. The hashtag there means unique identifier symbol. 

The dollar sign in the parentheses just mean, wrap this in jQuery a sort of secret sauce so you get additional functionality. And then .val is apparently a function, or as we say now, a method inside of this node that just gives you the value. So in short, ugly and confusing as this looks at first glance, this just means get with the user typed in, put it at the end of the string by concatenating it. That's all. 

So now, last three lines. You can squeeze a lot of functionality out of three lines. This dollar sign, as an aside, is just a nickname for a special global variable called literally jQuery. 

Dollar sign just looks cool. So the jQuery community just kind of used it as their special symbol. It does not mean what it means in PHP. In JavaScript, dollar sign is just like a letter of the alphabet or a number for a variable. 

You can just have it as the name. Just looks cool. So the community adopted it as a nickname for their own library called jQuery. 

And it's super popular. So get JSON is exactly that. It's a function that the folks at jQuery wrote that gets JSON from a server-- JavaScript Object Notation. From what URL is it going to get that information? Apparently from this URL here. 

And what should the browser do as soon as it gets back this response? And this is the magic of AJAX, so to speak-- Asynchronous JavaScript in XML. It's hard to see with such a simple example as we had here. 

But this was asynchronous in the sense that my code when executed sent a message to the server to go get me some JSON. And it happened super fast that I got a response. But what's interesting is that this line of code didn't hang my computer. 

I didn't see a spinning icon. I didn't lose the ability to move my mouse. My browser was actually perfectly fine. 

Because the way JavaScript handles the response from the server is as follows. You register what you'd call a callback function, which just means, hey, JavaScript. As soon as the server responds with JSON, please call this anonymous function. 

And please passed into this function whatever string the server spit out as an argument called data. So in other, words, if I'm assembling dynamically a URL quote.php passing in this symbol like FREE or GOOG or whatnot, I'm then telling JavaScript go get that URL. Remember that the browser is going to return something that looks like we saw earlier-- this. 

And what the second argument here to get JSON is saying is call this function when the server gets back whether it's 10 milliseconds from now or 10 seconds from now. And as soon as you do, add the price to the page. This syntax here just means go get the node from the tree whose unique identifier is price-- that span we saw earlier. 

This method called HTML just says, go replace the HTML that's there with data.price. What's data.price? Well, the browser, recall, showed me this coming back. So this is data. 

And so it's a little cryptic to see the commas here. But in fact, let me do this. Let me just paste this real fast into gedit and show this like we showed Zamyla's structure earlier. 

What the server is sending back is a little object that looks like this. And so data.price is just giving me 0.1515. So a lot of moving parts here all at once. 

But the key takeaways is that we have this ability to make additional HTTP requests using JavaScript without having to reload the page. And then we can actually change the web page on the fly. And it turns out that JavaScript and other languages can be used now not only to mutate web pages, but to actually write software in an actual computer, not just confined to Chrome or the like. 

In fact, if-- Colton, would you like to join us back up here with your lab code, and Chang as well? Let's go ahead, having talked about anonymous functions and callbacks and really tempt fate here with a live demo with bleeding edge technology, one of these Elite Motion devices. Now, this device, recall, is a little USB device as well that-- that's beautiful-- that plugs in to your USB ports. 

And then it provides input in the form of human gestures by detecting using infrared beams, essentially, movements from your arm. So whereas what Maria tried on before was muscular, actually feeling what's changing your arm, this is infrared based. So it's looking for movements within the sort of sphere of a foot or so of the device itself. 

So why don't I take a stab at this first? And let's go ahead and throw you up on the overhead here. So let's put Colton's laptop up here. We've got Andrew on the TV. And what would you like me to do first? 

COLTON: Go ahead and just put your hands over this guy and you'll see some fabulous glitter. 

DAVID J. MALAN: Very nice. This is all happening in real time. OK. All right, and yep. So nice. All right, what else can we do? 

COLTON: Go to the next screen and see. 

DAVID J. MALAN: All right. 

COLTON: A fun little game where you get to make robots. 

DAVID J. MALAN: All right, so this is fake hands showing me what to do. COLTON: Yes So go ahead and grab one of the blocks and put it on top of that robot's body. DAVID J. MALAN: Oh, there's my hand. Oh. OK, adorable. Wait a minute, OK. There we go. 

COLTON: I made one on accident. 

DAVID J. MALAN: OK, I'll get this guy. Damn it! When we were practicing this last night, you know what this devolved into? 

Like this. OK. Next one? 

COLTON: Sure. 

DAVID J. MALAN: All right, and there's a third. All right. COLTON: And in this one, you get to-- DAVID J. MALAN: Oh, this one's beautiful. COLTON: --yeah, pick apart this flower. DAVID J. MALAN: OK. No? Missed. 

COLTON: Oh, there you go. 

DAVID J. MALAN: Ah, Look at that. Very nice. Well, why dont' we take out one volunteer here who would like to come on up. How about right there in the green, is it? 

All right, and let's have-- instead of doing that, some of you might know this game here-- cut the rope, perhaps? Let's see. We have our glasses on over here? 

OK. Thank you. What's your name? 

AUDIENCE: Laura. 

DAVID J. MALAN: Laura? Nice to see. If you don't mind putting Google Glass over your glasses. This is Colton. 

COLTON: Hi. Nice to meet you. 

DAVID J. MALAN: OK, come on around. All right, so what you're going to do here, having played this before, is put your hand over the Leap Motion here. And now your arrow should move. Oh, nope. 

AUDIENCE: No. 

DAVID J. MALAN: We don't want to quit yet. OK, wait. Over here. So notice as you hold your finger over something, the mouse starts to go green, which is how you click. 

So hover over Play. And just one finger is fine. And now click on the little green guy on the left. And now hold until it fills up green. Good. Now, like, level one up top. 

AUDIENCE: Yeah, we want level one, here. 

DAVID J. MALAN: Good. OK, so all you have to do is cut the rope. Your cursor's the white one down there. 

Very nice. All right, it's about to get harder. So hold your finger over next now. Good. This one's hard. 

AUDIENCE: Oh crap. OK. It wants to go that way. Oh crap, that-- 

DAVID J. MALAN: Yeah. Secondary goal is to get all the stars. All right, next. 

Let's see if you can get this third one. Good. OK, go over there. 

Sure. Oh, very nice. All right. 

So why don't we adjourn here today? Let anyone come on up who wants to play. Thanks so much to Laura our volunteer. And we will see you on Monday. 

AUDIENCE: You probably want these back. 

SPEAKER 2: At the next CS50-- DAVID J. MALAN: All right, so this here is the Myo arm band, a couple of which we have for CS50 final projects. And that was a demonstration we queued you up in advance where essentially this fairly tight arm band up here listens to your muscular movements that are then mapped in software to Colton's laptop over here which had iTunes and that song already queued up. Rather than me demoing this, Colton's been in the lab clearly all week getting a demonstration ready for one brave volunteer. If someone would like to come on up-- saw your hand first. Come on up. All right. And what is your name? 

AUDIENCE: Uh, Maria. 

DAVID J. MALAN: Maria, nice to see you. Come on over here. Let me introduce you to Colton. Colton, this is Maria. 

COLTON: Hi, nice to meet you. 

DAVID J. MALAN: All right, so step one, we're going to have you put this on to your forearm so that it's pretty tight up near your elbow. And meanwhile, let's have put on our Google Glass and we'll mix technologies today. 

COLTON: First we'll have to hook this into the things. 

DAVID J. MALAN: OK. Actually, let's put your arm as close to this cable as possible so that we can first sync it up. 

COLTON: Let's do this. 

DAVID J. MALAN: And meanwhile, so that everyone can get a closer glance, we'll toss Andrew's camera up on the screen there. So we have a USB cable that's being plugged into Maria's armband. And let me toss Colton's screen up on the projector next. 

So Colton is registering the device now as a Myo connected to this cable. And now what Maria's going to do momentarily is actually walk through the calibration steps and teach the software how her muscles respond when she make certain pre-defined gestures that the software understands. If you'd like to go in front of the screen. OK, keep trying. 

COLTON: Go like this. And like that. And all the way to the right. Go back. 

DAVID J. MALAN: OK. Different perspective. It's not you. It's us. 

MARIA: OK. DAVID J. MALAN: No. Let's move it higher up so it's closer to your elbow, or even tighter. All right. 

Here we go. This would be a good time for CS52X. There we go. 

Very nice. OK. Thumb to pinky. 

Very nice. Spread your fingers. Good. Wave right. It's curiously showing you with the left hand-- 

COLTON: Yeah, that's wierd. DAVID J. MALAN: Wave to the right and move forward. Fast forward to skip or next. That's OK Wave right. 

MARIA: I don't-- wait. 

DAVID J. MALAN: Need some help? 

COLTON: So you're going like this. MARIA: It's turning the other thing, though. COLTON: It is. DAVID J. MALAN: Yeah I don't know why it's showing you a leftie. COLTON: Why don't you try-- just try going like this. 

DAVID J. MALAN: No? Maybe reach your arm out a little straighter and make it more abrupt like this. Yeah, OK, come on. 

MARIA: I'm sorry. DAVID J. MALAN: It's not your fault. COLTON: It's fine. DAVID J. MALAN: All Right. Well-- 

MARIA: Should we skip this, then? DAVID J. MALAN: Yes, let's let you off the hook. So if anyone would like to do a final project using this cutting edge hardware, realize it might just take a little getting used to. And this-- the reality is this is actually very bleeding edge. 

This is what's called the developer kit, which is meant to be essentially a pre-release so that people can do exactly this-- fight with it, figure out how people's bodies work with the technology. So if you want afterwards, after lecture, we can let you come and take another stab at it. But otherwise, a round of applause, if we could, for Maria for coming on up. 

MARIA: Thank you. 

DAVID J. MALAN: Thank you. We'll hang on to this, but we will give you-- how about a stress ball here? Oh, and-- if-- yeah, thanks. All right. So for the curious, if you were unfamiliar with the sound choice that we made there earlier, an amazing TV show that you should absolutely be binge-watching on Netflix is this one here. 

SPEAKER 1: Ladies and gentlemen, a magician named Josh. 

DAVID J. MALAN: And apparently, it's a thing to text me during lecture now. I'm being told that Maria had a birthday yesterday. So happy birthday from CS50 to Maria as well. 

So you may have read in recent month that this gentlemen here, Steve Ballmer, who was actually class of 1977 at the college, recently retired for Microsoft. He was an undergraduate here, then a couple years later found himself at Stanford Business School when he received a phone call from a friend of his who had lived down the hall from him here at Harvard. That friend's name was Bill Gates, and at the time, he was trying to recruit Steve to be the first business person, really, at a small company name Microsoft. 

A long story short, Steve was ultimately won over, joined Microsoft when they had just 30 employees. And by the time he retired quite recently, the company had 100,000 employees over the past few years. And so a website known as The Verge prepared this tribute on video that we thought we'd shared that gives you a sense of just how much energy Steve brings to any presentation he gives. [VIDEO PLAYBACK] -Microsoft's like a fourth child. Children do leave the house. In this case, I guess I'm leaving the house. Hey Bill, whazzap? 

-Wazzap? 

-Hey, wazzap? We've been given an enormous opportunity. And Bill gave us that opportunity. I want to thank Bill for that. I want you to too. The pace of innovation isn't going to slow. 

It's going to get faster and faster. There might be a few competitors that are unfortunately eliminated! 

I love this company. Yes! I am a PC, and I love this company! 

Developers, developers, developers, developers, developers, developers, developers, developers. Yes! Web developers! 

Web developers! Web developers! Listen to what else you get at no extra charge! 

The MS-DOS executive, an appointment calender, a card pile, a note pad, a clock, a control panel. And, can you believe it? Reversie! 

Burn them to CD! Post them to MSN! You mail them to friends! 

All with one click! One Microsoft, one strategy, one team-- focused, disciplined, professional, and expert in all that we do. Let me use a line from an old movie. 

Relationships are like sharks. They move forward or they die. I actually think tech companies are the same. 

[END VIDEO PLAYBACK] DAVID J. MALAN: So we are so pleased to announce that Steve will be joining us here in CS50 next Wednesday at the usual place and time here. Space will likely be limited. And so to join us in person, please head today or shortly thereafter to cs50.harvard.edu/register. 

And we will follow up by Tuesday confirming spots. Look forward to that next Wednesday during lecture in CS50. Now, in other news, I happened to come across this in The Crimson just the other day. 

It turns out that one of CS50's staff and at least one of CS50's students is currently running for UC president and vice president, which brought me back to my own days back when I lost the UC election miserably. But the silver lining in that is I always tell the story is that one of the I'm sure many reasons I lost the election was a complete lack of a talent for public speaking. And so quite honestly, it drove me, that experience I think my junior year, to actually sign up for Harvard Computer Society, which is the group on campus that holds various technical talks and other things. And I took over their teaching seminars and therefore had an opportunity, a wonderful opportunity, to start working on exactly this. But also, I had an opportunity during this experience to teach myself all the more HTML. And so I procrastinated last night by looking through the HTML based website I made in like 1997, '98, for my campaign which looks like this here. I know. 

Because-- and of course, notice this amazing design decision in 1998 or whatnot. The first thing you want users to do upon visiting your website is to have to click another link just to enter your website here with the monk behind like a shrouded curtain where apparently my campaign platform was. And this is all you'll get today is just a screenshot. But I was reading through, like, my campaign posters last night and my platform. 

And I was so angry at the time. My platform was-- it was interesting. So I've calmed down since then. But someday, I will run again and hopefully better off this time. 

So HTML, that language in which I made that in-- you'll soon make much more-- is something we've been talking about of late and largely taking for granted now that we've moved on to other languages. But let's pause for just a moment and put some of these things in context. So in a sentence, what is HTML? 

Or, what is used for? Anyone? Yes. 

AUDIENCE: Markup for websites. DAVID J. MALAN: Markup for website. So it's a markup language that lets you structure a web page. Header goes up here, title goes here, body goes here. This is boldface, this is italics-- that sort of detail. 

OK, good. So CSS lets you-- and I took some liberties there with the bold-facing and italics because that's better implemented with this. CSS is-- what? Say in a sentence. Anyone at all. Yeah. 

AUDIENCE: Embellishments and stuff, like how to design it. DAVID J. MALAN: OK, good. Embellishments that allow you to design it or stylize it with things like boldface and italics and colors and also more fine grained positioning of elements. It sort of lets you take things the last mile so that if, for instance, in Pset7, you might have noticed on your portfolio page if you're at this point already that a default table that you make to show the user's stock holdings and cash probably looks pretty hideous by default with no white space. Everything's kind of crammed together in rows and columns. 

Well, with a bit of CSS, as you may realize, you can actually tweak that and make it something much more familiar and much prettier to look at. So CSS is about the stylization of websites. But then we introduced yet another language, PHP, which lets us do what? 

Let's just do what? Anyone. Got to venture beyond the first couple rows. Yeah. 

AUDIENCE: Generate dynamic content. DAVID J. MALAN: Perfect. Generate dynamic content. And you can do this in any number of languages. We happen to use PHP because it's in part so similar to C syntax. 

But PHP does exactly that. It lets you dynamically generate output. And some of that output could be HTML, as we've typically been doing. And it's also, because it's a programming language, is the mechanism via which we can talk to databases. 

And we can make queries to other servers like Yahoos and programmatically do anything really that you might otherwise want to compel a computer to do. So PHP lets us start dynamically outputting content. So by this logic, I didn't have a dynamic website back in 1998. 

It was just a static web page. My content had to be changed by manually with gedit or some equivalent. But PHP is what we used or could have used, rather, for something like the Frosh IMs website, which was supposed to take registrations and manage a list of users-- things that are actually changing over time, even though we happen to use Perl, a different language at the time. 

And then lastly, we introduced SQL-- Structured Query Language. So yet another language that's used for what? Used for what? Can we venture slight-- OK, we're not going to get much farther than the orchestra here. AUDIENCE: It's a protocol used to talk to databases. DAVID J. MALAN: A protocol used to talk to databases. Let me tweak. It's an natural language used to talk to databases-- selects and inserts and deletes and updates and actually even more features that we haven't even dived into but you may want to explore-- have to explore for, say, a final project. So there are these various pieces. 

And hopefully Pset7, even though its specification is quite long, it's deliberately long to walk you through how these things can all be typed together. Now, on Monday, we introduced our last language that we'll formally introduce in the course-- that is, JavaScript. This, like PHP, is an interpreted language. 

But a key distinction I proposed on Monday is that whereas PHP is executing or being interpreted on the server, which in this case is the CS50 appliance, or might be some commercial web server on the internet, JavaScript generally is a language that runs client side not server side-- so in the browser. Which is to say, just like when I opened up Facebook source code and found all of those .js files, the implication was that when you visit Facebook or most websites these days, you get not only HTML, not only CSS, but a whole bunch of JavaScript code often in the form of .js files. And then it's the browser-- your own Mac or PC-- that executes that code. 

But your browser executes it. You can think in sort of a sandbox. So that JavaScript code shouldn't be able to delete files on your computer. It shouldn't be able to send emails on your behalf. Your browser kind of restricts what you can do with it. 

So in that sense, it's a little less powerful, perhaps, than C. But JavaScript can, as an aside, be used on the server, though we'll tend not to talk about it in that context. So now let's tie these together. A week plus ago, we presented some HTML on the left-- super boring web page. 

Just says hello world. And then I proposed on the right we can kind of steal ideas from our discussion of data structures in C and think about how this hierarchical markup language on the left could be drawn or implemented in memory as an actual tree structure with nodes and pointers and those kinds of details. On the right, we call that a DOM-- Document Object Model-- which is just a fancy way of saying tree. 

Now, why is this useful to think of it in this way? Because now with JavaScript, because we have code that gets to play in this environment, the actual HTML that's been sent to the browser already and has already been loaded into memory by the browser into a tree in your computer's RAM like this, we can use JavaScript to actually traverse or walk or search or change that DOM tree however we want. So in fact, if you think about facebook.com, if you use the chat feature, if you use Gmail and the gchat feature, anything where you have messages coming again and again and again, those messages are probably, like, LI tag, List Item tags, maybe. 

Or maybe they're just divs that keep appearing every time you get an instant message. And so that just means what Facebook or Google is doing is any time you get a message from the server, they are probably using JavaScript to just add another node to this tree-- another node to this tree that then visually just looks like a new line of text on your screen. But they're inserting into this data structure. 

So in classes like CS124 and others, you'll actually write more code against data structures like this. But for now in JavaScript, we'll just assume we get all of this functionality for free from the language itself. So let's look at an example. 

Let me open up a file called form.html. It's super simple. It just looks like this. 

No CSS, no thought to aesthetics. It's purely functional and apparently I'm asking for an email, a password, password again, and then a check to agree to some terms and conditions. What the source code for this looks like is probably something you might guess with a little bit of thought now. I've got a form tag here. 

An action is apparently going to go to a file called register.php. The method I'm going to use is get. And then I've got a text field whose name is email. 

I've got a password field whose name is password. I've got another password field whose name is somewhat arbitrarily confirmation. It's just another HTTP parameter. 

And then we we've not used these except since the Frosh IMs demo in class-- a check box which is just type equals check. And I'll call that agreement. So I've kind of arbitrarily but conveniently named these fields. So that now when this form gets submitted, let's see what happens. If I do malan@harvard.edu, I'll do a password of crimson. I'll do a password of nothing. Let's not cooperate. 

And I won't check the box. Let me click Register. And it says, hm, you're registered. Not really. 

But the URL changed. So this form was clearly allowed to submit to register.php. But presumably, I should be catching some of these errors. Now, in Pset7 and some of our lecture examples, we would generally print out a big red error message here saying, missing name, or missing password. We've done that before and we've done server side error detection. 

But many websites these days do client side error detection where the URL doesn't change. The whole page doesn't refresh. You get instant feedback from the browser. Maybe something goes red. 

Maybe you get a pop up. But you don't waste time sending to the server data that's incomplete. So let's see how we might achieve that feature as well. 

Let me go to form1.html, which looks the same. But if this time I do malan@harvard.edu and I type crimson and I don't cooperate further but click Register, notice now. It's not the sexiest solution. I've at least caught this error. And I've used the alert function in JavaScript-- which we're only using in class. In general, you should not use this because it can very quickly get out of control. But passwords do not match is the error. 

Let me go ahead and click OK. But what the key takeaway here is that the URL did not change. So I've not bothered wasting the server's time asking it a question that I could have figured out the answer to myself. 

And the user, even though been talking about this longer than the user's going to think about this, is going to have instant feedback. There's no latency with the network connectivity. So let's look at this source code. 

Form1.html looks structurally similar up here. The form is in fact the same. But let's see what I did down here. And there's different ways to do this. And I've done the most straight follower but not most elegant way yet. I have a script tag. I then call document.getElementByID('registration'). And I store that value in form, a variable. 

So what have I done? You can think of document.getElementByID as being a special function that JavaScript gives you that literally hands you a pointer to one of the nodes or rectangles in this tree. So now that's what our form variable in JavaScript is actually pointing at. 

So now the syntax is different from C. But we're doing a few things here. One, this one is a little strange looking, certainly versus C. But look at line 35. So on the left form.onsubmit. Recall that onsubmit is like a field in a struct. If you think of the form variable is just being a C struct, it might have some fields. 

Back in the day, we had students names, IDs, houses, those kind of fields. Just think of onsubmit as another field. But it's a special field because the browser is preprogrammed to expect .onsubmit to not be a value like a number or string, but to actually be a function or the address of a function in the computer's memory. 

And indeed, that's what this keyword here does. This says, give me a new function. But what is its name going to be, apparently? 

Thinking back to Monday. What is the name of this function based on this syntax? No, I mean, there's clearly no name associated-- certainly not in what I've highlighted here. 

But that's actually OK. This is an anonymous function, or a lambda function as some might call it. And that just means it's still a function. It's just, you can't call it by name. But that's OK. Because again, the browser has been preprogrammed by companies like Google or Microsoft or Mozilla or others to just know that if the .onsubmit field inside of a form element has the value, treat it as a function-- a function pointer, if you will. And call it when the form is submitted. 

So what code should be executed when the form is submitted? Apparently, everything inside of the curly brace. And this is just stylistic. 

You could do this like we tend to do in CS50. But in JavaScript, most people tend to keep it on the same line just because it more clearly is associated with that keyword function. So now what am I doing? 

If form.email.value equals equals the empty string or nothing, here's an alert where I'm going to say, you must provide your email address, and then return false. And it's that return false that prevents the form from being submitted. Meanwhile, if the password value is blank, I'm going to yell at the user and say, you must provide a password. 

Meanwhile things are getting a little fancier here. If form.password.value does not equal form.confirmation.value, the other field, yell at the user that the passwords don't match as they did not a moment ago. And then this one's a little sexier because I know I knew conceptually that checked is a check box's name. 

So I can just use an exclamation point to say if the check is not checked-- it's the Boolean value, true or false-- I'll yell at the user for that reason. Otherwise, if we get through all of these conditions, let's just return true. Let the form be submitted. And this will then happen. 

Let's type in crimson. Let's check the box, click Register. And now I go through to the destination. Now, there's no database there. There's nothing interesting in register.php. I just needed something to actually talk to. So let me pause, here. Any questions on what we've just done or what some of this new syntax is? OK, yeah? 

AUDIENCE: So any checkbox is automatically a Boolean . You don't have to declare it like that. 

DAVID J. MALAN: Correct. Any checkbox that's sent to you from an HTML form to your JavaScript code will be treated, yes, as a Boolean value-- true or false. It's a good question. Whereas the other values, of course, have been text, AKA strings. 

All right, so let me rewind a bit further. What was the whole point of this? Just to be clear. Like, we already know, even from Pset7 and even from last week's lecture examples, that we can obviously check $_GET $_POST see if the user give us an empty value. Remember the empty function in PHP. 

So just to be clear, what's one reason we might also want to do this error checking inside of the browser? What's the motivation here? Yeah. 

AUDIENCE: Faster, and you don't send useless data to the server. DAVID J. MALAN: Good. It's faster. You don't send useless data to the server. 

So you get back a more immediate response. And overall, the user experience is better. Think about the alternative. 

If for Gmail-- and was the case many years ago. Suppose you got a new email your Gmail account, but the only way through to see that is to, like, reload the whole page. Or suppose you click on a link to read an email. 

Everything has to reload so that you can see the email. Or Facebook-- you get a chat message. You don't see it until you reload the page or click some link. 

Like, this would be an awfully annoying user experience. And this is what it was like, clearly, back when I ran for UC and the web was much less dynamic and JavaScript wasn't as popularized as it is now. And things are getting much more dynamic and much more client side in that sense. 

But there is a catch here, and this is kind of an annoying gotcha. Just because you add client side detection like this does not mean you can or should abandon server side detection. You essentially want to put your error checking in both places. Because what was one of the lesson learned from the article I read some excerpts from with this stupid CMS system-- Content Management System-- that was implementing its authentication system, its login via what mechanism? JavaScript. 

AUDIENCE: JavaScript. DAVID J. MALAN: JavaScript, exactly, right? It was using JavaScript. And literally, you guys have played a little bit probably with Chrome's Inspector. And if I can find it, inspect element. 

Let me go over to do all of Chrome's options. And this is how easy it is to disable JavaScript in a browser. Check, no more JavaScript. 

So in fairness, a lot of the web these days is just going to break because Gmail and other sites-- Facebook-- assume that JavaScript is enabled. But if you're doing something stupid like only validating users input and checking it for errors on the client side, an adversary could easily do this. And then even smarter adversary like you guys now could use Telnet or Curl or just command line commands and actually send messages to the server that similarly are not error checked. 

So this is more of a user interface decision than it is an actual technical improvement-- implementing something client side like this. So now a quick glance, but then I'll defer to the online walk through for this one. In form two, we actually went through and cleaned up the code a little bit. But let me defer to one of the videos we'll likely embed in Pset8 that just shows you a similar syntax using a library called jQuery, which is a super, super popular library in JavaScript that frankly most people just use these days and even confuse as being JavaScript itself. 

And it tends to involve some dollar signs and keywords like document in parentheses here. But again, let me defer to some slower tutorials online rather than get tied up in just syntax. Let's move on to something a little cooler in terms of the applications of this. 

So in particular, let me go ahead and open up this here. Come on. There we go. 

Let me open up this picture here. Unnecessarily complicated looking, but it describes a technique called AJAX-- Asynchronous JavaScript and XML, where the X for XML is actually no longer really used. It tends to use something else called JSON. 

But here is how something like Google Maps or Google Earth works. Let's try this on the fly, actually. Let me go ahead and open up Chrome on my browser. 

And let me go into, say, maps.google.com. And actually, if you're old enough to remember what, like, MapQuest was like back in the day, and maybe they still work like this. When you used to search for something-- 33 Oxford Street, Cambridge, Mass, let's do this-- you would actually, if you wanted to pan up and down, left and right, you would look like a big arrow on top, and it would show you another frame of the map up here. Or you would click left and you would go over here, or another click and you would go over here. But instead these days, we of course just take for granted that we can go around Cambridge pretty quickly just by clicking and dragging. But notice there's some glitches. 

If I do this fast enough, what seems to be happening as I drag a little too fast for the computer to keep up? What do you see? Yeah. 

AUDIENCE: The pixels don't refresh. DAVID J. MALAN: The pixels don't refresh. There's actually-- and you could see this, actually, if you're watching online and pause this or actually slows things down for once-- you'll see that there are tiles, squares, or rectangles that are missing from the map until a split second later, more data, more images actually appear on the screen. And in fact, if we do this by looking up Chrome's-- let's say, Chrome-- let's see. We can't do that. 

Oh, whoops. Let's open up maps.google.com. Let me make the window bigger again. 

Go back to 33 Oxford Street. What was the website I was on recently? I had this, like, private rant to myself that I'd then instant message any friend who was online who wanted to hear it. There's some website. I think it's Comcast-- so a very big American ISP. You can, when signing up for new cable modem service or cable TV service, they have a form very reasonably where they ask you for your address. And have this amazing feature called auto complete, like Google, that starts to fill in the answer to your question. 

The problem is, they do auto complete on the first things that you type. So if you start typing in 33, it will show you literally every house in America that starts with the number 33 before continuing to expect you to type more. So if you type 33 Oxford, then it shows you every street in America that has 33 Oxford in its name, irrespective of the town that you're in. 

And then you continue typing. And finally, it realizes that they don't offer service to your home in Cambridge or something like that. But the point is, this is the most asinine implementation of auto complete ever. 

And I'm just going off on this tangent again. But there are good ways to use JavaScript and bad ways. And that's not necessarily the best one. 

But the point here, before this tirade, was to open up tools down here and open up developer tools, as we've encouraged before, and to watch the Network tab as I click really fast. And notice a whole bunch of get requests happened. All of this happened since I dragged. 

And most likely, indeed a lot of these rows now are image slash JPEG MIME types or content types. That's because what chrome is doing every time I click and drag, click and drag, is it's realizing, oh, I need to go ask Google for the tile on the map that's over here, quickly download it via HTTP, and then add it to the so-called DOM to the web browsers in memory tree representation so that the user, me, sees that updated tile. And this is because of a technique called AJAX. Back in the day, it really was the case that if you wanted to change what's on the screen, you would have to click up, down, left, right. And then a new page would open. But these days, everything is more dynamic. It happens in the way we humans would hope it actually would interactively. And it achieves this by way of a technique called AJAX, which is perhaps best explained by an example. First, let me go ahead and open up a file called quote.php in today's distribution code. 

And then let me do symbol-- whoops. Let me do symbol=GOOG for just some stock. Or actually, let's do the one from the Pset FREE. Enter. 

And now notice what I get back. So this is a really short PHP file that I wrote that simply borrows code from Pset7's lookup function and spits out using this curly brace and quotes and colon notation, apparently, the current stock's price for the company that you pass in via get. So this is different from most of what we've done in that notice I'm literally spitting out what looks like JavaScript code. 

In fact, this is a JavaScript object. In fact, just to be more clear, JavaScript Object Notation-- JSON-- is just a fancy way of saying that you can represent data in JavaScript much like you can in PHP using key value pairs. So if I wanted to declare a variable in JavaScript to represents Zamyla, for instance-- a struct for Zamyla-- and we'll call it student, this variable. Her ID is one, house is Winthrop, and name is Zamyla. 

But I can also have an array of objects. So if I actually wanted to have an array in JavaScript containing multiple such objects, this time representing staff, I might have these three chunks of code back to back to back for these three former staff members. So the syntax, pretty similar to both-- to PHP. But this is particularly JavaScript. It's object notation. So what is this useful for? 

If I write code that spits out JSON-- JavaScript Object Notation-- stuff that looks like this or stuff that looks like Zamyla's structure, I can actually use this in programs I write. Let me go to ajax0.html. And this too-- not much thought given to aesthetics. But watch what happens. 

Let me go ahead and type free here. Click get quote. And notice the URL has not changed. But I did get a pop up with apparently today's penny stock price of $0.15. So not all that bad. But the difference is that somehow, this data came back to me directly. But let's take a step toward something more familiar. In version one of this, let me type free again, click Get quote, and now-- oh, this was actually the jQuery version. So let me-- I didn't fast-forward quite far enough. Let me go to version two, which is where I wanted. Notice what I've done here. I have a web page-- a super simple version of any web page you might use today with a text field here for free and then apparently just text. 

This is not a form here, apparently. But if I click get quote, notice my web page is about to change as though I just got a new instant message or as though I just moved the map and needed to get more data added dynamically to the web page without the URL changing and the user experience getting interrupted. Indeed, I'm still at the exact same place-- ajax2.html. 

So let's look only at this example and see how this is happening. Let me go into ajax2.html. And notice the form first. 

Down here, I'm turning off auto complete. Sometimes it gets annoying if the browser is trying to show you your whole history. So you can do it in HTML by just saying auto complete off. 

I've given this text field a symbol-- rather, an ID of symbol. And now, this is an interesting feature. We haven't talked about span, but you can think about it like a paragraph tag or div tag. It's what's called an in-line element, which means you won't get a paragraph break above and below it. It's just going to stay in-line without hitting the equivalent of enter. So I have given this chunk of HTML to be determined a unique identifier that I arbitrarily called price. And I have a Submit button. 

Because now up here-- and this is actually super amazing how little code you can write to do relatively neat things-- notice what I've done up here if I scroll up to the head of this page. I've included first in my head a script tag that actually references a JavaScript file elsewhere. This is from the organization that writes jQuery, and this is just giving you the latest version of their jQuery library. 

So this is kind of like sharp include in C or require in PHP. You use the script tag with a source attribute. But now my own code is going to be right in here. 

Notice I have a function called Quotes. And it looks a little cryptic at first glance. But let's tease this apart. Give me a variable called URL. Assign it literally this string. So, single quotes, double quotes in JavaScript just gives me a string. What does the plus do? Concatenation. 

So this now is the jQuery syntax which takes a little getting used to. But this just means go get me the DOM node whose unique identifier is symbol. The hashtag there means unique identifier symbol. 

The dollar sign in the parentheses just mean, wrap this in jQuery a sort of secret sauce so you get additional functionality. And then .val is apparently a function, or as we say now, a method inside of this node that just gives you the value. So in short, ugly and confusing as this looks at first glance, this just means get with the user typed in, put it at the end of the string by concatenating it. That's all. 

So now, last three lines. You can squeeze a lot of functionality out of three lines. This dollar sign, as an aside, is just a nickname for a special global variable called literally jQuery. 

Dollar sign just looks cool. So the jQuery community just kind of used it as their special symbol. It does not mean what it means in PHP. In JavaScript, dollar sign is just like a letter of the alphabet or a number for a variable. 

You can just have it as the name. Just looks cool. So the community adopted it as a nickname for their own library called jQuery. 

And it's super popular. So get JSON is exactly that. It's a function that the folks at jQuery wrote that gets JSON from a server-- JavaScript Object Notation. From what URL is it going to get that information? Apparently from this URL here. 

And what should the browser do as soon as it gets back this response? And this is the magic of AJAX, so to speak-- Asynchronous JavaScript in XML. It's hard to see with such a simple example as we had here. 

But this was asynchronous in the sense that my code when executed sent a message to the server to go get me some JSON. And it happened super fast that I got a response. But what's interesting is that this line of code didn't hang my computer. 

I didn't see a spinning icon. I didn't lose the ability to move my mouse. My browser was actually perfectly fine. 

Because the way JavaScript handles the response from the server is as follows. You register what you'd call a callback function, which just means, hey, JavaScript. As soon as the server responds with JSON, please call this anonymous function. 

And please passed into this function whatever string the server spit out as an argument called data. So in other, words, if I'm assembling dynamically a URL quote.php passing in this symbol like FREE or GOOG or whatnot, I'm then telling JavaScript go get that URL. Remember that the browser is going to return something that looks like we saw earlier-- this. 

And what the second argument here to get JSON is saying is call this function when the server gets back whether it's 10 milliseconds from now or 10 seconds from now. And as soon as you do, add the price to the page. This syntax here just means go get the node from the tree whose unique identifier is price-- that span we saw earlier. 

This method called HTML just says, go replace the HTML that's there with data.price. What's data.price? Well, the browser, recall, showed me this coming back. So this is data. 

And so it's a little cryptic to see the commas here. But in fact, let me do this. Let me just paste this real fast into gedit and show this like we showed Zamyla's structure earlier. 

What the server is sending back is a little object that looks like this. And so data.price is just giving me 0.1515. So a lot of moving parts here all at once. 

But the key takeaways is that we have this ability to make additional HTTP requests using JavaScript without having to reload the page. And then we can actually change the web page on the fly. And it turns out that JavaScript and other languages can be used now not only to mutate web pages, but to actually write software in an actual computer, not just confined to Chrome or the like. 

In fact, if-- Colton, would you like to join us back up here with your lab code, and Chang as well? Let's go ahead, having talked about anonymous functions and callbacks and really tempt fate here with a live demo with bleeding edge technology, one of these Elite Motion devices. Now, this device, recall, is a little USB device as well that-- that's beautiful-- that plugs in to your USB ports. 

And then it provides input in the form of human gestures by detecting using infrared beams, essentially, movements from your arm. So whereas what Maria tried on before was muscular, actually feeling what's changing your arm, this is infrared based. So it's looking for movements within the sort of sphere of a foot or so of the device itself. 

So why don't I take a stab at this first? And let's go ahead and throw you up on the overhead here. So let's put Colton's laptop up here. We've got Andrew on the TV. And what would you like me to do first? 

COLTON: Go ahead and just put your hands over this guy and you'll see some fabulous glitter. 

DAVID J. MALAN: Very nice. This is all happening in real time. OK. All right, and yep. So nice. All right, what else can we do? 

COLTON: Go to the next screen and see. 

DAVID J. MALAN: All right. 

COLTON: A fun little game where you get to make robots. 

DAVID J. MALAN: All right, so this is fake hands showing me what to do. COLTON: Yes So go ahead and grab one of the blocks and put it on top of that robot's body. DAVID J. MALAN: Oh, there's my hand. Oh. OK, adorable. Wait a minute, OK. There we go. 

COLTON: I made one on accident. 

DAVID J. MALAN: OK, I'll get this guy. Damn it! When we were practicing this last night, you know what this devolved into? 

Like this. OK. Next one? 

COLTON: Sure. 

DAVID J. MALAN: All right, and there's a third. All right. COLTON: And in this one, you get to-- DAVID J. MALAN: Oh, this one's beautiful. COLTON: --yeah, pick apart this flower. DAVID J. MALAN: OK. No? Missed. 

COLTON: Oh, there you go. 

DAVID J. MALAN: Ah, Look at that. Very nice. Well, why dont' we take out one volunteer here who would like to come on up. How about right there in the green, is it? 

All right, and let's have-- instead of doing that, some of you might know this game here-- cut the rope, perhaps? Let's see. We have our glasses on over here? 

OK. Thank you. What's your name? 

AUDIENCE: Laura. 

DAVID J. MALAN: Laura? Nice to see. If you don't mind putting Google Glass over your glasses. This is Colton. 

COLTON: Hi. Nice to meet you. 

DAVID J. MALAN: OK, come on around. All right, so what you're going to do here, having played this before, is put your hand over the Leap Motion here. And now your arrow should move. Oh, nope. 

AUDIENCE: No. 

DAVID J. MALAN: We don't want to quit yet. OK, wait. Over here. So notice as you hold your finger over something, the mouse starts to go green, which is how you click. 

So hover over Play. And just one finger is fine. And now click on the little green guy on the left. And now hold until it fills up green. Good. Now, like, level one up top. 

AUDIENCE: Yeah, we want level one, here. 

DAVID J. MALAN: Good. OK, so all you have to do is cut the rope. Your cursor's the white one down there. 

Very nice. All right, it's about to get harder. So hold your finger over next now. Good. This one's hard. 

AUDIENCE: Oh crap. OK. It wants to go that way. Oh crap, that-- 

DAVID J. MALAN: Yeah. Secondary goal is to get all the stars. All right, next. 

Let's see if you can get this third one. Good. OK, go over there. 

Sure. Oh, very nice. All right. 

So why don't we adjourn here today? Let anyone come on up who wants to play. Thanks so much to Laura our volunteer. And we will see you on Monday. 

AUDIENCE: You probably want these back. 

SPEAKER 2: At the next CS50-- 